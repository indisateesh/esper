10-Minute Tutorial
~~~~~~~~~~~~~~

* The Problem

	The use case involves tracking three components of a transaction. Each component comes to the engine as an event with the following fields:

    * Transaction ID
    
    * Time stamp 
    
    []

	In addition, we have the following extra fields.

	In event A:

    * Customer ID 
    
    []

	In event C:

    * Supplier ID (the ID of the supplier that the order was filled through) 
    
    []

	We need to take in events A, B and C and produce a single, combined event with the following fields:

    * Transaction ID
    
    * Customer ID
    
    * Time stamp from event A
    
    * Time stamp from event B
    
    * Time stamp from event C 
    
    []

	What we are doing here is matching the transaction IDs on each event, to form an aggregate event. 
	If all these events were in a relational database, this could be done as a simple SQL join except that with 10,000 events per second, 
	you will need some serious database hardware to do it.
	
** Real-Time Summary Data

	Further, we need to produce the following:

    * Min,Max,Average total latency from the events (difference in time between A and C) over the past 30 minutes.
    
    * Min,Max,Average latency grouped by (a) customer ID and (b) supplier ID. In other words, metrics on the the latency of the orders coming from each customer and going to each supplier.
    
    * Min,Max,Average latency between events A/B (time stamp of B minus A) and B/C (time stamp of C minus B). 

	[]    

** Find Missing Events

	We need to detect a transaction that did not make it through all three events. 
	In other words, a transaction with events A or B, but not C. 
	Note that, in this case, what we care about is event C. 
	The lack of events A or B could indicate a failure in the event transport and should be ignored. 
	Although the lack of an event C could also be a transport failure, it merits looking into. 

* Solution

** Event Definitions

	TODO

** Detecting Combined Events

	TODO

** Compiling Realtime Summary Data

	TODO
	
** Finding Missing Events

	TODO
	
* Further notes

	The example code can be found in the "eg" folder of the distribution in package net.esper.example.transaction. 
	The example contains a transaction simulator that can be invoked from the command line.
	Please consult the examples section in the reference documentation for more detail.
	
	Please see the readme file in the same folder for build instructions and command line parameters.
	