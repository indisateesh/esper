  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", "TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "EXPRESSIONDECL", "NEWKW", "START", "CONTEXT", "INITIATED", "TERMINATED", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "FOLLOWED_BY_ITEM", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_IS_EXPR", "EVAL_ISNOT_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "TERM_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "INDEXCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "YEAR_PART", "MONTH_PART", "WEEK_PART", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "ACCESS_AGG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_VAR", "VARIANT_LIST", "MERGE_UNM", "MERGE_MAT", "MERGE_UPD", "MERGE_INS", "MERGE_DEL", "NEW_ITEM", "AGG_FILTER_EXPR", "CREATE_CTX", "CREATE_CTX_FIXED", "CREATE_CTX_PART", "CREATE_CTX_COAL", "CREATE_CTX_CAT", "CREATE_CTX_INIT", "CREATE_CTX_CATITEM", "CREATE_CTX_NESTED", "CREATE_CTX_PATTERN", "PARTITIONITEM", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "LBRACK", "RBRACK", "IDENT", "LPAREN", "RPAREN", "COLON", "LCURLY", "RCURLY", "GOES", "COMMA", "EQUALS", "DOT", "STAR", "ATCHAR", "BOR", "PLUS", "QUESTION", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "NUM_INT", "FOLLOWED_BY", "FOLLOWMAX_BEGIN", "FOLLOWMAX_END", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=192;
    public static final int FLOAT_SUFFIX=376;
    public static final int STAR=320;
    public static final int DOT_EXPR=202;
    public static final int NUMERIC_PARAM_LIST=130;
    public static final int MOD=338;
    public static final int ISTREAM=60;
    public static final int LIB_FUNC_CHAIN=201;
    public static final int OUTERJOIN_EXPR=174;
    public static final int CREATE_COL_TYPE_LIST=255;
    public static final int BSR=359;
    public static final int MERGE_INS=274;
    public static final int MONTH_PART=207;
    public static final int LIB_FUNCTION=200;
    public static final int EOF=-1;
    public static final int TIMEPERIOD_MILLISECONDS=105;
    public static final int FULL_OUTERJOIN_EXPR=178;
    public static final int CREATE_CTX_NESTED=285;
    public static final int CREATE_CTX_FIXED=279;
    public static final int MATCHREC_PATTERN_CONCAT=299;
    public static final int INC=352;
    public static final int LNOT=348;
    public static final int RPAREN=312;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=325;
    public static final int BSR_ASSIGN=360;
    public static final int CAST_EXPR=234;
    public static final int MATCHES=116;
    public static final int USING=120;
    public static final int STREAM_EXPR=173;
    public static final int TIMEPERIOD_SECONDS=102;
    public static final int NOT_EQUAL=330;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=139;
    public static final int LAST_AGGREG=262;
    public static final int GOES=316;
    public static final int REGEXP=9;
    public static final int MATCHED=122;
    public static final int INITIATED=127;
    public static final int FOLLOWED_BY_EXPR=133;
    public static final int NEWKW=124;
    public static final int FOLLOWED_BY=340;
    public static final int HOUR_PART=210;
    public static final int RBRACK=309;
    public static final int MATCHREC_PATTERN_NESTED=301;
    public static final int MATCH_UNTIL_RANGE_CLOSED=253;
    public static final int GE=334;
    public static final int METHOD_JOIN_EXPR=249;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int CREATE_CTX_PART=280;
    public static final int EVENT_FILTER_EXPR=138;
    public static final int CREATE_CTX_COAL=281;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=137;
    public static final int MINUS_ASSIGN=353;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=149;
    public static final int NUM_DOUBLE=295;
    public static final int INSERTINTO_STREAM_NAME=222;
    public static final int LCURLY=314;
    public static final int UNARY_MINUS=203;
    public static final int TIMEPERIOD_MILLISEC=103;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=220;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=147;
    public static final int WS=368;
    public static final int SUBSELECT_GROUP_EXPR=226;
    public static final int ON_SELECT_INSERT_EXPR=244;
    public static final int YEAR_PART=206;
    public static final int FOLLOWED_BY_ITEM=134;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=343;
    public static final int EXPRCOL=197;
    public static final int SL_COMMENT=369;
    public static final int NULL_TYPE=294;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=251;
    public static final int GT=332;
    public static final int BNOT=349;
    public static final int WHERE_EXPR=158;
    public static final int EVAL_IS_EXPR=165;
    public static final int END=33;
    public static final int LAND=366;
    public static final int INNERJOIN_EXPR=175;
    public static final int TERM_LIMIT_EXPR=195;
    public static final int NOT_REGEXP=217;
    public static final int MATCH_UNTIL_EXPR=250;
    public static final int EVENT_PROP_EXPR=182;
    public static final int LBRACK=308;
    public static final int MERGE_UPD=273;
    public static final int VIEW_EXPR=155;
    public static final int ANNOTATION=258;
    public static final int LONG_TYPE=289;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=140;
    public static final int MATCHREC_PATTERN=297;
    public static final int ON_MERGE_EXPR=243;
    public static final int ATCHAR=321;
    public static final int TIMEPERIOD_SEC=100;
    public static final int TICKED_STRING_LITERAL=344;
    public static final int ON_SELECT_EXPR=241;
    public static final int MINUTE_PART=211;
    public static final int PATTERN_NOT_EXPR=136;
    public static final int SQL_NE=329;
    public static final int SUM=18;
    public static final int HexDigit=374;
    public static final int UPDATE_EXPR=265;
    public static final int LPAREN=311;
    public static final int IN_SUBSELECT_EXPR=228;
    public static final int AT=86;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=106;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=303;
    public static final int NOT_IN_RANGE=224;
    public static final int TIMEPERIOD_MONTH=90;
    public static final int OFFSET=110;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int SECOND_PART=212;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=112;
    public static final int PARTITIONITEM=287;
    public static final int IDENT=310;
    public static final int DATABASE_JOIN_EXPR=157;
    public static final int BXOR=328;
    public static final int PLUS=323;
    public static final int CASE2=29;
    public static final int MERGE_MAT=272;
    public static final int TIMEPERIOD_DAY=94;
    public static final int CREATE_SCHEMA_EXPR=267;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=185;
    public static final int CREATE_INDEX_EXPR=235;
    public static final int TIMEPERIOD_MILLISECOND=104;
    public static final int ACCESS_AGG=264;
    public static final int CREATE_CTX_CATITEM=284;
    public static final int EVAL_NOTEQUALS_EXPR=164;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=252;
    public static final int CREATE_VARIABLE_EXPR=248;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=304;
    public static final int BY=43;
    public static final int RIGHT_OUTERJOIN_EXPR=177;
    public static final int NUMBERSETSTAR=257;
    public static final int LAST_OPERATOR=231;
    public static final int PATTERN_FILTER_EXPR=135;
    public static final int MERGE=121;
    public static final int FOLLOWMAX_END=342;
    public static final int MERGE_UNM=271;
    public static final int EVAL_AND_EXPR=161;
    public static final int LEFT_OUTERJOIN_EXPR=176;
    public static final int EPL_EXPR=296;
    public static final int GROUP_BY_EXPR=179;
    public static final int SET=83;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=183;
    public static final int MINUS=336;
    public static final int SEMI=367;
    public static final int INDEXCOL=198;
    public static final int STAR_ASSIGN=355;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=270;
    public static final int FIRST_AGGREG=261;
    public static final int COLON=313;
    public static final int EVAL_EQUALS_GROUP_EXPR=167;
    public static final int BAND_ASSIGN=365;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=193;
    public static final int NOT_IN_SET=214;
    public static final int VALUE_NULL=108;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=186;
    public static final int SL=361;
    public static final int NOT_IN_SUBSELECT_EXPR=229;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=153;
    public static final int SR=357;
    public static final int RCURLY=315;
    public static final int PLUS_ASSIGN=351;
    public static final int EXISTS_SUBSELECT_EXPR=227;
    public static final int DAY_PART=209;
    public static final int START=125;
    public static final int EVENT_FILTER_IN=148;
    public static final int DIV=337;
    public static final int WEEK_PART=208;
    public static final int EXPRESSIONDECL=123;
    public static final int OBJECT_PARAM_ORDERED_EXPR=132;
    public static final int OctalEscape=373;
    public static final int MILLISECOND_PART=213;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=109;
    public static final int SELECTION_EXPR=170;
    public static final int LOR=335;
    public static final int CAST=79;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=221;
    public static final int EXPONENT=375;
    public static final int LT=331;
    public static final int PATTERN_INCL_EXPR=156;
    public static final int CREATE_CTX=278;
    public static final int WHILE=119;
    public static final int ORDER_BY_EXPR=180;
    public static final int BOOL_TYPE=293;
    public static final int NEW_ITEM=276;
    public static final int MOD_ASSIGN=356;
    public static final int ANNOTATION_ARRAY=259;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=230;
    public static final int EQUALS=318;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int TERMINATED=128;
    public static final int DIV_ASSIGN=350;
    public static final int WINDOW_AGGREG=263;
    public static final int SL_ASSIGN=362;
    public static final int TIMEPERIOD_WEEKS=93;
    public static final int PATTERN=66;
    public static final int CREATE_CTX_INIT=283;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=302;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=242;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=205;
    public static final int CREATE_COL_TYPE=256;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=107;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=168;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int EVAL_ISNOT_EXPR=166;
    public static final int FLOAT_TYPE=290;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=101;
    public static final int EVENT_FILTER_BETWEEN=150;
    public static final int ANNOTATION_VALUE=260;
    public static final int SUBSELECT_EXPR=225;
    public static final int CONCAT=199;
    public static final int NUMERIC_PARAM_RANGE=129;
    public static final int CLASS_IDENT=152;
    public static final int MATCHREC_PATTERN_ALTER=300;
    public static final int ON_EXPR=238;
    public static final int CREATE_WINDOW_EXPR=236;
    public static final int PROPERTY_SELECTION_STREAM=142;
    public static final int ON_DELETE_EXPR=240;
    public static final int NUM_LONG=345;
    public static final int ON=41;
    public static final int TIME_PERIOD=204;
    public static final int DOUBLE_TYPE=291;
    public static final int DELETE=81;
    public static final int INT_TYPE=288;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=160;
    public static final int ORDER_ELEMENT_EXPR=181;
    public static final int TIMEPERIOD_HOURS=97;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=233;
    public static final int UNTIL=85;
    public static final int STRING_TYPE=292;
    public static final int NUM_INT=339;
    public static final int MATCHREC_DEFINE_ITEM=305;
    public static final int ON_SET_EXPR=247;
    public static final int STDDEV=24;
    public static final int NUM_FLOAT=346;
    public static final int ON_EXPR_FROM=246;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=371;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=141;
    public static final int WEEKDAY_OPERATOR=232;
    public static final int DEC=354;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=363;
    public static final int NUMERIC_PARAM_FREQUENCY=131;
    public static final int AFTER_LIMIT_EXPR=191;
    public static final int SNAPSHOT=82;
    public static final int ORDER=56;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=188;
    public static final int EVENT_FILTER_PARAM=145;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=111;
    public static final int FOR=118;
    public static final int ON_STREAM=239;
    public static final int DEFINE=114;
    public static final int TIMEPERIOD_YEARS=89;
    public static final int TIMEPERIOD_DAYS=95;
    public static final int CONTEXT=126;
    public static final int EVENT_FILTER_RANGE=146;
    public static final int ML_COMMENT=370;
    public static final int INDEX=87;
    public static final int CREATE_CTX_CAT=282;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=187;
    public static final int BOR_ASSIGN=364;
    public static final int COMMA=317;
    public static final int WHEN_LIMIT_EXPR=194;
    public static final int IS=42;
    public static final int PARTITION=115;
    public static final int TIMEPERIOD_LIMIT_EXPR=190;
    public static final int SOME=49;
    public static final int EQUAL=347;
    public static final int BOR=322;
    public static final int MATCHREC_MEASURE_ITEM=307;
    public static final int ALL=47;
    public static final int TIMEPERIOD_HOUR=96;
    public static final int CREATE_SCHEMA_EXPR_VAR=269;
    public static final int EVENT_FILTER_NOT_BETWEEN=151;
    public static final int IN_RANGE=223;
    public static final int DOT=319;
    public static final int MATCHREC_MEASURES=306;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int TIMEPERIOD_WEEK=92;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=143;
    public static final int INSERTINTO_EXPR=196;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=159;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=254;
    public static final int MERGE_DEL=275;
    public static final int EVAL_EQUALS_EXPR=163;
    public static final int TIMEPERIOD_MINUTES=99;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=216;
    public static final int EVENT_LIMIT_EXPR=189;
    public static final int NOT_BETWEEN=215;
    public static final int TIMEPERIOD_MINUTE=98;
    public static final int EVAL_OR_EXPR=162;
    public static final int ON_SELECT_INSERT_OUTPUT=245;
    public static final int AGG_FILTER_EXPR=277;
    public static final int MEASURES=113;
    public static final int AFTER=117;
    public static final int BAND=327;
    public static final int MATCHREC_PATTERN_ATOM=298;
    public static final int QUOTED_STRING_LITERAL=326;
    public static final int CREATE_CTX_PATTERN=286;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=324;
    public static final int OBSERVER_EXPR=154;
    public static final int CREATE_SCHEMA_EXPR_QUAL=268;
    public static final int EVENT_FILTER_IDENT=144;
    public static final int EVENT_PROP_MAPPED=184;
    public static final int UnicodeEscape=372;
    public static final int TIMEPERIOD_YEAR=88;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=218;
    public static final int FOLLOWMAX_BEGIN=341;
    public static final int TIMEPERIOD_MONTHS=91;
    public static final int SELECTION_ELEMENT_EXPR=171;
    public static final int CREATE_WINDOW_SELECT_EXPR=237;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=266;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=172;
    public static final int SR_ASSIGN=358;
    public static final int LE=333;
    public static final int DBFROM_CLAUSE=219;
    public static final int EVAL_IDENT=169;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      private static java.util.Set<Integer> afterScriptTokens = new java.util.HashSet<Integer>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public synchronized static Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public synchronized static Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_YEAR, "'year'");
    	parserTokenParaphases.put(TIMEPERIOD_YEARS, "'years'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTH, "'month'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTHS, "'months'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEK, "'week'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEKS, "'weeks'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserTokenParaphases.put(CONTEXT, "'context'");
    	parserTokenParaphases.put(START, "'start'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(INITIATED, "'initiated'");
    	parserTokenParaphases.put(TERMINATED, "'terminated'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      public synchronized static java.util.Set<Integer> getAfterScriptTokens() {
        if (afterScriptTokens.size() == 0) {
    	afterScriptTokens.add(CREATE);
    	afterScriptTokens.add(EXPRESSIONDECL);
    	afterScriptTokens.add(SELECT);
    	afterScriptTokens.add(INSERT);
    	afterScriptTokens.add(ON);
    	afterScriptTokens.add(DELETE);
    	afterScriptTokens.add(UPDATE);
    	afterScriptTokens.add(ATCHAR);
        }
        return afterScriptTokens;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF4=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl2 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression3 = null;
        CommonTree EOF4_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=3;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==ATCHAR) ) {
                    alt1=1;
                }
                else if ( (LA1_0==EXPRESSIONDECL) ) {
                    alt1=2;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1869);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startPatternExpressionRule1873);
            	    expressionDecl2=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionDecl2.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1879);
            patternExpression3=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression3.getTree());
            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1883); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum5 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl6 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression7 = null;
        CommonTree EOF8_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_expressionDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionDecl");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==ATCHAR) ) {
                    alt2=1;
                }
                else if ( (LA2_0==EXPRESSIONDECL) ) {
                    alt2=2;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1898);
            	    annotationEnum5=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum5.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startEPLExpressionRule1902);
            	    expressionDecl6=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expressionDecl.add(expressionDecl6.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1908);
            eplExpression7=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF8);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                while ( stream_expressionDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDecl.nextTree());
                }
                stream_expressionDecl.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF10=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty9 = null;
        CommonTree EOF10_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1941);
            eventProperty9=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty9.getTree());
            EOF10=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1945); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDecl_return expressionDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDecl_return retval = new EsperEPL2GrammarParser.expressionDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token array=null;
        Token name=null;
        Token EXPRESSIONDECL11=null;
        Token RBRACK13=null;
        Token LPAREN15=null;
        Token RPAREN17=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier12 = null;
        EsperEPL2GrammarParser.expressionDialect_return expressionDialect14 = null;
        EsperEPL2GrammarParser.columnList_return columnList16 = null;
        EsperEPL2GrammarParser.expressionDef_return expressionDef18 = null;
        CommonTree array_tree=null;
        CommonTree name_tree=null;
        CommonTree EXPRESSIONDECL11_tree=null;
        CommonTree RBRACK13_tree=null;
        CommonTree LPAREN15_tree=null;
        CommonTree RPAREN17_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_EXPRESSIONDECL=new RewriteRuleTokenStream(adaptor,"token EXPRESSIONDECL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionDef=new RewriteRuleSubtreeStream(adaptor,"rule expressionDef");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_expressionDialect=new RewriteRuleSubtreeStream(adaptor,"rule expressionDialect");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            EXPRESSIONDECL11=(Token)match(input,EXPRESSIONDECL,FOLLOW_EXPRESSIONDECL_in_expressionDecl1964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXPRESSIONDECL.add(EXPRESSIONDECL11);
            int alt3=2;
            int LA3_0 = input.LA(1);
            if ( (LA3_0==IDENT) ) {
                int LA3_1 = input.LA(2);
                if ( (LA3_1==IDENT||LA3_1==DOT) ) {
                    alt3=1;
                }
                else if ( (LA3_1==LBRACK) ) {
                    int LA3_6 = input.LA(3);
                    if ( (LA3_6==RBRACK) ) {
                        alt3=1;
                    }
                }
            }
            else if ( (LA3_0==TICKED_STRING_LITERAL) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifier_in_expressionDecl1966);
                    classIdentifier12=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier12.getTree());
                    }
                    break;
            }
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==LBRACK) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    {
                    array=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_expressionDecl1972); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(array);
                    RBRACK13=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_expressionDecl1974); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK13);
                    }
                    break;
            }
            int alt5=2;
            int LA5_0 = input.LA(1);
            if ( (LA5_0==IDENT) ) {
                int LA5_1 = input.LA(2);
                if ( (LA5_1==COLON) ) {
                    alt5=1;
                }
            }
            switch (alt5) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionDialect_in_expressionDecl1978);
                    expressionDialect14=expressionDialect();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionDialect.add(expressionDialect14.getTree());
                    }
                    break;
            }
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDecl1983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt7=2;
            int LA7_0 = input.LA(1);
            if ( (LA7_0==LPAREN) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    {
                    LPAREN15=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionDecl1986); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN15);
                    int alt6=2;
                    int LA6_0 = input.LA(1);
                    if ( (LA6_0==IDENT) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_columnList_in_expressionDecl1988);
                            columnList16=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList16.getTree());
                            }
                            break;
                    }
                    RPAREN17=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionDecl1991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN17);
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionDef_in_expressionDecl1995);
            expressionDef18=expressionDef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionDef.add(expressionDef18.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_array=new RewriteRuleTokenStream(adaptor,"token array",array);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EXPRESSIONDECL.nextNode(), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_expressionDef.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_expressionDialect.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDialect.nextTree());
                }
                stream_expressionDialect.reset();
                if ( stream_array.hasNext() ) {
                    adaptor.addChild(root_1, stream_array.nextNode());
                }
                stream_array.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDialect_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDialect_return expressionDialect() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDialect_return retval = new EsperEPL2GrammarParser.expressionDialect_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token COLON19=null;
        CommonTree d_tree=null;
        CommonTree COLON19_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            d=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDialect2038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(d);
            COLON19=(Token)match(input,COLON,FOLLOW_COLON_in_expressionDialect2040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON19);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_COLON.nextNode(), root_1);
                adaptor.addChild(root_1, stream_d.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDef_return expressionDef() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDef_return retval = new EsperEPL2GrammarParser.expressionDef_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY20=null;
        Token RCURLY23=null;
        Token LBRACK24=null;
        Token RBRACK26=null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl21 = null;
        EsperEPL2GrammarParser.expression_return expression22 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant25 = null;
        CommonTree LCURLY20_tree=null;
        CommonTree RCURLY23_tree=null;
        CommonTree LBRACK24_tree=null;
        CommonTree RBRACK26_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expressionLambdaDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionLambdaDecl");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        try {
            int alt9=2;
            int LA9_0 = input.LA(1);
            if ( (LA9_0==LCURLY) ) {
                alt9=1;
            }
            else if ( (LA9_0==LBRACK) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);
                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    LCURLY20=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_expressionDef2062); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY20);
                    int alt8=2;
                    int LA8_0 = input.LA(1);
                    if ( (LA8_0==IDENT) ) {
                        int LA8_1 = input.LA(2);
                        if ( (LA8_1==GOES) ) {
                            alt8=1;
                        }
                    }
                    else if ( (LA8_0==LPAREN) ) {
                        int LA8_2 = input.LA(2);
                        if ( (LA8_2==IDENT) ) {
                            int LA8_120 = input.LA(3);
                            if ( (LA8_120==RPAREN) ) {
                                int LA8_203 = input.LA(4);
                                if ( (LA8_203==GOES) ) {
                                    alt8=1;
                                }
                            }
                            else if ( (LA8_120==COMMA) ) {
                                alt8=1;
                            }
                        }
                    }
                    switch (alt8) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionLambdaDecl_in_expressionDef2064);
                            expressionLambdaDecl21=expressionLambdaDecl();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionLambdaDecl.add(expressionLambdaDecl21.getTree());
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_expressionDef2067);
                    expression22=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression22.getTree());
                    RCURLY23=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_expressionDef2069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY23);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOES, "GOES"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( stream_expressionLambdaDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionLambdaDecl.nextTree());
                        }
                        stream_expressionLambdaDecl.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    LBRACK24=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_expressionDef2085); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK24);
                    pushFollow(FOLLOW_stringconstant_in_expressionDef2087);
                    stringconstant25=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant25.getTree());
                    RBRACK26=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_expressionDef2089); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK26);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRESSIONDECL, "EXPRESSIONDECL"), root_1);
                        adaptor.addChild(root_1, stream_stringconstant.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionLambdaDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionLambdaDecl_return retval = new EsperEPL2GrammarParser.expressionLambdaDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LPAREN27=null;
        Token RPAREN29=null;
        Token GOES30=null;
        EsperEPL2GrammarParser.columnList_return columnList28 = null;
        CommonTree i_tree=null;
        CommonTree LPAREN27_tree=null;
        CommonTree RPAREN29_tree=null;
        CommonTree GOES30_tree=null;
        RewriteRuleTokenStream stream_GOES=new RewriteRuleTokenStream(adaptor,"token GOES");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            int alt10=2;
            int LA10_0 = input.LA(1);
            if ( (LA10_0==IDENT) ) {
                alt10=1;
            }
            else if ( (LA10_0==LPAREN) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);
                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionLambdaDecl2112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    {
                    LPAREN27=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionLambdaDecl2117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN27);
                    pushFollow(FOLLOW_columnList_in_expressionLambdaDecl2119);
                    columnList28=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList28.getTree());
                    RPAREN29=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionLambdaDecl2121); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN29);
                    }
                    }
                    break;
            }
            GOES30=(Token)match(input,GOES,FOLLOW_GOES_in_expressionLambdaDecl2125); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GOES.add(GOES30);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_GOES.nextNode(), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal31=null;
        Token char_literal33=null;
        Token char_literal36=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier32 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum34 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum35 = null;
        CommonTree char_literal31_tree=null;
        CommonTree char_literal33_tree=null;
        CommonTree char_literal36_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal31=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationNoEnum2160); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(char_literal31);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum2162);
            classIdentifier32=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier32.getTree());
            int alt12=2;
            int LA12_0 = input.LA(1);
            if ( (LA12_0==LPAREN) ) {
                int LA12_1 = input.LA(2);
                if ( (LA12_1==IDENT) ) {
                    int LA12_14 = input.LA(3);
                    if ( (LA12_14==EQUALS) ) {
                        int LA12_32 = input.LA(4);
                        if ( ((LA12_32>=BOOLEAN_TRUE && LA12_32<=VALUE_NULL)||LA12_32==NUM_DOUBLE||LA12_32==LCURLY||LA12_32==ATCHAR||LA12_32==PLUS||(LA12_32>=STRING_LITERAL && LA12_32<=QUOTED_STRING_LITERAL)||LA12_32==MINUS||LA12_32==NUM_INT||(LA12_32>=NUM_LONG && LA12_32<=NUM_FLOAT)) ) {
                            alt12=1;
                        }
                    }
                }
                else if ( ((LA12_1>=BOOLEAN_TRUE && LA12_1<=VALUE_NULL)||LA12_1==NUM_DOUBLE||LA12_1==RPAREN||LA12_1==LCURLY||LA12_1==ATCHAR||LA12_1==PLUS||(LA12_1>=STRING_LITERAL && LA12_1<=QUOTED_STRING_LITERAL)||LA12_1==MINUS||LA12_1==NUM_INT||(LA12_1>=NUM_LONG && LA12_1<=NUM_FLOAT)) ) {
                    alt12=1;
                }
            }
            switch (alt12) {
                case 1 :
                    {
                    char_literal33=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum2166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal33);
                    int alt11=3;
                    int LA11_0 = input.LA(1);
                    if ( (LA11_0==IDENT) ) {
                        alt11=1;
                    }
                    else if ( ((LA11_0>=BOOLEAN_TRUE && LA11_0<=VALUE_NULL)||LA11_0==NUM_DOUBLE||LA11_0==LCURLY||LA11_0==ATCHAR||LA11_0==PLUS||(LA11_0>=STRING_LITERAL && LA11_0<=QUOTED_STRING_LITERAL)||LA11_0==MINUS||LA11_0==NUM_INT||(LA11_0>=NUM_LONG && LA11_0<=NUM_FLOAT)) ) {
                        alt11=2;
                    }
                    switch (alt11) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum2170);
                            elementValuePairsNoEnum34=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum34.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum2174);
                            elementValueNoEnum35=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum35.getTree());
                            }
                            break;
                    }
                    char_literal36=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum2179); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal36);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal37=null;
        Token char_literal39=null;
        Token char_literal42=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier38 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum40 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum41 = null;
        CommonTree char_literal37_tree=null;
        CommonTree char_literal39_tree=null;
        CommonTree char_literal42_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal37=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationEnum2220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(char_literal37);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum2222);
            classIdentifier38=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier38.getTree());
            int alt14=2;
            int LA14_0 = input.LA(1);
            if ( (LA14_0==LPAREN) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    {
                    char_literal39=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum2226); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal39);
                    int alt13=3;
                    int LA13_0 = input.LA(1);
                    if ( (LA13_0==IDENT) ) {
                        int LA13_1 = input.LA(2);
                        if ( (LA13_1==EQUALS) ) {
                            alt13=1;
                        }
                        else if ( (LA13_1==RPAREN||LA13_1==DOT) ) {
                            alt13=2;
                        }
                    }
                    else if ( ((LA13_0>=BOOLEAN_TRUE && LA13_0<=VALUE_NULL)||LA13_0==NUM_DOUBLE||LA13_0==LCURLY||LA13_0==ATCHAR||LA13_0==PLUS||(LA13_0>=STRING_LITERAL && LA13_0<=QUOTED_STRING_LITERAL)||LA13_0==MINUS||LA13_0==NUM_INT||(LA13_0>=TICKED_STRING_LITERAL && LA13_0<=NUM_FLOAT)) ) {
                        alt13=2;
                    }
                    switch (alt13) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum2230);
                            elementValuePairsEnum40=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum40.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum2234);
                            elementValueEnum41=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum41.getTree());
                            }
                            break;
                    }
                    char_literal42=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum2239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal42);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA44=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum43 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum45 = null;
        CommonTree COMMA44_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2280);
            elementValuePairNoEnum43=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum43.getTree());
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);
                if ( (LA15_0==COMMA) ) {
                    alt15=1;
                }
                switch (alt15) {
            	case 1 :
            	    {
            	    COMMA44=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum2283); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2286);
            	    elementValuePairNoEnum45=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum45.getTree());
            	    }
            	    break;
            	default :
            	    break loop15;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA47=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum46 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum48 = null;
        CommonTree COMMA47_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2307);
            elementValuePairEnum46=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum46.getTree());
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);
                if ( (LA16_0==COMMA) ) {
                    alt16=1;
                }
                switch (alt16) {
            	case 1 :
            	    {
            	    COMMA47=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum2310); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2313);
            	    elementValuePairEnum48=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum48.getTree());
            	    }
            	    break;
            	default :
            	    break loop16;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum50 = null;
        CommonTree i_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum2336); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal49=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum2338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal49);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2340);
            elementValueNoEnum50=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum50.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal51=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum52 = null;
        CommonTree i_tree=null;
        CommonTree char_literal51_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum2377); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal51=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum2379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal51);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum2381);
            elementValueEnum52=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum52.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum53 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum54 = null;
        EsperEPL2GrammarParser.constant_return constant55 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt17=3;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt17=1;
                }
                break;
            case LCURLY:
                {
                alt17=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt17=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);
                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2412);
                    annotationEnum53=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum53.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2423);
                    elementValueArrayNoEnum54=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum54.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2436);
                    constant55=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant55.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum56 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum57 = null;
        EsperEPL2GrammarParser.constant_return constant58 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier59 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt18=4;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt18=1;
                }
                break;
            case LCURLY:
                {
                alt18=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt18=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt18=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);
                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2459);
                    annotationEnum56=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum56.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2470);
                    elementValueArrayEnum57=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum57.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2483);
                    constant58=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant58.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2491);
                    classIdentifier59=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier59.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal60=null;
        Token char_literal62=null;
        Token char_literal64=null;
        Token char_literal65=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum61 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum63 = null;
        CommonTree char_literal60_tree=null;
        CommonTree char_literal62_tree=null;
        CommonTree char_literal64_tree=null;
        CommonTree char_literal65_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal60=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal60);
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( ((LA20_0>=BOOLEAN_TRUE && LA20_0<=VALUE_NULL)||LA20_0==NUM_DOUBLE||LA20_0==LCURLY||LA20_0==ATCHAR||LA20_0==PLUS||(LA20_0>=STRING_LITERAL && LA20_0<=QUOTED_STRING_LITERAL)||LA20_0==MINUS||LA20_0==NUM_INT||(LA20_0>=NUM_LONG && LA20_0<=NUM_FLOAT)) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2514);
                    elementValueNoEnum61=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum61.getTree());
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);
                        if ( (LA19_0==COMMA) ) {
                            int LA19_1 = input.LA(2);
                            if ( ((LA19_1>=BOOLEAN_TRUE && LA19_1<=VALUE_NULL)||LA19_1==NUM_DOUBLE||LA19_1==LCURLY||LA19_1==ATCHAR||LA19_1==PLUS||(LA19_1>=STRING_LITERAL && LA19_1<=QUOTED_STRING_LITERAL)||LA19_1==MINUS||LA19_1==NUM_INT||(LA19_1>=NUM_LONG && LA19_1<=NUM_FLOAT)) ) {
                                alt19=1;
                            }
                        }
                        switch (alt19) {
                    	case 1 :
                    	    {
                    	    char_literal62=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2517); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal62);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2519);
                    	    elementValueNoEnum63=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum63.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop19;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==COMMA) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    char_literal64=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal64);
                    }
                    break;
            }
            char_literal65=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2530); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal65);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal66=null;
        Token char_literal68=null;
        Token char_literal70=null;
        Token char_literal71=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum67 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum69 = null;
        CommonTree char_literal66_tree=null;
        CommonTree char_literal68_tree=null;
        CommonTree char_literal70_tree=null;
        CommonTree char_literal71_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal66=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal66);
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( ((LA23_0>=BOOLEAN_TRUE && LA23_0<=VALUE_NULL)||LA23_0==NUM_DOUBLE||LA23_0==IDENT||LA23_0==LCURLY||LA23_0==ATCHAR||LA23_0==PLUS||(LA23_0>=STRING_LITERAL && LA23_0<=QUOTED_STRING_LITERAL)||LA23_0==MINUS||LA23_0==NUM_INT||(LA23_0>=TICKED_STRING_LITERAL && LA23_0<=NUM_FLOAT)) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2562);
                    elementValueEnum67=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum67.getTree());
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);
                        if ( (LA22_0==COMMA) ) {
                            int LA22_1 = input.LA(2);
                            if ( ((LA22_1>=BOOLEAN_TRUE && LA22_1<=VALUE_NULL)||LA22_1==NUM_DOUBLE||LA22_1==IDENT||LA22_1==LCURLY||LA22_1==ATCHAR||LA22_1==PLUS||(LA22_1>=STRING_LITERAL && LA22_1<=QUOTED_STRING_LITERAL)||LA22_1==MINUS||LA22_1==NUM_INT||(LA22_1>=TICKED_STRING_LITERAL && LA22_1<=NUM_FLOAT)) ) {
                                alt22=1;
                            }
                        }
                        switch (alt22) {
                    	case 1 :
                    	    {
                    	    char_literal68=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2565); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal68);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2567);
                    	    elementValueEnum69=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum69.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop22;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==COMMA) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    char_literal70=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal70);
                    }
                    break;
            }
            char_literal71=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2578); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal71);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.contextExpr_return contextExpr72 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr73 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr74 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr75 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr76 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr77 = null;
        EsperEPL2GrammarParser.createContextExpr_return createContextExpr78 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr79 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr80 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr81 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==CONTEXT) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    pushFollow(FOLLOW_contextExpr_in_eplExpression2610);
                    contextExpr72=contextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, contextExpr72.getTree());
                    }
                    break;
            }
            int alt26=8;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt26=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt26=2;
                    }
                    break;
                case INDEX:
                    {
                    alt26=3;
                    }
                    break;
                case CONTEXT:
                    {
                    alt26=6;
                    }
                    break;
                case IDENT:
                    {
                    int LA26_9 = input.LA(3);
                    if ( (LA26_9==SCHEMA) ) {
                        alt26=5;
                    }
                    else if ( (LA26_9==VARIABLE) ) {
                        alt26=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 9, input);
                        throw nvae;
                    }
                    }
                    break;
                case VARIABLE:
                    {
                    alt26=4;
                    }
                    break;
                case SCHEMA:
                    {
                    alt26=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt26=7;
                }
                break;
            case UPDATE:
                {
                alt26=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);
                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2617);
                    selectExpr73=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr73.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2622);
                    createWindowExpr74=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr74.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2627);
                    createIndexExpr75=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr75.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2632);
                    createVariableExpr76=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr76.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2637);
                    createSchemaExpr77=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr77.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_createContextExpr_in_eplExpression2642);
                    createContextExpr78=createContextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextExpr78.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2647);
                    onExpr79=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr79.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2652);
                    updateExpr80=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr80.getTree());
                    }
                    break;
            }
            int alt27=2;
            int LA27_0 = input.LA(1);
            if ( (LA27_0==FOR) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2655);
                    forExpr81=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr81.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class contextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.contextExpr_return contextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.contextExpr_return retval = new EsperEPL2GrammarParser.contextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token CONTEXT82=null;
        CommonTree i_tree=null;
        CommonTree CONTEXT82_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        try {
            {
            CONTEXT82=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextExpr2668); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT82);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_contextExpr2672); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTEXT.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT83=null;
        Token SELECT85=null;
        Token FROM87=null;
        Token WHERE90=null;
        Token GROUP92=null;
        Token BY93=null;
        Token HAVING95=null;
        Token OUTPUT97=null;
        Token ORDER99=null;
        Token BY100=null;
        Token ROW_LIMIT_EXPR102=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr84 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause86 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause88 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog89 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause91 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr94 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause96 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit98 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr101 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit103 = null;
        CommonTree INSERT83_tree=null;
        CommonTree SELECT85_tree=null;
        CommonTree FROM87_tree=null;
        CommonTree WHERE90_tree=null;
        CommonTree GROUP92_tree=null;
        CommonTree BY93_tree=null;
        CommonTree HAVING95_tree=null;
        CommonTree OUTPUT97_tree=null;
        CommonTree ORDER99_tree=null;
        CommonTree BY100_tree=null;
        CommonTree ROW_LIMIT_EXPR102_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt28=2;
            int LA28_0 = input.LA(1);
            if ( (LA28_0==INSERT) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    {
                    INSERT83=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2696); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2699);
                    insertIntoExpr84=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr84.getTree());
                    }
                    break;
            }
            SELECT85=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2705); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2708);
            selectClause86=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause86.getTree());
            FROM87=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2712); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2715);
            fromClause88=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause88.getTree());
            int alt29=2;
            int LA29_0 = input.LA(1);
            if ( (LA29_0==MATCH_RECOGNIZE) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2719);
                    matchRecog89=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog89.getTree());
                    }
                    break;
            }
            int alt30=2;
            int LA30_0 = input.LA(1);
            if ( (LA30_0==WHERE) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    {
                    WHERE90=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2725); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2728);
                    whereClause91=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause91.getTree());
                    }
                    break;
            }
            int alt31=2;
            int LA31_0 = input.LA(1);
            if ( (LA31_0==GROUP) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    {
                    GROUP92=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2735); if (state.failed) return retval;
                    BY93=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2738); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2741);
                    groupByListExpr94=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr94.getTree());
                    }
                    break;
            }
            int alt32=2;
            int LA32_0 = input.LA(1);
            if ( (LA32_0==HAVING) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    {
                    HAVING95=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2748); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2751);
                    havingClause96=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause96.getTree());
                    }
                    break;
            }
            int alt33=2;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==OUTPUT) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    {
                    OUTPUT97=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2758); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2761);
                    outputLimit98=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit98.getTree());
                    }
                    break;
            }
            int alt34=2;
            int LA34_0 = input.LA(1);
            if ( (LA34_0==ORDER) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    {
                    ORDER99=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2768); if (state.failed) return retval;
                    BY100=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2771); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2774);
                    orderByListExpr101=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr101.getTree());
                    }
                    break;
            }
            int alt35=2;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==ROW_LIMIT_EXPR) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR102=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2781); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2784);
                    rowLimit103=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit103.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON104=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr105 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr106 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr107 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr108 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert109 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr110 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr111 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr112 = null;
        CommonTree ON104_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON104=(Token)match(input,ON,FOLLOW_ON_in_onExpr2799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON104);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2801);
            onStreamExpr105=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr105.getTree());
            int alt39=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt39=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt39=2;
                }
                break;
            case SET:
                {
                alt39=3;
                }
                break;
            case UPDATE:
                {
                alt39=4;
                }
                break;
            case MERGE:
                {
                alt39=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);
                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2806);
                    onDeleteExpr106=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr106.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2810);
                    onSelectExpr107=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr107.getTree());
                    int alt38=2;
                    int LA38_0 = input.LA(1);
                    if ( (LA38_0==INSERT) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            {
                            int cnt36=0;
                            loop36:
                            do {
                                int alt36=2;
                                int LA36_0 = input.LA(1);
                                if ( (LA36_0==INSERT) ) {
                                    alt36=1;
                                }
                                switch (alt36) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2813);
                            	    onSelectInsertExpr108=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr108.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt36 >= 1 ) break loop36;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(36, input);
                                        throw eee;
                                }
                                cnt36++;
                            } while (true);
                            int alt37=2;
                            int LA37_0 = input.LA(1);
                            if ( (LA37_0==OUTPUT) ) {
                                alt37=1;
                            }
                            switch (alt37) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2816);
                                    outputClauseInsert109=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert109.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2823);
                    onSetExpr110=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr110.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2827);
                    onUpdateExpr111=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr111.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2831);
                    onMergeExpr112=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr112.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS115=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression113 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression114 = null;
        CommonTree i_tree=null;
        CommonTree AS115_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==IDENT||LA40_0==TICKED_STRING_LITERAL) ) {
                alt40=1;
            }
            else if ( (LA40_0==PATTERN) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);
                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2876);
                    eventFilterExpression113=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression113.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2880);
                    patternInclusionExpression114=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression114.getTree());
                    }
                    break;
            }
            int alt41=3;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==AS) ) {
                alt41=1;
            }
            else if ( (LA41_0==IDENT) ) {
                alt41=2;
            }
            switch (alt41) {
                case 1 :
                    {
                    AS115=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2884); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS115);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2888); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2894); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE116=null;
        Token ISTREAM117=null;
        Token AS119=null;
        Token SET120=null;
        Token COMMA122=null;
        Token WHERE124=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier118 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment121 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment123 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause125 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE116_tree=null;
        CommonTree ISTREAM117_tree=null;
        CommonTree AS119_tree=null;
        CommonTree SET120_tree=null;
        CommonTree COMMA122_tree=null;
        CommonTree WHERE124_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE116=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2925); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE116);
            ISTREAM117=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM117);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr2929);
            classIdentifier118=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier118.getTree());
            int alt42=3;
            int LA42_0 = input.LA(1);
            if ( (LA42_0==AS) ) {
                alt42=1;
            }
            else if ( (LA42_0==IDENT) ) {
                alt42=2;
            }
            switch (alt42) {
                case 1 :
                    {
                    AS119=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS119);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET120=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET120);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2950);
            onSetAssignment121=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment121.getTree());
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);
                if ( (LA43_0==COMMA) ) {
                    alt43=1;
                }
                switch (alt43) {
            	case 1 :
            	    {
            	    COMMA122=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2953); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA122);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2955);
            	    onSetAssignment123=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment123.getTree());
            	    }
            	    break;
            	default :
            	    break loop43;
                }
            } while (true);
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( (LA44_0==WHERE) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    {
                    WHERE124=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2963); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE124);
                    pushFollow(FOLLOW_whereClause_in_updateExpr2965);
                    whereClause125=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause125.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE126=null;
        Token INTO127=null;
        Token AS128=null;
        Token WHERE129=null;
        EsperEPL2GrammarParser.whereClause_return whereClause130 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem131 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE126_tree=null;
        CommonTree INTO127_tree=null;
        CommonTree AS128_tree=null;
        CommonTree WHERE129_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE126=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr3000); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE126);
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( (LA45_0==INTO) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    {
                    INTO127=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr3002); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO127);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3007); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt46=3;
            int LA46_0 = input.LA(1);
            if ( (LA46_0==AS) ) {
                alt46=1;
            }
            else if ( (LA46_0==IDENT) ) {
                alt46=2;
            }
            switch (alt46) {
                case 1 :
                    {
                    AS128=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr3010); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS128);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3014); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3020); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt47=2;
            int LA47_0 = input.LA(1);
            if ( (LA47_0==WHERE) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    {
                    WHERE129=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr3027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE129);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr3029);
                    whereClause130=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause130.getTree());
                    }
                    break;
            }
            int cnt48=0;
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);
                if ( (LA48_0==WHEN) ) {
                    alt48=1;
                }
                switch (alt48) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr3037);
            	    mergeItem131=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem131.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt48 >= 1 ) break loop48;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(48, input);
                        throw eee;
                }
                cnt48++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched132 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched133 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( (LA49_0==WHEN) ) {
                int LA49_1 = input.LA(2);
                if ( (LA49_1==MATCHED) ) {
                    alt49=1;
                }
                else if ( (LA49_1==NOT_EXPR) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);
                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem3071);
                    mergeMatched132=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched132.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem3075);
                    mergeUnmatched133=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched133.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN134=null;
        Token MATCHED135=null;
        Token AND_EXPR136=null;
        EsperEPL2GrammarParser.expression_return expression137 = null;
        EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem138 = null;
        CommonTree WHEN134_tree=null;
        CommonTree MATCHED135_tree=null;
        CommonTree AND_EXPR136_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeMatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatchedItem");
        try {
            {
            WHEN134=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched3088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN134);
            MATCHED135=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched3090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED135);
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==AND_EXPR) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    AND_EXPR136=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched3093); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR136);
                    pushFollow(FOLLOW_expression_in_mergeMatched3095);
                    expression137=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression137.getTree());
                    }
                    break;
            }
            int cnt51=0;
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);
                if ( (LA51_0==THEN) ) {
                    alt51=1;
                }
                switch (alt51) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatchedItem_in_mergeMatched3099);
            	    mergeMatchedItem138=mergeMatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatchedItem.add(mergeMatchedItem138.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt51 >= 1 ) break loop51;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(51, input);
                        throw eee;
                }
                cnt51++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_MAT, "MERGE_MAT"), root_1);
                if ( !(stream_mergeMatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeMatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatchedItem.nextTree());
                }
                stream_mergeMatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatchedItem_return retval = new EsperEPL2GrammarParser.mergeMatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token d=null;
        Token THEN139=null;
        Token SET140=null;
        Token COMMA142=null;
        Token WHERE144=null;
        Token WHERE146=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment141 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment143 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause145 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause147 = null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert148 = null;
        CommonTree u_tree=null;
        CommonTree d_tree=null;
        CommonTree THEN139_tree=null;
        CommonTree SET140_tree=null;
        CommonTree COMMA142_tree=null;
        CommonTree WHERE144_tree=null;
        CommonTree WHERE146_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_mergeInsert=new RewriteRuleSubtreeStream(adaptor,"rule mergeInsert");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            THEN139=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatchedItem3125); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN139);
            int alt55=3;
            switch ( input.LA(1) ) {
            case UPDATE:
                {
                alt55=1;
                }
                break;
            case DELETE:
                {
                alt55=2;
                }
                break;
            case INSERT:
                {
                alt55=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);
                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    {
                    {
                    u=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatchedItem3140); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(u);
                    SET140=(Token)match(input,SET,FOLLOW_SET_in_mergeMatchedItem3142); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET140);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3144);
                    onSetAssignment141=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment141.getTree());
                    loop52:
                    do {
                        int alt52=2;
                        int LA52_0 = input.LA(1);
                        if ( (LA52_0==COMMA) ) {
                            alt52=1;
                        }
                        switch (alt52) {
                    	case 1 :
                    	    {
                    	    COMMA142=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatchedItem3147); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA142);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3149);
                    	    onSetAssignment143=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment143.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop52;
                        }
                    } while (true);
                    }
                    int alt53=2;
                    int LA53_0 = input.LA(1);
                    if ( (LA53_0==WHERE) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            {
                            WHERE144=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3155); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE144);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3157);
                            whereClause145=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause145.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatchedItem3169); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    int alt54=2;
                    int LA54_0 = input.LA(1);
                    if ( (LA54_0==WHERE) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            {
                            WHERE146=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3172); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE146);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3174);
                            whereClause147=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause147.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_mergeInsert_in_mergeMatchedItem3185);
                    mergeInsert148=mergeInsert();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mergeInsert.add(mergeInsert148.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_DEL, "MERGE_DEL"), root_1);
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_1, (CommonTree)adaptor.create(INT_TYPE, "dummy"));
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (u != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_mergeInsert.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN149=null;
        Token NOT_EXPR150=null;
        Token MATCHED151=null;
        Token AND_EXPR152=null;
        EsperEPL2GrammarParser.expression_return expression153 = null;
        EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem154 = null;
        CommonTree WHEN149_tree=null;
        CommonTree NOT_EXPR150_tree=null;
        CommonTree MATCHED151_tree=null;
        CommonTree AND_EXPR152_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeUnmatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatchedItem");
        try {
            {
            WHEN149=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched3242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN149);
            NOT_EXPR150=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched3244); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR150);
            MATCHED151=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched3246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED151);
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==AND_EXPR) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    {
                    AND_EXPR152=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched3249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR152);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched3251);
                    expression153=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression153.getTree());
                    }
                    break;
            }
            int cnt57=0;
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);
                if ( (LA57_0==THEN) ) {
                    alt57=1;
                }
                switch (alt57) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3255);
            	    mergeUnmatchedItem154=mergeUnmatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatchedItem.add(mergeUnmatchedItem154.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt57 >= 1 ) break loop57;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        throw eee;
                }
                cnt57++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UNM, "MERGE_UNM"), root_1);
                if ( !(stream_mergeUnmatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeUnmatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatchedItem.nextTree());
                }
                stream_mergeUnmatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatchedItem_return retval = new EsperEPL2GrammarParser.mergeUnmatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token THEN155=null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert156 = null;
        CommonTree THEN155_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            THEN155=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatchedItem3282); if (state.failed) return retval;
            pushFollow(FOLLOW_mergeInsert_in_mergeUnmatchedItem3285);
            mergeInsert156=mergeInsert();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeInsert156.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeInsert_return mergeInsert() throws RecognitionException {
        EsperEPL2GrammarParser.mergeInsert_return retval = new EsperEPL2GrammarParser.mergeInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT157=null;
        Token INTO158=null;
        Token LPAREN160=null;
        Token RPAREN162=null;
        Token SELECT163=null;
        Token WHERE165=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier159 = null;
        EsperEPL2GrammarParser.columnList_return columnList161 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList164 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause166 = null;
        CommonTree INSERT157_tree=null;
        CommonTree INTO158_tree=null;
        CommonTree LPAREN160_tree=null;
        CommonTree RPAREN162_tree=null;
        CommonTree SELECT163_tree=null;
        CommonTree WHERE165_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            INSERT157=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeInsert3300); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT157);
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==INTO) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    INTO158=(Token)match(input,INTO,FOLLOW_INTO_in_mergeInsert3303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO158);
                    pushFollow(FOLLOW_classIdentifier_in_mergeInsert3305);
                    classIdentifier159=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier159.getTree());
                    }
                    break;
            }
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==LPAREN) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    LPAREN160=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeInsert3310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN160);
                    pushFollow(FOLLOW_columnList_in_mergeInsert3312);
                    columnList161=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList161.getTree());
                    RPAREN162=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeInsert3314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN162);
                    }
                    break;
            }
            SELECT163=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeInsert3318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT163);
            pushFollow(FOLLOW_selectionList_in_mergeInsert3320);
            selectionList164=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList164.getTree());
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==WHERE) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    WHERE165=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeInsert3323); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE165);
                    pushFollow(FOLLOW_whereClause_in_mergeInsert3325);
                    whereClause166=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause166.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT167=null;
        Token SELECT169=null;
        Token DISTINCT170=null;
        Token WHERE173=null;
        Token GROUP175=null;
        Token BY176=null;
        Token HAVING178=null;
        Token ORDER180=null;
        Token BY181=null;
        Token ROW_LIMIT_EXPR183=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr168 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList171 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom172 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause174 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr177 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause179 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr182 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit184 = null;
        CommonTree INSERT167_tree=null;
        CommonTree SELECT169_tree=null;
        CommonTree DISTINCT170_tree=null;
        CommonTree WHERE173_tree=null;
        CommonTree GROUP175_tree=null;
        CommonTree BY176_tree=null;
        CommonTree HAVING178_tree=null;
        CommonTree ORDER180_tree=null;
        CommonTree BY181_tree=null;
        CommonTree ROW_LIMIT_EXPR183_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==INSERT) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    INSERT167=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr3371); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT167);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr3373);
                    insertIntoExpr168=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr168.getTree());
                    }
                    break;
            }
            SELECT169=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr3379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT169);
            int alt62=2;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==DISTINCT) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    DISTINCT170=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr3381); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT170);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr3384);
            selectionList171=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList171.getTree());
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==FROM) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr3388);
                    onExprFrom172=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom172.getTree());
                    }
                    break;
            }
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==WHERE) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    WHERE173=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr3394); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE173);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr3396);
                    whereClause174=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause174.getTree());
                    }
                    break;
            }
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==GROUP) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    GROUP175=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr3405); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP175);
                    BY176=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3407); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY176);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr3409);
                    groupByListExpr177=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr177.getTree());
                    }
                    break;
            }
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==HAVING) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    HAVING178=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr3416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING178);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr3418);
                    havingClause179=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause179.getTree());
                    }
                    break;
            }
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==ORDER) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    ORDER180=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr3425); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER180);
                    BY181=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY181);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr3429);
                    orderByListExpr182=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr182.getTree());
                    }
                    break;
            }
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==ROW_LIMIT_EXPR) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR183=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR183);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr3438);
                    rowLimit184=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit184.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE185=null;
        Token AS186=null;
        Token SET187=null;
        Token COMMA189=null;
        Token WHERE191=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment188 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment190 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause192 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE185_tree=null;
        CommonTree AS186_tree=null;
        CommonTree SET187_tree=null;
        CommonTree COMMA189_tree=null;
        CommonTree WHERE191_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE185=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr3498); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE185);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt69=3;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==AS) ) {
                alt69=1;
            }
            else if ( (LA69_0==IDENT) ) {
                alt69=2;
            }
            switch (alt69) {
                case 1 :
                    {
                    AS186=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr3508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS186);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3512); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3518); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET187=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr3524); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET187);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3526);
            onSetAssignment188=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment188.getTree());
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);
                if ( (LA70_0==COMMA) ) {
                    alt70=1;
                }
                switch (alt70) {
            	case 1 :
            	    {
            	    COMMA189=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr3529); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA189);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3531);
            	    onSetAssignment190=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment190.getTree());
            	    }
            	    break;
            	default :
            	    break loop70;
                }
            } while (true);
            int alt71=2;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==WHERE) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    WHERE191=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr3538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE191);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr3540);
                    whereClause192=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause192.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT193=null;
        Token SELECT195=null;
        Token WHERE197=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr194 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList196 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause198 = null;
        CommonTree INSERT193_tree=null;
        CommonTree SELECT195_tree=null;
        CommonTree WHERE197_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT193=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT193);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3593);
            insertIntoExpr194=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr194.getTree());
            SELECT195=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3597); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT195);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3599);
            selectionList196=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList196.getTree());
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==WHERE) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    WHERE197=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE197);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3606);
                    whereClause198=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause198.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT199=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT199_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT199=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT199);
            int alt73=2;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==FIRST) ) {
                alt73=1;
            }
            else if ( (LA73_0==ALL) ) {
                alt73=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);
                throw nvae;
            }
            switch (alt73) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3642); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3648); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE200=null;
        Token WHERE202=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom201 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause203 = null;
        CommonTree DELETE200_tree=null;
        CommonTree WHERE202_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE200=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3690); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE200);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3694);
            onExprFrom201=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom201.getTree());
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==WHERE) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    WHERE202=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3699); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE202);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3701);
                    whereClause203=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause203.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET204=null;
        Token COMMA206=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment205 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment207 = null;
        CommonTree SET204_tree=null;
        CommonTree COMMA206_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET204=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET204);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3743);
            onSetAssignment205=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment205.getTree());
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);
                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }
                switch (alt75) {
            	case 1 :
            	    {
            	    COMMA206=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3746); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA206);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3748);
            	    onSetAssignment207=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment207.getTree());
            	    }
            	    break;
            	default :
            	    break loop75;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS209=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty208 = null;
        EsperEPL2GrammarParser.expression_return expression210 = null;
        CommonTree EQUALS209_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3773);
            eventProperty208=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty208.getTree());
            EQUALS209=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3775); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS209);
            pushFollow(FOLLOW_expression_in_onSetAssignment3777);
            expression210=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression210.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM211=null;
        Token AS212=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM211_tree=null;
        CommonTree AS212_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM211=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3802); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM211);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt76=3;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==AS) ) {
                alt76=1;
            }
            else if ( (LA76_0==IDENT) ) {
                alt76=2;
            }
            switch (alt76) {
                case 1 :
                    {
                    AS212=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS212);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3813); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3819); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE213=null;
        Token WINDOW214=null;
        Token DOT215=null;
        Token DOT217=null;
        Token AS219=null;
        Token LPAREN221=null;
        Token RPAREN223=null;
        Token WHERE224=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression216 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression218 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter220 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList222 = null;
        EsperEPL2GrammarParser.expression_return expression225 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE213_tree=null;
        CommonTree WINDOW214_tree=null;
        CommonTree DOT215_tree=null;
        CommonTree DOT217_tree=null;
        CommonTree AS219_tree=null;
        CommonTree LPAREN221_tree=null;
        CommonTree RPAREN223_tree=null;
        CommonTree WHERE224_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE213=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3847); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE213);
            WINDOW214=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW214);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt78=2;
            int LA78_0 = input.LA(1);
            if ( (LA78_0==DOT) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    DOT215=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT215);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3858);
                    viewExpression216=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression216.getTree());
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);
                        if ( (LA77_0==DOT) ) {
                            alt77=1;
                        }
                        switch (alt77) {
                    	case 1 :
                    	    {
                    	    DOT217=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3861); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT217);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3863);
                    	    viewExpression218=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression218.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop77;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt79=3;
            int LA79_0 = input.LA(1);
            if ( (LA79_0==RETAINUNION) ) {
                alt79=1;
            }
            else if ( (LA79_0==RETAININTERSECTION) ) {
                alt79=2;
            }
            switch (alt79) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==AS) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    {
                    AS219=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS219);
                    }
                    break;
            }
            int alt81=2;
            int LA81_0 = input.LA(1);
            if ( (LA81_0==SELECT||LA81_0==IDENT||LA81_0==TICKED_STRING_LITERAL) ) {
                alt81=1;
            }
            else if ( (LA81_0==LPAREN) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);
                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3895);
                    createWindowExprModelAfter220=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter220.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN221=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN221);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3912);
                    createColumnList222=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList222.getTree());
                    RPAREN223=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3914); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN223);
                    }
                    break;
            }
            int alt83=2;
            int LA83_0 = input.LA(1);
            if ( (LA83_0==INSERT) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt82=2;
                    int LA82_0 = input.LA(1);
                    if ( (LA82_0==WHERE) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            {
                            WHERE224=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3934); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE224);
                            pushFollow(FOLLOW_expression_in_createWindowExpr3936);
                            expression225=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression225.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT226=null;
        Token FROM228=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList227 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier229 = null;
        CommonTree SELECT226_tree=null;
        CommonTree FROM228_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt84=2;
            int LA84_0 = input.LA(1);
            if ( (LA84_0==SELECT) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    {
                    SELECT226=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter4023); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter4026);
                    createSelectionList227=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList227.getTree());
                    FROM228=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter4028); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter4033);
            classIdentifier229=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier229.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE230=null;
        Token INDEX231=null;
        Token ON232=null;
        Token LPAREN233=null;
        Token RPAREN235=null;
        EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList234 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE230_tree=null;
        CommonTree INDEX231_tree=null;
        CommonTree ON232_tree=null;
        CommonTree LPAREN233_tree=null;
        CommonTree RPAREN235_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createIndexColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumnList");
        try {
            {
            CREATE230=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr4046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE230);
            INDEX231=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr4048); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX231);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4052); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON232=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr4054); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON232);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4058); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN233=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr4060); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN233);
            pushFollow(FOLLOW_createIndexColumnList_in_createIndexExpr4062);
            createIndexColumnList234=createIndexColumnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumnList.add(createIndexColumnList234.getTree());
            RPAREN235=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr4064); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN235);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_createIndexColumnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumnList_return retval = new EsperEPL2GrammarParser.createIndexColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA237=null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn236 = null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn238 = null;
        CommonTree COMMA237_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createIndexColumn=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumn");
        try {
            {
            pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList4093);
            createIndexColumn236=createIndexColumn();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn236.getTree());
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);
                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }
                switch (alt85) {
            	case 1 :
            	    {
            	    COMMA237=(Token)match(input,COMMA,FOLLOW_COMMA_in_createIndexColumnList4096); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA237);
            	    pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList4098);
            	    createIndexColumn238=createIndexColumn();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn238.getTree());
            	    }
            	    break;
            	default :
            	    break loop85;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                if ( !(stream_createIndexColumn.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createIndexColumn.hasNext() ) {
                    adaptor.addChild(root_1, stream_createIndexColumn.nextTree());
                }
                stream_createIndexColumn.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumn_return retval = new EsperEPL2GrammarParser.createIndexColumn_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT239=null;
        Token IDENT240=null;
        CommonTree IDENT239_tree=null;
        CommonTree IDENT240_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            IDENT239=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4125); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT239);
            int alt86=2;
            int LA86_0 = input.LA(1);
            if ( (LA86_0==IDENT) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    {
                    IDENT240=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT240);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token n=null;
        Token CREATE241=null;
        Token VARIABLE242=null;
        Token EQUALS244=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier243 = null;
        EsperEPL2GrammarParser.expression_return expression245 = null;
        CommonTree c_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE241_tree=null;
        CommonTree VARIABLE242_tree=null;
        CommonTree EQUALS244_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE241=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr4152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE241);
            int alt87=2;
            int LA87_0 = input.LA(1);
            if ( (LA87_0==IDENT) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    {
                    c=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr4156); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(c);
                    }
                    break;
            }
            VARIABLE242=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr4159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE242);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr4161);
            classIdentifier243=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier243.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr4165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt88=2;
            int LA88_0 = input.LA(1);
            if ( (LA88_0==EQUALS) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    {
                    EQUALS244=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr4168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS244);
                    pushFollow(FOLLOW_expression_in_createVariableExpr4170);
                    expression245=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression245.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA247=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement246 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement248 = null;
        CommonTree COMMA247_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList4216);
            createColumnListElement246=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement246.getTree());
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);
                if ( (LA89_0==COMMA) ) {
                    alt89=1;
                }
                switch (alt89) {
            	case 1 :
            	    {
            	    COMMA247=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList4219); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA247);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList4221);
            	    createColumnListElement248=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement248.getTree());
            	    }
            	    break;
            	default :
            	    break loop89;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token b=null;
        Token RBRACK251=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy249 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier250 = null;
        CommonTree b_tree=null;
        CommonTree RBRACK251_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4249);
            classIdentifierNonGreedy249=classIdentifierNonGreedy();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy249.getTree());
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement4252);
            classIdentifier250=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier250.getTree());
            int alt90=2;
            int LA90_0 = input.LA(1);
            if ( (LA90_0==LBRACK) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement4257); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK251=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement4259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK251);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA253=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement252 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement254 = null;
        CommonTree COMMA253_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4302);
            createSelectionListElement252=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement252.getTree());
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);
                if ( (LA91_0==COMMA) ) {
                    alt91=1;
                }
                switch (alt91) {
            	case 1 :
            	    {
            	    COMMA253=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList4305); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA253);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4307);
            	    createSelectionListElement254=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement254.getTree());
            	    }
            	    break;
            	default :
            	    break loop91;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS256=null;
        Token AS258=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty255 = null;
        EsperEPL2GrammarParser.constant_return constant257 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS256_tree=null;
        CommonTree AS258_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt93=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt93=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case CONTEXT:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt93=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt93=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);
                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement4336); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement4348);
                    eventProperty255=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty255.getTree());
                    int alt92=2;
                    int LA92_0 = input.LA(1);
                    if ( (LA92_0==AS) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            {
                            AS256=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4351); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS256);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4355); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement4376);
                    constant257=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant257.getTree());
                    AS258=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS258);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token name=null;
        Token CREATE259=null;
        Token SCHEMA260=null;
        Token AS261=null;
        Token LPAREN263=null;
        Token RPAREN265=null;
        EsperEPL2GrammarParser.variantList_return variantList262 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList264 = null;
        EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual266 = null;
        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree CREATE259_tree=null;
        CommonTree SCHEMA260_tree=null;
        CommonTree AS261_tree=null;
        CommonTree LPAREN263_tree=null;
        CommonTree RPAREN265_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_createSchemaQual=new RewriteRuleSubtreeStream(adaptor,"rule createSchemaQual");
        try {
            {
            CREATE259=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr4407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE259);
            int alt94=2;
            int LA94_0 = input.LA(1);
            if ( (LA94_0==IDENT) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4411); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            SCHEMA260=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr4414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA260);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4418); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt95=2;
            int LA95_0 = input.LA(1);
            if ( (LA95_0==AS) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    {
                    AS261=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr4420); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS261);
                    }
                    break;
            }
            int alt97=2;
            int LA97_0 = input.LA(1);
            if ( (LA97_0==IDENT||LA97_0==STAR||LA97_0==TICKED_STRING_LITERAL) ) {
                alt97=1;
            }
            else if ( (LA97_0==LPAREN) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);
                throw nvae;
            }
            switch (alt97) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr4433);
                    variantList262=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList262.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN263=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr4444); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN263);
                    int alt96=2;
                    int LA96_0 = input.LA(1);
                    if ( (LA96_0==IDENT||LA96_0==TICKED_STRING_LITERAL) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr4446);
                            createColumnList264=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList264.getTree());
                            }
                            break;
                    }
                    RPAREN265=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr4449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN265);
                    }
                    break;
            }
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);
                if ( (LA98_0==IDENT) ) {
                    alt98=1;
                }
                switch (alt98) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_createSchemaQual_in_createSchemaExpr4458);
            	    createSchemaQual266=createSchemaQual();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSchemaQual.add(createSchemaQual266.getTree());
            	    }
            	    break;
            	default :
            	    break loop98;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (keyword != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_VAR, "CREATE_SCHEMA_EXPR_VAR"), root_2);
                adaptor.addChild(root_2, stream_keyword.nextNode());
                adaptor.addChild(root_1, root_2);
                }
                while ( stream_createSchemaQual.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSchemaQual.nextTree());
                }
                stream_createSchemaQual.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                while ( stream_createSchemaQual.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSchemaQual.nextTree());
                }
                stream_createSchemaQual.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextExpr_return createContextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createContextExpr_return retval = new EsperEPL2GrammarParser.createContextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CREATE267=null;
        Token CONTEXT268=null;
        Token AS269=null;
        EsperEPL2GrammarParser.createContextDetail_return createContextDetail270 = null;
        CommonTree name_tree=null;
        CommonTree CREATE267_tree=null;
        CommonTree CONTEXT268_tree=null;
        CommonTree AS269_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        RewriteRuleSubtreeStream stream_createContextDetail=new RewriteRuleSubtreeStream(adaptor,"rule createContextDetail");
        try {
            {
            CREATE267=(Token)match(input,CREATE,FOLLOW_CREATE_in_createContextExpr4520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE267);
            CONTEXT268=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_createContextExpr4522); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT268);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextExpr4526); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt99=2;
            int LA99_0 = input.LA(1);
            if ( (LA99_0==AS) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    {
                    AS269=(Token)match(input,AS,FOLLOW_AS_in_createContextExpr4528); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS269);
                    }
                    break;
            }
            pushFollow(FOLLOW_createContextDetail_in_createContextExpr4531);
            createContextDetail270=createContextDetail();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createContextDetail.add(createContextDetail270.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX, "CREATE_CTX"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_createContextDetail.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextDetail_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextDetail_return createContextDetail() throws RecognitionException {
        EsperEPL2GrammarParser.createContextDetail_return retval = new EsperEPL2GrammarParser.createContextDetail_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA273=null;
        Token COMMA275=null;
        EsperEPL2GrammarParser.createContextChoice_return createContextChoice271 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested272 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested274 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested276 = null;
        CommonTree COMMA273_tree=null;
        CommonTree COMMA275_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_contextContextNested=new RewriteRuleSubtreeStream(adaptor,"rule contextContextNested");
        try {
            int alt101=2;
            int LA101_0 = input.LA(1);
            if ( (LA101_0==COALESCE||LA101_0==GROUP||LA101_0==PARTITION||LA101_0==START||LA101_0==INITIATED) ) {
                alt101=1;
            }
            else if ( (LA101_0==CONTEXT) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);
                throw nvae;
            }
            switch (alt101) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createContextChoice_in_createContextDetail4555);
                    createContextChoice271=createContextChoice();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextChoice271.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_contextContextNested_in_createContextDetail4560);
                    contextContextNested272=contextContextNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested272.getTree());
                    COMMA273=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail4562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA273);
                    pushFollow(FOLLOW_contextContextNested_in_createContextDetail4564);
                    contextContextNested274=contextContextNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested274.getTree());
                    loop100:
                    do {
                        int alt100=2;
                        int LA100_0 = input.LA(1);
                        if ( (LA100_0==COMMA) ) {
                            alt100=1;
                        }
                        switch (alt100) {
                    	case 1 :
                    	    {
                    	    COMMA275=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail4567); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA275);
                    	    pushFollow(FOLLOW_contextContextNested_in_createContextDetail4569);
                    	    contextContextNested276=contextContextNested();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested276.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop100;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_NESTED, "CREATE_CTX_NESTED"), root_1);
                        if ( !(stream_contextContextNested.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_contextContextNested.hasNext() ) {
                            adaptor.addChild(root_1, stream_contextContextNested.nextTree());
                        }
                        stream_contextContextNested.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class contextContextNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.contextContextNested_return contextContextNested() throws RecognitionException {
        EsperEPL2GrammarParser.contextContextNested_return retval = new EsperEPL2GrammarParser.contextContextNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CONTEXT277=null;
        Token AS278=null;
        EsperEPL2GrammarParser.createContextChoice_return createContextChoice279 = null;
        CommonTree name_tree=null;
        CommonTree CONTEXT277_tree=null;
        CommonTree AS278_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        RewriteRuleSubtreeStream stream_createContextChoice=new RewriteRuleSubtreeStream(adaptor,"rule createContextChoice");
        try {
            {
            CONTEXT277=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextContextNested4595); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT277);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_contextContextNested4599); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt102=2;
            int LA102_0 = input.LA(1);
            if ( (LA102_0==AS) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    {
                    AS278=(Token)match(input,AS,FOLLOW_AS_in_contextContextNested4601); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS278);
                    }
                    break;
            }
            pushFollow(FOLLOW_createContextChoice_in_contextContextNested4604);
            createContextChoice279=createContextChoice();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createContextChoice.add(createContextChoice279.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX, "CREATE_CTX"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_createContextChoice.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextChoice_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextChoice_return createContextChoice() throws RecognitionException {
        EsperEPL2GrammarParser.createContextChoice_return retval = new EsperEPL2GrammarParser.createContextChoice_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token g=null;
        Token p=null;
        Token START280=null;
        Token END282=null;
        Token INITIATED284=null;
        Token BY285=null;
        Token TERMINATED287=null;
        Token BY288=null;
        Token PARTITION290=null;
        Token BY291=null;
        Token COMMA293=null;
        Token COMMA296=null;
        Token FROM298=null;
        Token COALESCE300=null;
        Token BY301=null;
        Token COMMA303=null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint281 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint283 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint286 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint289 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem292 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem294 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem295 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem297 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression299 = null;
        EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem302 = null;
        EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem304 = null;
        EsperEPL2GrammarParser.number_return number305 = null;
        CommonTree g_tree=null;
        CommonTree p_tree=null;
        CommonTree START280_tree=null;
        CommonTree END282_tree=null;
        CommonTree INITIATED284_tree=null;
        CommonTree BY285_tree=null;
        CommonTree TERMINATED287_tree=null;
        CommonTree BY288_tree=null;
        CommonTree PARTITION290_tree=null;
        CommonTree BY291_tree=null;
        CommonTree COMMA293_tree=null;
        CommonTree COMMA296_tree=null;
        CommonTree FROM298_tree=null;
        CommonTree COALESCE300_tree=null;
        CommonTree BY301_tree=null;
        CommonTree COMMA303_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INITIATED=new RewriteRuleTokenStream(adaptor,"token INITIATED");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_START=new RewriteRuleTokenStream(adaptor,"token START");
        RewriteRuleTokenStream stream_COALESCE=new RewriteRuleTokenStream(adaptor,"token COALESCE");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_createContextRangePoint=new RewriteRuleSubtreeStream(adaptor,"rule createContextRangePoint");
        RewriteRuleSubtreeStream stream_createContextPartitionItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextPartitionItem");
        RewriteRuleSubtreeStream stream_createContextCoalesceItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextCoalesceItem");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_createContextGroupItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextGroupItem");
        try {
            int alt111=5;
            switch ( input.LA(1) ) {
            case START:
                {
                alt111=1;
                }
                break;
            case INITIATED:
                {
                alt111=2;
                }
                break;
            case PARTITION:
                {
                alt111=3;
                }
                break;
            case GROUP:
                {
                alt111=4;
                }
                break;
            case COALESCE:
                {
                alt111=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);
                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    {
                    START280=(Token)match(input,START,FOLLOW_START_in_createContextChoice4629); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_START.add(START280);
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice4631);
                    createContextRangePoint281=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint281.getTree());
                    END282=(Token)match(input,END,FOLLOW_END_in_createContextChoice4633); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END282);
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice4635);
                    createContextRangePoint283=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint283.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_FIXED, "CREATE_CTX_FIXED"), root_1);
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    INITIATED284=(Token)match(input,INITIATED,FOLLOW_INITIATED_in_createContextChoice4652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INITIATED.add(INITIATED284);
                    int alt103=2;
                    int LA103_0 = input.LA(1);
                    if ( (LA103_0==BY) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            {
                            BY285=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice4655); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY285);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice4659);
                    createContextRangePoint286=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint286.getTree());
                    TERMINATED287=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_createContextChoice4661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED287);
                    int alt104=2;
                    int LA104_0 = input.LA(1);
                    if ( (LA104_0==BY) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            {
                            BY288=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice4664); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY288);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice4668);
                    createContextRangePoint289=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint289.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_INIT, "CREATE_CTX_INIT"), root_1);
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    PARTITION290=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_createContextChoice4685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION290);
                    int alt105=2;
                    int LA105_0 = input.LA(1);
                    if ( (LA105_0==BY) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            {
                            BY291=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice4688); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY291);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextPartitionItem_in_createContextChoice4692);
                    createContextPartitionItem292=createContextPartitionItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem292.getTree());
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);
                        if ( (LA106_0==COMMA) ) {
                            int LA106_3 = input.LA(2);
                            if ( (LA106_3==CONTEXT) ) {
                                int LA106_4 = input.LA(3);
                                if ( (LA106_4==AND_EXPR||LA106_4==FROM||LA106_4==LBRACK||LA106_4==LPAREN||LA106_4==COMMA||LA106_4==DOT||LA106_4==QUESTION||LA106_4==ESCAPECHAR) ) {
                                    alt106=1;
                                }
                            }
                            else if ( (LA106_3==WINDOW||LA106_3==ESCAPE||LA106_3==EVERY_EXPR||(LA106_3>=SUM && LA106_3<=COUNT)||LA106_3==OUTER||(LA106_3>=JOIN && LA106_3<=FULL)||(LA106_3>=EVENTS && LA106_3<=LAST)||(LA106_3>=UNIDIRECTIONAL && LA106_3<=PREVIOUSTAIL)||LA106_3==PRIOR||(LA106_3>=WEEKDAY && LA106_3<=CAST)||LA106_3==SNAPSHOT||(LA106_3>=VARIABLE && LA106_3<=INDEX)||(LA106_3>=DEFINE && LA106_3<=MATCHES)||LA106_3==WHILE||(LA106_3>=MERGE && LA106_3<=MATCHED)||LA106_3==IDENT||LA106_3==TICKED_STRING_LITERAL) ) {
                                alt106=1;
                            }
                        }
                        switch (alt106) {
                    	case 1 :
                    	    {
                    	    COMMA293=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice4695); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA293);
                    	    pushFollow(FOLLOW_createContextPartitionItem_in_createContextChoice4697);
                    	    createContextPartitionItem294=createContextPartitionItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem294.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop106;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_PART, "CREATE_CTX_PART"), root_1);
                        if ( !(stream_createContextPartitionItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextPartitionItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextPartitionItem.nextTree());
                        }
                        stream_createContextPartitionItem.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createContextGroupItem_in_createContextChoice4716);
                    createContextGroupItem295=createContextGroupItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem295.getTree());
                    loop107:
                    do {
                        int alt107=2;
                        int LA107_0 = input.LA(1);
                        if ( (LA107_0==COMMA) ) {
                            alt107=1;
                        }
                        switch (alt107) {
                    	case 1 :
                    	    {
                    	    COMMA296=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice4719); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA296);
                    	    pushFollow(FOLLOW_createContextGroupItem_in_createContextChoice4721);
                    	    createContextGroupItem297=createContextGroupItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem297.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop107;
                        }
                    } while (true);
                    FROM298=(Token)match(input,FROM,FOLLOW_FROM_in_createContextChoice4725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM298);
                    pushFollow(FOLLOW_eventFilterExpression_in_createContextChoice4727);
                    eventFilterExpression299=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression299.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CAT, "CREATE_CTX_CAT"), root_1);
                        if ( !(stream_createContextGroupItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextGroupItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextGroupItem.nextTree());
                        }
                        stream_createContextGroupItem.reset();
                        adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    COALESCE300=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_createContextChoice4745); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COALESCE.add(COALESCE300);
                    int alt108=2;
                    int LA108_0 = input.LA(1);
                    if ( (LA108_0==BY) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            {
                            BY301=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice4748); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY301);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextCoalesceItem_in_createContextChoice4752);
                    createContextCoalesceItem302=createContextCoalesceItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextCoalesceItem.add(createContextCoalesceItem302.getTree());
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);
                        if ( (LA109_0==COMMA) ) {
                            alt109=1;
                        }
                        switch (alt109) {
                    	case 1 :
                    	    {
                    	    COMMA303=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice4755); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA303);
                    	    pushFollow(FOLLOW_createContextCoalesceItem_in_createContextChoice4757);
                    	    createContextCoalesceItem304=createContextCoalesceItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextCoalesceItem.add(createContextCoalesceItem304.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop109;
                        }
                    } while (true);
                    g=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice4763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(g);
                    pushFollow(FOLLOW_number_in_createContextChoice4765);
                    number305=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number305.getTree());
                    int alt110=2;
                    int LA110_0 = input.LA(1);
                    if ( (LA110_0==IDENT) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            {
                            p=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice4770); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(p);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_COAL, "CREATE_CTX_COAL"), root_1);
                        if ( !(stream_createContextCoalesceItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextCoalesceItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextCoalesceItem.nextTree());
                        }
                        stream_createContextCoalesceItem.reset();
                        adaptor.addChild(root_1, stream_g.nextNode());
                        adaptor.addChild(root_1, stream_number.nextTree());
                        if ( stream_p.hasNext() ) {
                            adaptor.addChild(root_1, stream_p.nextNode());
                        }
                        stream_p.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextRangePoint_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint() throws RecognitionException {
        EsperEPL2GrammarParser.createContextRangePoint_return retval = new EsperEPL2GrammarParser.createContextRangePoint_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR308=null;
        Token AFTER310=null;
        EsperEPL2GrammarParser.createContextFilter_return createContextFilter306 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression307 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet309 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod311 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR308_tree=null;
        CommonTree AFTER310_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            int alt113=4;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt113=1;
                }
                break;
            case PATTERN:
                {
                alt113=2;
                }
                break;
            case LPAREN:
                {
                alt113=3;
                }
                break;
            case AFTER:
                {
                alt113=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);
                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createContextFilter_in_createContextRangePoint4804);
                    createContextFilter306=createContextFilter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextFilter306.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_createContextRangePoint4811);
                    patternInclusionExpression307=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression307.getTree());
                    int alt112=2;
                    int LA112_0 = input.LA(1);
                    if ( (LA112_0==ATCHAR) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            {
                            ATCHAR308=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_createContextRangePoint4814); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR308);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextRangePoint4818); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_PATTERN, "CREATE_CTX_PATTERN"), root_1);
                        adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_createContextRangePoint4837);
                    crontabLimitParameterSet309=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, crontabLimitParameterSet309.getTree());
                    }
                    break;
                case 4 :
                    {
                    AFTER310=(Token)match(input,AFTER,FOLLOW_AFTER_in_createContextRangePoint4842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(AFTER310);
                    pushFollow(FOLLOW_timePeriod_in_createContextRangePoint4844);
                    timePeriod311=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod311.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_timePeriod.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextFilter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextFilter_return createContextFilter() throws RecognitionException {
        EsperEPL2GrammarParser.createContextFilter_return retval = new EsperEPL2GrammarParser.createContextFilter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS313=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression312 = null;
        CommonTree i_tree=null;
        CommonTree AS313_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_createContextFilter4864);
            eventFilterExpression312=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression312.getTree());
            int alt115=2;
            int LA115_0 = input.LA(1);
            if ( (LA115_0==AS||LA115_0==IDENT) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    {
                    int alt114=2;
                    int LA114_0 = input.LA(1);
                    if ( (LA114_0==AS) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            {
                            AS313=(Token)match(input,AS,FOLLOW_AS_in_createContextFilter4867); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS313);
                            }
                            break;
                    }
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextFilter4872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextPartitionItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextPartitionItem_return retval = new EsperEPL2GrammarParser.createContextPartitionItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR315=null;
        Token COMMA316=null;
        Token FROM318=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty314 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty317 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression319 = null;
        CommonTree AND_EXPR315_tree=null;
        CommonTree COMMA316_tree=null;
        CommonTree FROM318_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem4899);
            eventProperty314=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty314.getTree());
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);
                if ( (LA117_0==AND_EXPR||LA117_0==COMMA) ) {
                    alt117=1;
                }
                switch (alt117) {
            	case 1 :
            	    {
            	    int alt116=2;
            	    int LA116_0 = input.LA(1);
            	    if ( (LA116_0==AND_EXPR) ) {
            	        alt116=1;
            	    }
            	    else if ( (LA116_0==COMMA) ) {
            	        alt116=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 116, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt116) {
            	        case 1 :
            	            {
            	            AND_EXPR315=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_createContextPartitionItem4903); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR315);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            COMMA316=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextPartitionItem4905); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_COMMA.add(COMMA316);
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem4908);
            	    eventProperty317=eventProperty();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty317.getTree());
            	    }
            	    break;
            	default :
            	    break loop117;
                }
            } while (true);
            FROM318=(Token)match(input,FROM,FOLLOW_FROM_in_createContextPartitionItem4912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM318);
            pushFollow(FOLLOW_eventFilterExpression_in_createContextPartitionItem4914);
            eventFilterExpression319=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression319.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_eventProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventProperty.nextTree());
                }
                stream_eventProperty.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextCoalesceItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextCoalesceItem_return retval = new EsperEPL2GrammarParser.createContextCoalesceItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FROM321=null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass320 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression322 = null;
        CommonTree FROM321_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionNoClass_in_createContextCoalesceItem4940);
            libFunctionNoClass320=libFunctionNoClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass320.getTree());
            FROM321=(Token)match(input,FROM,FOLLOW_FROM_in_createContextCoalesceItem4942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM321);
            pushFollow(FOLLOW_eventFilterExpression_in_createContextCoalesceItem4944);
            eventFilterExpression322=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression322.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COALESCE, "COALESCE"), root_1);
                adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextGroupItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextGroupItem_return retval = new EsperEPL2GrammarParser.createContextGroupItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token GROUP323=null;
        Token BY324=null;
        Token AS326=null;
        EsperEPL2GrammarParser.expression_return expression325 = null;
        CommonTree i_tree=null;
        CommonTree GROUP323_tree=null;
        CommonTree BY324_tree=null;
        CommonTree AS326_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            GROUP323=(Token)match(input,GROUP,FOLLOW_GROUP_in_createContextGroupItem4968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GROUP.add(GROUP323);
            int alt118=2;
            int LA118_0 = input.LA(1);
            if ( (LA118_0==BY) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    {
                    BY324=(Token)match(input,BY,FOLLOW_BY_in_createContextGroupItem4970); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY324);
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_createContextGroupItem4973);
            expression325=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression325.getTree());
            AS326=(Token)match(input,AS,FOLLOW_AS_in_createContextGroupItem4975); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS326);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextGroupItem4979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CATITEM, "CREATE_CTX_CATITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaQual_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaQual_return retval = new EsperEPL2GrammarParser.createSchemaQual_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.columnList_return columnList327 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaQual5009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_columnList_in_createSchemaQual5011);
            columnList327=columnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList327.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA329=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement328 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement330 = null;
        CommonTree COMMA329_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList5037);
            variantListElement328=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement328.getTree());
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);
                if ( (LA119_0==COMMA) ) {
                    alt119=1;
                }
                switch (alt119) {
            	case 1 :
            	    {
            	    COMMA329=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList5040); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA329);
            	    pushFollow(FOLLOW_variantListElement_in_variantList5042);
            	    variantListElement330=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement330.getTree());
            	    }
            	    break;
            	default :
            	    break loop119;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR331=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier332 = null;
        CommonTree STAR331_tree=null;
        try {
            int alt120=2;
            int LA120_0 = input.LA(1);
            if ( (LA120_0==STAR) ) {
                alt120=1;
            }
            else if ( (LA120_0==IDENT||LA120_0==TICKED_STRING_LITERAL) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);
                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR331=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement5069); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR331_tree = (CommonTree)adaptor.create(STAR331);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR331_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement5075);
                    classIdentifier332=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier332.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token INTO333=null;
        Token LPAREN335=null;
        Token RPAREN337=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier334 = null;
        EsperEPL2GrammarParser.columnList_return columnList336 = null;
        CommonTree s_tree=null;
        CommonTree INTO333_tree=null;
        CommonTree LPAREN335_tree=null;
        CommonTree RPAREN337_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt121=3;
            int LA121_0 = input.LA(1);
            if ( (LA121_0==ISTREAM) ) {
                alt121=1;
            }
            else if ( (LA121_0==RSTREAM) ) {
                alt121=2;
            }
            switch (alt121) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr5100); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr5106); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO333=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr5110); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO333);
            pushFollow(FOLLOW_classIdentifier_in_insertIntoExpr5112);
            classIdentifier334=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier334.getTree());
            int alt122=2;
            int LA122_0 = input.LA(1);
            if ( (LA122_0==LPAREN) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    {
                    LPAREN335=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr5115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN335);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr5117);
                    columnList336=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList336.getTree());
                    RPAREN337=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr5119); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN337);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT338=null;
        Token COMMA339=null;
        Token IDENT340=null;
        CommonTree IDENT338_tree=null;
        CommonTree COMMA339_tree=null;
        CommonTree IDENT340_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT338=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList5152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT338);
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);
                if ( (LA123_0==COMMA) ) {
                    alt123=1;
                }
                switch (alt123) {
            	case 1 :
            	    {
            	    COMMA339=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList5155); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA339);
            	    IDENT340=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList5157); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT340);
            	    }
            	    break;
            	default :
            	    break loop123;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression341 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin342 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList343 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause5195);
            streamExpression341=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression341.getTree());
            int alt124=2;
            int LA124_0 = input.LA(1);
            if ( (LA124_0==EOF||LA124_0==WHERE||(LA124_0>=GROUP && LA124_0<=HAVING)||LA124_0==OUTPUT||LA124_0==ORDER||LA124_0==ROW_LIMIT_EXPR||LA124_0==MATCH_RECOGNIZE||LA124_0==FOR||LA124_0==COMMA) ) {
                alt124=1;
            }
            else if ( ((LA124_0>=INNER && LA124_0<=FULL)) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);
                throw nvae;
            }
            switch (alt124) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause5198);
                    regularJoin342=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin342.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause5202);
                    outerJoinList343=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList343.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA344=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression345 = null;
        CommonTree COMMA344_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);
                if ( (LA125_0==COMMA) ) {
                    alt125=1;
                }
                switch (alt125) {
            	case 1 :
            	    {
            	    COMMA344=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin5216); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin5219);
            	    streamExpression345=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression345.getTree());
            	    }
            	    break;
            	default :
            	    break loop125;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin346 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin347 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList5233);
            outerJoin346=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin346.getTree());
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);
                if ( ((LA126_0>=INNER && LA126_0<=FULL)) ) {
                    alt126=1;
                }
                switch (alt126) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList5236);
            	    outerJoin347=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin347.getTree());
            	    }
            	    break;
            	default :
            	    break loop126;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER348=null;
        Token JOIN349=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression350 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent351 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER348_tree=null;
        CommonTree JOIN349_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt129=2;
            int LA129_0 = input.LA(1);
            if ( ((LA129_0>=JOIN && LA129_0<=FULL)) ) {
                alt129=1;
            }
            else if ( (LA129_0==INNER) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);
                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    {
                    int alt128=2;
                    int LA128_0 = input.LA(1);
                    if ( ((LA128_0>=LEFT && LA128_0<=FULL)) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            {
                            int alt127=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt127=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt127=2;
                                }
                                break;
                            case FULL:
                                {
                                alt127=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 127, 0, input);
                                throw nvae;
                            }
                            switch (alt127) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin5279); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin5283); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin5287); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER348=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin5290); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER348);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin5311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN349=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin5325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN349);
            pushFollow(FOLLOW_streamExpression_in_outerJoin5327);
            streamExpression350=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression350.getTree());
            int alt130=2;
            int LA130_0 = input.LA(1);
            if ( (LA130_0==ON) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outerJoinIdent_in_outerJoin5329);
                    outerJoinIdent351=outerJoinIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent351.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON352=null;
        Token AND_EXPR354=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair353 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair355 = null;
        CommonTree ON352_tree=null;
        CommonTree AND_EXPR354_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON352=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent5407); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent5410);
            outerJoinIdentPair353=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair353.getTree());
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);
                if ( (LA131_0==AND_EXPR) ) {
                    alt131=1;
                }
                switch (alt131) {
            	case 1 :
            	    {
            	    AND_EXPR354=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent5413); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent5416);
            	    outerJoinIdentPair355=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair355.getTree());
            	    }
            	    break;
            	default :
            	    break loop131;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS357=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty356 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty358 = null;
        CommonTree EQUALS357_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair5431);
            eventProperty356=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty356.getTree());
            EQUALS357=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair5433); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair5436);
            eventProperty358=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty358.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression359 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause5458);
            evalOrExpression359=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression359.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList360 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt132=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt132=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt132=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt132=3;
                    }
                    break;
            }
            switch (alt132) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause5494); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause5500); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause5506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt133=2;
            int LA133_0 = input.LA(1);
            if ( (LA133_0==DISTINCT) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause5512); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause5515);
            selectionList360=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList360.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA362=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement361 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement363 = null;
        CommonTree COMMA362_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList5546);
            selectionListElement361=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement361.getTree());
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);
                if ( (LA134_0==COMMA) ) {
                    alt134=1;
                }
                switch (alt134) {
            	case 1 :
            	    {
            	    COMMA362=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList5549); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList5552);
            	    selectionListElement363=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement363.getTree());
            	    }
            	    break;
            	default :
            	    break loop134;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS366=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector364 = null;
        EsperEPL2GrammarParser.expression_return expression365 = null;
        CommonTree s_tree=null;
        CommonTree AS366_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt136=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt136=1;
                }
                break;
            case IDENT:
                {
                int LA136_2 = input.LA(2);
                if ( (LA136_2==DOT) ) {
                    int LA136_75 = input.LA(3);
                    if ( (LA136_75==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt136=2;
                    }
                    else if ( (LA136_75==WINDOW||LA136_75==BETWEEN||LA136_75==ESCAPE||LA136_75==EVERY_EXPR||LA136_75==WHERE||(LA136_75>=SUM && LA136_75<=COUNT)||LA136_75==OUTER||(LA136_75>=JOIN && LA136_75<=FULL)||(LA136_75>=EVENTS && LA136_75<=LAST)||(LA136_75>=UNIDIRECTIONAL && LA136_75<=PREVIOUSTAIL)||LA136_75==PRIOR||(LA136_75>=WEEKDAY && LA136_75<=CAST)||(LA136_75>=SNAPSHOT && LA136_75<=INDEX)||(LA136_75>=DEFINE && LA136_75<=AFTER)||LA136_75==WHILE||(LA136_75>=MERGE && LA136_75<=MATCHED)||LA136_75==CONTEXT||LA136_75==IDENT||LA136_75==TICKED_STRING_LITERAL) ) {
                        alt136=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 136, 75, input);
                        throw nvae;
                    }
                }
                else if ( (LA136_2==EOF||(LA136_2>=IN_SET && LA136_2<=REGEXP)||(LA136_2>=OR_EXPR && LA136_2<=NOT_EXPR)||(LA136_2>=WHERE && LA136_2<=AS)||(LA136_2>=WHEN && LA136_2<=THEN)||LA136_2==FROM||LA136_2==IS||(LA136_2>=GROUP && LA136_2<=HAVING)||LA136_2==OUTPUT||LA136_2==INSERT||LA136_2==ORDER||LA136_2==ROW_LIMIT_EXPR||LA136_2==FOR||LA136_2==LBRACK||LA136_2==LPAREN||(LA136_2>=COMMA && LA136_2<=EQUALS)||LA136_2==STAR||(LA136_2>=BOR && LA136_2<=QUESTION)||(LA136_2>=BAND && LA136_2<=MOD)||LA136_2==ESCAPECHAR) ) {
                    alt136=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt136=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);
                throw nvae;
            }
            switch (alt136) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement5578); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement5596);
                    streamSelector364=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector364.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement5601);
                    expression365=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression365.getTree());
                    int alt135=2;
                    int LA135_0 = input.LA(1);
                    if ( (LA135_0==AS) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            {
                            AS366=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement5604); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS366);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement5608);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT367=null;
        Token STAR368=null;
        Token AS369=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT367_tree=null;
        CommonTree STAR368_tree=null;
        CommonTree AS369_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector5664); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT367=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector5666); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT367);
            STAR368=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector5668); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR368);
            int alt137=2;
            int LA137_0 = input.LA(1);
            if ( (LA137_0==AS) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    {
                    AS369=(Token)match(input,AS,FOLLOW_AS_in_streamSelector5671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS369);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector5675); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT374=null;
        Token DOT376=null;
        Token AS378=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression370 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression371 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression372 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression373 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression375 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression377 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT374_tree=null;
        CommonTree DOT376_tree=null;
        CommonTree AS378_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt138=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA138_1 = input.LA(2);
                if ( (LA138_1==EOF||(LA138_1>=WHERE && LA138_1<=AS)||(LA138_1>=INNER && LA138_1<=ON)||(LA138_1>=GROUP && LA138_1<=HAVING)||LA138_1==OUTPUT||LA138_1==ORDER||(LA138_1>=UNIDIRECTIONAL && LA138_1<=RETAININTERSECTION)||LA138_1==ROW_LIMIT_EXPR||LA138_1==MATCH_RECOGNIZE||LA138_1==FOR||LA138_1==LBRACK||(LA138_1>=IDENT && LA138_1<=LPAREN)||(LA138_1>=COMMA && LA138_1<=DOT)) ) {
                    alt138=1;
                }
                else if ( (LA138_1==COLON) ) {
                    alt138=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 138, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt138=1;
                }
                break;
            case PATTERN:
                {
                alt138=2;
                }
                break;
            case SQL:
                {
                alt138=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);
                throw nvae;
            }
            switch (alt138) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression5706);
                    eventFilterExpression370=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression370.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression5710);
                    patternInclusionExpression371=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression371.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression5714);
                    databaseJoinExpression372=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression372.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression5718);
                    methodJoinExpression373=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression373.getTree());
                    }
                    break;
            }
            int alt140=2;
            int LA140_0 = input.LA(1);
            if ( (LA140_0==DOT) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    {
                    DOT374=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression5725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT374);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression5727);
                    viewExpression375=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression375.getTree());
                    loop139:
                    do {
                        int alt139=2;
                        int LA139_0 = input.LA(1);
                        if ( (LA139_0==DOT) ) {
                            alt139=1;
                        }
                        switch (alt139) {
                    	case 1 :
                    	    {
                    	    DOT376=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression5730); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT376);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression5732);
                    	    viewExpression377=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression377.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop139;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt141=3;
            int LA141_0 = input.LA(1);
            if ( (LA141_0==AS) ) {
                alt141=1;
            }
            else if ( (LA141_0==IDENT) ) {
                alt141=2;
            }
            switch (alt141) {
                case 1 :
                    {
                    AS378=(Token)match(input,AS,FOLLOW_AS_in_streamExpression5739); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS378);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression5743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression5749); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt142=2;
            int LA142_0 = input.LA(1);
            if ( (LA142_0==UNIDIRECTIONAL) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression5756); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt143=3;
            int LA143_0 = input.LA(1);
            if ( (LA143_0==RETAINUNION) ) {
                alt143=1;
            }
            else if ( (LA143_0==RETAININTERSECTION) ) {
                alt143=2;
            }
            switch (alt143) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression5763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression5767); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR379=null;
        Token LPAREN380=null;
        Token RPAREN382=null;
        EsperEPL2GrammarParser.expressionList_return expressionList381 = null;
        CommonTree i_tree=null;
        CommonTree FOR379_tree=null;
        CommonTree LPAREN380_tree=null;
        CommonTree RPAREN382_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR379=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr5823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR379);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr5827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt145=2;
            int LA145_0 = input.LA(1);
            if ( (LA145_0==LPAREN) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    {
                    LPAREN380=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr5830); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN380);
                    int alt144=2;
                    int LA144_0 = input.LA(1);
                    if ( (LA144_0==WINDOW||LA144_0==BETWEEN||LA144_0==ESCAPE||(LA144_0>=NOT_EXPR && LA144_0<=EVERY_EXPR)||LA144_0==WHERE||(LA144_0>=SUM && LA144_0<=COUNT)||LA144_0==CASE||LA144_0==OUTER||(LA144_0>=JOIN && LA144_0<=FULL)||(LA144_0>=EVENTS && LA144_0<=LAST)||(LA144_0>=UNIDIRECTIONAL && LA144_0<=CURRENT_TIMESTAMP)||(LA144_0>=SNAPSHOT && LA144_0<=INDEX)||(LA144_0>=BOOLEAN_TRUE && LA144_0<=VALUE_NULL)||(LA144_0>=DEFINE && LA144_0<=AFTER)||LA144_0==WHILE||(LA144_0>=MERGE && LA144_0<=MATCHED)||LA144_0==NEWKW||LA144_0==CONTEXT||LA144_0==NUM_DOUBLE||(LA144_0>=IDENT && LA144_0<=LPAREN)||LA144_0==LCURLY||(LA144_0>=PLUS && LA144_0<=QUOTED_STRING_LITERAL)||LA144_0==MINUS||LA144_0==NUM_INT||(LA144_0>=TICKED_STRING_LITERAL && LA144_0<=NUM_FLOAT)) ) {
                        alt144=1;
                    }
                    switch (alt144) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr5832);
                            expressionList381=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList381.getTree());
                            }
                            break;
                    }
                    RPAREN382=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr5835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN382);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE383=null;
        Token LPAREN384=null;
        Token RPAREN392=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy385 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures386 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection387 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip388 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern389 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval390 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine391 = null;
        CommonTree MATCH_RECOGNIZE383_tree=null;
        CommonTree LPAREN384_tree=null;
        CommonTree RPAREN392_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE383=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog5871); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE383);
            LPAREN384=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog5885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN384);
            int alt146=2;
            int LA146_0 = input.LA(1);
            if ( (LA146_0==PARTITION) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog5891);
                    matchRecogPartitionBy385=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy385.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog5898);
            matchRecogMeasures386=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures386.getTree());
            int alt147=2;
            int LA147_0 = input.LA(1);
            if ( (LA147_0==ALL) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog5903);
                    matchRecogMatchesSelection387=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection387.getTree());
                    }
                    break;
            }
            int alt148=2;
            int LA148_0 = input.LA(1);
            if ( (LA148_0==AFTER) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5909);
                    matchRecogMatchesAfterSkip388=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip388.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog5915);
            matchRecogPattern389=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern389.getTree());
            int alt149=2;
            int LA149_0 = input.LA(1);
            if ( (LA149_0==IDENT) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog5921);
                    matchRecogMatchesInterval390=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval390.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog5927);
            matchRecogDefine391=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine391.getTree());
            RPAREN392=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog5934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN392);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION393=null;
        Token BY394=null;
        Token COMMA396=null;
        EsperEPL2GrammarParser.expression_return expression395 = null;
        EsperEPL2GrammarParser.expression_return expression397 = null;
        CommonTree PARTITION393_tree=null;
        CommonTree BY394_tree=null;
        CommonTree COMMA396_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION393=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy5971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION393);
            BY394=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy5973); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY394);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5975);
            expression395=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression395.getTree());
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);
                if ( (LA150_0==COMMA) ) {
                    alt150=1;
                }
                switch (alt150) {
            	case 1 :
            	    {
            	    COMMA396=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy5978); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA396);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5980);
            	    expression397=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression397.getTree());
            	    }
            	    break;
            	default :
            	    break loop150;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES398=null;
        Token COMMA400=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem399 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem401 = null;
        CommonTree MEASURES398_tree=null;
        CommonTree COMMA400_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES398=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures6009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES398);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures6011);
            matchRecogMeasureItem399=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem399.getTree());
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);
                if ( (LA151_0==COMMA) ) {
                    alt151=1;
                }
                switch (alt151) {
            	case 1 :
            	    {
            	    COMMA400=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures6014); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA400);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures6016);
            	    matchRecogMeasureItem401=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem401.getTree());
            	    }
            	    break;
            	default :
            	    break loop151;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS403=null;
        EsperEPL2GrammarParser.expression_return expression402 = null;
        CommonTree i_tree=null;
        CommonTree AS403_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem6041);
            expression402=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression402.getTree());
            int alt153=2;
            int LA153_0 = input.LA(1);
            if ( (LA153_0==AS) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    {
                    AS403=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem6044); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS403);
                    int alt152=2;
                    int LA152_0 = input.LA(1);
                    if ( (LA152_0==IDENT) ) {
                        alt152=1;
                    }
                    switch (alt152) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem6049); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL404=null;
        Token MATCHES405=null;
        CommonTree ALL404_tree=null;
        CommonTree MATCHES405_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL404=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection6080); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL404_tree = (CommonTree)adaptor.create(ALL404);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL404_tree, root_0);
            }
            MATCHES405=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection6083); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN406=null;
        Token LPAREN407=null;
        Token RPAREN409=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration408 = null;
        CommonTree PATTERN406_tree=null;
        CommonTree LPAREN407_tree=null;
        CommonTree RPAREN409_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN406=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern6098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN406);
            LPAREN407=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern6100); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN407);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern6102);
            matchRecogPatternAlteration408=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration408.getTree());
            RPAREN409=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern6104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN409);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER410=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER410_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER410=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip6126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER410);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6130);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6134);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6138);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6142);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6146);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod411 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval6182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval6184);
            timePeriod411=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod411.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat412 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat413 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration6210);
            matchRecogPatternConcat412=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat412.getTree());
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);
                if ( (LA154_0==BOR) ) {
                    alt154=1;
                }
                switch (alt154) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration6215); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration6217);
            	    matchRecogPatternConcat413=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat413.getTree());
            	    }
            	    break;
            	default :
            	    break loop154;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary414 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt155=0;
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);
                if ( ((LA155_0>=IDENT && LA155_0<=LPAREN)) ) {
                    alt155=1;
                }
                switch (alt155) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat6250);
            	    matchRecogPatternUnary414=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary414.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt155 >= 1 ) break loop155;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(155, input);
                        throw eee;
                }
                cnt155++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested415 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom416 = null;
        try {
            int alt156=2;
            int LA156_0 = input.LA(1);
            if ( (LA156_0==LPAREN) ) {
                alt156=1;
            }
            else if ( (LA156_0==IDENT) ) {
                alt156=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);
                throw nvae;
            }
            switch (alt156) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary6275);
                    matchRecogPatternNested415=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested415.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary6281);
                    matchRecogPatternAtom416=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom416.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN417=null;
        Token RPAREN419=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration418 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN417_tree=null;
        CommonTree RPAREN419_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN417=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested6293); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN417);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested6295);
            matchRecogPatternAlteration418=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration418.getTree());
            RPAREN419=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested6297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN419);
            int alt157=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt157=1;
                    }
                    break;
                case PLUS:
                    {
                    alt157=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt157=3;
                    }
                    break;
            }
            switch (alt157) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested6302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested6308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested6314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom6353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt160=2;
            int LA160_0 = input.LA(1);
            if ( (LA160_0==STAR||(LA160_0>=PLUS && LA160_0<=QUESTION)) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    {
                    int alt158=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt158=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt158=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt158=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 158, 0, input);
                        throw nvae;
                    }
                    switch (alt158) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom6359); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom6365); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom6371); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt159=2;
                    int LA159_0 = input.LA(1);
                    if ( (LA159_0==QUESTION) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom6377); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE420=null;
        Token COMMA422=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem421 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem423 = null;
        CommonTree DEFINE420_tree=null;
        CommonTree COMMA422_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE420=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine6421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE420);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine6423);
            matchRecogDefineItem421=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem421.getTree());
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);
                if ( (LA161_0==COMMA) ) {
                    alt161=1;
                }
                switch (alt161) {
            	case 1 :
            	    {
            	    COMMA422=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine6426); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA422);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine6428);
            	    matchRecogDefineItem423=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem423.getTree());
            	    }
            	    break;
            	default :
            	    break loop161;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS424=null;
        EsperEPL2GrammarParser.expression_return expression425 = null;
        CommonTree i_tree=null;
        CommonTree AS424_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem6455); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS424=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem6457); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS424);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem6459);
            expression425=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression425.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN426=null;
        Token LBRACK427=null;
        Token RBRACK429=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression428 = null;
        CommonTree PATTERN426_tree=null;
        CommonTree LBRACK427_tree=null;
        CommonTree RBRACK429_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN426=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression6484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN426);
            LBRACK427=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression6486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK427);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression6488);
            patternExpression428=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression428.getTree());
            RBRACK429=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression6490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK429);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL430=null;
        Token COLON431=null;
        Token LBRACK432=null;
        Token METADATASQL433=null;
        Token RBRACK434=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL430_tree=null;
        CommonTree COLON431_tree=null;
        CommonTree LBRACK432_tree=null;
        CommonTree METADATASQL433_tree=null;
        CommonTree RBRACK434_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL430=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression6523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL430);
            COLON431=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression6525); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON431);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression6529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK432=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression6531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK432);
            int alt162=2;
            int LA162_0 = input.LA(1);
            if ( (LA162_0==STRING_LITERAL) ) {
                alt162=1;
            }
            else if ( (LA162_0==QUOTED_STRING_LITERAL) ) {
                alt162=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);
                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression6536); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6542); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt164=2;
            int LA164_0 = input.LA(1);
            if ( (LA164_0==METADATASQL) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    {
                    METADATASQL433=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression6546); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL433);
                    int alt163=2;
                    int LA163_0 = input.LA(1);
                    if ( (LA163_0==STRING_LITERAL) ) {
                        alt163=1;
                    }
                    else if ( (LA163_0==QUOTED_STRING_LITERAL) ) {
                        alt163=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 163, 0, input);
                        throw nvae;
                    }
                    switch (alt163) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression6551); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6557); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK434=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression6562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK434);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON435=null;
        Token LPAREN437=null;
        Token RPAREN439=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier436 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList438 = null;
        CommonTree i_tree=null;
        CommonTree COLON435_tree=null;
        CommonTree LPAREN437_tree=null;
        CommonTree RPAREN439_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression6613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON435=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression6615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON435);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression6617);
            classIdentifier436=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier436.getTree());
            int alt166=2;
            int LA166_0 = input.LA(1);
            if ( (LA166_0==LPAREN) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    {
                    LPAREN437=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression6620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN437);
                    int alt165=2;
                    int LA165_0 = input.LA(1);
                    if ( (LA165_0==WINDOW||LA165_0==BETWEEN||LA165_0==ESCAPE||(LA165_0>=NOT_EXPR && LA165_0<=EVERY_EXPR)||LA165_0==WHERE||(LA165_0>=SUM && LA165_0<=COUNT)||LA165_0==CASE||LA165_0==OUTER||(LA165_0>=JOIN && LA165_0<=FULL)||(LA165_0>=EVENTS && LA165_0<=LAST)||(LA165_0>=UNIDIRECTIONAL && LA165_0<=CURRENT_TIMESTAMP)||(LA165_0>=SNAPSHOT && LA165_0<=INDEX)||(LA165_0>=BOOLEAN_TRUE && LA165_0<=VALUE_NULL)||(LA165_0>=DEFINE && LA165_0<=AFTER)||LA165_0==WHILE||(LA165_0>=MERGE && LA165_0<=MATCHED)||LA165_0==NEWKW||LA165_0==CONTEXT||LA165_0==NUM_DOUBLE||(LA165_0>=IDENT && LA165_0<=LPAREN)||LA165_0==LCURLY||(LA165_0>=PLUS && LA165_0<=QUOTED_STRING_LITERAL)||LA165_0==MINUS||LA165_0==NUM_INT||(LA165_0>=TICKED_STRING_LITERAL && LA165_0<=NUM_FLOAT)) ) {
                        alt165=1;
                    }
                    switch (alt165) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression6622);
                            expressionList438=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList438.getTree());
                            }
                            break;
                    }
                    RPAREN439=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression6625); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN439);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON440=null;
        Token LPAREN441=null;
        Token RPAREN443=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList442 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON440_tree=null;
        CommonTree LPAREN441_tree=null;
        CommonTree RPAREN443_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression6678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON440=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression6680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON440);
            int alt167=2;
            int LA167_0 = input.LA(1);
            if ( (LA167_0==IDENT) ) {
                alt167=1;
            }
            else if ( (LA167_0==MERGE) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);
                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression6685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression6689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN441=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression6692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN441);
            int alt168=2;
            int LA168_0 = input.LA(1);
            if ( (LA168_0==WINDOW||LA168_0==BETWEEN||LA168_0==ESCAPE||(LA168_0>=NOT_EXPR && LA168_0<=EVERY_EXPR)||LA168_0==WHERE||(LA168_0>=SUM && LA168_0<=COUNT)||LA168_0==CASE||LA168_0==OUTER||(LA168_0>=JOIN && LA168_0<=FULL)||(LA168_0>=EVENTS && LA168_0<=LAST)||(LA168_0>=UNIDIRECTIONAL && LA168_0<=CURRENT_TIMESTAMP)||(LA168_0>=SNAPSHOT && LA168_0<=INDEX)||(LA168_0>=BOOLEAN_TRUE && LA168_0<=VALUE_NULL)||(LA168_0>=DEFINE && LA168_0<=AFTER)||LA168_0==WHILE||(LA168_0>=MERGE && LA168_0<=MATCHED)||LA168_0==NEWKW||LA168_0==CONTEXT||LA168_0==NUM_DOUBLE||LA168_0==LBRACK||(LA168_0>=IDENT && LA168_0<=LPAREN)||LA168_0==LCURLY||LA168_0==STAR||(LA168_0>=PLUS && LA168_0<=QUOTED_STRING_LITERAL)||LA168_0==MINUS||LA168_0==NUM_INT||(LA168_0>=TICKED_STRING_LITERAL && LA168_0<=NUM_FLOAT)) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression6694);
                    expressionWithTimeList442=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList442.getTree());
                    }
                    break;
            }
            RPAREN443=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression6697); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN443);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA445=null;
        EsperEPL2GrammarParser.expression_return expression444 = null;
        EsperEPL2GrammarParser.expression_return expression446 = null;
        CommonTree COMMA445_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr6757);
            expression444=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression444.getTree());
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);
                if ( (LA169_0==COMMA) ) {
                    alt169=1;
                }
                switch (alt169) {
            	case 1 :
            	    {
            	    COMMA445=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr6760); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA445);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr6762);
            	    expression446=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression446.getTree());
            	    }
            	    break;
            	default :
            	    break loop169;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA448=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement447 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement449 = null;
        CommonTree COMMA448_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr6797);
            orderByListElement447=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement447.getTree());
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);
                if ( (LA170_0==COMMA) ) {
                    alt170=1;
                }
                switch (alt170) {
            	case 1 :
            	    {
            	    COMMA448=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr6800); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA448);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr6802);
            	    orderByListElement449=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement449.getTree());
            	    }
            	    break;
            	default :
            	    break loop170;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression450 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement6827);
            expression450=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression450.getTree());
            int alt171=3;
            int LA171_0 = input.LA(1);
            if ( (LA171_0==ASC) ) {
                alt171=1;
            }
            else if ( (LA171_0==DESC) ) {
                alt171=2;
            }
            switch (alt171) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement6832); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement6836); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression451 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause6874);
            evalOrExpression451=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression451.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token t=null;
        Token THEN457=null;
        Token TERMINATED459=null;
        Token AND_EXPR460=null;
        Token THEN462=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter452 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod453 = null;
        EsperEPL2GrammarParser.number_return number454 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet455 = null;
        EsperEPL2GrammarParser.expression_return expression456 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr458 = null;
        EsperEPL2GrammarParser.expression_return expression461 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr463 = null;
        EsperEPL2GrammarParser.outputLimitAndTerm_return outputLimitAndTerm464 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree t_tree=null;
        CommonTree THEN457_tree=null;
        CommonTree TERMINATED459_tree=null;
        CommonTree AND_EXPR460_tree=null;
        CommonTree THEN462_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_outputLimitAndTerm=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAndTerm");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt172=2;
            int LA172_0 = input.LA(1);
            if ( (LA172_0==AFTER) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit6912);
                    outputLimitAfter452=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter452.getTree());
                    }
                    break;
            }
            int alt173=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt173=1;
                    }
                    break;
                case FIRST:
                    {
                    alt173=2;
                    }
                    break;
                case LAST:
                    {
                    alt173=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt173=4;
                    }
                    break;
            }
            switch (alt173) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit6927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit6931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit6935); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit6939); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt179=5;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt179=1;
                }
                break;
            case AT:
                {
                alt179=2;
                }
                break;
            case WHEN:
                {
                int LA179_3 = input.LA(2);
                if ( (LA179_3==TERMINATED) ) {
                    alt179=4;
                }
                else if ( (LA179_3==WINDOW||LA179_3==BETWEEN||LA179_3==ESCAPE||(LA179_3>=NOT_EXPR && LA179_3<=EVERY_EXPR)||LA179_3==WHERE||(LA179_3>=SUM && LA179_3<=COUNT)||LA179_3==CASE||LA179_3==OUTER||(LA179_3>=JOIN && LA179_3<=FULL)||(LA179_3>=EVENTS && LA179_3<=LAST)||(LA179_3>=UNIDIRECTIONAL && LA179_3<=CURRENT_TIMESTAMP)||(LA179_3>=SNAPSHOT && LA179_3<=INDEX)||(LA179_3>=BOOLEAN_TRUE && LA179_3<=VALUE_NULL)||(LA179_3>=DEFINE && LA179_3<=AFTER)||LA179_3==WHILE||(LA179_3>=MERGE && LA179_3<=MATCHED)||LA179_3==NEWKW||LA179_3==CONTEXT||LA179_3==NUM_DOUBLE||(LA179_3>=IDENT && LA179_3<=LPAREN)||LA179_3==LCURLY||(LA179_3>=PLUS && LA179_3<=QUOTED_STRING_LITERAL)||LA179_3==MINUS||LA179_3==NUM_INT||(LA179_3>=TICKED_STRING_LITERAL && LA179_3<=NUM_FLOAT)) ) {
                    alt179=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 179, 3, input);
                    throw nvae;
                }
                }
                break;
            case EOF:
            case AND_EXPR:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt179=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);
                throw nvae;
            }
            switch (alt179) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit6970); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt175=2;
                    int LA175_0 = input.LA(1);
                    if ( (LA175_0==MINUS) && (synpred2_EsperEPL2Grammar())) {
                        alt175=1;
                    }
                    else if ( (LA175_0==PLUS) && (synpred2_EsperEPL2Grammar())) {
                        alt175=1;
                    }
                    else if ( (LA175_0==NUM_INT) ) {
                        int LA175_3 = input.LA(2);
                        if ( (LA175_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_3==EVENTS) ) {
                            alt175=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 175, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA175_0==NUM_LONG) ) {
                        int LA175_4 = input.LA(2);
                        if ( (LA175_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==EVENTS) ) {
                            alt175=2;
                        }
                        else if ( (LA175_4==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 175, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA175_0==NUM_FLOAT) ) {
                        int LA175_5 = input.LA(2);
                        if ( (LA175_5==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==EVENTS) ) {
                            alt175=2;
                        }
                        else if ( (LA175_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_5==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 175, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA175_0==NUM_DOUBLE) ) {
                        int LA175_6 = input.LA(2);
                        if ( (LA175_6==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==EVENTS) ) {
                            alt175=2;
                        }
                        else if ( (LA175_6==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_6==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 175, 6, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA175_0==IDENT) ) {
                        int LA175_7 = input.LA(2);
                        if ( (LA175_7==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==EVENTS) ) {
                            alt175=2;
                        }
                        else if ( (LA175_7==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else if ( (LA175_7==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt175=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 175, 7, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA175_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt175=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 175, 0, input);
                        throw nvae;
                    }
                    switch (alt175) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit6996);
                            timePeriod453=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod453.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt174=2;
                            int LA174_0 = input.LA(1);
                            if ( (LA174_0==NUM_DOUBLE||LA174_0==NUM_INT||(LA174_0>=NUM_LONG && LA174_0<=NUM_FLOAT)) ) {
                                alt174=1;
                            }
                            else if ( (LA174_0==IDENT) ) {
                                alt174=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 174, 0, input);
                                throw nvae;
                            }
                            switch (alt174) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit7007);
                                    number454=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number454.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit7013); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit7019); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit7050); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit7052);
                    crontabLimitParameterSet455=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet455.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit7069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit7071);
                    expression456=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression456.getTree());
                    int alt176=2;
                    int LA176_0 = input.LA(1);
                    if ( (LA176_0==THEN) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            {
                            THEN457=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit7074); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN457);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit7076);
                            onSetExpr458=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr458.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    t=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit7096); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(t);
                    TERMINATED459=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimit7098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED459);
                    int alt177=2;
                    int LA177_0 = input.LA(1);
                    if ( (LA177_0==AND_EXPR) ) {
                        int LA177_1 = input.LA(2);
                        if ( (LA177_1==WINDOW||LA177_1==BETWEEN||LA177_1==ESCAPE||(LA177_1>=NOT_EXPR && LA177_1<=EVERY_EXPR)||LA177_1==WHERE||(LA177_1>=SUM && LA177_1<=COUNT)||LA177_1==CASE||LA177_1==OUTER||(LA177_1>=JOIN && LA177_1<=FULL)||(LA177_1>=EVENTS && LA177_1<=LAST)||(LA177_1>=UNIDIRECTIONAL && LA177_1<=CURRENT_TIMESTAMP)||(LA177_1>=SNAPSHOT && LA177_1<=INDEX)||(LA177_1>=BOOLEAN_TRUE && LA177_1<=VALUE_NULL)||(LA177_1>=DEFINE && LA177_1<=AFTER)||LA177_1==WHILE||(LA177_1>=MERGE && LA177_1<=MATCHED)||LA177_1==NEWKW||LA177_1==CONTEXT||LA177_1==NUM_DOUBLE||(LA177_1>=IDENT && LA177_1<=LPAREN)||LA177_1==LCURLY||(LA177_1>=PLUS && LA177_1<=QUOTED_STRING_LITERAL)||LA177_1==MINUS||LA177_1==NUM_INT||(LA177_1>=TICKED_STRING_LITERAL && LA177_1<=NUM_FLOAT)) ) {
                            alt177=1;
                        }
                    }
                    switch (alt177) {
                        case 1 :
                            {
                            AND_EXPR460=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimit7101); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR460);
                            pushFollow(FOLLOW_expression_in_outputLimit7103);
                            expression461=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression461.getTree());
                            }
                            break;
                    }
                    int alt178=2;
                    int LA178_0 = input.LA(1);
                    if ( (LA178_0==THEN) ) {
                        alt178=1;
                    }
                    switch (alt178) {
                        case 1 :
                            {
                            THEN462=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit7108); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN462);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit7110);
                            onSetExpr463=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr463.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    }
                    break;
            }
            int alt180=2;
            int LA180_0 = input.LA(1);
            if ( (LA180_0==AND_EXPR) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAndTerm_in_outputLimit7143);
                    outputLimitAndTerm464=outputLimitAndTerm();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAndTerm.add(outputLimitAndTerm464.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (t != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TERM_LIMIT_EXPR, "TERM_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_TERMINATED.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAndTerm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAndTerm_return outputLimitAndTerm() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAndTerm_return retval = new EsperEPL2GrammarParser.outputLimitAndTerm_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR465=null;
        Token WHEN466=null;
        Token TERMINATED467=null;
        Token AND_EXPR468=null;
        Token THEN470=null;
        EsperEPL2GrammarParser.expression_return expression469 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr471 = null;
        CommonTree AND_EXPR465_tree=null;
        CommonTree WHEN466_tree=null;
        CommonTree TERMINATED467_tree=null;
        CommonTree AND_EXPR468_tree=null;
        CommonTree THEN470_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        try {
            {
            AND_EXPR465=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimitAndTerm7317); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR465);
            WHEN466=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimitAndTerm7319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN466);
            TERMINATED467=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimitAndTerm7321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED467);
            int alt181=2;
            int LA181_0 = input.LA(1);
            if ( (LA181_0==AND_EXPR) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    {
                    AND_EXPR468=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimitAndTerm7324); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR468);
                    pushFollow(FOLLOW_expression_in_outputLimitAndTerm7326);
                    expression469=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression469.getTree());
                    }
                    break;
            }
            int alt182=2;
            int LA182_0 = input.LA(1);
            if ( (LA182_0==THEN) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    {
                    THEN470=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimitAndTerm7331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THEN.add(THEN470);
                    pushFollow(FOLLOW_onSetExpr_in_outputLimitAndTerm7333);
                    onSetExpr471=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr471.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_TERMINATED.nextNode(), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS474=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod472 = null;
        EsperEPL2GrammarParser.number_return number473 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS474_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter7363); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt183=2;
            switch ( input.LA(1) ) {
            case IDENT:
            case PLUS:
            case QUESTION:
            case MINUS:
                {
                alt183=1;
                }
                break;
            case NUM_INT:
                {
                int LA183_3 = input.LA(2);
                if ( (LA183_3==MIN||(LA183_3>=TIMEPERIOD_YEAR && LA183_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt183=1;
                }
                else if ( (LA183_3==EVENTS) ) {
                    alt183=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 183, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA183_4 = input.LA(2);
                if ( (LA183_4==MIN||(LA183_4>=TIMEPERIOD_YEAR && LA183_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt183=1;
                }
                else if ( (LA183_4==EVENTS) ) {
                    alt183=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 183, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA183_5 = input.LA(2);
                if ( (LA183_5==MIN||(LA183_5>=TIMEPERIOD_YEAR && LA183_5<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt183=1;
                }
                else if ( (LA183_5==EVENTS) ) {
                    alt183=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 183, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA183_6 = input.LA(2);
                if ( (LA183_6==MIN||(LA183_6>=TIMEPERIOD_YEAR && LA183_6<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt183=1;
                }
                else if ( (LA183_6==EVENTS) ) {
                    alt183=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 183, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);
                throw nvae;
            }
            switch (alt183) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter7366);
                    timePeriod472=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod472.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter7370);
                    number473=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number473.getTree());
                    EVENTS474=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter7372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS474);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt184=2;
            int LA184_0 = input.LA(1);
            if ( (LA184_0==NUM_DOUBLE||LA184_0==PLUS||LA184_0==MINUS||LA184_0==NUM_INT||(LA184_0>=NUM_LONG && LA184_0<=NUM_FLOAT)) ) {
                alt184=1;
            }
            else if ( (LA184_0==IDENT) ) {
                alt184=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);
                throw nvae;
            }
            switch (alt184) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit7418);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit7424); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt187=2;
            int LA187_0 = input.LA(1);
            if ( (LA187_0==OFFSET||LA187_0==COMMA) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    {
                    int alt185=2;
                    int LA185_0 = input.LA(1);
                    if ( (LA185_0==COMMA) ) {
                        alt185=1;
                    }
                    else if ( (LA185_0==OFFSET) ) {
                        alt185=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 185, 0, input);
                        throw nvae;
                    }
                    switch (alt185) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit7431); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit7437); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt186=2;
                    int LA186_0 = input.LA(1);
                    if ( (LA186_0==NUM_DOUBLE||LA186_0==PLUS||LA186_0==MINUS||LA186_0==NUM_INT||(LA186_0>=NUM_LONG && LA186_0<=NUM_FLOAT)) ) {
                        alt186=1;
                    }
                    else if ( (LA186_0==IDENT) ) {
                        alt186=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 186, 0, input);
                        throw nvae;
                    }
                    switch (alt186) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit7443);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit7449); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN475=null;
        Token COMMA477=null;
        Token COMMA479=null;
        Token COMMA481=null;
        Token COMMA483=null;
        Token COMMA485=null;
        Token RPAREN487=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime476 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime478 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime480 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime482 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime484 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime486 = null;
        CommonTree LPAREN475_tree=null;
        CommonTree COMMA477_tree=null;
        CommonTree COMMA479_tree=null;
        CommonTree COMMA481_tree=null;
        CommonTree COMMA483_tree=null;
        CommonTree COMMA485_tree=null;
        CommonTree RPAREN487_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN475=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet7501); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN475);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7503);
            expressionWithTime476=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime476.getTree());
            COMMA477=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA477);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7507);
            expressionWithTime478=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime478.getTree());
            COMMA479=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA479);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7511);
            expressionWithTime480=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime480.getTree());
            COMMA481=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA481);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7515);
            expressionWithTime482=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime482.getTree());
            COMMA483=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7517); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA483);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7519);
            expressionWithTime484=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime484.getTree());
            int alt188=2;
            int LA188_0 = input.LA(1);
            if ( (LA188_0==COMMA) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    {
                    COMMA485=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA485);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7524);
                    expressionWithTime486=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime486.getTree());
                    }
                    break;
            }
            RPAREN487=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet7528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN487);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN488=null;
        Token THEN490=null;
        EsperEPL2GrammarParser.expression_return expression489 = null;
        EsperEPL2GrammarParser.expression_return expression491 = null;
        CommonTree WHEN488_tree=null;
        CommonTree THEN490_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN488=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause7558); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause7561);
            expression489=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression489.getTree());
            THEN490=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause7563); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause7566);
            expression491=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression491.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE492=null;
        EsperEPL2GrammarParser.expression_return expression493 = null;
        CommonTree ELSE492_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE492=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause7579); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause7582);
            expression493=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression493.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression494 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression7595);
            caseExpression494=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression494.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE495=null;
        Token END498=null;
        Token CASE499=null;
        Token END503=null;
        EsperEPL2GrammarParser.whenClause_return whenClause496 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause497 = null;
        EsperEPL2GrammarParser.expression_return expression500 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause501 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause502 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression504 = null;
        CommonTree CASE495_tree=null;
        CommonTree END498_tree=null;
        CommonTree CASE499_tree=null;
        CommonTree END503_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt193=3;
            int LA193_0 = input.LA(1);
            if ( (LA193_0==CASE) ) {
                int LA193_1 = input.LA(2);
                if ( (LA193_1==WHEN) ) {
                    alt193=1;
                }
                else if ( (LA193_1==WINDOW||LA193_1==BETWEEN||LA193_1==ESCAPE||(LA193_1>=NOT_EXPR && LA193_1<=EVERY_EXPR)||LA193_1==WHERE||(LA193_1>=SUM && LA193_1<=COUNT)||LA193_1==CASE||LA193_1==OUTER||(LA193_1>=JOIN && LA193_1<=FULL)||(LA193_1>=EVENTS && LA193_1<=LAST)||(LA193_1>=UNIDIRECTIONAL && LA193_1<=CURRENT_TIMESTAMP)||(LA193_1>=SNAPSHOT && LA193_1<=INDEX)||(LA193_1>=BOOLEAN_TRUE && LA193_1<=VALUE_NULL)||(LA193_1>=DEFINE && LA193_1<=AFTER)||LA193_1==WHILE||(LA193_1>=MERGE && LA193_1<=MATCHED)||LA193_1==NEWKW||LA193_1==CONTEXT||LA193_1==NUM_DOUBLE||(LA193_1>=IDENT && LA193_1<=LPAREN)||LA193_1==LCURLY||(LA193_1>=PLUS && LA193_1<=QUOTED_STRING_LITERAL)||LA193_1==MINUS||LA193_1==NUM_INT||(LA193_1>=TICKED_STRING_LITERAL && LA193_1<=NUM_FLOAT)) ) {
                    alt193=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 193, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA193_0==WINDOW||LA193_0==BETWEEN||LA193_0==ESCAPE||(LA193_0>=NOT_EXPR && LA193_0<=EVERY_EXPR)||LA193_0==WHERE||(LA193_0>=SUM && LA193_0<=COUNT)||LA193_0==OUTER||(LA193_0>=JOIN && LA193_0<=FULL)||(LA193_0>=EVENTS && LA193_0<=LAST)||(LA193_0>=UNIDIRECTIONAL && LA193_0<=CURRENT_TIMESTAMP)||(LA193_0>=SNAPSHOT && LA193_0<=INDEX)||(LA193_0>=BOOLEAN_TRUE && LA193_0<=VALUE_NULL)||(LA193_0>=DEFINE && LA193_0<=AFTER)||LA193_0==WHILE||(LA193_0>=MERGE && LA193_0<=MATCHED)||LA193_0==NEWKW||LA193_0==CONTEXT||LA193_0==NUM_DOUBLE||(LA193_0>=IDENT && LA193_0<=LPAREN)||LA193_0==LCURLY||(LA193_0>=PLUS && LA193_0<=QUOTED_STRING_LITERAL)||LA193_0==MINUS||LA193_0==NUM_INT||(LA193_0>=TICKED_STRING_LITERAL && LA193_0<=NUM_FLOAT)) ) {
                alt193=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);
                throw nvae;
            }
            switch (alt193) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE495=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression7609); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE495_tree = (CommonTree)adaptor.create(CASE495);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE495_tree, root_0);
                    }
                    int cnt189=0;
                    loop189:
                    do {
                        int alt189=2;
                        int LA189_0 = input.LA(1);
                        if ( (LA189_0==WHEN) ) {
                            alt189=1;
                        }
                        switch (alt189) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression7612);
                    	    whenClause496=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause496.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt189 >= 1 ) break loop189;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(189, input);
                                throw eee;
                        }
                        cnt189++;
                    } while (true);
                    int alt190=2;
                    int LA190_0 = input.LA(1);
                    if ( (LA190_0==ELSE) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression7615);
                            elseClause497=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause497.getTree());
                            }
                            break;
                    }
                    END498=(Token)match(input,END,FOLLOW_END_in_caseExpression7618); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE499=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression7629); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE499);
                    pushFollow(FOLLOW_expression_in_caseExpression7631);
                    expression500=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression500.getTree());
                    int cnt191=0;
                    loop191:
                    do {
                        int alt191=2;
                        int LA191_0 = input.LA(1);
                        if ( (LA191_0==WHEN) ) {
                            alt191=1;
                        }
                        switch (alt191) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression7633);
                    	    whenClause501=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause501.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt191 >= 1 ) break loop191;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(191, input);
                                throw eee;
                        }
                        cnt191++;
                    } while (true);
                    int alt192=2;
                    int LA192_0 = input.LA(1);
                    if ( (LA192_0==ELSE) ) {
                        alt192=1;
                    }
                    switch (alt192) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression7636);
                            elseClause502=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause502.getTree());
                            }
                            break;
                    }
                    END503=(Token)match(input,END,FOLLOW_END_in_caseExpression7639); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END503);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression7663);
                    evalOrExpression504=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression504.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression505 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression506 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression7674);
            evalAndExpression505=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression505.getTree());
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);
                if ( (LA194_0==OR_EXPR) ) {
                    alt194=1;
                }
                switch (alt194) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression7679); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression7681);
            	    evalAndExpression506=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression506.getTree());
            	    }
            	    break;
            	default :
            	    break loop194;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression507 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression508 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression7713);
            bitWiseExpression507=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression507.getTree());
            loop195:
            do {
                int alt195=2;
                int LA195_0 = input.LA(1);
                if ( (LA195_0==AND_EXPR) ) {
                    int LA195_16 = input.LA(2);
                    if ( (LA195_16==WINDOW||LA195_16==BETWEEN||LA195_16==ESCAPE||(LA195_16>=NOT_EXPR && LA195_16<=EVERY_EXPR)||LA195_16==WHERE||(LA195_16>=SUM && LA195_16<=COUNT)||LA195_16==OUTER||(LA195_16>=JOIN && LA195_16<=FULL)||(LA195_16>=EVENTS && LA195_16<=LAST)||(LA195_16>=UNIDIRECTIONAL && LA195_16<=CURRENT_TIMESTAMP)||(LA195_16>=SNAPSHOT && LA195_16<=INDEX)||(LA195_16>=BOOLEAN_TRUE && LA195_16<=VALUE_NULL)||(LA195_16>=DEFINE && LA195_16<=AFTER)||LA195_16==WHILE||(LA195_16>=MERGE && LA195_16<=MATCHED)||LA195_16==NEWKW||LA195_16==CONTEXT||LA195_16==NUM_DOUBLE||(LA195_16>=IDENT && LA195_16<=LPAREN)||LA195_16==LCURLY||(LA195_16>=PLUS && LA195_16<=QUOTED_STRING_LITERAL)||LA195_16==MINUS||LA195_16==NUM_INT||(LA195_16>=TICKED_STRING_LITERAL && LA195_16<=NUM_FLOAT)) ) {
                        alt195=1;
                    }
                }
                switch (alt195) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression7718); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression7720);
            	    bitWiseExpression508=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression508.getTree());
            	    }
            	    break;
            	default :
            	    break loop195;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND510=null;
        Token BOR511=null;
        Token BXOR512=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression509 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression513 = null;
        CommonTree BAND510_tree=null;
        CommonTree BOR511_tree=null;
        CommonTree BXOR512_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression7752);
            negatedExpression509=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression509.getTree());
            loop197:
            do {
                int alt197=2;
                int LA197_0 = input.LA(1);
                if ( (LA197_0==BOR||(LA197_0>=BAND && LA197_0<=BXOR)) ) {
                    alt197=1;
                }
                switch (alt197) {
            	case 1 :
            	    {
            	    int alt196=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt196=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt196=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt196=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 196, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt196) {
            	        case 1 :
            	            {
            	            BAND510=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression7757); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND510_tree = (CommonTree)adaptor.create(BAND510);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND510_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR511=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression7760); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR511_tree = (CommonTree)adaptor.create(BOR511);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR511_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR512=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression7763); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR512_tree = (CommonTree)adaptor.create(BXOR512);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR512_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression7767);
            	    negatedExpression513=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression513.getTree());
            	    }
            	    break;
            	default :
            	    break loop197;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR515=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression514 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression516 = null;
        CommonTree NOT_EXPR515_tree=null;
        try {
            int alt198=2;
            int LA198_0 = input.LA(1);
            if ( (LA198_0==WINDOW||LA198_0==BETWEEN||LA198_0==ESCAPE||LA198_0==EVERY_EXPR||LA198_0==WHERE||(LA198_0>=SUM && LA198_0<=COUNT)||LA198_0==OUTER||(LA198_0>=JOIN && LA198_0<=FULL)||(LA198_0>=EVENTS && LA198_0<=LAST)||(LA198_0>=UNIDIRECTIONAL && LA198_0<=CURRENT_TIMESTAMP)||(LA198_0>=SNAPSHOT && LA198_0<=INDEX)||(LA198_0>=BOOLEAN_TRUE && LA198_0<=VALUE_NULL)||(LA198_0>=DEFINE && LA198_0<=AFTER)||LA198_0==WHILE||(LA198_0>=MERGE && LA198_0<=MATCHED)||LA198_0==NEWKW||LA198_0==CONTEXT||LA198_0==NUM_DOUBLE||(LA198_0>=IDENT && LA198_0<=LPAREN)||LA198_0==LCURLY||(LA198_0>=PLUS && LA198_0<=QUOTED_STRING_LITERAL)||LA198_0==MINUS||LA198_0==NUM_INT||(LA198_0>=TICKED_STRING_LITERAL && LA198_0<=NUM_FLOAT)) ) {
                alt198=1;
            }
            else if ( (LA198_0==NOT_EXPR) ) {
                alt198=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);
                throw nvae;
            }
            switch (alt198) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression7782);
                    evalEqualsExpression514=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression514.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR515=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression7788); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR515_tree = (CommonTree)adaptor.create(NOT_EXPR515);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR515_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression7791);
                    evalEqualsExpression516=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression516.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR518=null;
        Token LPAREN520=null;
        Token RPAREN522=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression517 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression519 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList521 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression523 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR518_tree=null;
        CommonTree LPAREN520_tree=null;
        CommonTree RPAREN522_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression7804);
            evalRelationalExpression517=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression517.getTree());
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);
                if ( (LA204_0==IS||LA204_0==EQUALS||(LA204_0>=SQL_NE && LA204_0<=NOT_EQUAL)) ) {
                    alt204=1;
                }
                switch (alt204) {
            	case 1 :
            	    {
            	    int alt199=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt199=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA199_2 = input.LA(2);
            	        if ( (LA199_2==NOT_EXPR) ) {
            	            alt199=3;
            	        }
            	        else if ( (LA199_2==WINDOW||LA199_2==BETWEEN||LA199_2==ESCAPE||LA199_2==EVERY_EXPR||LA199_2==WHERE||(LA199_2>=SUM && LA199_2<=COUNT)||LA199_2==OUTER||(LA199_2>=JOIN && LA199_2<=FULL)||(LA199_2>=ALL && LA199_2<=SOME)||(LA199_2>=EVENTS && LA199_2<=LAST)||(LA199_2>=UNIDIRECTIONAL && LA199_2<=CURRENT_TIMESTAMP)||(LA199_2>=SNAPSHOT && LA199_2<=INDEX)||(LA199_2>=BOOLEAN_TRUE && LA199_2<=VALUE_NULL)||(LA199_2>=DEFINE && LA199_2<=AFTER)||LA199_2==WHILE||(LA199_2>=MERGE && LA199_2<=MATCHED)||LA199_2==NEWKW||LA199_2==CONTEXT||LA199_2==NUM_DOUBLE||(LA199_2>=IDENT && LA199_2<=LPAREN)||LA199_2==LCURLY||(LA199_2>=PLUS && LA199_2<=QUOTED_STRING_LITERAL)||LA199_2==MINUS||LA199_2==NUM_INT||(LA199_2>=TICKED_STRING_LITERAL && LA199_2<=NUM_FLOAT)) ) {
            	            alt199=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 199, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt199=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt199=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 199, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt199) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression7817); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression7835); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression7849); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR518=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression7851); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR518);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression7865); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression7879); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt203=2;
            	    int LA203_0 = input.LA(1);
            	    if ( (LA203_0==WINDOW||LA203_0==BETWEEN||LA203_0==ESCAPE||LA203_0==EVERY_EXPR||LA203_0==WHERE||(LA203_0>=SUM && LA203_0<=COUNT)||LA203_0==OUTER||(LA203_0>=JOIN && LA203_0<=FULL)||(LA203_0>=EVENTS && LA203_0<=LAST)||(LA203_0>=UNIDIRECTIONAL && LA203_0<=CURRENT_TIMESTAMP)||(LA203_0>=SNAPSHOT && LA203_0<=INDEX)||(LA203_0>=BOOLEAN_TRUE && LA203_0<=VALUE_NULL)||(LA203_0>=DEFINE && LA203_0<=AFTER)||LA203_0==WHILE||(LA203_0>=MERGE && LA203_0<=MATCHED)||LA203_0==NEWKW||LA203_0==CONTEXT||LA203_0==NUM_DOUBLE||(LA203_0>=IDENT && LA203_0<=LPAREN)||LA203_0==LCURLY||(LA203_0>=PLUS && LA203_0<=QUOTED_STRING_LITERAL)||LA203_0==MINUS||LA203_0==NUM_INT||(LA203_0>=TICKED_STRING_LITERAL && LA203_0<=NUM_FLOAT)) ) {
            	        alt203=1;
            	    }
            	    else if ( ((LA203_0>=ALL && LA203_0<=SOME)) ) {
            	        alt203=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 203, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt203) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression7909);
            	            evalRelationalExpression519=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression519.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt200=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt200=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt200=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt200=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 200, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt200) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression7926); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression7932); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression7938); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt202=2;
            	            int LA202_0 = input.LA(1);
            	            if ( (LA202_0==LPAREN) ) {
            	                int LA202_1 = input.LA(2);
            	                if ( (LA202_1==SELECT) ) {
            	                    alt202=2;
            	                }
            	                else if ( (LA202_1==WINDOW||LA202_1==BETWEEN||LA202_1==ESCAPE||(LA202_1>=NOT_EXPR && LA202_1<=EVERY_EXPR)||LA202_1==WHERE||(LA202_1>=SUM && LA202_1<=COUNT)||LA202_1==CASE||LA202_1==OUTER||(LA202_1>=JOIN && LA202_1<=FULL)||(LA202_1>=EVENTS && LA202_1<=LAST)||(LA202_1>=UNIDIRECTIONAL && LA202_1<=CURRENT_TIMESTAMP)||(LA202_1>=SNAPSHOT && LA202_1<=INDEX)||(LA202_1>=BOOLEAN_TRUE && LA202_1<=VALUE_NULL)||(LA202_1>=DEFINE && LA202_1<=AFTER)||LA202_1==WHILE||(LA202_1>=MERGE && LA202_1<=MATCHED)||LA202_1==NEWKW||LA202_1==CONTEXT||LA202_1==NUM_DOUBLE||(LA202_1>=IDENT && LA202_1<=RPAREN)||LA202_1==LCURLY||(LA202_1>=PLUS && LA202_1<=QUOTED_STRING_LITERAL)||LA202_1==MINUS||LA202_1==NUM_INT||(LA202_1>=TICKED_STRING_LITERAL && LA202_1<=NUM_FLOAT)) ) {
            	                    alt202=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 202, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 202, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt202) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN520=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression7944); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN520);
            	                    int alt201=2;
            	                    int LA201_0 = input.LA(1);
            	                    if ( (LA201_0==WINDOW||LA201_0==BETWEEN||LA201_0==ESCAPE||(LA201_0>=NOT_EXPR && LA201_0<=EVERY_EXPR)||LA201_0==WHERE||(LA201_0>=SUM && LA201_0<=COUNT)||LA201_0==CASE||LA201_0==OUTER||(LA201_0>=JOIN && LA201_0<=FULL)||(LA201_0>=EVENTS && LA201_0<=LAST)||(LA201_0>=UNIDIRECTIONAL && LA201_0<=CURRENT_TIMESTAMP)||(LA201_0>=SNAPSHOT && LA201_0<=INDEX)||(LA201_0>=BOOLEAN_TRUE && LA201_0<=VALUE_NULL)||(LA201_0>=DEFINE && LA201_0<=AFTER)||LA201_0==WHILE||(LA201_0>=MERGE && LA201_0<=MATCHED)||LA201_0==NEWKW||LA201_0==CONTEXT||LA201_0==NUM_DOUBLE||(LA201_0>=IDENT && LA201_0<=LPAREN)||LA201_0==LCURLY||(LA201_0>=PLUS && LA201_0<=QUOTED_STRING_LITERAL)||LA201_0==MINUS||LA201_0==NUM_INT||(LA201_0>=TICKED_STRING_LITERAL && LA201_0<=NUM_FLOAT)) ) {
            	                        alt201=1;
            	                    }
            	                    switch (alt201) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression7946);
            	                            expressionList521=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList521.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN522=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression7949); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN522);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression7954);
            	                    subSelectGroupExpression523=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression523.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop204;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && eq != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && is != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_IS_EXPR, "EVAL_IS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && isnot != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_ISNOT_EXPR, "EVAL_ISNOT_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (sqlne != null || ne != null || isnot != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN526=null;
        Token RPAREN528=null;
        Token COMMA532=null;
        Token IN_SET534=null;
        Token BETWEEN536=null;
        Token LIKE538=null;
        Token ESCAPE540=null;
        Token REGEXP542=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr524 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr525 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList527 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression529 = null;
        EsperEPL2GrammarParser.expression_return expression530 = null;
        EsperEPL2GrammarParser.expression_return expression531 = null;
        EsperEPL2GrammarParser.expression_return expression533 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery535 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList537 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr539 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant541 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr543 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN526_tree=null;
        CommonTree RPAREN528_tree=null;
        CommonTree COMMA532_tree=null;
        CommonTree IN_SET534_tree=null;
        CommonTree BETWEEN536_tree=null;
        CommonTree LIKE538_tree=null;
        CommonTree ESCAPE540_tree=null;
        CommonTree REGEXP542_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8114);
            concatenationExpr524=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr524.getTree());
            int alt218=2;
            int LA218_0 = input.LA(1);
            if ( (LA218_0==EOF||(LA218_0>=OR_EXPR && LA218_0<=AND_EXPR)||(LA218_0>=WHERE && LA218_0<=AS)||(LA218_0>=ELSE && LA218_0<=FROM)||LA218_0==IS||(LA218_0>=GROUP && LA218_0<=HAVING)||LA218_0==ALL||LA218_0==OUTPUT||LA218_0==INSERT||(LA218_0>=ORDER && LA218_0<=DESC)||LA218_0==PATTERN||(LA218_0>=TIMEPERIOD_SEC && LA218_0<=TIMEPERIOD_SECONDS)||LA218_0==ROW_LIMIT_EXPR||LA218_0==MEASURES||(LA218_0>=AFTER && LA218_0<=FOR)||LA218_0==RBRACK||(LA218_0>=RPAREN && LA218_0<=COLON)||LA218_0==RCURLY||(LA218_0>=COMMA && LA218_0<=EQUALS)||(LA218_0>=ATCHAR && LA218_0<=BOR)||(LA218_0>=BAND && LA218_0<=GE)||LA218_0==FOLLOWMAX_END) ) {
                alt218=1;
            }
            else if ( ((LA218_0>=IN_SET && LA218_0<=REGEXP)||LA218_0==NOT_EXPR) ) {
                alt218=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);
                throw nvae;
            }
            switch (alt218) {
                case 1 :
                    {
                    {
                    loop210:
                    do {
                        int alt210=2;
                        int LA210_0 = input.LA(1);
                        if ( ((LA210_0>=LT && LA210_0<=GE)) ) {
                            alt210=1;
                        }
                        switch (alt210) {
                    	case 1 :
                    	    {
                    	    int alt205=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt205=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt205=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt205=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt205=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 205, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt205) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression8146); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression8150); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression8154); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression8158); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt209=2;
                    	    int LA209_0 = input.LA(1);
                    	    if ( (LA209_0==WINDOW||LA209_0==BETWEEN||LA209_0==ESCAPE||LA209_0==EVERY_EXPR||LA209_0==WHERE||(LA209_0>=SUM && LA209_0<=COUNT)||LA209_0==OUTER||(LA209_0>=JOIN && LA209_0<=FULL)||(LA209_0>=EVENTS && LA209_0<=LAST)||(LA209_0>=UNIDIRECTIONAL && LA209_0<=CURRENT_TIMESTAMP)||(LA209_0>=SNAPSHOT && LA209_0<=INDEX)||(LA209_0>=BOOLEAN_TRUE && LA209_0<=VALUE_NULL)||(LA209_0>=DEFINE && LA209_0<=AFTER)||LA209_0==WHILE||(LA209_0>=MERGE && LA209_0<=MATCHED)||LA209_0==NEWKW||LA209_0==CONTEXT||LA209_0==NUM_DOUBLE||(LA209_0>=IDENT && LA209_0<=LPAREN)||LA209_0==LCURLY||(LA209_0>=PLUS && LA209_0<=QUOTED_STRING_LITERAL)||LA209_0==MINUS||LA209_0==NUM_INT||(LA209_0>=TICKED_STRING_LITERAL && LA209_0<=NUM_FLOAT)) ) {
                    	        alt209=1;
                    	    }
                    	    else if ( ((LA209_0>=ALL && LA209_0<=SOME)) ) {
                    	        alt209=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 209, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt209) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8182);
                    	            concatenationExpr525=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr525.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt206=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt206=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt206=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt206=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 206, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt206) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression8199); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression8205); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression8211); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt208=2;
                    	            int LA208_0 = input.LA(1);
                    	            if ( (LA208_0==LPAREN) ) {
                    	                int LA208_1 = input.LA(2);
                    	                if ( (LA208_1==SELECT) ) {
                    	                    alt208=2;
                    	                }
                    	                else if ( (LA208_1==WINDOW||LA208_1==BETWEEN||LA208_1==ESCAPE||(LA208_1>=NOT_EXPR && LA208_1<=EVERY_EXPR)||LA208_1==WHERE||(LA208_1>=SUM && LA208_1<=COUNT)||LA208_1==CASE||LA208_1==OUTER||(LA208_1>=JOIN && LA208_1<=FULL)||(LA208_1>=EVENTS && LA208_1<=LAST)||(LA208_1>=UNIDIRECTIONAL && LA208_1<=CURRENT_TIMESTAMP)||(LA208_1>=SNAPSHOT && LA208_1<=INDEX)||(LA208_1>=BOOLEAN_TRUE && LA208_1<=VALUE_NULL)||(LA208_1>=DEFINE && LA208_1<=AFTER)||LA208_1==WHILE||(LA208_1>=MERGE && LA208_1<=MATCHED)||LA208_1==NEWKW||LA208_1==CONTEXT||LA208_1==NUM_DOUBLE||(LA208_1>=IDENT && LA208_1<=RPAREN)||LA208_1==LCURLY||(LA208_1>=PLUS && LA208_1<=QUOTED_STRING_LITERAL)||LA208_1==MINUS||LA208_1==NUM_INT||(LA208_1>=TICKED_STRING_LITERAL && LA208_1<=NUM_FLOAT)) ) {
                    	                    alt208=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 208, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 208, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt208) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN526=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression8217); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN526);
                    	                    int alt207=2;
                    	                    int LA207_0 = input.LA(1);
                    	                    if ( (LA207_0==WINDOW||LA207_0==BETWEEN||LA207_0==ESCAPE||(LA207_0>=NOT_EXPR && LA207_0<=EVERY_EXPR)||LA207_0==WHERE||(LA207_0>=SUM && LA207_0<=COUNT)||LA207_0==CASE||LA207_0==OUTER||(LA207_0>=JOIN && LA207_0<=FULL)||(LA207_0>=EVENTS && LA207_0<=LAST)||(LA207_0>=UNIDIRECTIONAL && LA207_0<=CURRENT_TIMESTAMP)||(LA207_0>=SNAPSHOT && LA207_0<=INDEX)||(LA207_0>=BOOLEAN_TRUE && LA207_0<=VALUE_NULL)||(LA207_0>=DEFINE && LA207_0<=AFTER)||LA207_0==WHILE||(LA207_0>=MERGE && LA207_0<=MATCHED)||LA207_0==NEWKW||LA207_0==CONTEXT||LA207_0==NUM_DOUBLE||(LA207_0>=IDENT && LA207_0<=LPAREN)||LA207_0==LCURLY||(LA207_0>=PLUS && LA207_0<=QUOTED_STRING_LITERAL)||LA207_0==MINUS||LA207_0==NUM_INT||(LA207_0>=TICKED_STRING_LITERAL && LA207_0<=NUM_FLOAT)) ) {
                    	                        alt207=1;
                    	                    }
                    	                    switch (alt207) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression8219);
                    	                            expressionList527=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList527.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN528=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression8222); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN528);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression8227);
                    	                    subSelectGroupExpression529=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression529.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop210;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt211=2;
                    int LA211_0 = input.LA(1);
                    if ( (LA211_0==NOT_EXPR) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression8323); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt217=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA217_1 = input.LA(2);
                        if ( (LA217_1==LPAREN) ) {
                            int LA217_5 = input.LA(3);
                            if ( (LA217_5==SELECT) ) {
                                alt217=2;
                            }
                            else if ( (LA217_5==WINDOW||LA217_5==BETWEEN||LA217_5==ESCAPE||(LA217_5>=NOT_EXPR && LA217_5<=EVERY_EXPR)||LA217_5==WHERE||(LA217_5>=SUM && LA217_5<=COUNT)||LA217_5==CASE||LA217_5==OUTER||(LA217_5>=JOIN && LA217_5<=FULL)||(LA217_5>=EVENTS && LA217_5<=LAST)||(LA217_5>=UNIDIRECTIONAL && LA217_5<=CURRENT_TIMESTAMP)||(LA217_5>=SNAPSHOT && LA217_5<=INDEX)||(LA217_5>=BOOLEAN_TRUE && LA217_5<=VALUE_NULL)||(LA217_5>=DEFINE && LA217_5<=AFTER)||LA217_5==WHILE||(LA217_5>=MERGE && LA217_5<=MATCHED)||LA217_5==NEWKW||LA217_5==CONTEXT||LA217_5==NUM_DOUBLE||(LA217_5>=IDENT && LA217_5<=LPAREN)||LA217_5==LCURLY||(LA217_5>=PLUS && LA217_5<=QUOTED_STRING_LITERAL)||LA217_5==MINUS||LA217_5==NUM_INT||(LA217_5>=TICKED_STRING_LITERAL && LA217_5<=NUM_FLOAT)) ) {
                                alt217=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 217, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA217_1==LBRACK) ) {
                            alt217=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 217, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt217=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt217=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt217=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 217, 0, input);
                        throw nvae;
                    }
                    switch (alt217) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression8350); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt212=2;
                            int LA212_0 = input.LA(1);
                            if ( (LA212_0==LPAREN) ) {
                                alt212=1;
                            }
                            else if ( (LA212_0==LBRACK) ) {
                                alt212=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 0, input);
                                throw nvae;
                            }
                            switch (alt212) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression8362); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression8368); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression8371);
                            expression530=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression530.getTree());
                            int alt214=2;
                            int LA214_0 = input.LA(1);
                            if ( (LA214_0==COLON) ) {
                                alt214=1;
                            }
                            else if ( (LA214_0==RBRACK||LA214_0==RPAREN||LA214_0==COMMA) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 0, input);
                                throw nvae;
                            }
                            switch (alt214) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression8393); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression8396);
                                    expression531=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression531.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop213:
                                    do {
                                        int alt213=2;
                                        int LA213_0 = input.LA(1);
                                        if ( (LA213_0==COMMA) ) {
                                            alt213=1;
                                        }
                                        switch (alt213) {
                                    	case 1 :
                                    	    {
                                    	    COMMA532=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression8422); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA532);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression8424);
                                    	    expression533=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression533.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop213;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt215=2;
                            int LA215_0 = input.LA(1);
                            if ( (LA215_0==RPAREN) ) {
                                alt215=1;
                            }
                            else if ( (LA215_0==RBRACK) ) {
                                alt215=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 215, 0, input);
                                throw nvae;
                            }
                            switch (alt215) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression8450); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression8456); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET534=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression8579); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET534);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression8581);
                            inSubSelectQuery535=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery535.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN536=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression8627); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN536);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression8629);
                            betweenList537=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList537.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE538=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression8679); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE538);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8681);
                            concatenationExpr539=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr539.getTree());
                            int alt216=2;
                            int LA216_0 = input.LA(1);
                            if ( (LA216_0==ESCAPE) ) {
                                alt216=1;
                            }
                            switch (alt216) {
                                case 1 :
                                    {
                                    ESCAPE540=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression8684); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE540);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression8686);
                                    stringconstant541=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant541.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP542=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression8738); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP542);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8740);
                            concatenationExpr543=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr543.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr544 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery8802);
            subQueryExpr544=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr544.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR547=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression545 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression546 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression548 = null;
        CommonTree c_tree=null;
        CommonTree LOR547_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr8827);
            additiveExpression545=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression545.getTree());
            int alt220=2;
            int LA220_0 = input.LA(1);
            if ( (LA220_0==LOR) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr8833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr8835);
                    additiveExpression546=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression546.getTree());
                    loop219:
                    do {
                        int alt219=2;
                        int LA219_0 = input.LA(1);
                        if ( (LA219_0==LOR) ) {
                            alt219=1;
                        }
                        switch (alt219) {
                    	case 1 :
                    	    {
                    	    LOR547=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr8839); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR547);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr8841);
                    	    additiveExpression548=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression548.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop219;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS550=null;
        Token MINUS551=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression549 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression552 = null;
        CommonTree PLUS550_tree=null;
        CommonTree MINUS551_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression8882);
            multiplyExpression549=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression549.getTree());
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);
                if ( (LA222_0==PLUS||LA222_0==MINUS) ) {
                    alt222=1;
                }
                switch (alt222) {
            	case 1 :
            	    {
            	    int alt221=2;
            	    int LA221_0 = input.LA(1);
            	    if ( (LA221_0==PLUS) ) {
            	        alt221=1;
            	    }
            	    else if ( (LA221_0==MINUS) ) {
            	        alt221=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 221, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt221) {
            	        case 1 :
            	            {
            	            PLUS550=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression8887); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS550_tree = (CommonTree)adaptor.create(PLUS550);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS550_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS551=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression8890); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS551_tree = (CommonTree)adaptor.create(MINUS551);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS551_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression8894);
            	    multiplyExpression552=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression552.getTree());
            	    }
            	    break;
            	default :
            	    break loop222;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR554=null;
        Token DIV555=null;
        Token MOD556=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression553 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression557 = null;
        CommonTree STAR554_tree=null;
        CommonTree DIV555_tree=null;
        CommonTree MOD556_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression8908);
            unaryExpression553=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression553.getTree());
            loop224:
            do {
                int alt224=2;
                int LA224_0 = input.LA(1);
                if ( (LA224_0==STAR||(LA224_0>=DIV && LA224_0<=MOD)) ) {
                    alt224=1;
                }
                switch (alt224) {
            	case 1 :
            	    {
            	    int alt223=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt223=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt223=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt223=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 223, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt223) {
            	        case 1 :
            	            {
            	            STAR554=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression8913); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR554_tree = (CommonTree)adaptor.create(STAR554);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR554_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV555=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression8916); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV555_tree = (CommonTree)adaptor.create(DIV555);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV555_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD556=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression8919); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD556_tree = (CommonTree)adaptor.create(MOD556);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD556_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression8923);
            	    unaryExpression557=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression557.getTree());
            	    }
            	    break;
            	default :
            	    break loop224;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS558=null;
        Token LPAREN562=null;
        Token RPAREN564=null;
        Token NEWKW574=null;
        Token LCURLY575=null;
        Token COMMA577=null;
        Token RCURLY579=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty559 = null;
        EsperEPL2GrammarParser.constant_return constant560 = null;
        EsperEPL2GrammarParser.substitution_return substitution561 = null;
        EsperEPL2GrammarParser.expression_return expression563 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass565 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass566 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction567 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc568 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression569 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression570 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass571 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass572 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression573 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign576 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign578 = null;
        CommonTree d_tree=null;
        CommonTree MINUS558_tree=null;
        CommonTree LPAREN562_tree=null;
        CommonTree RPAREN564_tree=null;
        CommonTree NEWKW574_tree=null;
        CommonTree LCURLY575_tree=null;
        CommonTree COMMA577_tree=null;
        CommonTree RCURLY579_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_NEWKW=new RewriteRuleTokenStream(adaptor,"token NEWKW");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_newAssign=new RewriteRuleSubtreeStream(adaptor,"rule newAssign");
        RewriteRuleSubtreeStream stream_subSelectExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt230=10;
            alt230 = dfa230.predict(input);
            switch (alt230) {
                case 1 :
                    {
                    MINUS558=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression8938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS558);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression8940);
                    eventProperty559=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty559.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression8953);
                    constant560=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant560.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression8958);
                    substitution561=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution561.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN562=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression8963); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN562);
                    pushFollow(FOLLOW_expression_in_unaryExpression8965);
                    expression563=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression563.getTree());
                    RPAREN564=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression8967); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN564);
                    int alt226=2;
                    int LA226_0 = input.LA(1);
                    if ( (LA226_0==DOT) ) {
                        alt226=1;
                    }
                    switch (alt226) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8972); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8974);
                            libFunctionNoClass565=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass565.getTree());
                            loop225:
                            do {
                                int alt225=2;
                                int LA225_0 = input.LA(1);
                                if ( (LA225_0==DOT) ) {
                                    alt225=1;
                                }
                                switch (alt225) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8979); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8981);
                            	    libFunctionNoClass566=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass566.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop225;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression9018);
                    eventPropertyOrLibFunction567=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction567.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression9030);
                    builtinFunc568=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc568.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression9036);
                    arrayExpression569=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression569.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression9041);
                    subSelectExpression570=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelectExpression.add(subSelectExpression570.getTree());
                    int alt228=2;
                    int LA228_0 = input.LA(1);
                    if ( (LA228_0==DOT) ) {
                        alt228=1;
                    }
                    switch (alt228) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9046); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9048);
                            libFunctionNoClass571=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass571.getTree());
                            loop227:
                            do {
                                int alt227=2;
                                int LA227_0 = input.LA(1);
                                if ( (LA227_0==DOT) ) {
                                    alt227=1;
                                }
                                switch (alt227) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9053); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9055);
                            	    libFunctionNoClass572=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass572.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop227;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_subSelectExpression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_subSelectExpression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression9092);
                    existsSubSelectExpression573=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression573.getTree());
                    }
                    break;
                case 10 :
                    {
                    NEWKW574=(Token)match(input,NEWKW,FOLLOW_NEWKW_in_unaryExpression9097); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NEWKW.add(NEWKW574);
                    LCURLY575=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_unaryExpression9099); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY575);
                    pushFollow(FOLLOW_newAssign_in_unaryExpression9101);
                    newAssign576=newAssign();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newAssign.add(newAssign576.getTree());
                    loop229:
                    do {
                        int alt229=2;
                        int LA229_0 = input.LA(1);
                        if ( (LA229_0==COMMA) ) {
                            alt229=1;
                        }
                        switch (alt229) {
                    	case 1 :
                    	    {
                    	    COMMA577=(Token)match(input,COMMA,FOLLOW_COMMA_in_unaryExpression9104); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA577);
                    	    pushFollow(FOLLOW_newAssign_in_unaryExpression9106);
                    	    newAssign578=newAssign();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_newAssign.add(newAssign578.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop229;
                        }
                    } while (true);
                    RCURLY579=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_unaryExpression9110); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY579);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NEWKW.nextNode(), root_1);
                        while ( stream_newAssign.hasNext() ) {
                            adaptor.addChild(root_1, stream_newAssign.nextTree());
                        }
                        stream_newAssign.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class newAssign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.newAssign_return newAssign() throws RecognitionException {
        EsperEPL2GrammarParser.newAssign_return retval = new EsperEPL2GrammarParser.newAssign_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS581=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty580 = null;
        EsperEPL2GrammarParser.expression_return expression582 = null;
        CommonTree EQUALS581_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_newAssign9132);
            eventProperty580=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty580.getTree());
            int alt231=2;
            int LA231_0 = input.LA(1);
            if ( (LA231_0==EQUALS) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    {
                    EQUALS581=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_newAssign9135); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS581);
                    pushFollow(FOLLOW_expression_in_newAssign9137);
                    expression582=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression582.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEW_ITEM, "NEW_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr583 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression9165);
            subQueryExpr583=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr583.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr584 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression9187);
            subQueryExpr584=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr584.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS585=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr586 = null;
        CommonTree EXISTS585_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS585=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression9209); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS585);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression9211);
            subQueryExpr586=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr586.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN587=null;
        Token SELECT588=null;
        Token DISTINCT589=null;
        Token FROM591=null;
        Token WHERE593=null;
        Token RPAREN595=null;
        EsperEPL2GrammarParser.selectionList_return selectionList590 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr592 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause594 = null;
        CommonTree LPAREN587_tree=null;
        CommonTree SELECT588_tree=null;
        CommonTree DISTINCT589_tree=null;
        CommonTree FROM591_tree=null;
        CommonTree WHERE593_tree=null;
        CommonTree RPAREN595_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN587=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr9244); if (state.failed) return retval;
            SELECT588=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr9250); if (state.failed) return retval;
            int alt232=2;
            int LA232_0 = input.LA(1);
            if ( (LA232_0==DISTINCT) ) {
                alt232=1;
            }
            switch (alt232) {
                case 1 :
                    {
                    DISTINCT589=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr9253); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT589_tree = (CommonTree)adaptor.create(DISTINCT589);
                    adaptor.addChild(root_0, DISTINCT589_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr9256);
            selectionList590=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList590.getTree());
            FROM591=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr9263); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr9266);
            subSelectFilterExpr592=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr592.getTree());
            int alt233=2;
            int LA233_0 = input.LA(1);
            if ( (LA233_0==WHERE) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    {
                    WHERE593=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr9274); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr9277);
                    whereClause594=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause594.getTree());
                    }
                    break;
            }
            RPAREN595=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr9286); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT597=null;
        Token DOT599=null;
        Token AS601=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression596 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression598 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression600 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT597_tree=null;
        CommonTree DOT599_tree=null;
        CommonTree AS601_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr9310);
            eventFilterExpression596=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression596.getTree());
            int alt235=2;
            int LA235_0 = input.LA(1);
            if ( (LA235_0==DOT) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    {
                    DOT597=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr9315); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT597);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr9317);
                    viewExpression598=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression598.getTree());
                    loop234:
                    do {
                        int alt234=2;
                        int LA234_0 = input.LA(1);
                        if ( (LA234_0==DOT) ) {
                            alt234=1;
                        }
                        switch (alt234) {
                    	case 1 :
                    	    {
                    	    DOT599=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr9320); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT599);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr9322);
                    	    viewExpression600=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression600.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop234;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt236=3;
            int LA236_0 = input.LA(1);
            if ( (LA236_0==AS) ) {
                alt236=1;
            }
            else if ( (LA236_0==IDENT) ) {
                alt236=2;
            }
            switch (alt236) {
                case 1 :
                    {
                    AS601=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr9329); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS601);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr9333); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr9339); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt237=3;
            int LA237_0 = input.LA(1);
            if ( (LA237_0==RETAINUNION) ) {
                alt237=1;
            }
            else if ( (LA237_0==RETAININTERSECTION) ) {
                alt237=2;
            }
            switch (alt237) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr9346); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr9350); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LCURLY602=null;
        Token COMMA604=null;
        Token RCURLY606=null;
        EsperEPL2GrammarParser.expression_return expression603 = null;
        EsperEPL2GrammarParser.expression_return expression605 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass607 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass608 = null;
        CommonTree d_tree=null;
        CommonTree LCURLY602_tree=null;
        CommonTree COMMA604_tree=null;
        CommonTree RCURLY606_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LCURLY602=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression9390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY602);
            int alt239=2;
            int LA239_0 = input.LA(1);
            if ( (LA239_0==WINDOW||LA239_0==BETWEEN||LA239_0==ESCAPE||(LA239_0>=NOT_EXPR && LA239_0<=EVERY_EXPR)||LA239_0==WHERE||(LA239_0>=SUM && LA239_0<=COUNT)||LA239_0==CASE||LA239_0==OUTER||(LA239_0>=JOIN && LA239_0<=FULL)||(LA239_0>=EVENTS && LA239_0<=LAST)||(LA239_0>=UNIDIRECTIONAL && LA239_0<=CURRENT_TIMESTAMP)||(LA239_0>=SNAPSHOT && LA239_0<=INDEX)||(LA239_0>=BOOLEAN_TRUE && LA239_0<=VALUE_NULL)||(LA239_0>=DEFINE && LA239_0<=AFTER)||LA239_0==WHILE||(LA239_0>=MERGE && LA239_0<=MATCHED)||LA239_0==NEWKW||LA239_0==CONTEXT||LA239_0==NUM_DOUBLE||(LA239_0>=IDENT && LA239_0<=LPAREN)||LA239_0==LCURLY||(LA239_0>=PLUS && LA239_0<=QUOTED_STRING_LITERAL)||LA239_0==MINUS||LA239_0==NUM_INT||(LA239_0>=TICKED_STRING_LITERAL && LA239_0<=NUM_FLOAT)) ) {
                alt239=1;
            }
            switch (alt239) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression9393);
                    expression603=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression603.getTree());
                    loop238:
                    do {
                        int alt238=2;
                        int LA238_0 = input.LA(1);
                        if ( (LA238_0==COMMA) ) {
                            alt238=1;
                        }
                        switch (alt238) {
                    	case 1 :
                    	    {
                    	    COMMA604=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression9396); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA604);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression9398);
                    	    expression605=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression605.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop238;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY606=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression9405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY606);
            int alt241=2;
            int LA241_0 = input.LA(1);
            if ( (LA241_0==DOT) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression9410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression9412);
                    libFunctionNoClass607=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass607.getTree());
                    loop240:
                    do {
                        int alt240=2;
                        int LA240_0 = input.LA(1);
                        if ( (LA240_0==DOT) ) {
                            alt240=1;
                        }
                        switch (alt240) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression9417); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression9419);
                    	    libFunctionNoClass608=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass608.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop240;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_2);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token SUM609=null;
        Token LPAREN610=null;
        Token ALL611=null;
        Token DISTINCT612=null;
        Token RPAREN615=null;
        Token AVG616=null;
        Token LPAREN617=null;
        Token ALL618=null;
        Token DISTINCT619=null;
        Token RPAREN622=null;
        Token COUNT623=null;
        Token LPAREN624=null;
        Token ALL625=null;
        Token DISTINCT626=null;
        Token STAR628=null;
        Token RPAREN630=null;
        Token MEDIAN631=null;
        Token LPAREN632=null;
        Token ALL633=null;
        Token DISTINCT634=null;
        Token RPAREN637=null;
        Token STDDEV638=null;
        Token LPAREN639=null;
        Token ALL640=null;
        Token DISTINCT641=null;
        Token RPAREN644=null;
        Token AVEDEV645=null;
        Token LPAREN646=null;
        Token ALL647=null;
        Token DISTINCT648=null;
        Token RPAREN651=null;
        Token COALESCE655=null;
        Token LPAREN656=null;
        Token COMMA658=null;
        Token COMMA660=null;
        Token RPAREN662=null;
        Token PREVIOUS663=null;
        Token LPAREN664=null;
        Token COMMA666=null;
        Token RPAREN668=null;
        Token PREVIOUSTAIL671=null;
        Token LPAREN672=null;
        Token COMMA674=null;
        Token RPAREN676=null;
        Token PREVIOUSCOUNT679=null;
        Token LPAREN680=null;
        Token RPAREN682=null;
        Token PREVIOUSWINDOW683=null;
        Token LPAREN684=null;
        Token RPAREN686=null;
        Token PRIOR689=null;
        Token LPAREN690=null;
        Token NUM_INT691=null;
        Token COMMA692=null;
        Token RPAREN694=null;
        Token INSTANCEOF695=null;
        Token LPAREN696=null;
        Token COMMA698=null;
        Token COMMA700=null;
        Token RPAREN702=null;
        Token TYPEOF703=null;
        Token LPAREN704=null;
        Token RPAREN706=null;
        Token CAST707=null;
        Token LPAREN708=null;
        Token COMMA710=null;
        Token AS711=null;
        Token RPAREN713=null;
        Token EXISTS716=null;
        Token LPAREN717=null;
        Token RPAREN719=null;
        Token CURRENT_TIMESTAMP720=null;
        Token LPAREN721=null;
        Token RPAREN722=null;
        EsperEPL2GrammarParser.expression_return expression613 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr614 = null;
        EsperEPL2GrammarParser.expression_return expression620 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr621 = null;
        EsperEPL2GrammarParser.expression_return expression627 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr629 = null;
        EsperEPL2GrammarParser.expression_return expression635 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr636 = null;
        EsperEPL2GrammarParser.expression_return expression642 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr643 = null;
        EsperEPL2GrammarParser.expression_return expression649 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr650 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation652 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation653 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation654 = null;
        EsperEPL2GrammarParser.expression_return expression657 = null;
        EsperEPL2GrammarParser.expression_return expression659 = null;
        EsperEPL2GrammarParser.expression_return expression661 = null;
        EsperEPL2GrammarParser.expression_return expression665 = null;
        EsperEPL2GrammarParser.expression_return expression667 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass669 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass670 = null;
        EsperEPL2GrammarParser.expression_return expression673 = null;
        EsperEPL2GrammarParser.expression_return expression675 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass677 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass678 = null;
        EsperEPL2GrammarParser.expression_return expression681 = null;
        EsperEPL2GrammarParser.expression_return expression685 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass687 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass688 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty693 = null;
        EsperEPL2GrammarParser.expression_return expression697 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier699 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier701 = null;
        EsperEPL2GrammarParser.expression_return expression705 = null;
        EsperEPL2GrammarParser.expression_return expression709 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier712 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass714 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass715 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty718 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass723 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass724 = null;
        CommonTree d_tree=null;
        CommonTree SUM609_tree=null;
        CommonTree LPAREN610_tree=null;
        CommonTree ALL611_tree=null;
        CommonTree DISTINCT612_tree=null;
        CommonTree RPAREN615_tree=null;
        CommonTree AVG616_tree=null;
        CommonTree LPAREN617_tree=null;
        CommonTree ALL618_tree=null;
        CommonTree DISTINCT619_tree=null;
        CommonTree RPAREN622_tree=null;
        CommonTree COUNT623_tree=null;
        CommonTree LPAREN624_tree=null;
        CommonTree ALL625_tree=null;
        CommonTree DISTINCT626_tree=null;
        CommonTree STAR628_tree=null;
        CommonTree RPAREN630_tree=null;
        CommonTree MEDIAN631_tree=null;
        CommonTree LPAREN632_tree=null;
        CommonTree ALL633_tree=null;
        CommonTree DISTINCT634_tree=null;
        CommonTree RPAREN637_tree=null;
        CommonTree STDDEV638_tree=null;
        CommonTree LPAREN639_tree=null;
        CommonTree ALL640_tree=null;
        CommonTree DISTINCT641_tree=null;
        CommonTree RPAREN644_tree=null;
        CommonTree AVEDEV645_tree=null;
        CommonTree LPAREN646_tree=null;
        CommonTree ALL647_tree=null;
        CommonTree DISTINCT648_tree=null;
        CommonTree RPAREN651_tree=null;
        CommonTree COALESCE655_tree=null;
        CommonTree LPAREN656_tree=null;
        CommonTree COMMA658_tree=null;
        CommonTree COMMA660_tree=null;
        CommonTree RPAREN662_tree=null;
        CommonTree PREVIOUS663_tree=null;
        CommonTree LPAREN664_tree=null;
        CommonTree COMMA666_tree=null;
        CommonTree RPAREN668_tree=null;
        CommonTree PREVIOUSTAIL671_tree=null;
        CommonTree LPAREN672_tree=null;
        CommonTree COMMA674_tree=null;
        CommonTree RPAREN676_tree=null;
        CommonTree PREVIOUSCOUNT679_tree=null;
        CommonTree LPAREN680_tree=null;
        CommonTree RPAREN682_tree=null;
        CommonTree PREVIOUSWINDOW683_tree=null;
        CommonTree LPAREN684_tree=null;
        CommonTree RPAREN686_tree=null;
        CommonTree PRIOR689_tree=null;
        CommonTree LPAREN690_tree=null;
        CommonTree NUM_INT691_tree=null;
        CommonTree COMMA692_tree=null;
        CommonTree RPAREN694_tree=null;
        CommonTree INSTANCEOF695_tree=null;
        CommonTree LPAREN696_tree=null;
        CommonTree COMMA698_tree=null;
        CommonTree COMMA700_tree=null;
        CommonTree RPAREN702_tree=null;
        CommonTree TYPEOF703_tree=null;
        CommonTree LPAREN704_tree=null;
        CommonTree RPAREN706_tree=null;
        CommonTree CAST707_tree=null;
        CommonTree LPAREN708_tree=null;
        CommonTree COMMA710_tree=null;
        CommonTree AS711_tree=null;
        CommonTree RPAREN713_tree=null;
        CommonTree EXISTS716_tree=null;
        CommonTree LPAREN717_tree=null;
        CommonTree RPAREN719_tree=null;
        CommonTree CURRENT_TIMESTAMP720_tree=null;
        CommonTree LPAREN721_tree=null;
        CommonTree RPAREN722_tree=null;
        RewriteRuleTokenStream stream_CAST=new RewriteRuleTokenStream(adaptor,"token CAST");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PREVIOUSTAIL=new RewriteRuleTokenStream(adaptor,"token PREVIOUSTAIL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_CURRENT_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token CURRENT_TIMESTAMP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PREVIOUS=new RewriteRuleTokenStream(adaptor,"token PREVIOUS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_PREVIOUSWINDOW=new RewriteRuleTokenStream(adaptor,"token PREVIOUSWINDOW");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            int alt271=20;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt271=1;
                }
                break;
            case AVG:
                {
                alt271=2;
                }
                break;
            case COUNT:
                {
                alt271=3;
                }
                break;
            case MEDIAN:
                {
                alt271=4;
                }
                break;
            case STDDEV:
                {
                alt271=5;
                }
                break;
            case AVEDEV:
                {
                alt271=6;
                }
                break;
            case FIRST:
                {
                alt271=7;
                }
                break;
            case LAST:
                {
                alt271=8;
                }
                break;
            case WINDOW:
                {
                alt271=9;
                }
                break;
            case COALESCE:
                {
                alt271=10;
                }
                break;
            case PREVIOUS:
                {
                alt271=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt271=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt271=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt271=14;
                }
                break;
            case PRIOR:
                {
                alt271=15;
                }
                break;
            case INSTANCEOF:
                {
                alt271=16;
                }
                break;
            case TYPEOF:
                {
                alt271=17;
                }
                break;
            case CAST:
                {
                alt271=18;
                }
                break;
            case EXISTS:
                {
                alt271=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt271=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);
                throw nvae;
            }
            switch (alt271) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM609=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc9468); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM609_tree = (CommonTree)adaptor.create(SUM609);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM609_tree, root_0);
                    }
                    LPAREN610=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9471); if (state.failed) return retval;
                    int alt242=3;
                    int LA242_0 = input.LA(1);
                    if ( (LA242_0==ALL) ) {
                        alt242=1;
                    }
                    else if ( (LA242_0==DISTINCT) ) {
                        alt242=2;
                    }
                    switch (alt242) {
                        case 1 :
                            {
                            ALL611=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9475); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT612=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9480); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT612_tree = (CommonTree)adaptor.create(DISTINCT612);
                            adaptor.addChild(root_0, DISTINCT612_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9484);
                    expression613=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression613.getTree());
                    int alt243=2;
                    int LA243_0 = input.LA(1);
                    if ( (LA243_0==COMMA) ) {
                        alt243=1;
                    }
                    switch (alt243) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9486);
                            aggregationFilterExpr614=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr614.getTree());
                            }
                            break;
                    }
                    RPAREN615=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9489); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG616=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc9495); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG616_tree = (CommonTree)adaptor.create(AVG616);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG616_tree, root_0);
                    }
                    LPAREN617=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9498); if (state.failed) return retval;
                    int alt244=3;
                    int LA244_0 = input.LA(1);
                    if ( (LA244_0==ALL) ) {
                        alt244=1;
                    }
                    else if ( (LA244_0==DISTINCT) ) {
                        alt244=2;
                    }
                    switch (alt244) {
                        case 1 :
                            {
                            ALL618=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9502); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT619=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9507); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT619_tree = (CommonTree)adaptor.create(DISTINCT619);
                            adaptor.addChild(root_0, DISTINCT619_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9511);
                    expression620=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression620.getTree());
                    int alt245=2;
                    int LA245_0 = input.LA(1);
                    if ( (LA245_0==COMMA) ) {
                        alt245=1;
                    }
                    switch (alt245) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9513);
                            aggregationFilterExpr621=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr621.getTree());
                            }
                            break;
                    }
                    RPAREN622=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9516); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT623=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc9522); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT623_tree = (CommonTree)adaptor.create(COUNT623);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT623_tree, root_0);
                    }
                    LPAREN624=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9525); if (state.failed) return retval;
                    int alt247=2;
                    int LA247_0 = input.LA(1);
                    if ( (LA247_0==WINDOW||LA247_0==BETWEEN||LA247_0==ESCAPE||(LA247_0>=NOT_EXPR && LA247_0<=EVERY_EXPR)||LA247_0==WHERE||(LA247_0>=SUM && LA247_0<=COUNT)||LA247_0==CASE||LA247_0==OUTER||(LA247_0>=JOIN && LA247_0<=FULL)||(LA247_0>=DISTINCT && LA247_0<=ALL)||(LA247_0>=EVENTS && LA247_0<=LAST)||(LA247_0>=UNIDIRECTIONAL && LA247_0<=CURRENT_TIMESTAMP)||(LA247_0>=SNAPSHOT && LA247_0<=INDEX)||(LA247_0>=BOOLEAN_TRUE && LA247_0<=VALUE_NULL)||(LA247_0>=DEFINE && LA247_0<=AFTER)||LA247_0==WHILE||(LA247_0>=MERGE && LA247_0<=MATCHED)||LA247_0==NEWKW||LA247_0==CONTEXT||LA247_0==NUM_DOUBLE||(LA247_0>=IDENT && LA247_0<=LPAREN)||LA247_0==LCURLY||(LA247_0>=PLUS && LA247_0<=QUOTED_STRING_LITERAL)||LA247_0==MINUS||LA247_0==NUM_INT||(LA247_0>=TICKED_STRING_LITERAL && LA247_0<=NUM_FLOAT)) ) {
                        alt247=1;
                    }
                    else if ( (LA247_0==STAR) ) {
                        alt247=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 247, 0, input);
                        throw nvae;
                    }
                    switch (alt247) {
                        case 1 :
                            {
                            {
                            int alt246=3;
                            int LA246_0 = input.LA(1);
                            if ( (LA246_0==ALL) ) {
                                alt246=1;
                            }
                            else if ( (LA246_0==DISTINCT) ) {
                                alt246=2;
                            }
                            switch (alt246) {
                                case 1 :
                                    {
                                    ALL625=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9537); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT626=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9542); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT626_tree = (CommonTree)adaptor.create(DISTINCT626);
                                    adaptor.addChild(root_0, DISTINCT626_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc9546);
                            expression627=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression627.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR628=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc9557); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    int alt248=2;
                    int LA248_0 = input.LA(1);
                    if ( (LA248_0==COMMA) ) {
                        alt248=1;
                    }
                    switch (alt248) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9568);
                            aggregationFilterExpr629=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr629.getTree());
                            }
                            break;
                    }
                    RPAREN630=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9571); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN631=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc9577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN631_tree = (CommonTree)adaptor.create(MEDIAN631);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN631_tree, root_0);
                    }
                    LPAREN632=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9580); if (state.failed) return retval;
                    int alt249=3;
                    int LA249_0 = input.LA(1);
                    if ( (LA249_0==ALL) ) {
                        alt249=1;
                    }
                    else if ( (LA249_0==DISTINCT) ) {
                        alt249=2;
                    }
                    switch (alt249) {
                        case 1 :
                            {
                            ALL633=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9584); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT634=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9589); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT634_tree = (CommonTree)adaptor.create(DISTINCT634);
                            adaptor.addChild(root_0, DISTINCT634_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9593);
                    expression635=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression635.getTree());
                    int alt250=2;
                    int LA250_0 = input.LA(1);
                    if ( (LA250_0==COMMA) ) {
                        alt250=1;
                    }
                    switch (alt250) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9595);
                            aggregationFilterExpr636=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr636.getTree());
                            }
                            break;
                    }
                    RPAREN637=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9598); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV638=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc9604); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV638_tree = (CommonTree)adaptor.create(STDDEV638);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV638_tree, root_0);
                    }
                    LPAREN639=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9607); if (state.failed) return retval;
                    int alt251=3;
                    int LA251_0 = input.LA(1);
                    if ( (LA251_0==ALL) ) {
                        alt251=1;
                    }
                    else if ( (LA251_0==DISTINCT) ) {
                        alt251=2;
                    }
                    switch (alt251) {
                        case 1 :
                            {
                            ALL640=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9611); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT641=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9616); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT641_tree = (CommonTree)adaptor.create(DISTINCT641);
                            adaptor.addChild(root_0, DISTINCT641_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9620);
                    expression642=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression642.getTree());
                    int alt252=2;
                    int LA252_0 = input.LA(1);
                    if ( (LA252_0==COMMA) ) {
                        alt252=1;
                    }
                    switch (alt252) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9622);
                            aggregationFilterExpr643=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr643.getTree());
                            }
                            break;
                    }
                    RPAREN644=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9625); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV645=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc9631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV645_tree = (CommonTree)adaptor.create(AVEDEV645);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV645_tree, root_0);
                    }
                    LPAREN646=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9634); if (state.failed) return retval;
                    int alt253=3;
                    int LA253_0 = input.LA(1);
                    if ( (LA253_0==ALL) ) {
                        alt253=1;
                    }
                    else if ( (LA253_0==DISTINCT) ) {
                        alt253=2;
                    }
                    switch (alt253) {
                        case 1 :
                            {
                            ALL647=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9638); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT648=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9643); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT648_tree = (CommonTree)adaptor.create(DISTINCT648);
                            adaptor.addChild(root_0, DISTINCT648_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9647);
                    expression649=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression649.getTree());
                    int alt254=2;
                    int LA254_0 = input.LA(1);
                    if ( (LA254_0==COMMA) ) {
                        alt254=1;
                    }
                    switch (alt254) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9649);
                            aggregationFilterExpr650=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr650.getTree());
                            }
                            break;
                    }
                    RPAREN651=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9652); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc9658);
                    firstAggregation652=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation652.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc9663);
                    lastAggregation653=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation653.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc9668);
                    windowAggregation654=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation654.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE655=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc9673); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE655_tree = (CommonTree)adaptor.create(COALESCE655);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE655_tree, root_0);
                    }
                    LPAREN656=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9676); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9679);
                    expression657=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression657.getTree());
                    COMMA658=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9681); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9684);
                    expression659=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression659.getTree());
                    loop255:
                    do {
                        int alt255=2;
                        int LA255_0 = input.LA(1);
                        if ( (LA255_0==COMMA) ) {
                            alt255=1;
                        }
                        switch (alt255) {
                    	case 1 :
                    	    {
                    	    COMMA660=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9687); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc9690);
                    	    expression661=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression661.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop255;
                        }
                    } while (true);
                    RPAREN662=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9694); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    PREVIOUS663=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc9700); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUS.add(PREVIOUS663);
                    LPAREN664=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN664);
                    pushFollow(FOLLOW_expression_in_builtinFunc9704);
                    expression665=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression665.getTree());
                    int alt256=2;
                    int LA256_0 = input.LA(1);
                    if ( (LA256_0==COMMA) ) {
                        alt256=1;
                    }
                    switch (alt256) {
                        case 1 :
                            {
                            COMMA666=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9707); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA666);
                            pushFollow(FOLLOW_expression_in_builtinFunc9709);
                            expression667=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression667.getTree());
                            }
                            break;
                    }
                    RPAREN668=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9713); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN668);
                    int alt258=2;
                    int LA258_0 = input.LA(1);
                    if ( (LA258_0==DOT) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9718); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9720);
                            libFunctionNoClass669=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass669.getTree());
                            loop257:
                            do {
                                int alt257=2;
                                int LA257_0 = input.LA(1);
                                if ( (LA257_0==DOT) ) {
                                    alt257=1;
                                }
                                switch (alt257) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9725); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9727);
                            	    libFunctionNoClass670=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass670.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop257;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    {
                    PREVIOUSTAIL671=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc9774); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSTAIL.add(PREVIOUSTAIL671);
                    LPAREN672=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9776); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN672);
                    pushFollow(FOLLOW_expression_in_builtinFunc9778);
                    expression673=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression673.getTree());
                    int alt259=2;
                    int LA259_0 = input.LA(1);
                    if ( (LA259_0==COMMA) ) {
                        alt259=1;
                    }
                    switch (alt259) {
                        case 1 :
                            {
                            COMMA674=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9781); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA674);
                            pushFollow(FOLLOW_expression_in_builtinFunc9783);
                            expression675=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression675.getTree());
                            }
                            break;
                    }
                    RPAREN676=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN676);
                    int alt261=2;
                    int LA261_0 = input.LA(1);
                    if ( (LA261_0==DOT) ) {
                        alt261=1;
                    }
                    switch (alt261) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9792); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9794);
                            libFunctionNoClass677=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass677.getTree());
                            loop260:
                            do {
                                int alt260=2;
                                int LA260_0 = input.LA(1);
                                if ( (LA260_0==DOT) ) {
                                    alt260=1;
                                }
                                switch (alt260) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9799); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9801);
                            	    libFunctionNoClass678=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass678.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop260;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT679=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc9848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT679_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT679);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT679_tree, root_0);
                    }
                    LPAREN680=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9851); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9854);
                    expression681=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression681.getTree());
                    RPAREN682=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9856); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    PREVIOUSWINDOW683=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc9862); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSWINDOW.add(PREVIOUSWINDOW683);
                    LPAREN684=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9864); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN684);
                    pushFollow(FOLLOW_expression_in_builtinFunc9866);
                    expression685=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression685.getTree());
                    RPAREN686=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9868); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN686);
                    int alt263=2;
                    int LA263_0 = input.LA(1);
                    if ( (LA263_0==DOT) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9873); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9875);
                            libFunctionNoClass687=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass687.getTree());
                            loop262:
                            do {
                                int alt262=2;
                                int LA262_0 = input.LA(1);
                                if ( (LA262_0==DOT) ) {
                                    alt262=1;
                                }
                                switch (alt262) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9880); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9882);
                            	    libFunctionNoClass688=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass688.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop262;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR689=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc9927); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR689_tree = (CommonTree)adaptor.create(PRIOR689);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR689_tree, root_0);
                    }
                    LPAREN690=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9930); if (state.failed) return retval;
                    NUM_INT691=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc9933); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT691_tree = (CommonTree)adaptor.create(NUM_INT691);
                    adaptor.addChild(root_0, NUM_INT691_tree);
                    }
                    COMMA692=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9935); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc9938);
                    eventProperty693=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty693.getTree());
                    RPAREN694=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9940); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF695=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc9950); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF695_tree = (CommonTree)adaptor.create(INSTANCEOF695);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF695_tree, root_0);
                    }
                    LPAREN696=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9953); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9956);
                    expression697=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression697.getTree());
                    COMMA698=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9958); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9961);
                    classIdentifier699=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier699.getTree());
                    loop264:
                    do {
                        int alt264=2;
                        int LA264_0 = input.LA(1);
                        if ( (LA264_0==COMMA) ) {
                            alt264=1;
                        }
                        switch (alt264) {
                    	case 1 :
                    	    {
                    	    COMMA700=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9964); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9967);
                    	    classIdentifier701=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier701.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop264;
                        }
                    } while (true);
                    RPAREN702=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9971); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF703=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc9977); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF703_tree = (CommonTree)adaptor.create(TYPEOF703);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF703_tree, root_0);
                    }
                    LPAREN704=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9980); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9983);
                    expression705=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression705.getTree());
                    RPAREN706=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9985); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    CAST707=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc9991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CAST.add(CAST707);
                    LPAREN708=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN708);
                    pushFollow(FOLLOW_expression_in_builtinFunc9995);
                    expression709=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression709.getTree());
                    int alt265=2;
                    int LA265_0 = input.LA(1);
                    if ( (LA265_0==COMMA) ) {
                        alt265=1;
                    }
                    else if ( (LA265_0==AS) ) {
                        alt265=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 265, 0, input);
                        throw nvae;
                    }
                    switch (alt265) {
                        case 1 :
                            {
                            COMMA710=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9998); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA710);
                            }
                            break;
                        case 2 :
                            {
                            AS711=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc10002); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS711);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc10005);
                    classIdentifier712=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier712.getTree());
                    RPAREN713=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN713);
                    int alt267=2;
                    int LA267_0 = input.LA(1);
                    if ( (LA267_0==DOT) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10012); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10014);
                            libFunctionNoClass714=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass714.getTree());
                            loop266:
                            do {
                                int alt266=2;
                                int LA266_0 = input.LA(1);
                                if ( (LA266_0==DOT) ) {
                                    alt266=1;
                                }
                                switch (alt266) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10019); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10021);
                            	    libFunctionNoClass715=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass715.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop266;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_2, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS716=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc10066); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS716_tree = (CommonTree)adaptor.create(EXISTS716);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS716_tree, root_0);
                    }
                    LPAREN717=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10069); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc10072);
                    eventProperty718=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty718.getTree());
                    RPAREN719=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10074); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    CURRENT_TIMESTAMP720=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc10080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURRENT_TIMESTAMP.add(CURRENT_TIMESTAMP720);
                    int alt268=2;
                    int LA268_0 = input.LA(1);
                    if ( (LA268_0==LPAREN) ) {
                        alt268=1;
                    }
                    switch (alt268) {
                        case 1 :
                            {
                            LPAREN721=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10083); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN721);
                            RPAREN722=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10085); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN722);
                            }
                            break;
                    }
                    int alt270=2;
                    int LA270_0 = input.LA(1);
                    if ( (LA270_0==DOT) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10092); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10094);
                            libFunctionNoClass723=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass723.getTree());
                            loop269:
                            do {
                                int alt269=2;
                                int LA269_0 = input.LA(1);
                                if ( (LA269_0==DOT) ) {
                                    alt269=1;
                                }
                                switch (alt269) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10099); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10101);
                            	    libFunctionNoClass724=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass724.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop269;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_2);
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token FIRST725=null;
        Token LPAREN726=null;
        Token COMMA728=null;
        Token RPAREN730=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr727 = null;
        EsperEPL2GrammarParser.expression_return expression729 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass731 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass732 = null;
        CommonTree d_tree=null;
        CommonTree FIRST725_tree=null;
        CommonTree LPAREN726_tree=null;
        CommonTree COMMA728_tree=null;
        CommonTree RPAREN730_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            FIRST725=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation10145); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST725);
            LPAREN726=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation10147); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN726);
            int alt273=2;
            int LA273_0 = input.LA(1);
            if ( (LA273_0==WINDOW||LA273_0==BETWEEN||LA273_0==ESCAPE||(LA273_0>=NOT_EXPR && LA273_0<=EVERY_EXPR)||LA273_0==WHERE||(LA273_0>=SUM && LA273_0<=COUNT)||LA273_0==CASE||LA273_0==OUTER||(LA273_0>=JOIN && LA273_0<=FULL)||(LA273_0>=EVENTS && LA273_0<=LAST)||(LA273_0>=UNIDIRECTIONAL && LA273_0<=CURRENT_TIMESTAMP)||(LA273_0>=SNAPSHOT && LA273_0<=INDEX)||(LA273_0>=BOOLEAN_TRUE && LA273_0<=VALUE_NULL)||(LA273_0>=DEFINE && LA273_0<=AFTER)||LA273_0==WHILE||(LA273_0>=MERGE && LA273_0<=MATCHED)||LA273_0==NEWKW||LA273_0==CONTEXT||LA273_0==NUM_DOUBLE||(LA273_0>=IDENT && LA273_0<=LPAREN)||LA273_0==LCURLY||LA273_0==STAR||(LA273_0>=PLUS && LA273_0<=QUOTED_STRING_LITERAL)||LA273_0==MINUS||LA273_0==NUM_INT||(LA273_0>=TICKED_STRING_LITERAL && LA273_0<=NUM_FLOAT)) ) {
                alt273=1;
            }
            switch (alt273) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_firstAggregation10150);
                    accessAggExpr727=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr727.getTree());
                    int alt272=2;
                    int LA272_0 = input.LA(1);
                    if ( (LA272_0==COMMA) ) {
                        alt272=1;
                    }
                    switch (alt272) {
                        case 1 :
                            {
                            COMMA728=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation10153); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA728);
                            pushFollow(FOLLOW_expression_in_firstAggregation10155);
                            expression729=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression729.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN730=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation10161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN730);
            int alt275=2;
            int LA275_0 = input.LA(1);
            if ( (LA275_0==DOT) ) {
                alt275=1;
            }
            switch (alt275) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation10166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation10168);
                    libFunctionNoClass731=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass731.getTree());
                    loop274:
                    do {
                        int alt274=2;
                        int LA274_0 = input.LA(1);
                        if ( (LA274_0==DOT) ) {
                            alt274=1;
                        }
                        switch (alt274) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation10173); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation10175);
                    	    libFunctionNoClass732=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass732.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop274;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LAST733=null;
        Token LPAREN734=null;
        Token COMMA736=null;
        Token RPAREN738=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr735 = null;
        EsperEPL2GrammarParser.expression_return expression737 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass739 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass740 = null;
        CommonTree d_tree=null;
        CommonTree LAST733_tree=null;
        CommonTree LPAREN734_tree=null;
        CommonTree COMMA736_tree=null;
        CommonTree RPAREN738_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LAST733=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation10230); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST733);
            LPAREN734=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation10232); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN734);
            int alt277=2;
            int LA277_0 = input.LA(1);
            if ( (LA277_0==WINDOW||LA277_0==BETWEEN||LA277_0==ESCAPE||(LA277_0>=NOT_EXPR && LA277_0<=EVERY_EXPR)||LA277_0==WHERE||(LA277_0>=SUM && LA277_0<=COUNT)||LA277_0==CASE||LA277_0==OUTER||(LA277_0>=JOIN && LA277_0<=FULL)||(LA277_0>=EVENTS && LA277_0<=LAST)||(LA277_0>=UNIDIRECTIONAL && LA277_0<=CURRENT_TIMESTAMP)||(LA277_0>=SNAPSHOT && LA277_0<=INDEX)||(LA277_0>=BOOLEAN_TRUE && LA277_0<=VALUE_NULL)||(LA277_0>=DEFINE && LA277_0<=AFTER)||LA277_0==WHILE||(LA277_0>=MERGE && LA277_0<=MATCHED)||LA277_0==NEWKW||LA277_0==CONTEXT||LA277_0==NUM_DOUBLE||(LA277_0>=IDENT && LA277_0<=LPAREN)||LA277_0==LCURLY||LA277_0==STAR||(LA277_0>=PLUS && LA277_0<=QUOTED_STRING_LITERAL)||LA277_0==MINUS||LA277_0==NUM_INT||(LA277_0>=TICKED_STRING_LITERAL && LA277_0<=NUM_FLOAT)) ) {
                alt277=1;
            }
            switch (alt277) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_lastAggregation10235);
                    accessAggExpr735=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr735.getTree());
                    int alt276=2;
                    int LA276_0 = input.LA(1);
                    if ( (LA276_0==COMMA) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            {
                            COMMA736=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation10238); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA736);
                            pushFollow(FOLLOW_expression_in_lastAggregation10240);
                            expression737=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression737.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN738=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation10246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN738);
            int alt279=2;
            int LA279_0 = input.LA(1);
            if ( (LA279_0==DOT) ) {
                alt279=1;
            }
            switch (alt279) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation10251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation10253);
                    libFunctionNoClass739=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass739.getTree());
                    loop278:
                    do {
                        int alt278=2;
                        int LA278_0 = input.LA(1);
                        if ( (LA278_0==DOT) ) {
                            alt278=1;
                        }
                        switch (alt278) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation10258); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation10260);
                    	    libFunctionNoClass740=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass740.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop278;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token WINDOW741=null;
        Token LPAREN742=null;
        Token RPAREN744=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr743 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass745 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass746 = null;
        CommonTree d_tree=null;
        CommonTree WINDOW741_tree=null;
        CommonTree LPAREN742_tree=null;
        CommonTree RPAREN744_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            WINDOW741=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation10316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW741);
            LPAREN742=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation10318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN742);
            int alt280=2;
            int LA280_0 = input.LA(1);
            if ( (LA280_0==WINDOW||LA280_0==BETWEEN||LA280_0==ESCAPE||(LA280_0>=NOT_EXPR && LA280_0<=EVERY_EXPR)||LA280_0==WHERE||(LA280_0>=SUM && LA280_0<=COUNT)||LA280_0==CASE||LA280_0==OUTER||(LA280_0>=JOIN && LA280_0<=FULL)||(LA280_0>=EVENTS && LA280_0<=LAST)||(LA280_0>=UNIDIRECTIONAL && LA280_0<=CURRENT_TIMESTAMP)||(LA280_0>=SNAPSHOT && LA280_0<=INDEX)||(LA280_0>=BOOLEAN_TRUE && LA280_0<=VALUE_NULL)||(LA280_0>=DEFINE && LA280_0<=AFTER)||LA280_0==WHILE||(LA280_0>=MERGE && LA280_0<=MATCHED)||LA280_0==NEWKW||LA280_0==CONTEXT||LA280_0==NUM_DOUBLE||(LA280_0>=IDENT && LA280_0<=LPAREN)||LA280_0==LCURLY||LA280_0==STAR||(LA280_0>=PLUS && LA280_0<=QUOTED_STRING_LITERAL)||LA280_0==MINUS||LA280_0==NUM_INT||(LA280_0>=TICKED_STRING_LITERAL && LA280_0<=NUM_FLOAT)) ) {
                alt280=1;
            }
            switch (alt280) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_windowAggregation10320);
                    accessAggExpr743=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr743.getTree());
                    }
                    break;
            }
            RPAREN744=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation10323); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN744);
            int alt282=2;
            int LA282_0 = input.LA(1);
            if ( (LA282_0==DOT) ) {
                alt282=1;
            }
            switch (alt282) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation10328); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation10330);
                    libFunctionNoClass745=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass745.getTree());
                    loop281:
                    do {
                        int alt281=2;
                        int LA281_0 = input.LA(1);
                        if ( (LA281_0==DOT) ) {
                            alt281=1;
                        }
                        switch (alt281) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation10335); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation10337);
                    	    libFunctionNoClass746=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass746.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop281;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector747 = null;
        EsperEPL2GrammarParser.expression_return expression748 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyStreamSelector=new RewriteRuleSubtreeStream(adaptor,"rule propertyStreamSelector");
        try {
            int alt283=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt283=1;
                }
                break;
            case IDENT:
                {
                int LA283_2 = input.LA(2);
                if ( (LA283_2==DOT) ) {
                    int LA283_75 = input.LA(3);
                    if ( (LA283_75==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt283=2;
                    }
                    else if ( (LA283_75==WINDOW||LA283_75==BETWEEN||LA283_75==ESCAPE||LA283_75==EVERY_EXPR||LA283_75==WHERE||(LA283_75>=SUM && LA283_75<=COUNT)||LA283_75==OUTER||(LA283_75>=JOIN && LA283_75<=FULL)||(LA283_75>=EVENTS && LA283_75<=LAST)||(LA283_75>=UNIDIRECTIONAL && LA283_75<=PREVIOUSTAIL)||LA283_75==PRIOR||(LA283_75>=WEEKDAY && LA283_75<=CAST)||(LA283_75>=SNAPSHOT && LA283_75<=INDEX)||(LA283_75>=DEFINE && LA283_75<=AFTER)||LA283_75==WHILE||(LA283_75>=MERGE && LA283_75<=MATCHED)||LA283_75==CONTEXT||LA283_75==IDENT||LA283_75==TICKED_STRING_LITERAL) ) {
                        alt283=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 283, 75, input);
                        throw nvae;
                    }
                }
                else if ( ((LA283_2>=IN_SET && LA283_2<=REGEXP)||(LA283_2>=OR_EXPR && LA283_2<=NOT_EXPR)||LA283_2==IS||LA283_2==LBRACK||(LA283_2>=LPAREN && LA283_2<=RPAREN)||(LA283_2>=COMMA && LA283_2<=EQUALS)||LA283_2==STAR||(LA283_2>=BOR && LA283_2<=QUESTION)||(LA283_2>=BAND && LA283_2<=MOD)||LA283_2==ESCAPECHAR) ) {
                    alt283=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 283, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt283=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);
                throw nvae;
            }
            switch (alt283) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr10394); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr10414);
                    propertyStreamSelector747=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyStreamSelector.add(propertyStreamSelector747.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_propertyStreamSelector.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_accessAggExpr10427);
                    expression748=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression748.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class aggregationFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.aggregationFilterExpr_return retval = new EsperEPL2GrammarParser.aggregationFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA749=null;
        EsperEPL2GrammarParser.expression_return expression750 = null;
        CommonTree COMMA749_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            COMMA749=(Token)match(input,COMMA,FOLLOW_COMMA_in_aggregationFilterExpr10446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA749);
            pushFollow(FOLLOW_expression_in_aggregationFilterExpr10448);
            expression750=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression750.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGG_FILTER_EXPR, "AGG_FILTER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty751 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction752 = null;
        try {
            int alt284=2;
            int LA284_0 = input.LA(1);
            if ( (LA284_0==IDENT) ) {
                int LA284_1 = input.LA(2);
                if ( (LA284_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA284_297 = input.LA(4);
                        if ( (LA284_297==RPAREN) ) {
                            int LA284_713 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 713, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA284_297>=IN_SET && LA284_297<=REGEXP)||(LA284_297>=OR_EXPR && LA284_297<=NOT_EXPR)||LA284_297==IS||(LA284_297>=ASC && LA284_297<=DESC)||(LA284_297>=TIMEPERIOD_SEC && LA284_297<=TIMEPERIOD_SECONDS)||(LA284_297>=COMMA && LA284_297<=EQUALS)||LA284_297==STAR||(LA284_297>=BOR && LA284_297<=PLUS)||(LA284_297>=BAND && LA284_297<=MOD)) ) {
                            alt284=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 297, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA284_298 = input.LA(4);
                        if ( (LA284_298==RPAREN) ) {
                            int LA284_744 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 744, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA284_298>=IN_SET && LA284_298<=REGEXP)||(LA284_298>=OR_EXPR && LA284_298<=NOT_EXPR)||LA284_298==IS||(LA284_298>=ASC && LA284_298<=DESC)||(LA284_298>=TIMEPERIOD_SEC && LA284_298<=TIMEPERIOD_SECONDS)||(LA284_298>=COMMA && LA284_298<=EQUALS)||LA284_298==STAR||(LA284_298>=BOR && LA284_298<=PLUS)||(LA284_298>=BAND && LA284_298<=MOD)) ) {
                            alt284=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 298, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case LBRACK:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case LCURLY:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt284=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 284, 55, input);
                        throw nvae;
                    }
                }
                else if ( (LA284_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==DOT) ) {
                    int LA284_57 = input.LA(3);
                    if ( (LA284_57==IDENT) ) {
                        int LA284_375 = input.LA(4);
                        if ( (LA284_375==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==LPAREN) ) {
                            int LA284_777 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 777, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA284_375==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_375==DOT) ) {
                            int LA284_835 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 835, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 375, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA284_57==TICKED_STRING_LITERAL) ) {
                        int LA284_376 = input.LA(4);
                        if ( (LA284_376==DOT) ) {
                            int LA284_836 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 836, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA284_376==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==LPAREN) ) {
                            int LA284_839 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 839, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA284_376==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_376==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 376, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA284_57==MAX) ) {
                        int LA284_377 = input.LA(4);
                        if ( (LA284_377==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==LPAREN) ) {
                            int LA284_899 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 899, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA284_377==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_377==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 377, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA284_57==MIN) ) {
                        int LA284_378 = input.LA(4);
                        if ( (LA284_378==LPAREN) ) {
                            int LA284_958 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 958, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA284_378==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_378==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 378, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA284_57==BETWEEN||LA284_57==WHERE||LA284_57==SET||LA284_57==AFTER) ) {
                        alt284=2;
                    }
                    else if ( (LA284_57==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_57==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 284, 57, input);
                        throw nvae;
                    }
                }
                else if ( (LA284_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 284, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA284_0==TICKED_STRING_LITERAL) ) {
                int LA284_2 = input.LA(2);
                if ( (LA284_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA284_427 = input.LA(4);
                        if ( (LA284_427==RPAREN) ) {
                            int LA284_1019 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 1019, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA284_427>=IN_SET && LA284_427<=REGEXP)||(LA284_427>=OR_EXPR && LA284_427<=NOT_EXPR)||LA284_427==IS||(LA284_427>=ASC && LA284_427<=DESC)||(LA284_427>=TIMEPERIOD_SEC && LA284_427<=TIMEPERIOD_SECONDS)||(LA284_427>=COMMA && LA284_427<=EQUALS)||LA284_427==STAR||(LA284_427>=BOR && LA284_427<=PLUS)||(LA284_427>=BAND && LA284_427<=MOD)) ) {
                            alt284=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 427, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA284_428 = input.LA(4);
                        if ( (LA284_428==RPAREN) ) {
                            int LA284_1050 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 1050, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA284_428>=IN_SET && LA284_428<=REGEXP)||(LA284_428>=OR_EXPR && LA284_428<=NOT_EXPR)||LA284_428==IS||(LA284_428>=ASC && LA284_428<=DESC)||(LA284_428>=TIMEPERIOD_SEC && LA284_428<=TIMEPERIOD_SECONDS)||(LA284_428>=COMMA && LA284_428<=EQUALS)||LA284_428==STAR||(LA284_428>=BOR && LA284_428<=PLUS)||(LA284_428>=BAND && LA284_428<=MOD)) ) {
                            alt284=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 428, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case LBRACK:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case LCURLY:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt284=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 284, 116, input);
                        throw nvae;
                    }
                }
                else if ( (LA284_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==DOT) ) {
                    int LA284_118 = input.LA(3);
                    if ( (LA284_118==IDENT) ) {
                        int LA284_505 = input.LA(4);
                        if ( (LA284_505==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==LPAREN) ) {
                            int LA284_1083 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 1083, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA284_505==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_505==DOT) ) {
                            int LA284_1141 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 1141, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 505, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA284_118==TICKED_STRING_LITERAL) ) {
                        int LA284_506 = input.LA(4);
                        if ( (LA284_506==DOT) ) {
                            int LA284_1142 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 1142, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA284_506==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==LPAREN) ) {
                            int LA284_1145 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 1145, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA284_506==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_506==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 506, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA284_118==MAX) ) {
                        int LA284_507 = input.LA(4);
                        if ( (LA284_507==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==LPAREN) ) {
                            int LA284_1205 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 1205, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA284_507==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_507==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 507, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA284_118==MIN) ) {
                        int LA284_508 = input.LA(4);
                        if ( (LA284_508==LPAREN) ) {
                            int LA284_1264 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 1264, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA284_508==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else if ( (LA284_508==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt284=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 508, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA284_118==BETWEEN||LA284_118==WHERE||LA284_118==SET||LA284_118==AFTER) ) {
                        alt284=2;
                    }
                    else if ( (LA284_118==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else if ( (LA284_118==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                        alt284=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 284, 118, input);
                        throw nvae;
                    }
                }
                else if ( (LA284_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 284, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA284_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==MAX) ) {
                int LA284_9 = input.LA(2);
                if ( (LA284_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA284_557 = input.LA(4);
                        if ( (LA284_557==RPAREN) ) {
                            int LA284_1325 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 1325, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA284_557>=IN_SET && LA284_557<=REGEXP)||(LA284_557>=OR_EXPR && LA284_557<=NOT_EXPR)||LA284_557==IS||(LA284_557>=ASC && LA284_557<=DESC)||(LA284_557>=TIMEPERIOD_SEC && LA284_557<=TIMEPERIOD_SECONDS)||(LA284_557>=COMMA && LA284_557<=EQUALS)||LA284_557==STAR||(LA284_557>=BOR && LA284_557<=PLUS)||(LA284_557>=BAND && LA284_557<=MOD)) ) {
                            alt284=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 557, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA284_558 = input.LA(4);
                        if ( (LA284_558==RPAREN) ) {
                            int LA284_1356 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 1356, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA284_558>=IN_SET && LA284_558<=REGEXP)||(LA284_558>=OR_EXPR && LA284_558<=NOT_EXPR)||LA284_558==IS||(LA284_558>=ASC && LA284_558<=DESC)||(LA284_558>=TIMEPERIOD_SEC && LA284_558<=TIMEPERIOD_SECONDS)||(LA284_558>=COMMA && LA284_558<=EQUALS)||LA284_558==STAR||(LA284_558>=BOR && LA284_558<=PLUS)||(LA284_558>=BAND && LA284_558<=MOD)) ) {
                            alt284=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 558, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case LBRACK:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case LCURLY:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt284=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 284, 175, input);
                        throw nvae;
                    }
                }
                else if ( (LA284_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 284, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA284_0==MIN) ) {
                int LA284_10 = input.LA(2);
                if ( (LA284_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA284_635 = input.LA(4);
                        if ( (LA284_635==RPAREN) ) {
                            int LA284_1387 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 1387, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA284_635>=IN_SET && LA284_635<=REGEXP)||(LA284_635>=OR_EXPR && LA284_635<=NOT_EXPR)||LA284_635==IS||(LA284_635>=ASC && LA284_635<=DESC)||(LA284_635>=TIMEPERIOD_SEC && LA284_635<=TIMEPERIOD_SECONDS)||(LA284_635>=COMMA && LA284_635<=EQUALS)||LA284_635==STAR||(LA284_635>=BOR && LA284_635<=PLUS)||(LA284_635>=BAND && LA284_635<=MOD)) ) {
                            alt284=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 635, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA284_636 = input.LA(4);
                        if ( (LA284_636==RPAREN) ) {
                            int LA284_1418 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt284=1;
                            }
                            else if ( (true) ) {
                                alt284=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 284, 1418, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA284_636>=IN_SET && LA284_636<=REGEXP)||(LA284_636>=OR_EXPR && LA284_636<=NOT_EXPR)||LA284_636==IS||(LA284_636>=ASC && LA284_636<=DESC)||(LA284_636>=TIMEPERIOD_SEC && LA284_636<=TIMEPERIOD_SECONDS)||(LA284_636>=COMMA && LA284_636<=EQUALS)||LA284_636==STAR||(LA284_636>=BOR && LA284_636<=PLUS)||(LA284_636>=BAND && LA284_636<=MOD)) ) {
                            alt284=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 284, 636, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case LBRACK:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case LCURLY:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt284=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 284, 238, input);
                        throw nvae;
                    }
                }
                else if ( (LA284_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else if ( (LA284_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt284=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 284, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA284_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                alt284=1;
            }
            else if ( (LA284_0==BETWEEN||LA284_0==WHERE||LA284_0==SET||LA284_0==AFTER) ) {
                alt284=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 284, 0, input);
                throw nvae;
            }
            switch (alt284) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction10476);
                    eventProperty751=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty751.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction10481);
                    libFunction752=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction752.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT754=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass753 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass755 = null;
        CommonTree DOT754_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction10493);
            libFunctionWithClass753=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass753.getTree());
            loop285:
            do {
                int alt285=2;
                int LA285_0 = input.LA(1);
                if ( (LA285_0==DOT) ) {
                    alt285=1;
                }
                switch (alt285) {
            	case 1 :
            	    {
            	    DOT754=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction10496); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT754);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction10498);
            	    libFunctionNoClass755=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass755.getTree());
            	    }
            	    break;
            	default :
            	    break loop285;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token DOT757=null;
        Token RPAREN760=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy756 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent758 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs759 = null;
        CommonTree l_tree=null;
        CommonTree DOT757_tree=null;
        CommonTree RPAREN760_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt286=2;
            int LA286_0 = input.LA(1);
            if ( (LA286_0==IDENT) ) {
                int LA286_1 = input.LA(2);
                if ( (LA286_1==DOT) ) {
                    alt286=1;
                }
            }
            else if ( (LA286_0==TICKED_STRING_LITERAL) ) {
                int LA286_2 = input.LA(2);
                if ( (LA286_2==DOT) ) {
                    alt286=1;
                }
            }
            switch (alt286) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass10531);
                    classIdentifierNonGreedy756=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy756.getTree());
                    DOT757=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass10533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT757);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass10537);
            funcIdent758=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent758.getTree());
            l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass10541); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(l);
            int alt287=2;
            int LA287_0 = input.LA(1);
            if ( (LA287_0==WINDOW||LA287_0==BETWEEN||LA287_0==ESCAPE||(LA287_0>=NOT_EXPR && LA287_0<=EVERY_EXPR)||LA287_0==WHERE||(LA287_0>=SUM && LA287_0<=COUNT)||LA287_0==CASE||LA287_0==OUTER||(LA287_0>=JOIN && LA287_0<=FULL)||(LA287_0>=DISTINCT && LA287_0<=ALL)||(LA287_0>=EVENTS && LA287_0<=LAST)||(LA287_0>=UNIDIRECTIONAL && LA287_0<=CURRENT_TIMESTAMP)||(LA287_0>=SNAPSHOT && LA287_0<=INDEX)||(LA287_0>=BOOLEAN_TRUE && LA287_0<=VALUE_NULL)||(LA287_0>=DEFINE && LA287_0<=AFTER)||LA287_0==WHILE||(LA287_0>=MERGE && LA287_0<=MATCHED)||LA287_0==NEWKW||LA287_0==CONTEXT||LA287_0==NUM_DOUBLE||LA287_0==LBRACK||(LA287_0>=IDENT && LA287_0<=LPAREN)||LA287_0==LCURLY||LA287_0==STAR||(LA287_0>=PLUS && LA287_0<=QUOTED_STRING_LITERAL)||LA287_0==MINUS||LA287_0==NUM_INT||(LA287_0>=TICKED_STRING_LITERAL && LA287_0<=NUM_FLOAT)) ) {
                alt287=1;
            }
            switch (alt287) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass10544);
                    libFunctionArgs759=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs759.getTree());
                    }
                    break;
            }
            RPAREN760=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass10548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN760);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token RPAREN763=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent761 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs762 = null;
        CommonTree l_tree=null;
        CommonTree RPAREN763_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass10581);
            funcIdent761=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent761.getTree());
            int alt289=2;
            int LA289_0 = input.LA(1);
            if ( (LA289_0==LPAREN) ) {
                alt289=1;
            }
            switch (alt289) {
                case 1 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass10586); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    int alt288=2;
                    int LA288_0 = input.LA(1);
                    if ( (LA288_0==WINDOW||LA288_0==BETWEEN||LA288_0==ESCAPE||(LA288_0>=NOT_EXPR && LA288_0<=EVERY_EXPR)||LA288_0==WHERE||(LA288_0>=SUM && LA288_0<=COUNT)||LA288_0==CASE||LA288_0==OUTER||(LA288_0>=JOIN && LA288_0<=FULL)||(LA288_0>=DISTINCT && LA288_0<=ALL)||(LA288_0>=EVENTS && LA288_0<=LAST)||(LA288_0>=UNIDIRECTIONAL && LA288_0<=CURRENT_TIMESTAMP)||(LA288_0>=SNAPSHOT && LA288_0<=INDEX)||(LA288_0>=BOOLEAN_TRUE && LA288_0<=VALUE_NULL)||(LA288_0>=DEFINE && LA288_0<=AFTER)||LA288_0==WHILE||(LA288_0>=MERGE && LA288_0<=MATCHED)||LA288_0==NEWKW||LA288_0==CONTEXT||LA288_0==NUM_DOUBLE||LA288_0==LBRACK||(LA288_0>=IDENT && LA288_0<=LPAREN)||LA288_0==LCURLY||LA288_0==STAR||(LA288_0>=PLUS && LA288_0<=QUOTED_STRING_LITERAL)||LA288_0==MINUS||LA288_0==NUM_INT||(LA288_0>=TICKED_STRING_LITERAL && LA288_0<=NUM_FLOAT)) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass10589);
                            libFunctionArgs762=libFunctionArgs();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs762.getTree());
                            }
                            break;
                    }
                    RPAREN763=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass10593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN763);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        Token w=null;
        Token s=null;
        Token after=null;
        Token between=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent764 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree w_tree=null;
        CommonTree s_tree=null;
        CommonTree after_tree=null;
        CommonTree between_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        try {
            int alt290=7;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt290=1;
                }
                break;
            case MAX:
                {
                alt290=2;
                }
                break;
            case MIN:
                {
                alt290=3;
                }
                break;
            case WHERE:
                {
                alt290=4;
                }
                break;
            case SET:
                {
                alt290=5;
                }
                break;
            case AFTER:
                {
                alt290=6;
                }
                break;
            case BETWEEN:
                {
                alt290=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 290, 0, input);
                throw nvae;
            }
            switch (alt290) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent10625);
                    escapableIdent764=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent764.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent10632); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent10644); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_funcIdent10656); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, w));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,SET,FOLLOW_SET_in_funcIdent10668); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    {
                    after=(Token)match(input,AFTER,FOLLOW_AFTER_in_funcIdent10680); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(after);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, after));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    {
                    between=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_funcIdent10691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BETWEEN.add(between);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, between));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL765=null;
        Token DISTINCT766=null;
        Token COMMA768=null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem767 = null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem769 = null;
        CommonTree ALL765_tree=null;
        CommonTree DISTINCT766_tree=null;
        CommonTree COMMA768_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt291=3;
            int LA291_0 = input.LA(1);
            if ( (LA291_0==ALL) ) {
                alt291=1;
            }
            else if ( (LA291_0==DISTINCT) ) {
                alt291=2;
            }
            switch (alt291) {
                case 1 :
                    {
                    ALL765=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs10708); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT766=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs10713); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT766_tree = (CommonTree)adaptor.create(DISTINCT766);
                    adaptor.addChild(root_0, DISTINCT766_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs10717);
            libFunctionArgItem767=libFunctionArgItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem767.getTree());
            loop292:
            do {
                int alt292=2;
                int LA292_0 = input.LA(1);
                if ( (LA292_0==COMMA) ) {
                    alt292=1;
                }
                switch (alt292) {
            	case 1 :
            	    {
            	    COMMA768=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs10720); if (state.failed) return retval;
            	    pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs10723);
            	    libFunctionArgItem769=libFunctionArgItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem769.getTree());
            	    }
            	    break;
            	default :
            	    break loop292;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgItem_return retval = new EsperEPL2GrammarParser.libFunctionArgItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl770 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime771 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt293=2;
            int LA293_0 = input.LA(1);
            if ( (LA293_0==IDENT) ) {
                int LA293_1 = input.LA(2);
                if ( (LA293_1==GOES) ) {
                    alt293=1;
                }
            }
            else if ( (LA293_0==LPAREN) ) {
                int LA293_2 = input.LA(2);
                if ( (LA293_2==IDENT) ) {
                    int LA293_147 = input.LA(3);
                    if ( (LA293_147==COMMA) ) {
                        alt293=1;
                    }
                    else if ( (LA293_147==RPAREN) ) {
                        int LA293_207 = input.LA(4);
                        if ( (LA293_207==GOES) ) {
                            alt293=1;
                        }
                    }
                }
            }
            switch (alt293) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_libFunctionArgItem10737);
                    expressionLambdaDecl770=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionLambdaDecl770.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionWithTime_in_libFunctionArgItem10740);
            expressionWithTime771=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime771.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR773=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr772 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr774 = null;
        CommonTree AND_EXPR773_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList10751);
            concatenationExpr772=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr772.getTree());
            AND_EXPR773=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList10753); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList10756);
            concatenationExpr774=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr774.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression775 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression10784);
            followedByExpression775=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression775.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression776 = null;
        EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat777 = null;
        RewriteRuleSubtreeStream stream_followedByRepeat=new RewriteRuleSubtreeStream(adaptor,"rule followedByRepeat");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
         boolean fb = false; 
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression10803);
            orExpression776=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression776.getTree());
            loop294:
            do {
                int alt294=2;
                int LA294_0 = input.LA(1);
                if ( ((LA294_0>=FOLLOWED_BY && LA294_0<=FOLLOWMAX_BEGIN)) ) {
                    alt294=1;
                }
                switch (alt294) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_followedByRepeat_in_followedByExpression10806);
            	    followedByRepeat777=followedByRepeat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_followedByRepeat.add(followedByRepeat777.getTree());
            	    if ( state.backtracking==0 ) {
            	       fb = true; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop294;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (fb == true) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_2);
                adaptor.addChild(root_2, stream_orExpression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_followedByRepeat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_followedByRepeat.hasNext() ) {
                    adaptor.addChild(root_1, stream_followedByRepeat.nextTree());
                }
                stream_followedByRepeat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByRepeat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat() throws RecognitionException {
        EsperEPL2GrammarParser.followedByRepeat_return retval = new EsperEPL2GrammarParser.followedByRepeat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token g=null;
        Token FOLLOWMAX_END779=null;
        EsperEPL2GrammarParser.expression_return expression778 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression780 = null;
        CommonTree f_tree=null;
        CommonTree g_tree=null;
        CommonTree FOLLOWMAX_END779_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleTokenStream stream_FOLLOWMAX_END=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_END");
        RewriteRuleTokenStream stream_FOLLOWMAX_BEGIN=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_BEGIN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            int alt295=2;
            int LA295_0 = input.LA(1);
            if ( (LA295_0==FOLLOWED_BY) ) {
                alt295=1;
            }
            else if ( (LA295_0==FOLLOWMAX_BEGIN) ) {
                alt295=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 295, 0, input);
                throw nvae;
            }
            switch (alt295) {
                case 1 :
                    {
                    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByRepeat10859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
                    }
                    break;
                case 2 :
                    {
                    {
                    g=(Token)match(input,FOLLOWMAX_BEGIN,FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat10866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_BEGIN.add(g);
                    pushFollow(FOLLOW_expression_in_followedByRepeat10868);
                    expression778=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression778.getTree());
                    FOLLOWMAX_END779=(Token)match(input,FOLLOWMAX_END,FOLLOW_FOLLOWMAX_END_in_followedByRepeat10870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_END.add(FOLLOWMAX_END779);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_orExpression_in_followedByRepeat10874);
            orExpression780=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression780.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_orExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression781 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression782 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression10903);
            andExpression781=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression781.getTree());
            loop296:
            do {
                int alt296=2;
                int LA296_0 = input.LA(1);
                if ( (LA296_0==OR_EXPR) ) {
                    alt296=1;
                }
                switch (alt296) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression10908); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression10910);
            	    andExpression782=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression782.getTree());
            	    }
            	    break;
            	default :
            	    break loop296;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression783 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression784 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression10942);
            matchUntilExpression783=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression783.getTree());
            loop297:
            do {
                int alt297=2;
                int LA297_0 = input.LA(1);
                if ( (LA297_0==AND_EXPR) ) {
                    alt297=1;
                }
                switch (alt297) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression10947); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression10949);
            	    matchUntilExpression784=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression784.getTree());
            	    }
            	    break;
            	default :
            	    break loop297;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression785 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression786 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt298=2;
            int LA298_0 = input.LA(1);
            if ( (LA298_0==LBRACK) ) {
                alt298=1;
            }
            switch (alt298) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression10984);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression10988);
            qualifyExpression785=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression785.getTree());
            int alt299=2;
            int LA299_0 = input.LA(1);
            if ( (LA299_0==UNTIL) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression10993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression10995);
                    qualifyExpression786=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression786.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList787 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix788 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt302=2;
            int LA302_0 = input.LA(1);
            if ( ((LA302_0>=NOT_EXPR && LA302_0<=EVERY_DISTINCT_EXPR)) ) {
                alt302=1;
            }
            switch (alt302) {
                case 1 :
                    {
                    int alt300=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt300=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt300=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt300=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 300, 0, input);
                        throw nvae;
                    }
                    switch (alt300) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression11060); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression11066); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression11072); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression11074);
                            distinctExpressionList787=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList787.getTree());
                            }
                            break;
                    }
                    int alt301=2;
                    int LA301_0 = input.LA(1);
                    if ( (LA301_0==LBRACK) ) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression11080);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression11089);
            guardPostFix788=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix788.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN789=null;
        Token COMMA791=null;
        Token RPAREN793=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom790 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom792 = null;
        CommonTree LPAREN789_tree=null;
        CommonTree COMMA791_tree=null;
        CommonTree RPAREN793_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN789=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList11204); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN789);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList11206);
            distinctExpressionAtom790=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom790.getTree());
            loop303:
            do {
                int alt303=2;
                int LA303_0 = input.LA(1);
                if ( (LA303_0==COMMA) ) {
                    alt303=1;
                }
                switch (alt303) {
            	case 1 :
            	    {
            	    COMMA791=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList11209); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA791);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList11211);
            	    distinctExpressionAtom792=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom792.getTree());
            	    }
            	    break;
            	default :
            	    break loop303;
                }
            } while (true);
            RPAREN793=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList11215); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN793);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime794 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_distinctExpressionAtom11238);
            expressionWithTime794=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime794.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN797=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression795 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression796 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression798 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression799 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN797_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt304=2;
            int LA304_0 = input.LA(1);
            if ( (LA304_0==IDENT||LA304_0==TICKED_STRING_LITERAL) ) {
                alt304=1;
            }
            else if ( (LA304_0==LPAREN) ) {
                alt304=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 304, 0, input);
                throw nvae;
            }
            switch (alt304) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix11253);
                    atomicExpression795=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression795.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix11259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix11261);
                    patternExpression796=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression796.getTree());
                    RPAREN797=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix11263); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN797);
                    }
                    break;
            }
            int alt305=3;
            int LA305_0 = input.LA(1);
            if ( (LA305_0==WHERE) ) {
                alt305=1;
            }
            else if ( (LA305_0==WHILE) ) {
                alt305=2;
            }
            switch (alt305) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix11270); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix11272);
                    guardWhereExpression798=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression798.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix11280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix11282);
                    guardWhileExpression799=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression799.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression800 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression801 = null;
        try {
            int alt306=2;
            int LA306_0 = input.LA(1);
            if ( (LA306_0==IDENT) ) {
                int LA306_1 = input.LA(2);
                if ( (LA306_1==COLON) ) {
                    alt306=1;
                }
                else if ( (LA306_1==EOF||(LA306_1>=OR_EXPR && LA306_1<=AND_EXPR)||LA306_1==WHERE||LA306_1==UNTIL||LA306_1==WHILE||(LA306_1>=LBRACK && LA306_1<=RBRACK)||(LA306_1>=LPAREN && LA306_1<=RPAREN)||(LA306_1>=EQUALS && LA306_1<=DOT)||LA306_1==ATCHAR||(LA306_1>=FOLLOWED_BY && LA306_1<=FOLLOWMAX_BEGIN)) ) {
                    alt306=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 306, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA306_0==TICKED_STRING_LITERAL) ) {
                alt306=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 306, 0, input);
                throw nvae;
            }
            switch (alt306) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression11344);
                    observerExpression800=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression800.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression11348);
                    patternFilterExpression801=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression801.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON802=null;
        Token LPAREN803=null;
        Token RPAREN805=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList804 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON802_tree=null;
        CommonTree LPAREN803_tree=null;
        CommonTree RPAREN805_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression11363); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON802=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression11365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON802);
            int alt307=2;
            int LA307_0 = input.LA(1);
            if ( (LA307_0==IDENT) ) {
                alt307=1;
            }
            else if ( (LA307_0==AT) ) {
                alt307=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 307, 0, input);
                throw nvae;
            }
            switch (alt307) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression11370); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression11376); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN803=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression11379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN803);
            int alt308=2;
            int LA308_0 = input.LA(1);
            if ( (LA308_0==WINDOW||LA308_0==BETWEEN||LA308_0==ESCAPE||(LA308_0>=NOT_EXPR && LA308_0<=EVERY_EXPR)||LA308_0==WHERE||(LA308_0>=SUM && LA308_0<=COUNT)||LA308_0==CASE||LA308_0==OUTER||(LA308_0>=JOIN && LA308_0<=FULL)||(LA308_0>=EVENTS && LA308_0<=LAST)||(LA308_0>=UNIDIRECTIONAL && LA308_0<=CURRENT_TIMESTAMP)||(LA308_0>=SNAPSHOT && LA308_0<=INDEX)||(LA308_0>=BOOLEAN_TRUE && LA308_0<=VALUE_NULL)||(LA308_0>=DEFINE && LA308_0<=AFTER)||LA308_0==WHILE||(LA308_0>=MERGE && LA308_0<=MATCHED)||LA308_0==NEWKW||LA308_0==CONTEXT||LA308_0==NUM_DOUBLE||LA308_0==LBRACK||(LA308_0>=IDENT && LA308_0<=LPAREN)||LA308_0==LCURLY||LA308_0==STAR||(LA308_0>=PLUS && LA308_0<=QUOTED_STRING_LITERAL)||LA308_0==MINUS||LA308_0==NUM_INT||(LA308_0>=TICKED_STRING_LITERAL && LA308_0<=NUM_FLOAT)) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression11381);
                    expressionWithTimeList804=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList804.getTree());
                    }
                    break;
            }
            RPAREN805=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression11384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN805);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT806=null;
        Token COLON807=null;
        Token IDENT808=null;
        Token LPAREN809=null;
        Token RPAREN811=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList810 = null;
        CommonTree IDENT806_tree=null;
        CommonTree COLON807_tree=null;
        CommonTree IDENT808_tree=null;
        CommonTree LPAREN809_tree=null;
        CommonTree RPAREN811_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT806=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression11433); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT806_tree = (CommonTree)adaptor.create(IDENT806);
            adaptor.addChild(root_0, IDENT806_tree);
            }
            COLON807=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression11435); if (state.failed) return retval;
            IDENT808=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression11438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT808_tree = (CommonTree)adaptor.create(IDENT808);
            adaptor.addChild(root_0, IDENT808_tree);
            }
            LPAREN809=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression11440); if (state.failed) return retval;
            int alt309=2;
            int LA309_0 = input.LA(1);
            if ( (LA309_0==WINDOW||LA309_0==BETWEEN||LA309_0==ESCAPE||(LA309_0>=NOT_EXPR && LA309_0<=EVERY_EXPR)||LA309_0==WHERE||(LA309_0>=SUM && LA309_0<=COUNT)||LA309_0==CASE||LA309_0==OUTER||(LA309_0>=JOIN && LA309_0<=FULL)||(LA309_0>=EVENTS && LA309_0<=LAST)||(LA309_0>=UNIDIRECTIONAL && LA309_0<=CURRENT_TIMESTAMP)||(LA309_0>=SNAPSHOT && LA309_0<=INDEX)||(LA309_0>=BOOLEAN_TRUE && LA309_0<=VALUE_NULL)||(LA309_0>=DEFINE && LA309_0<=AFTER)||LA309_0==WHILE||(LA309_0>=MERGE && LA309_0<=MATCHED)||LA309_0==NEWKW||LA309_0==CONTEXT||LA309_0==NUM_DOUBLE||LA309_0==LBRACK||(LA309_0>=IDENT && LA309_0<=LPAREN)||LA309_0==LCURLY||LA309_0==STAR||(LA309_0>=PLUS && LA309_0<=QUOTED_STRING_LITERAL)||LA309_0==MINUS||LA309_0==NUM_INT||(LA309_0>=TICKED_STRING_LITERAL && LA309_0<=NUM_FLOAT)) ) {
                alt309=1;
            }
            switch (alt309) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression11444);
                    expressionWithTimeList810=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList810.getTree());
                    }
                    break;
            }
            RPAREN811=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression11448); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN812=null;
        Token RPAREN814=null;
        EsperEPL2GrammarParser.expression_return expression813 = null;
        CommonTree LPAREN812_tree=null;
        CommonTree RPAREN814_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN812=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression11461); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression11464);
            expression813=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression813.getTree());
            RPAREN814=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression11466); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK815=null;
        Token RBRACK819=null;
        EsperEPL2GrammarParser.expression_return expression816 = null;
        EsperEPL2GrammarParser.expression_return expression817 = null;
        EsperEPL2GrammarParser.expression_return expression818 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK815_tree=null;
        CommonTree RBRACK819_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK815=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange11487); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK815);
            int alt312=2;
            int LA312_0 = input.LA(1);
            if ( (LA312_0==WINDOW||LA312_0==BETWEEN||LA312_0==ESCAPE||(LA312_0>=NOT_EXPR && LA312_0<=EVERY_EXPR)||LA312_0==WHERE||(LA312_0>=SUM && LA312_0<=COUNT)||LA312_0==CASE||LA312_0==OUTER||(LA312_0>=JOIN && LA312_0<=FULL)||(LA312_0>=EVENTS && LA312_0<=LAST)||(LA312_0>=UNIDIRECTIONAL && LA312_0<=CURRENT_TIMESTAMP)||(LA312_0>=SNAPSHOT && LA312_0<=INDEX)||(LA312_0>=BOOLEAN_TRUE && LA312_0<=VALUE_NULL)||(LA312_0>=DEFINE && LA312_0<=AFTER)||LA312_0==WHILE||(LA312_0>=MERGE && LA312_0<=MATCHED)||LA312_0==NEWKW||LA312_0==CONTEXT||LA312_0==NUM_DOUBLE||(LA312_0>=IDENT && LA312_0<=LPAREN)||LA312_0==LCURLY||(LA312_0>=PLUS && LA312_0<=QUOTED_STRING_LITERAL)||LA312_0==MINUS||LA312_0==NUM_INT||(LA312_0>=TICKED_STRING_LITERAL && LA312_0<=NUM_FLOAT)) ) {
                alt312=1;
            }
            else if ( (LA312_0==COLON) ) {
                alt312=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 312, 0, input);
                throw nvae;
            }
            switch (alt312) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange11494);
                    expression816=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression816.getTree());
                    int alt311=2;
                    int LA311_0 = input.LA(1);
                    if ( (LA311_0==COLON) ) {
                        alt311=1;
                    }
                    switch (alt311) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange11499); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt310=2;
                            int LA310_0 = input.LA(1);
                            if ( (LA310_0==WINDOW||LA310_0==BETWEEN||LA310_0==ESCAPE||(LA310_0>=NOT_EXPR && LA310_0<=EVERY_EXPR)||LA310_0==WHERE||(LA310_0>=SUM && LA310_0<=COUNT)||LA310_0==CASE||LA310_0==OUTER||(LA310_0>=JOIN && LA310_0<=FULL)||(LA310_0>=EVENTS && LA310_0<=LAST)||(LA310_0>=UNIDIRECTIONAL && LA310_0<=CURRENT_TIMESTAMP)||(LA310_0>=SNAPSHOT && LA310_0<=INDEX)||(LA310_0>=BOOLEAN_TRUE && LA310_0<=VALUE_NULL)||(LA310_0>=DEFINE && LA310_0<=AFTER)||LA310_0==WHILE||(LA310_0>=MERGE && LA310_0<=MATCHED)||LA310_0==NEWKW||LA310_0==CONTEXT||LA310_0==NUM_DOUBLE||(LA310_0>=IDENT && LA310_0<=LPAREN)||LA310_0==LCURLY||(LA310_0>=PLUS && LA310_0<=QUOTED_STRING_LITERAL)||LA310_0==MINUS||LA310_0==NUM_INT||(LA310_0>=TICKED_STRING_LITERAL && LA310_0<=NUM_FLOAT)) ) {
                                alt310=1;
                            }
                            switch (alt310) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange11502);
                                    expression817=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression817.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange11522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange11524);
                    expression818=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression818.getTree());
                    }
                    break;
            }
            RBRACK819=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange11535); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK819);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS820=null;
        Token LPAREN822=null;
        Token RPAREN824=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier821 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList823 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression825 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS820_tree=null;
        CommonTree LPAREN822_tree=null;
        CommonTree RPAREN824_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt313=2;
            int LA313_0 = input.LA(1);
            if ( (LA313_0==IDENT) ) {
                int LA313_1 = input.LA(2);
                if ( (LA313_1==EQUALS) ) {
                    alt313=1;
                }
            }
            switch (alt313) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression11622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS820=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression11624); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS820);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression11633);
            classIdentifier821=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier821.getTree());
            int alt315=2;
            int LA315_0 = input.LA(1);
            if ( (LA315_0==LPAREN) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    {
                    LPAREN822=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression11644); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN822);
                    int alt314=2;
                    int LA314_0 = input.LA(1);
                    if ( (LA314_0==WINDOW||LA314_0==BETWEEN||LA314_0==ESCAPE||(LA314_0>=NOT_EXPR && LA314_0<=EVERY_EXPR)||LA314_0==WHERE||(LA314_0>=SUM && LA314_0<=COUNT)||LA314_0==CASE||LA314_0==OUTER||(LA314_0>=JOIN && LA314_0<=FULL)||(LA314_0>=EVENTS && LA314_0<=LAST)||(LA314_0>=UNIDIRECTIONAL && LA314_0<=CURRENT_TIMESTAMP)||(LA314_0>=SNAPSHOT && LA314_0<=INDEX)||(LA314_0>=BOOLEAN_TRUE && LA314_0<=VALUE_NULL)||(LA314_0>=DEFINE && LA314_0<=AFTER)||LA314_0==WHILE||(LA314_0>=MERGE && LA314_0<=MATCHED)||LA314_0==NEWKW||LA314_0==CONTEXT||LA314_0==NUM_DOUBLE||(LA314_0>=IDENT && LA314_0<=LPAREN)||LA314_0==LCURLY||(LA314_0>=PLUS && LA314_0<=QUOTED_STRING_LITERAL)||LA314_0==MINUS||LA314_0==NUM_INT||(LA314_0>=TICKED_STRING_LITERAL && LA314_0<=NUM_FLOAT)) ) {
                        alt314=1;
                    }
                    switch (alt314) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression11646);
                            expressionList823=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList823.getTree());
                            }
                            break;
                    }
                    RPAREN824=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression11649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN824);
                    }
                    break;
            }
            int alt316=2;
            int LA316_0 = input.LA(1);
            if ( (LA316_0==LBRACK) ) {
                alt316=1;
            }
            switch (alt316) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression11661);
                    propertyExpression825=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression825.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic826 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic827 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression11706);
            propertyExpressionAtomic826=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic826.getTree());
            loop317:
            do {
                int alt317=2;
                int LA317_0 = input.LA(1);
                if ( (LA317_0==LBRACK) ) {
                    alt317=1;
                }
                switch (alt317) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression11709);
            	    propertyExpressionAtomic827=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic827.getTree());
            	    }
            	    break;
            	default :
            	    break loop317;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK828=null;
        Token AS832=null;
        Token IDENT833=null;
        Token WHERE834=null;
        Token RBRACK836=null;
        EsperEPL2GrammarParser.propertyExpressionSelect_return propertyExpressionSelect829 = null;
        EsperEPL2GrammarParser.expression_return expression830 = null;
        EsperEPL2GrammarParser.propertyExpressionAnnotation_return propertyExpressionAnnotation831 = null;
        EsperEPL2GrammarParser.expression_return expression835 = null;
        CommonTree LBRACK828_tree=null;
        CommonTree AS832_tree=null;
        CommonTree IDENT833_tree=null;
        CommonTree WHERE834_tree=null;
        CommonTree RBRACK836_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyExpressionAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAnnotation");
        RewriteRuleSubtreeStream stream_propertyExpressionSelect=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionSelect");
        try {
            {
            LBRACK828=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic11739); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK828);
            int alt318=2;
            int LA318_0 = input.LA(1);
            if ( (LA318_0==SELECT) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpressionSelect_in_propertyExpressionAtomic11741);
                    propertyExpressionSelect829=propertyExpressionSelect();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpressionSelect.add(propertyExpressionSelect829.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_propertyExpressionAtomic11744);
            expression830=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression830.getTree());
            int alt319=2;
            int LA319_0 = input.LA(1);
            if ( (LA319_0==ATCHAR) ) {
                alt319=1;
            }
            switch (alt319) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpressionAnnotation_in_propertyExpressionAtomic11746);
                    propertyExpressionAnnotation831=propertyExpressionAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpressionAnnotation.add(propertyExpressionAnnotation831.getTree());
                    }
                    break;
            }
            int alt320=2;
            int LA320_0 = input.LA(1);
            if ( (LA320_0==AS) ) {
                alt320=1;
            }
            switch (alt320) {
                case 1 :
                    {
                    AS832=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic11750); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS832);
                    IDENT833=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic11752); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT833);
                    }
                    break;
            }
            int alt321=2;
            int LA321_0 = input.LA(1);
            if ( (LA321_0==WHERE) ) {
                alt321=1;
            }
            switch (alt321) {
                case 1 :
                    {
                    WHERE834=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic11757); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE834);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic11759);
                    expression835=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression835.getTree());
                    }
                    break;
            }
            RBRACK836=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic11763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK836);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertyExpressionSelect.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionSelect.nextTree());
                }
                stream_propertyExpressionSelect.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_propertyExpressionAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAnnotation.nextTree());
                }
                stream_propertyExpressionAnnotation.reset();
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionSelect_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionSelect_return propertyExpressionSelect() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionSelect_return retval = new EsperEPL2GrammarParser.propertyExpressionSelect_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT837=null;
        Token FROM839=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList838 = null;
        CommonTree SELECT837_tree=null;
        CommonTree FROM839_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        try {
            {
            SELECT837=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionSelect11821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT837);
            pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionSelect11823);
            propertySelectionList838=propertySelectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList838.getTree());
            FROM839=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionSelect11825); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM839);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_SELECT.nextNode(), root_1);
                adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAnnotation_return propertyExpressionAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAnnotation_return retval = new EsperEPL2GrammarParser.propertyExpressionAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token v=null;
        Token ATCHAR840=null;
        Token LPAREN841=null;
        Token RPAREN842=null;
        CommonTree n_tree=null;
        CommonTree v_tree=null;
        CommonTree ATCHAR840_tree=null;
        CommonTree LPAREN841_tree=null;
        CommonTree RPAREN842_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        try {
            {
            ATCHAR840=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_propertyExpressionAnnotation11848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR840);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAnnotation11852); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            {
            LPAREN841=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_propertyExpressionAnnotation11855); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN841);
            v=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAnnotation11859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(v);
            RPAREN842=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_propertyExpressionAnnotation11861); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN842);
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_v=new RewriteRuleTokenStream(adaptor,"token v",v);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_v.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA844=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement843 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement845 = null;
        CommonTree COMMA844_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList11891);
            propertySelectionListElement843=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement843.getTree());
            loop322:
            do {
                int alt322=2;
                int LA322_0 = input.LA(1);
                if ( (LA322_0==COMMA) ) {
                    alt322=1;
                }
                switch (alt322) {
            	case 1 :
            	    {
            	    COMMA844=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList11894); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList11897);
            	    propertySelectionListElement845=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement845.getTree());
            	    }
            	    break;
            	default :
            	    break loop322;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS848=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector846 = null;
        EsperEPL2GrammarParser.expression_return expression847 = null;
        CommonTree s_tree=null;
        CommonTree AS848_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt324=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt324=1;
                }
                break;
            case IDENT:
                {
                int LA324_2 = input.LA(2);
                if ( (LA324_2==DOT) ) {
                    int LA324_75 = input.LA(3);
                    if ( (LA324_75==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt324=2;
                    }
                    else if ( (LA324_75==WINDOW||LA324_75==BETWEEN||LA324_75==ESCAPE||LA324_75==EVERY_EXPR||LA324_75==WHERE||(LA324_75>=SUM && LA324_75<=COUNT)||LA324_75==OUTER||(LA324_75>=JOIN && LA324_75<=FULL)||(LA324_75>=EVENTS && LA324_75<=LAST)||(LA324_75>=UNIDIRECTIONAL && LA324_75<=PREVIOUSTAIL)||LA324_75==PRIOR||(LA324_75>=WEEKDAY && LA324_75<=CAST)||(LA324_75>=SNAPSHOT && LA324_75<=INDEX)||(LA324_75>=DEFINE && LA324_75<=AFTER)||LA324_75==WHILE||(LA324_75>=MERGE && LA324_75<=MATCHED)||LA324_75==CONTEXT||LA324_75==IDENT||LA324_75==TICKED_STRING_LITERAL) ) {
                        alt324=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 324, 75, input);
                        throw nvae;
                    }
                }
                else if ( ((LA324_2>=IN_SET && LA324_2<=REGEXP)||(LA324_2>=OR_EXPR && LA324_2<=NOT_EXPR)||LA324_2==AS||LA324_2==FROM||LA324_2==IS||LA324_2==LBRACK||LA324_2==LPAREN||(LA324_2>=COMMA && LA324_2<=EQUALS)||LA324_2==STAR||(LA324_2>=BOR && LA324_2<=QUESTION)||(LA324_2>=BAND && LA324_2<=MOD)||LA324_2==ESCAPECHAR) ) {
                    alt324=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 324, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt324=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 324, 0, input);
                throw nvae;
            }
            switch (alt324) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement11923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement11939);
                    propertyStreamSelector846=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector846.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement11944);
                    expression847=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression847.getTree());
                    int alt323=2;
                    int LA323_0 = input.LA(1);
                    if ( (LA323_0==AS) ) {
                        alt323=1;
                    }
                    switch (alt323) {
                        case 1 :
                            {
                            AS848=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement11947); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS848);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement11951);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT849=null;
        Token STAR850=null;
        Token AS851=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT849_tree=null;
        CommonTree STAR850_tree=null;
        CommonTree AS851_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector11995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT849=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector11997); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT849);
            STAR850=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector11999); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR850);
            int alt325=2;
            int LA325_0 = input.LA(1);
            if ( (LA325_0==AS) ) {
                alt325=1;
            }
            switch (alt325) {
                case 1 :
                    {
                    AS851=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector12002); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS851);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector12006); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS852=null;
        Token LPAREN854=null;
        Token RPAREN856=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier853 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList855 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression857 = null;
        EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation858 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS852_tree=null;
        CommonTree LPAREN854_tree=null;
        CommonTree RPAREN856_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        RewriteRuleSubtreeStream stream_patternFilterAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule patternFilterAnnotation");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt326=2;
            int LA326_0 = input.LA(1);
            if ( (LA326_0==IDENT) ) {
                int LA326_1 = input.LA(2);
                if ( (LA326_1==EQUALS) ) {
                    alt326=1;
                }
            }
            switch (alt326) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression12053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS852=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression12055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS852);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression12064);
            classIdentifier853=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier853.getTree());
            int alt328=2;
            int LA328_0 = input.LA(1);
            if ( (LA328_0==LPAREN) ) {
                alt328=1;
            }
            switch (alt328) {
                case 1 :
                    {
                    LPAREN854=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression12075); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN854);
                    int alt327=2;
                    int LA327_0 = input.LA(1);
                    if ( (LA327_0==WINDOW||LA327_0==BETWEEN||LA327_0==ESCAPE||(LA327_0>=NOT_EXPR && LA327_0<=EVERY_EXPR)||LA327_0==WHERE||(LA327_0>=SUM && LA327_0<=COUNT)||LA327_0==CASE||LA327_0==OUTER||(LA327_0>=JOIN && LA327_0<=FULL)||(LA327_0>=EVENTS && LA327_0<=LAST)||(LA327_0>=UNIDIRECTIONAL && LA327_0<=CURRENT_TIMESTAMP)||(LA327_0>=SNAPSHOT && LA327_0<=INDEX)||(LA327_0>=BOOLEAN_TRUE && LA327_0<=VALUE_NULL)||(LA327_0>=DEFINE && LA327_0<=AFTER)||LA327_0==WHILE||(LA327_0>=MERGE && LA327_0<=MATCHED)||LA327_0==NEWKW||LA327_0==CONTEXT||LA327_0==NUM_DOUBLE||(LA327_0>=IDENT && LA327_0<=LPAREN)||LA327_0==LCURLY||(LA327_0>=PLUS && LA327_0<=QUOTED_STRING_LITERAL)||LA327_0==MINUS||LA327_0==NUM_INT||(LA327_0>=TICKED_STRING_LITERAL && LA327_0<=NUM_FLOAT)) ) {
                        alt327=1;
                    }
                    switch (alt327) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression12077);
                            expressionList855=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList855.getTree());
                            }
                            break;
                    }
                    RPAREN856=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression12080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN856);
                    }
                    break;
            }
            int alt329=2;
            int LA329_0 = input.LA(1);
            if ( (LA329_0==LBRACK) ) {
                alt329=1;
            }
            switch (alt329) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression12092);
                    propertyExpression857=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression857.getTree());
                    }
                    break;
            }
            int alt330=2;
            int LA330_0 = input.LA(1);
            if ( (LA330_0==ATCHAR) ) {
                alt330=1;
            }
            switch (alt330) {
                case 1 :
                    {
                    pushFollow(FOLLOW_patternFilterAnnotation_in_patternFilterExpression12103);
                    patternFilterAnnotation858=patternFilterAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternFilterAnnotation.add(patternFilterAnnotation858.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_patternFilterAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternFilterAnnotation.nextTree());
                }
                stream_patternFilterAnnotation.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterAnnotation_return retval = new EsperEPL2GrammarParser.patternFilterAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR859=null;
        Token LPAREN860=null;
        Token RPAREN862=null;
        EsperEPL2GrammarParser.number_return number861 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR859_tree=null;
        CommonTree LPAREN860_tree=null;
        CommonTree RPAREN862_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            ATCHAR859=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_patternFilterAnnotation12155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR859);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterAnnotation12159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt331=2;
            int LA331_0 = input.LA(1);
            if ( (LA331_0==LPAREN) ) {
                alt331=1;
            }
            switch (alt331) {
                case 1 :
                    {
                    LPAREN860=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterAnnotation12162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN860);
                    pushFollow(FOLLOW_number_in_patternFilterAnnotation12164);
                    number861=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number861.getTree());
                    RPAREN862=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterAnnotation12166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN862);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT863=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT863_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier12202);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop332:
            do {
                int alt332=2;
                int LA332_0 = input.LA(1);
                if ( (LA332_0==DOT) ) {
                    int LA332_23 = input.LA(2);
                    if ( (LA332_23==IDENT) ) {
                        int LA332_50 = input.LA(3);
                        if ( (LA332_50==EOF||LA332_50==CREATE||(LA332_50>=OR_EXPR && LA332_50<=AS)||LA332_50==SELECT||LA332_50==END||(LA332_50>=INNER && LA332_50<=ON)||(LA332_50>=GROUP && LA332_50<=HAVING)||LA332_50==OUTPUT||LA332_50==INSERT||LA332_50==ORDER||(LA332_50>=UNIDIRECTIONAL && LA332_50<=RETAININTERSECTION)||LA332_50==DELETE||LA332_50==SET||LA332_50==UNTIL||LA332_50==ROW_LIMIT_EXPR||(LA332_50>=UPDATE && LA332_50<=MATCH_RECOGNIZE)||(LA332_50>=FOR && LA332_50<=WHILE)||LA332_50==MERGE||LA332_50==EXPRESSIONDECL||LA332_50==CONTEXT||LA332_50==TERMINATED||(LA332_50>=LBRACK && LA332_50<=RPAREN)||LA332_50==RCURLY||LA332_50==COMMA||LA332_50==DOT||LA332_50==ATCHAR||(LA332_50>=FOLLOWED_BY && LA332_50<=FOLLOWMAX_BEGIN)||LA332_50==TICKED_STRING_LITERAL) ) {
                            alt332=1;
                        }
                    }
                    else if ( (LA332_23==TICKED_STRING_LITERAL) ) {
                        alt332=1;
                    }
                }
                switch (alt332) {
            	case 1 :
            	    {
            	    DOT863=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier12221); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT863);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier12225);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop332;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT864=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT864_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy12270);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop333:
            do {
                int alt333=2;
                int LA333_0 = input.LA(1);
                if ( (LA333_0==IDENT||LA333_0==TICKED_STRING_LITERAL) ) {
                    alt333=2;
                }
                else if ( (LA333_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA333_4 = input.LA(3);
                        if ( (LA333_4==LPAREN) ) {
                            alt333=2;
                        }
                        else if ( (LA333_4==IDENT||LA333_4==DOT||LA333_4==TICKED_STRING_LITERAL) ) {
                            alt333=1;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA333_5 = input.LA(3);
                        if ( (LA333_5==LPAREN) ) {
                            alt333=2;
                        }
                        else if ( (LA333_5==IDENT||LA333_5==DOT||LA333_5==TICKED_STRING_LITERAL) ) {
                            alt333=1;
                        }
                        }
                        break;
                    case BETWEEN:
                    case WHERE:
                    case MAX:
                    case MIN:
                    case SET:
                    case AFTER:
                        {
                        alt333=2;
                        }
                        break;
                    }
                }
                switch (alt333) {
            	case 1 :
            	    {
            	    DOT864=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy12305); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT864);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy12309);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop333;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA866=null;
        EsperEPL2GrammarParser.expression_return expression865 = null;
        EsperEPL2GrammarParser.expression_return expression867 = null;
        CommonTree COMMA866_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList12351);
            expression865=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression865.getTree());
            loop334:
            do {
                int alt334=2;
                int LA334_0 = input.LA(1);
                if ( (LA334_0==COMMA) ) {
                    alt334=1;
                }
                switch (alt334) {
            	case 1 :
            	    {
            	    COMMA866=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList12354); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList12357);
            	    expression867=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression867.getTree());
            	    }
            	    break;
            	default :
            	    break loop334;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA869=null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast868 = null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast870 = null;
        CommonTree COMMA869_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList12385);
            expressionWithTimeInclLast868=expressionWithTimeInclLast();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast868.getTree());
            loop335:
            do {
                int alt335=2;
                int LA335_0 = input.LA(1);
                if ( (LA335_0==COMMA) ) {
                    alt335=1;
                }
                switch (alt335) {
            	case 1 :
            	    {
            	    COMMA869=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList12388); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList12391);
            	    expressionWithTimeInclLast870=expressionWithTimeInclLast();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast870.getTree());
            	    }
            	    break;
            	default :
            	    break loop335;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand871 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod872 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable873 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand874 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand875 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator876 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator877 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList878 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar879 = null;
        try {
            int alt336=9;
            int LA336_0 = input.LA(1);
            if ( (LA336_0==LW) ) {
                int LA336_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt336=1;
                }
                else if ( (synpred9_EsperEPL2Grammar()) ) {
                    alt336=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA336_0==MINUS) ) {
                int LA336_2 = input.LA(2);
                if ( (LA336_2==NUM_INT) ) {
                    int LA336_113 = input.LA(3);
                    if ( (LA336_113==TIMEPERIOD_SECONDS) ) {
                        int LA336_477 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 477, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_113==TIMEPERIOD_SECOND) ) {
                        int LA336_478 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 478, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_113==TIMEPERIOD_SEC) ) {
                        int LA336_479 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 479, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_113==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_113==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_113==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 113, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_2==NUM_LONG) ) {
                    int LA336_114 = input.LA(3);
                    if ( (LA336_114==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==TIMEPERIOD_SECONDS) ) {
                        int LA336_547 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 547, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_114==TIMEPERIOD_SECOND) ) {
                        int LA336_548 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 548, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_114==TIMEPERIOD_SEC) ) {
                        int LA336_549 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 549, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_114==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_114==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_114==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 114, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_2==NUM_FLOAT) ) {
                    int LA336_115 = input.LA(3);
                    if ( (LA336_115==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==TIMEPERIOD_SECONDS) ) {
                        int LA336_592 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 592, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_115==TIMEPERIOD_SECOND) ) {
                        int LA336_593 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 593, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_115==TIMEPERIOD_SEC) ) {
                        int LA336_594 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 594, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_115==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_115==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_115==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 115, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_2==NUM_DOUBLE) ) {
                    int LA336_116 = input.LA(3);
                    if ( (LA336_116==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==TIMEPERIOD_SECONDS) ) {
                        int LA336_648 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 648, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_116==TIMEPERIOD_SECOND) ) {
                        int LA336_649 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 649, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_116==TIMEPERIOD_SEC) ) {
                        int LA336_650 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 650, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_116==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_116==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_116==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 116, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_2==IDENT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==AT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==COUNT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==SUM) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==AVG) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==MAX) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==FIRST) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==LAST) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==WHILE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==MERGE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==SQL) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==LW) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==CAST) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==INDEX) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==LEFT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==OUTER) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==FULL) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==JOIN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_2==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA336_0==PLUS) ) {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    int LA336_165 = input.LA(3);
                    if ( (LA336_165==TIMEPERIOD_SECONDS) ) {
                        int LA336_665 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 665, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_165==TIMEPERIOD_SECOND) ) {
                        int LA336_666 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 666, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_165==TIMEPERIOD_SEC) ) {
                        int LA336_667 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 667, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_165==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_165==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_165==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 165, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    int LA336_166 = input.LA(3);
                    if ( (LA336_166==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==TIMEPERIOD_SECONDS) ) {
                        int LA336_735 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 735, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_166==TIMEPERIOD_SECOND) ) {
                        int LA336_736 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 736, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_166==TIMEPERIOD_SEC) ) {
                        int LA336_737 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 737, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_166==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_166==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_166==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 166, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    int LA336_167 = input.LA(3);
                    if ( (LA336_167==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==TIMEPERIOD_SECONDS) ) {
                        int LA336_780 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 780, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_167==TIMEPERIOD_SECOND) ) {
                        int LA336_781 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 781, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_167==TIMEPERIOD_SEC) ) {
                        int LA336_782 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 782, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_167==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_167==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_167==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 167, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    int LA336_168 = input.LA(3);
                    if ( (LA336_168==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==TIMEPERIOD_SECONDS) ) {
                        int LA336_836 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 836, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_168==TIMEPERIOD_SECOND) ) {
                        int LA336_837 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 837, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_168==TIMEPERIOD_SEC) ) {
                        int LA336_838 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt336=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt336=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 336, 838, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA336_168==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt336=3;
                    }
                    else if ( (LA336_168==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else if ( (LA336_168==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt336=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 168, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA336_0==NUM_INT) ) {
                int LA336_4 = input.LA(2);
                if ( (LA336_4==TIMEPERIOD_SECONDS) ) {
                    int LA336_169 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 169, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_4==TIMEPERIOD_SECOND) ) {
                    int LA336_170 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 170, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_4==TIMEPERIOD_SEC) ) {
                    int LA336_171 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 171, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt336=7;
                }
                else if ( (LA336_4==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt336=6;
                }
                else if ( (LA336_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt336=4;
                }
                else if ( (LA336_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_4==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA336_0==NUM_LONG) ) {
                int LA336_5 = input.LA(2);
                if ( (LA336_5==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==TIMEPERIOD_SECONDS) ) {
                    int LA336_242 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 242, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_5==TIMEPERIOD_SECOND) ) {
                    int LA336_243 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 243, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_5==TIMEPERIOD_SEC) ) {
                    int LA336_244 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 244, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_5==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt336=7;
                }
                else if ( (LA336_5==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt336=4;
                }
                else if ( (LA336_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt336=6;
                }
                else if ( (LA336_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA336_0==NUM_FLOAT) ) {
                int LA336_6 = input.LA(2);
                if ( (LA336_6==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==TIMEPERIOD_SECONDS) ) {
                    int LA336_290 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 290, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_6==TIMEPERIOD_SECOND) ) {
                    int LA336_291 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 291, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_6==TIMEPERIOD_SEC) ) {
                    int LA336_292 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 292, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_6==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt336=7;
                }
                else if ( (LA336_6==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt336=6;
                }
                else if ( (LA336_6==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt336=4;
                }
                else if ( (LA336_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA336_0==NUM_DOUBLE) ) {
                int LA336_7 = input.LA(2);
                if ( (LA336_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt336=7;
                }
                else if ( (LA336_7==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt336=6;
                }
                else if ( (LA336_7==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==TIMEPERIOD_SECONDS) ) {
                    int LA336_351 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 351, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_7==TIMEPERIOD_SECOND) ) {
                    int LA336_352 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 352, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_7==TIMEPERIOD_SEC) ) {
                    int LA336_353 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 353, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_7==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt336=4;
                }
                else if ( (LA336_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA336_0==IDENT) ) {
                int LA336_8 = input.LA(2);
                if ( (LA336_8==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt336=6;
                }
                else if ( (LA336_8==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt336=4;
                }
                else if ( (LA336_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt336=7;
                }
                else if ( (LA336_8==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==LBRACK) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==QUESTION) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==DOT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==TIMEPERIOD_SECONDS) ) {
                    int LA336_408 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 408, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_8==TIMEPERIOD_SECOND) ) {
                    int LA336_409 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 409, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_8==TIMEPERIOD_SEC) ) {
                    int LA336_410 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 410, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_8==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_8==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA336_0==QUESTION) ) {
                int LA336_9 = input.LA(2);
                if ( (LA336_9==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==TIMEPERIOD_SECONDS) ) {
                    int LA336_445 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 445, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_9==TIMEPERIOD_SECOND) ) {
                    int LA336_446 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 446, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_9==TIMEPERIOD_SEC) ) {
                    int LA336_447 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt336=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt336=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 447, input);
                        throw nvae;
                    }
                }
                else if ( (LA336_9==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt336=3;
                }
                else if ( (LA336_9==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt336=6;
                }
                else if ( (LA336_9==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt336=7;
                }
                else if ( (LA336_9==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt336=4;
                }
                else if ( (LA336_9==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else if ( (LA336_9==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt336=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA336_0==CASE) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==AT) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==COUNT) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==SUM) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==AVG) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==MAX) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==MIN) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==FIRST) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==LAST) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==WHILE) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==MERGE) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==SQL) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==CAST) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==INDEX) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==LEFT) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==OUTER) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==FULL) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==JOIN) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==WHERE) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==SET) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==AFTER) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==PREVIOUSCOUNT) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==PREVIOUSWINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==NEWKW) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt336=3;
            }
            else if ( (LA336_0==STAR) ) {
                int LA336_74 = input.LA(2);
                if ( (LA336_74==DIV) && (synpred11_EsperEPL2Grammar())) {
                    alt336=5;
                }
                else if ( (LA336_74==RPAREN||LA336_74==COMMA) ) {
                    alt336=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 74, input);
                    throw nvae;
                }
            }
            else if ( (LA336_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {
                alt336=8;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);
                throw nvae;
            }
            switch (alt336) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime12420);
                    lastWeekdayOperand871=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand871.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime12431);
                    timePeriod872=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod872.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime12442);
                    expressionQualifyable873=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable873.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime12453);
                    rangeOperand874=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand874.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime12465);
                    frequencyOperand875=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand875.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime12476);
                    lastOperator876=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator876.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime12488);
                    weekDayOperator877=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator877.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime12500);
                    numericParameterList878=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList878.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime12505);
                    numberSetStar879=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar879.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeInclLast_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return retval = new EsperEPL2GrammarParser.expressionWithTimeInclLast_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand880 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime881 = null;
        try {
            int alt337=2;
            int LA337_0 = input.LA(1);
            if ( (LA337_0==LAST) ) {
                int LA337_1 = input.LA(2);
                if ( (synpred15_EsperEPL2Grammar()) ) {
                    alt337=1;
                }
                else if ( (true) ) {
                    alt337=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 337, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA337_0==WINDOW||LA337_0==BETWEEN||LA337_0==ESCAPE||(LA337_0>=NOT_EXPR && LA337_0<=EVERY_EXPR)||LA337_0==WHERE||(LA337_0>=SUM && LA337_0<=COUNT)||LA337_0==CASE||LA337_0==OUTER||(LA337_0>=JOIN && LA337_0<=FULL)||(LA337_0>=EVENTS && LA337_0<=FIRST)||(LA337_0>=UNIDIRECTIONAL && LA337_0<=CURRENT_TIMESTAMP)||(LA337_0>=SNAPSHOT && LA337_0<=INDEX)||(LA337_0>=BOOLEAN_TRUE && LA337_0<=VALUE_NULL)||(LA337_0>=DEFINE && LA337_0<=AFTER)||LA337_0==WHILE||(LA337_0>=MERGE && LA337_0<=MATCHED)||LA337_0==NEWKW||LA337_0==CONTEXT||LA337_0==NUM_DOUBLE||LA337_0==LBRACK||(LA337_0>=IDENT && LA337_0<=LPAREN)||LA337_0==LCURLY||LA337_0==STAR||(LA337_0>=PLUS && LA337_0<=QUOTED_STRING_LITERAL)||LA337_0==MINUS||LA337_0==NUM_INT||(LA337_0>=TICKED_STRING_LITERAL && LA337_0<=NUM_FLOAT)) ) {
                alt337=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 337, 0, input);
                throw nvae;
            }
            switch (alt337) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTimeInclLast12525);
                    lastOperand880=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand880.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeInclLast12530);
                    expressionWithTime881=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime881.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression882 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable12541);
            expression882=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression882.getTree());
            int alt338=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt338=1;
                    }
                    break;
                case DESC:
                    {
                    alt338=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt338=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt338=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt338=5;
                    }
                    break;
            }
            switch (alt338) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable12546); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable12550); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable12554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable12558); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable12562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR883=null;
        CommonTree STAR883_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR883=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar12619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR883);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW884=null;
        CommonTree LW884_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW884=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand12639); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW884_tree = (CommonTree)adaptor.create(LW884);
            root_0 = (CommonTree)adaptor.becomeRoot(LW884_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST885=null;
        CommonTree LAST885_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST885=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand12652); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST885_tree = (CommonTree)adaptor.create(LAST885);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST885_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR886=null;
        Token DIV887=null;
        EsperEPL2GrammarParser.number_return number888 = null;
        EsperEPL2GrammarParser.substitution_return substitution889 = null;
        CommonTree i_tree=null;
        CommonTree STAR886_tree=null;
        CommonTree DIV887_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR886=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand12664); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR886);
            DIV887=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand12666); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV887);
            int alt339=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt339=1;
                }
                break;
            case IDENT:
                {
                alt339=2;
                }
                break;
            case QUESTION:
                {
                alt339=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 339, 0, input);
                throw nvae;
            }
            switch (alt339) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand12669);
                    number888=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number888.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand12673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand12675);
                    substitution889=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution889.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON892=null;
        EsperEPL2GrammarParser.number_return number890 = null;
        EsperEPL2GrammarParser.substitution_return substitution891 = null;
        EsperEPL2GrammarParser.number_return number893 = null;
        EsperEPL2GrammarParser.substitution_return substitution894 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON892_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt340=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt340=1;
                }
                break;
            case IDENT:
                {
                alt340=2;
                }
                break;
            case QUESTION:
                {
                alt340=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 340, 0, input);
                throw nvae;
            }
            switch (alt340) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand12724);
                    number890=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number890.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand12728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand12730);
                    substitution891=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution891.getTree());
                    }
                    break;
            }
            COLON892=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand12733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON892);
            int alt341=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt341=1;
                }
                break;
            case IDENT:
                {
                alt341=2;
                }
                break;
            case QUESTION:
                {
                alt341=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 341, 0, input);
                throw nvae;
            }
            switch (alt341) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand12736);
                    number893=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number893.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand12740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand12742);
                    substitution894=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution894.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST897=null;
        EsperEPL2GrammarParser.number_return number895 = null;
        EsperEPL2GrammarParser.substitution_return substitution896 = null;
        CommonTree i_tree=null;
        CommonTree LAST897_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt342=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt342=1;
                }
                break;
            case IDENT:
                {
                alt342=2;
                }
                break;
            case QUESTION:
                {
                alt342=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 342, 0, input);
                throw nvae;
            }
            switch (alt342) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator12856);
                    number895=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number895.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator12860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator12862);
                    substitution896=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution896.getTree());
                    }
                    break;
            }
            LAST897=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator12865); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST897);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY900=null;
        EsperEPL2GrammarParser.number_return number898 = null;
        EsperEPL2GrammarParser.substitution_return substitution899 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY900_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt343=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt343=1;
                }
                break;
            case IDENT:
                {
                alt343=2;
                }
                break;
            case QUESTION:
                {
                alt343=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 343, 0, input);
                throw nvae;
            }
            switch (alt343) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator12913);
                    number898=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number898.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator12917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator12919);
                    substitution899=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution899.getTree());
                    }
                    break;
            }
            WEEKDAY900=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator12922); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY900);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK901=null;
        Token COMMA903=null;
        Token RBRACK905=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter902 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter904 = null;
        CommonTree LBRACK901_tree=null;
        CommonTree COMMA903_tree=null;
        CommonTree RBRACK905_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK901=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList12969); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK901);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList12971);
            numericListParameter902=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter902.getTree());
            loop344:
            do {
                int alt344=2;
                int LA344_0 = input.LA(1);
                if ( (LA344_0==COMMA) ) {
                    alt344=1;
                }
                switch (alt344) {
            	case 1 :
            	    {
            	    COMMA903=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList12974); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA903);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList12976);
            	    numericListParameter904=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter904.getTree());
            	    }
            	    break;
            	default :
            	    break loop344;
                }
            } while (true);
            RBRACK905=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList12980); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK905);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand906 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand907 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant908 = null;
        try {
            int alt345=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA345_1 = input.LA(2);
                if ( (LA345_1==RBRACK||LA345_1==COMMA) ) {
                    alt345=3;
                }
                else if ( (LA345_1==COLON) ) {
                    alt345=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 345, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA345_2 = input.LA(2);
                if ( (LA345_2==COLON) ) {
                    alt345=1;
                }
                else if ( (LA345_2==RBRACK||LA345_2==COMMA) ) {
                    alt345=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 345, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA345_3 = input.LA(2);
                if ( (LA345_3==COLON) ) {
                    alt345=1;
                }
                else if ( (LA345_3==RBRACK||LA345_3==COMMA) ) {
                    alt345=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 345, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA345_4 = input.LA(2);
                if ( (LA345_4==COLON) ) {
                    alt345=1;
                }
                else if ( (LA345_4==RBRACK||LA345_4==COMMA) ) {
                    alt345=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 345, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt345=1;
                }
                break;
            case STAR:
                {
                alt345=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt345=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 345, 0, input);
                throw nvae;
            }
            switch (alt345) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter13002);
                    rangeOperand906=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand906.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter13008);
                    frequencyOperand907=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand907.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter13013);
                    numberconstant908=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant908.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT910=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic909 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic911 = null;
        CommonTree DOT910_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty13029);
            eventPropertyAtomic909=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic909.getTree());
            loop346:
            do {
                int alt346=2;
                int LA346_0 = input.LA(1);
                if ( (LA346_0==DOT) ) {
                    alt346=1;
                }
                switch (alt346) {
            	case 1 :
            	    {
            	    DOT910=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty13032); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT910);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty13034);
            	    eventPropertyAtomic911=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic911.getTree());
            	    }
            	    break;
            	default :
            	    break loop346;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK913=null;
        Token RPAREN914=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent912 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK913_tree=null;
        CommonTree RPAREN914_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic13060);
            eventPropertyIdent912=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent912.getTree());
            int alt350=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt350=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt350=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt350=3;
                    }
                    break;
            }
            switch (alt350) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic13069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic13073); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK913=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic13075); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK913);
                    int alt347=2;
                    int LA347_0 = input.LA(1);
                    if ( (LA347_0==QUESTION) ) {
                        alt347=1;
                    }
                    switch (alt347) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13080); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic13094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt348=2;
                    int LA348_0 = input.LA(1);
                    if ( (LA348_0==STRING_LITERAL) ) {
                        alt348=1;
                    }
                    else if ( (LA348_0==QUOTED_STRING_LITERAL) ) {
                        alt348=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 348, 0, input);
                        throw nvae;
                    }
                    switch (alt348) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic13099); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic13105); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN914=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic13108); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN914);
                    int alt349=2;
                    int LA349_0 = input.LA(1);
                    if ( (LA349_0==QUESTION) ) {
                        alt349=1;
                    }
                    switch (alt349) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13113); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR915=null;
        Token DOT916=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR915_tree=null;
        CommonTree DOT916_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent13250);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop352:
            do {
                int alt352=2;
                int LA352_0 = input.LA(1);
                if ( (LA352_0==ESCAPECHAR) ) {
                    alt352=1;
                }
                switch (alt352) {
            	case 1 :
            	    {
            	    ESCAPECHAR915=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent13262); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR915);
            	    DOT916=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent13264); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT916);
            	    int alt351=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case MERGE:
            	        case MATCHED:
            	        case CONTEXT:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt351=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA351_5 = input.LA(2);
            	            if ( (LA351_5==EOF||(LA351_5>=IN_SET && LA351_5<=NOT_EXPR)||(LA351_5>=WHERE && LA351_5<=AS)||(LA351_5>=ELSE && LA351_5<=FROM)||(LA351_5>=INNER && LA351_5<=FULL)||LA351_5==IS||(LA351_5>=GROUP && LA351_5<=HAVING)||LA351_5==ALL||LA351_5==OUTPUT||LA351_5==INSERT||(LA351_5>=ORDER && LA351_5<=DESC)||LA351_5==PATTERN||(LA351_5>=TIMEPERIOD_SEC && LA351_5<=TIMEPERIOD_SECONDS)||LA351_5==ROW_LIMIT_EXPR||(LA351_5>=MATCH_RECOGNIZE && LA351_5<=MEASURES)||(LA351_5>=AFTER && LA351_5<=FOR)||(LA351_5>=LBRACK && LA351_5<=RBRACK)||(LA351_5>=LPAREN && LA351_5<=COLON)||LA351_5==RCURLY||(LA351_5>=COMMA && LA351_5<=QUESTION)||(LA351_5>=BAND && LA351_5<=MOD)||(LA351_5>=FOLLOWMAX_END && LA351_5<=ESCAPECHAR)) ) {
            	                alt351=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA351_25 = input.LA(2);
            	            if ( (LA351_25==LPAREN) ) {
            	                int LA351_179 = input.LA(3);
            	                if ( ((LA351_179>=STRING_LITERAL && LA351_179<=QUOTED_STRING_LITERAL)) ) {
            	                    alt351=1;
            	                }
            	            }
            	            else if ( (LA351_25==EOF||(LA351_25>=IN_SET && LA351_25<=NOT_EXPR)||(LA351_25>=WHERE && LA351_25<=AS)||(LA351_25>=ELSE && LA351_25<=FROM)||(LA351_25>=INNER && LA351_25<=FULL)||LA351_25==IS||(LA351_25>=GROUP && LA351_25<=HAVING)||LA351_25==ALL||LA351_25==OUTPUT||LA351_25==INSERT||(LA351_25>=ORDER && LA351_25<=DESC)||LA351_25==PATTERN||(LA351_25>=TIMEPERIOD_SEC && LA351_25<=TIMEPERIOD_SECONDS)||LA351_25==ROW_LIMIT_EXPR||(LA351_25>=MATCH_RECOGNIZE && LA351_25<=MEASURES)||(LA351_25>=AFTER && LA351_25<=FOR)||(LA351_25>=LBRACK && LA351_25<=RBRACK)||(LA351_25>=RPAREN && LA351_25<=COLON)||LA351_25==RCURLY||(LA351_25>=COMMA && LA351_25<=QUESTION)||(LA351_25>=BAND && LA351_25<=MOD)||(LA351_25>=FOLLOWMAX_END && LA351_25<=ESCAPECHAR)) ) {
            	                alt351=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA351_40 = input.LA(2);
            	            if ( (LA351_40==EOF||(LA351_40>=IN_SET && LA351_40<=NOT_EXPR)||(LA351_40>=WHERE && LA351_40<=AS)||(LA351_40>=ELSE && LA351_40<=FROM)||(LA351_40>=INNER && LA351_40<=FULL)||LA351_40==IS||(LA351_40>=GROUP && LA351_40<=HAVING)||LA351_40==ALL||LA351_40==OUTPUT||LA351_40==INSERT||(LA351_40>=ORDER && LA351_40<=DESC)||LA351_40==PATTERN||(LA351_40>=TIMEPERIOD_SEC && LA351_40<=TIMEPERIOD_SECONDS)||LA351_40==ROW_LIMIT_EXPR||(LA351_40>=MATCH_RECOGNIZE && LA351_40<=MEASURES)||(LA351_40>=AFTER && LA351_40<=FOR)||(LA351_40>=LBRACK && LA351_40<=RBRACK)||(LA351_40>=LPAREN && LA351_40<=COLON)||LA351_40==RCURLY||(LA351_40>=COMMA && LA351_40<=QUESTION)||(LA351_40>=BAND && LA351_40<=MOD)||(LA351_40>=FOLLOWMAX_END && LA351_40<=ESCAPECHAR)) ) {
            	                alt351=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA351_41 = input.LA(2);
            	            if ( (LA351_41==EOF||(LA351_41>=IN_SET && LA351_41<=NOT_EXPR)||(LA351_41>=WHERE && LA351_41<=AS)||(LA351_41>=ELSE && LA351_41<=FROM)||(LA351_41>=INNER && LA351_41<=FULL)||LA351_41==IS||(LA351_41>=GROUP && LA351_41<=HAVING)||LA351_41==ALL||LA351_41==OUTPUT||LA351_41==INSERT||(LA351_41>=ORDER && LA351_41<=DESC)||LA351_41==PATTERN||(LA351_41>=TIMEPERIOD_SEC && LA351_41<=TIMEPERIOD_SECONDS)||LA351_41==ROW_LIMIT_EXPR||(LA351_41>=MATCH_RECOGNIZE && LA351_41<=MEASURES)||(LA351_41>=AFTER && LA351_41<=FOR)||(LA351_41>=LBRACK && LA351_41<=RBRACK)||(LA351_41>=LPAREN && LA351_41<=COLON)||LA351_41==RCURLY||(LA351_41>=COMMA && LA351_41<=QUESTION)||(LA351_41>=BAND && LA351_41<=MOD)||(LA351_41>=FOLLOWMAX_END && LA351_41<=ESCAPECHAR)) ) {
            	                alt351=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA351_43 = input.LA(2);
            	            if ( (LA351_43==EOF||(LA351_43>=IN_SET && LA351_43<=NOT_EXPR)||(LA351_43>=WHERE && LA351_43<=AS)||(LA351_43>=ELSE && LA351_43<=FROM)||(LA351_43>=INNER && LA351_43<=FULL)||LA351_43==IS||(LA351_43>=GROUP && LA351_43<=HAVING)||LA351_43==ALL||LA351_43==OUTPUT||LA351_43==INSERT||(LA351_43>=ORDER && LA351_43<=DESC)||LA351_43==PATTERN||(LA351_43>=TIMEPERIOD_SEC && LA351_43<=TIMEPERIOD_SECONDS)||LA351_43==ROW_LIMIT_EXPR||(LA351_43>=MATCH_RECOGNIZE && LA351_43<=MEASURES)||(LA351_43>=AFTER && LA351_43<=FOR)||(LA351_43>=LBRACK && LA351_43<=RBRACK)||(LA351_43>=LPAREN && LA351_43<=COLON)||LA351_43==RCURLY||(LA351_43>=COMMA && LA351_43<=QUESTION)||(LA351_43>=BAND && LA351_43<=MOD)||(LA351_43>=FOLLOWMAX_END && LA351_43<=ESCAPECHAR)) ) {
            	                alt351=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA351_44 = input.LA(2);
            	            if ( (LA351_44==EOF||(LA351_44>=IN_SET && LA351_44<=NOT_EXPR)||(LA351_44>=WHERE && LA351_44<=AS)||(LA351_44>=ELSE && LA351_44<=FROM)||(LA351_44>=INNER && LA351_44<=FULL)||LA351_44==IS||(LA351_44>=GROUP && LA351_44<=HAVING)||LA351_44==ALL||LA351_44==OUTPUT||LA351_44==INSERT||(LA351_44>=ORDER && LA351_44<=DESC)||(LA351_44>=TIMEPERIOD_SEC && LA351_44<=TIMEPERIOD_SECONDS)||LA351_44==ROW_LIMIT_EXPR||(LA351_44>=MATCH_RECOGNIZE && LA351_44<=MEASURES)||(LA351_44>=AFTER && LA351_44<=FOR)||(LA351_44>=LBRACK && LA351_44<=RBRACK)||(LA351_44>=LPAREN && LA351_44<=COLON)||LA351_44==RCURLY||(LA351_44>=COMMA && LA351_44<=QUESTION)||(LA351_44>=BAND && LA351_44<=MOD)||(LA351_44>=FOLLOWMAX_END && LA351_44<=ESCAPECHAR)) ) {
            	                alt351=1;
            	            }
            	            else if ( (LA351_44==PATTERN) ) {
            	                int LA351_498 = input.LA(3);
            	                if ( (LA351_498==LPAREN) ) {
            	                    alt351=1;
            	                }
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt351) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent13268);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop352;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT917=null;
        Token COUNT918=null;
        Token ESCAPE919=null;
        Token EVERY_EXPR920=null;
        Token SUM921=null;
        Token AVG922=null;
        Token MAX923=null;
        Token MIN924=null;
        Token COALESCE925=null;
        Token MEDIAN926=null;
        Token STDDEV927=null;
        Token AVEDEV928=null;
        Token EVENTS929=null;
        Token FIRST930=null;
        Token LAST931=null;
        Token WHILE932=null;
        Token MERGE933=null;
        Token MATCHED934=null;
        Token UNIDIRECTIONAL935=null;
        Token RETAINUNION936=null;
        Token RETAININTERSECTION937=null;
        Token UNTIL938=null;
        Token PATTERN939=null;
        Token SQL940=null;
        Token METADATASQL941=null;
        Token PREVIOUS942=null;
        Token PREVIOUSTAIL943=null;
        Token PRIOR944=null;
        Token WEEKDAY945=null;
        Token LW946=null;
        Token INSTANCEOF947=null;
        Token TYPEOF948=null;
        Token CAST949=null;
        Token SNAPSHOT950=null;
        Token VARIABLE951=null;
        Token INDEX952=null;
        Token WINDOW953=null;
        Token LEFT954=null;
        Token RIGHT955=null;
        Token OUTER956=null;
        Token FULL957=null;
        Token JOIN958=null;
        Token DEFINE959=null;
        Token PARTITION960=null;
        Token MATCHES961=null;
        Token CONTEXT962=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT917_tree=null;
        CommonTree COUNT918_tree=null;
        CommonTree ESCAPE919_tree=null;
        CommonTree EVERY_EXPR920_tree=null;
        CommonTree SUM921_tree=null;
        CommonTree AVG922_tree=null;
        CommonTree MAX923_tree=null;
        CommonTree MIN924_tree=null;
        CommonTree COALESCE925_tree=null;
        CommonTree MEDIAN926_tree=null;
        CommonTree STDDEV927_tree=null;
        CommonTree AVEDEV928_tree=null;
        CommonTree EVENTS929_tree=null;
        CommonTree FIRST930_tree=null;
        CommonTree LAST931_tree=null;
        CommonTree WHILE932_tree=null;
        CommonTree MERGE933_tree=null;
        CommonTree MATCHED934_tree=null;
        CommonTree UNIDIRECTIONAL935_tree=null;
        CommonTree RETAINUNION936_tree=null;
        CommonTree RETAININTERSECTION937_tree=null;
        CommonTree UNTIL938_tree=null;
        CommonTree PATTERN939_tree=null;
        CommonTree SQL940_tree=null;
        CommonTree METADATASQL941_tree=null;
        CommonTree PREVIOUS942_tree=null;
        CommonTree PREVIOUSTAIL943_tree=null;
        CommonTree PRIOR944_tree=null;
        CommonTree WEEKDAY945_tree=null;
        CommonTree LW946_tree=null;
        CommonTree INSTANCEOF947_tree=null;
        CommonTree TYPEOF948_tree=null;
        CommonTree CAST949_tree=null;
        CommonTree SNAPSHOT950_tree=null;
        CommonTree VARIABLE951_tree=null;
        CommonTree INDEX952_tree=null;
        CommonTree WINDOW953_tree=null;
        CommonTree LEFT954_tree=null;
        CommonTree RIGHT955_tree=null;
        CommonTree OUTER956_tree=null;
        CommonTree FULL957_tree=null;
        CommonTree JOIN958_tree=null;
        CommonTree DEFINE959_tree=null;
        CommonTree PARTITION960_tree=null;
        CommonTree MATCHES961_tree=null;
        CommonTree CONTEXT962_tree=null;
        try {
            int alt353=48;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt353=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt353=2;
                }
                break;
            case AT:
                {
                alt353=3;
                }
                break;
            case COUNT:
                {
                alt353=4;
                }
                break;
            case ESCAPE:
                {
                alt353=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt353=6;
                }
                break;
            case SUM:
                {
                alt353=7;
                }
                break;
            case AVG:
                {
                alt353=8;
                }
                break;
            case MAX:
                {
                alt353=9;
                }
                break;
            case MIN:
                {
                alt353=10;
                }
                break;
            case COALESCE:
                {
                alt353=11;
                }
                break;
            case MEDIAN:
                {
                alt353=12;
                }
                break;
            case STDDEV:
                {
                alt353=13;
                }
                break;
            case AVEDEV:
                {
                alt353=14;
                }
                break;
            case EVENTS:
                {
                alt353=15;
                }
                break;
            case FIRST:
                {
                alt353=16;
                }
                break;
            case LAST:
                {
                alt353=17;
                }
                break;
            case WHILE:
                {
                alt353=18;
                }
                break;
            case MERGE:
                {
                alt353=19;
                }
                break;
            case MATCHED:
                {
                alt353=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt353=21;
                }
                break;
            case RETAINUNION:
                {
                alt353=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt353=23;
                }
                break;
            case UNTIL:
                {
                alt353=24;
                }
                break;
            case PATTERN:
                {
                alt353=25;
                }
                break;
            case SQL:
                {
                alt353=26;
                }
                break;
            case METADATASQL:
                {
                alt353=27;
                }
                break;
            case PREVIOUS:
                {
                alt353=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt353=29;
                }
                break;
            case PRIOR:
                {
                alt353=30;
                }
                break;
            case WEEKDAY:
                {
                alt353=31;
                }
                break;
            case LW:
                {
                alt353=32;
                }
                break;
            case INSTANCEOF:
                {
                alt353=33;
                }
                break;
            case TYPEOF:
                {
                alt353=34;
                }
                break;
            case CAST:
                {
                alt353=35;
                }
                break;
            case SNAPSHOT:
                {
                alt353=36;
                }
                break;
            case VARIABLE:
                {
                alt353=37;
                }
                break;
            case INDEX:
                {
                alt353=38;
                }
                break;
            case WINDOW:
                {
                alt353=39;
                }
                break;
            case LEFT:
                {
                alt353=40;
                }
                break;
            case RIGHT:
                {
                alt353=41;
                }
                break;
            case OUTER:
                {
                alt353=42;
                }
                break;
            case FULL:
                {
                alt353=43;
                }
                break;
            case JOIN:
                {
                alt353=44;
                }
                break;
            case DEFINE:
                {
                alt353=45;
                }
                break;
            case PARTITION:
                {
                alt353=46;
                }
                break;
            case MATCHES:
                {
                alt353=47;
                }
                break;
            case CONTEXT:
                {
                alt353=48;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 353, 0, input);
                throw nvae;
            }
            switch (alt353) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent13307); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent13316); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT917=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent13323); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT917_tree = (CommonTree)adaptor.create(AT917);
                    adaptor.addChild(root_0, AT917_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT918=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent13330); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT918_tree = (CommonTree)adaptor.create(COUNT918);
                    adaptor.addChild(root_0, COUNT918_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE919=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent13337); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE919_tree = (CommonTree)adaptor.create(ESCAPE919);
                    adaptor.addChild(root_0, ESCAPE919_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR920=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent13348); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR920_tree = (CommonTree)adaptor.create(EVERY_EXPR920);
                    adaptor.addChild(root_0, EVERY_EXPR920_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM921=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent13355); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM921_tree = (CommonTree)adaptor.create(SUM921);
                    adaptor.addChild(root_0, SUM921_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG922=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent13362); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG922_tree = (CommonTree)adaptor.create(AVG922);
                    adaptor.addChild(root_0, AVG922_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX923=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent13369); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX923_tree = (CommonTree)adaptor.create(MAX923);
                    adaptor.addChild(root_0, MAX923_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN924=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent13376); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN924_tree = (CommonTree)adaptor.create(MIN924);
                    adaptor.addChild(root_0, MIN924_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE925=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent13383); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE925_tree = (CommonTree)adaptor.create(COALESCE925);
                    adaptor.addChild(root_0, COALESCE925_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN926=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent13390); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN926_tree = (CommonTree)adaptor.create(MEDIAN926);
                    adaptor.addChild(root_0, MEDIAN926_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV927=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent13397); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV927_tree = (CommonTree)adaptor.create(STDDEV927);
                    adaptor.addChild(root_0, STDDEV927_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV928=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent13404); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV928_tree = (CommonTree)adaptor.create(AVEDEV928);
                    adaptor.addChild(root_0, AVEDEV928_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS929=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent13411); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS929_tree = (CommonTree)adaptor.create(EVENTS929);
                    adaptor.addChild(root_0, EVENTS929_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST930=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent13418); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST930_tree = (CommonTree)adaptor.create(FIRST930);
                    adaptor.addChild(root_0, FIRST930_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST931=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent13425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST931_tree = (CommonTree)adaptor.create(LAST931);
                    adaptor.addChild(root_0, LAST931_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE932=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent13432); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE932_tree = (CommonTree)adaptor.create(WHILE932);
                    adaptor.addChild(root_0, WHILE932_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE933=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent13439); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE933_tree = (CommonTree)adaptor.create(MERGE933);
                    adaptor.addChild(root_0, MERGE933_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED934=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent13446); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED934_tree = (CommonTree)adaptor.create(MATCHED934);
                    adaptor.addChild(root_0, MATCHED934_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL935=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent13453); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL935_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL935);
                    adaptor.addChild(root_0, UNIDIRECTIONAL935_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION936=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent13460); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION936_tree = (CommonTree)adaptor.create(RETAINUNION936);
                    adaptor.addChild(root_0, RETAINUNION936_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION937=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent13467); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION937_tree = (CommonTree)adaptor.create(RETAININTERSECTION937);
                    adaptor.addChild(root_0, RETAININTERSECTION937_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL938=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent13474); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL938_tree = (CommonTree)adaptor.create(UNTIL938);
                    adaptor.addChild(root_0, UNTIL938_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN939=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent13481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN939_tree = (CommonTree)adaptor.create(PATTERN939);
                    adaptor.addChild(root_0, PATTERN939_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL940=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent13488); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL940_tree = (CommonTree)adaptor.create(SQL940);
                    adaptor.addChild(root_0, SQL940_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL941=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent13495); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL941_tree = (CommonTree)adaptor.create(METADATASQL941);
                    adaptor.addChild(root_0, METADATASQL941_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS942=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent13502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS942_tree = (CommonTree)adaptor.create(PREVIOUS942);
                    adaptor.addChild(root_0, PREVIOUS942_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL943=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent13509); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL943_tree = (CommonTree)adaptor.create(PREVIOUSTAIL943);
                    adaptor.addChild(root_0, PREVIOUSTAIL943_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR944=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent13516); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR944_tree = (CommonTree)adaptor.create(PRIOR944);
                    adaptor.addChild(root_0, PRIOR944_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY945=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent13523); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY945_tree = (CommonTree)adaptor.create(WEEKDAY945);
                    adaptor.addChild(root_0, WEEKDAY945_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW946=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent13530); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW946_tree = (CommonTree)adaptor.create(LW946);
                    adaptor.addChild(root_0, LW946_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF947=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent13537); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF947_tree = (CommonTree)adaptor.create(INSTANCEOF947);
                    adaptor.addChild(root_0, INSTANCEOF947_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF948=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent13544); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF948_tree = (CommonTree)adaptor.create(TYPEOF948);
                    adaptor.addChild(root_0, TYPEOF948_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST949=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent13551); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST949_tree = (CommonTree)adaptor.create(CAST949);
                    adaptor.addChild(root_0, CAST949_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT950=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent13558); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT950_tree = (CommonTree)adaptor.create(SNAPSHOT950);
                    adaptor.addChild(root_0, SNAPSHOT950_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE951=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent13565); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE951_tree = (CommonTree)adaptor.create(VARIABLE951);
                    adaptor.addChild(root_0, VARIABLE951_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX952=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent13574); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX952_tree = (CommonTree)adaptor.create(INDEX952);
                    adaptor.addChild(root_0, INDEX952_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW953=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent13583); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW953_tree = (CommonTree)adaptor.create(WINDOW953);
                    adaptor.addChild(root_0, WINDOW953_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT954=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent13590); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT954_tree = (CommonTree)adaptor.create(LEFT954);
                    adaptor.addChild(root_0, LEFT954_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT955=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent13597); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT955_tree = (CommonTree)adaptor.create(RIGHT955);
                    adaptor.addChild(root_0, RIGHT955_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER956=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent13604); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER956_tree = (CommonTree)adaptor.create(OUTER956);
                    adaptor.addChild(root_0, OUTER956_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL957=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent13611); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL957_tree = (CommonTree)adaptor.create(FULL957);
                    adaptor.addChild(root_0, FULL957_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN958=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent13618); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN958_tree = (CommonTree)adaptor.create(JOIN958);
                    adaptor.addChild(root_0, JOIN958_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE959=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent13625); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE959_tree = (CommonTree)adaptor.create(DEFINE959);
                    adaptor.addChild(root_0, DEFINE959_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION960=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent13632); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION960_tree = (CommonTree)adaptor.create(PARTITION960);
                    adaptor.addChild(root_0, PARTITION960_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES961=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent13639); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES961_tree = (CommonTree)adaptor.create(MATCHES961);
                    adaptor.addChild(root_0, MATCHES961_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
                case 48 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CONTEXT962=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_keywordAllowedIdent13646); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONTEXT962_tree = (CommonTree)adaptor.create(CONTEXT962);
                    adaptor.addChild(root_0, CONTEXT962_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "context"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt354=2;
            int LA354_0 = input.LA(1);
            if ( (LA354_0==IDENT) ) {
                alt354=1;
            }
            else if ( (LA354_0==TICKED_STRING_LITERAL) ) {
                alt354=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 354, 0, input);
                throw nvae;
            }
            switch (alt354) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr13667); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr13676); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT963=null;
        CommonTree t_tree=null;
        CommonTree IDENT963_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt355=2;
            int LA355_0 = input.LA(1);
            if ( (LA355_0==IDENT) ) {
                alt355=1;
            }
            else if ( (LA355_0==TICKED_STRING_LITERAL) ) {
                alt355=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 355, 0, input);
                throw nvae;
            }
            switch (alt355) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT963=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent13690); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT963_tree = (CommonTree)adaptor.create(IDENT963);
                    adaptor.addChild(root_0, IDENT963_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent13698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.yearPart_return yearPart964 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart965 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart966 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart967 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart968 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart969 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart970 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart971 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart972 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart973 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart974 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart975 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart976 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart977 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart978 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart979 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart980 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart981 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart982 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart983 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart984 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart985 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart986 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart987 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart988 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart989 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart990 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart991 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart992 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart993 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart994 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart995 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart996 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart997 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart998 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart999 = null;
        RewriteRuleSubtreeStream stream_yearPart=new RewriteRuleSubtreeStream(adaptor,"rule yearPart");
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        RewriteRuleSubtreeStream stream_weekPart=new RewriteRuleSubtreeStream(adaptor,"rule weekPart");
        RewriteRuleSubtreeStream stream_monthPart=new RewriteRuleSubtreeStream(adaptor,"rule monthPart");
        try {
            {
            int alt384=8;
            switch ( input.LA(1) ) {
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt384=7;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt384=3;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt384=2;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt384=5;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt384=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt384=4;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt384=1;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt384=8;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 384, 9, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt384=8;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt384=7;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt384=2;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt384=5;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt384=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt384=4;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt384=3;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt384=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 384, 10, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt384=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt384=2;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt384=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt384=4;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt384=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt384=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt384=1;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt384=7;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 384, 11, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt384=2;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt384=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt384=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt384=8;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt384=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt384=1;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt384=7;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt384=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 384, 12, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 384, 1, input);
                    throw nvae;
                }
                }
                break;
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt384=7;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt384=3;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt384=2;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt384=5;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt384=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt384=4;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt384=1;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt384=8;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 384, 13, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt384=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt384=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt384=7;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt384=5;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt384=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt384=4;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt384=3;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt384=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 384, 14, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt384=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt384=2;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt384=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt384=4;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt384=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt384=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt384=3;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt384=7;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 384, 15, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt384=2;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt384=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt384=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt384=8;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt384=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt384=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt384=3;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt384=7;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 384, 16, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 384, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt384=7;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt384=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt384=2;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt384=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt384=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt384=4;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt384=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt384=8;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 384, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt384=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt384=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt384=2;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt384=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt384=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt384=4;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt384=3;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt384=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 384, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt384=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt384=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt384=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt384=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt384=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt384=3;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt384=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt384=7;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 384, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt384=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt384=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt384=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt384=8;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt384=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt384=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt384=7;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt384=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 384, 6, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt384=6;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt384=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt384=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt384=4;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt384=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt384=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt384=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt384=8;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 384, 7, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt384=6;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt384=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt384=1;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt384=4;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt384=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt384=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt384=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt384=7;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 384, 8, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 384, 0, input);
                throw nvae;
            }
            switch (alt384) {
                case 1 :
                    {
                    pushFollow(FOLLOW_yearPart_in_timePeriod13723);
                    yearPart964=yearPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yearPart.add(yearPart964.getTree());
                    int alt356=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA356_26 = input.LA(3);
                                    if ( ((LA356_26>=TIMEPERIOD_MONTH && LA356_26<=TIMEPERIOD_MONTHS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA356_27 = input.LA(3);
                                    if ( ((LA356_27>=TIMEPERIOD_MONTH && LA356_27<=TIMEPERIOD_MONTHS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA356_28 = input.LA(3);
                                    if ( ((LA356_28>=TIMEPERIOD_MONTH && LA356_28<=TIMEPERIOD_MONTHS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA356_29 = input.LA(3);
                                    if ( ((LA356_29>=TIMEPERIOD_MONTH && LA356_29<=TIMEPERIOD_MONTHS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA356_30 = input.LA(3);
                                    if ( ((LA356_30>=TIMEPERIOD_MONTH && LA356_30<=TIMEPERIOD_MONTHS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA356_31 = input.LA(3);
                                    if ( ((LA356_31>=TIMEPERIOD_MONTH && LA356_31<=TIMEPERIOD_MONTHS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA356_32 = input.LA(3);
                                    if ( ((LA356_32>=TIMEPERIOD_MONTH && LA356_32<=TIMEPERIOD_MONTHS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA356_33 = input.LA(3);
                                    if ( ((LA356_33>=TIMEPERIOD_MONTH && LA356_33<=TIMEPERIOD_MONTHS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA356_3 = input.LA(2);
                            if ( ((LA356_3>=TIMEPERIOD_MONTH && LA356_3<=TIMEPERIOD_MONTHS)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA356_4 = input.LA(2);
                            if ( ((LA356_4>=TIMEPERIOD_MONTH && LA356_4<=TIMEPERIOD_MONTHS)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA356_5 = input.LA(2);
                            if ( ((LA356_5>=TIMEPERIOD_MONTH && LA356_5<=TIMEPERIOD_MONTHS)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA356_6 = input.LA(2);
                            if ( ((LA356_6>=TIMEPERIOD_MONTH && LA356_6<=TIMEPERIOD_MONTHS)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA356_7 = input.LA(2);
                            if ( ((LA356_7>=TIMEPERIOD_MONTH && LA356_7<=TIMEPERIOD_MONTHS)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA356_8 = input.LA(2);
                            if ( ((LA356_8>=TIMEPERIOD_MONTH && LA356_8<=TIMEPERIOD_MONTHS)) ) {
                                alt356=1;
                            }
                            }
                            break;
                    }
                    switch (alt356) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_monthPart_in_timePeriod13725);
                            monthPart965=monthPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_monthPart.add(monthPart965.getTree());
                            }
                            break;
                    }
                    int alt357=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA357_26 = input.LA(3);
                                    if ( ((LA357_26>=TIMEPERIOD_WEEK && LA357_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA357_27 = input.LA(3);
                                    if ( ((LA357_27>=TIMEPERIOD_WEEK && LA357_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA357_28 = input.LA(3);
                                    if ( ((LA357_28>=TIMEPERIOD_WEEK && LA357_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA357_29 = input.LA(3);
                                    if ( ((LA357_29>=TIMEPERIOD_WEEK && LA357_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA357_30 = input.LA(3);
                                    if ( ((LA357_30>=TIMEPERIOD_WEEK && LA357_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA357_31 = input.LA(3);
                                    if ( ((LA357_31>=TIMEPERIOD_WEEK && LA357_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA357_32 = input.LA(3);
                                    if ( ((LA357_32>=TIMEPERIOD_WEEK && LA357_32<=TIMEPERIOD_WEEKS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA357_33 = input.LA(3);
                                    if ( ((LA357_33>=TIMEPERIOD_WEEK && LA357_33<=TIMEPERIOD_WEEKS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA357_3 = input.LA(2);
                            if ( ((LA357_3>=TIMEPERIOD_WEEK && LA357_3<=TIMEPERIOD_WEEKS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA357_4 = input.LA(2);
                            if ( ((LA357_4>=TIMEPERIOD_WEEK && LA357_4<=TIMEPERIOD_WEEKS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA357_5 = input.LA(2);
                            if ( ((LA357_5>=TIMEPERIOD_WEEK && LA357_5<=TIMEPERIOD_WEEKS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA357_6 = input.LA(2);
                            if ( ((LA357_6>=TIMEPERIOD_WEEK && LA357_6<=TIMEPERIOD_WEEKS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA357_7 = input.LA(2);
                            if ( ((LA357_7>=TIMEPERIOD_WEEK && LA357_7<=TIMEPERIOD_WEEKS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA357_8 = input.LA(2);
                            if ( ((LA357_8>=TIMEPERIOD_WEEK && LA357_8<=TIMEPERIOD_WEEKS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                    }
                    switch (alt357) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod13728);
                            weekPart966=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart966.getTree());
                            }
                            break;
                    }
                    int alt358=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA358_26 = input.LA(3);
                                    if ( ((LA358_26>=TIMEPERIOD_DAY && LA358_26<=TIMEPERIOD_DAYS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA358_27 = input.LA(3);
                                    if ( ((LA358_27>=TIMEPERIOD_DAY && LA358_27<=TIMEPERIOD_DAYS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA358_28 = input.LA(3);
                                    if ( ((LA358_28>=TIMEPERIOD_DAY && LA358_28<=TIMEPERIOD_DAYS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA358_29 = input.LA(3);
                                    if ( ((LA358_29>=TIMEPERIOD_DAY && LA358_29<=TIMEPERIOD_DAYS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA358_30 = input.LA(3);
                                    if ( ((LA358_30>=TIMEPERIOD_DAY && LA358_30<=TIMEPERIOD_DAYS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA358_31 = input.LA(3);
                                    if ( ((LA358_31>=TIMEPERIOD_DAY && LA358_31<=TIMEPERIOD_DAYS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA358_32 = input.LA(3);
                                    if ( ((LA358_32>=TIMEPERIOD_DAY && LA358_32<=TIMEPERIOD_DAYS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA358_33 = input.LA(3);
                                    if ( ((LA358_33>=TIMEPERIOD_DAY && LA358_33<=TIMEPERIOD_DAYS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA358_3 = input.LA(2);
                            if ( ((LA358_3>=TIMEPERIOD_DAY && LA358_3<=TIMEPERIOD_DAYS)) ) {
                                alt358=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA358_4 = input.LA(2);
                            if ( ((LA358_4>=TIMEPERIOD_DAY && LA358_4<=TIMEPERIOD_DAYS)) ) {
                                alt358=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA358_5 = input.LA(2);
                            if ( ((LA358_5>=TIMEPERIOD_DAY && LA358_5<=TIMEPERIOD_DAYS)) ) {
                                alt358=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA358_6 = input.LA(2);
                            if ( ((LA358_6>=TIMEPERIOD_DAY && LA358_6<=TIMEPERIOD_DAYS)) ) {
                                alt358=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA358_7 = input.LA(2);
                            if ( ((LA358_7>=TIMEPERIOD_DAY && LA358_7<=TIMEPERIOD_DAYS)) ) {
                                alt358=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA358_8 = input.LA(2);
                            if ( ((LA358_8>=TIMEPERIOD_DAY && LA358_8<=TIMEPERIOD_DAYS)) ) {
                                alt358=1;
                            }
                            }
                            break;
                    }
                    switch (alt358) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod13731);
                            dayPart967=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart967.getTree());
                            }
                            break;
                    }
                    int alt359=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA359_26 = input.LA(3);
                                    if ( ((LA359_26>=TIMEPERIOD_HOUR && LA359_26<=TIMEPERIOD_HOURS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA359_27 = input.LA(3);
                                    if ( ((LA359_27>=TIMEPERIOD_HOUR && LA359_27<=TIMEPERIOD_HOURS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA359_28 = input.LA(3);
                                    if ( ((LA359_28>=TIMEPERIOD_HOUR && LA359_28<=TIMEPERIOD_HOURS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA359_29 = input.LA(3);
                                    if ( ((LA359_29>=TIMEPERIOD_HOUR && LA359_29<=TIMEPERIOD_HOURS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA359_30 = input.LA(3);
                                    if ( ((LA359_30>=TIMEPERIOD_HOUR && LA359_30<=TIMEPERIOD_HOURS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA359_31 = input.LA(3);
                                    if ( ((LA359_31>=TIMEPERIOD_HOUR && LA359_31<=TIMEPERIOD_HOURS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA359_32 = input.LA(3);
                                    if ( ((LA359_32>=TIMEPERIOD_HOUR && LA359_32<=TIMEPERIOD_HOURS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA359_33 = input.LA(3);
                                    if ( ((LA359_33>=TIMEPERIOD_HOUR && LA359_33<=TIMEPERIOD_HOURS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA359_3 = input.LA(2);
                            if ( ((LA359_3>=TIMEPERIOD_HOUR && LA359_3<=TIMEPERIOD_HOURS)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA359_4 = input.LA(2);
                            if ( ((LA359_4>=TIMEPERIOD_HOUR && LA359_4<=TIMEPERIOD_HOURS)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA359_5 = input.LA(2);
                            if ( ((LA359_5>=TIMEPERIOD_HOUR && LA359_5<=TIMEPERIOD_HOURS)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA359_6 = input.LA(2);
                            if ( ((LA359_6>=TIMEPERIOD_HOUR && LA359_6<=TIMEPERIOD_HOURS)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA359_7 = input.LA(2);
                            if ( ((LA359_7>=TIMEPERIOD_HOUR && LA359_7<=TIMEPERIOD_HOURS)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA359_8 = input.LA(2);
                            if ( ((LA359_8>=TIMEPERIOD_HOUR && LA359_8<=TIMEPERIOD_HOURS)) ) {
                                alt359=1;
                            }
                            }
                            break;
                    }
                    switch (alt359) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13734);
                            hourPart968=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart968.getTree());
                            }
                            break;
                    }
                    int alt360=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA360_26 = input.LA(3);
                                    if ( (LA360_26==MIN||(LA360_26>=TIMEPERIOD_MINUTE && LA360_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA360_27 = input.LA(3);
                                    if ( (LA360_27==MIN||(LA360_27>=TIMEPERIOD_MINUTE && LA360_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA360_28 = input.LA(3);
                                    if ( (LA360_28==MIN||(LA360_28>=TIMEPERIOD_MINUTE && LA360_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA360_29 = input.LA(3);
                                    if ( (LA360_29==MIN||(LA360_29>=TIMEPERIOD_MINUTE && LA360_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA360_30 = input.LA(3);
                                    if ( (LA360_30==MIN||(LA360_30>=TIMEPERIOD_MINUTE && LA360_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA360_31 = input.LA(3);
                                    if ( (LA360_31==MIN||(LA360_31>=TIMEPERIOD_MINUTE && LA360_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA360_32 = input.LA(3);
                                    if ( (LA360_32==MIN||(LA360_32>=TIMEPERIOD_MINUTE && LA360_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA360_33 = input.LA(3);
                                    if ( (LA360_33==MIN||(LA360_33>=TIMEPERIOD_MINUTE && LA360_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA360_3 = input.LA(2);
                            if ( (LA360_3==MIN||(LA360_3>=TIMEPERIOD_MINUTE && LA360_3<=TIMEPERIOD_MINUTES)) ) {
                                alt360=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA360_4 = input.LA(2);
                            if ( (LA360_4==MIN||(LA360_4>=TIMEPERIOD_MINUTE && LA360_4<=TIMEPERIOD_MINUTES)) ) {
                                alt360=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA360_5 = input.LA(2);
                            if ( (LA360_5==MIN||(LA360_5>=TIMEPERIOD_MINUTE && LA360_5<=TIMEPERIOD_MINUTES)) ) {
                                alt360=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA360_6 = input.LA(2);
                            if ( (LA360_6==MIN||(LA360_6>=TIMEPERIOD_MINUTE && LA360_6<=TIMEPERIOD_MINUTES)) ) {
                                alt360=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA360_7 = input.LA(2);
                            if ( (LA360_7==MIN||(LA360_7>=TIMEPERIOD_MINUTE && LA360_7<=TIMEPERIOD_MINUTES)) ) {
                                alt360=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA360_8 = input.LA(2);
                            if ( (LA360_8==MIN||(LA360_8>=TIMEPERIOD_MINUTE && LA360_8<=TIMEPERIOD_MINUTES)) ) {
                                alt360=1;
                            }
                            }
                            break;
                    }
                    switch (alt360) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13737);
                            minutePart969=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart969.getTree());
                            }
                            break;
                    }
                    int alt361=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA361_26 = input.LA(3);
                                    if ( ((LA361_26>=TIMEPERIOD_SEC && LA361_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt361=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA361_27 = input.LA(3);
                                    if ( ((LA361_27>=TIMEPERIOD_SEC && LA361_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt361=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA361_28 = input.LA(3);
                                    if ( ((LA361_28>=TIMEPERIOD_SEC && LA361_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt361=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA361_29 = input.LA(3);
                                    if ( ((LA361_29>=TIMEPERIOD_SEC && LA361_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt361=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA361_30 = input.LA(3);
                                    if ( ((LA361_30>=TIMEPERIOD_SEC && LA361_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt361=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA361_31 = input.LA(3);
                                    if ( ((LA361_31>=TIMEPERIOD_SEC && LA361_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt361=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA361_32 = input.LA(3);
                                    if ( ((LA361_32>=TIMEPERIOD_SEC && LA361_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt361=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA361_33 = input.LA(3);
                                    if ( ((LA361_33>=TIMEPERIOD_SEC && LA361_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt361=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA361_3 = input.LA(2);
                            if ( ((LA361_3>=TIMEPERIOD_SEC && LA361_3<=TIMEPERIOD_SECONDS)) ) {
                                alt361=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA361_4 = input.LA(2);
                            if ( ((LA361_4>=TIMEPERIOD_SEC && LA361_4<=TIMEPERIOD_SECONDS)) ) {
                                alt361=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA361_5 = input.LA(2);
                            if ( ((LA361_5>=TIMEPERIOD_SEC && LA361_5<=TIMEPERIOD_SECONDS)) ) {
                                alt361=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA361_6 = input.LA(2);
                            if ( ((LA361_6>=TIMEPERIOD_SEC && LA361_6<=TIMEPERIOD_SECONDS)) ) {
                                alt361=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA361_7 = input.LA(2);
                            if ( ((LA361_7>=TIMEPERIOD_SEC && LA361_7<=TIMEPERIOD_SECONDS)) ) {
                                alt361=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA361_8 = input.LA(2);
                            if ( ((LA361_8>=TIMEPERIOD_SEC && LA361_8<=TIMEPERIOD_SECONDS)) ) {
                                alt361=1;
                            }
                            }
                            break;
                    }
                    switch (alt361) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13740);
                            secondPart970=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart970.getTree());
                            }
                            break;
                    }
                    int alt362=2;
                    int LA362_0 = input.LA(1);
                    if ( (LA362_0==NUM_DOUBLE||LA362_0==IDENT||(LA362_0>=PLUS && LA362_0<=QUESTION)||LA362_0==MINUS||LA362_0==NUM_INT||(LA362_0>=NUM_LONG && LA362_0<=NUM_FLOAT)) ) {
                        alt362=1;
                    }
                    switch (alt362) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13743);
                            millisecondPart971=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart971.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_monthPart_in_timePeriod13749);
                    monthPart972=monthPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monthPart.add(monthPart972.getTree());
                    int alt363=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA363_26 = input.LA(3);
                                    if ( ((LA363_26>=TIMEPERIOD_WEEK && LA363_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA363_27 = input.LA(3);
                                    if ( ((LA363_27>=TIMEPERIOD_WEEK && LA363_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA363_28 = input.LA(3);
                                    if ( ((LA363_28>=TIMEPERIOD_WEEK && LA363_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA363_29 = input.LA(3);
                                    if ( ((LA363_29>=TIMEPERIOD_WEEK && LA363_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA363_30 = input.LA(3);
                                    if ( ((LA363_30>=TIMEPERIOD_WEEK && LA363_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA363_31 = input.LA(3);
                                    if ( ((LA363_31>=TIMEPERIOD_WEEK && LA363_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA363_32 = input.LA(3);
                                    if ( ((LA363_32>=TIMEPERIOD_WEEK && LA363_32<=TIMEPERIOD_WEEKS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA363_33 = input.LA(3);
                                    if ( ((LA363_33>=TIMEPERIOD_WEEK && LA363_33<=TIMEPERIOD_WEEKS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA363_3 = input.LA(2);
                            if ( ((LA363_3>=TIMEPERIOD_WEEK && LA363_3<=TIMEPERIOD_WEEKS)) ) {
                                alt363=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA363_4 = input.LA(2);
                            if ( ((LA363_4>=TIMEPERIOD_WEEK && LA363_4<=TIMEPERIOD_WEEKS)) ) {
                                alt363=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA363_5 = input.LA(2);
                            if ( ((LA363_5>=TIMEPERIOD_WEEK && LA363_5<=TIMEPERIOD_WEEKS)) ) {
                                alt363=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA363_6 = input.LA(2);
                            if ( ((LA363_6>=TIMEPERIOD_WEEK && LA363_6<=TIMEPERIOD_WEEKS)) ) {
                                alt363=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA363_7 = input.LA(2);
                            if ( ((LA363_7>=TIMEPERIOD_WEEK && LA363_7<=TIMEPERIOD_WEEKS)) ) {
                                alt363=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA363_8 = input.LA(2);
                            if ( ((LA363_8>=TIMEPERIOD_WEEK && LA363_8<=TIMEPERIOD_WEEKS)) ) {
                                alt363=1;
                            }
                            }
                            break;
                    }
                    switch (alt363) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod13751);
                            weekPart973=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart973.getTree());
                            }
                            break;
                    }
                    int alt364=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA364_26 = input.LA(3);
                                    if ( ((LA364_26>=TIMEPERIOD_DAY && LA364_26<=TIMEPERIOD_DAYS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA364_27 = input.LA(3);
                                    if ( ((LA364_27>=TIMEPERIOD_DAY && LA364_27<=TIMEPERIOD_DAYS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA364_28 = input.LA(3);
                                    if ( ((LA364_28>=TIMEPERIOD_DAY && LA364_28<=TIMEPERIOD_DAYS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA364_29 = input.LA(3);
                                    if ( ((LA364_29>=TIMEPERIOD_DAY && LA364_29<=TIMEPERIOD_DAYS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA364_30 = input.LA(3);
                                    if ( ((LA364_30>=TIMEPERIOD_DAY && LA364_30<=TIMEPERIOD_DAYS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA364_31 = input.LA(3);
                                    if ( ((LA364_31>=TIMEPERIOD_DAY && LA364_31<=TIMEPERIOD_DAYS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA364_32 = input.LA(3);
                                    if ( ((LA364_32>=TIMEPERIOD_DAY && LA364_32<=TIMEPERIOD_DAYS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA364_33 = input.LA(3);
                                    if ( ((LA364_33>=TIMEPERIOD_DAY && LA364_33<=TIMEPERIOD_DAYS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA364_3 = input.LA(2);
                            if ( ((LA364_3>=TIMEPERIOD_DAY && LA364_3<=TIMEPERIOD_DAYS)) ) {
                                alt364=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA364_4 = input.LA(2);
                            if ( ((LA364_4>=TIMEPERIOD_DAY && LA364_4<=TIMEPERIOD_DAYS)) ) {
                                alt364=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA364_5 = input.LA(2);
                            if ( ((LA364_5>=TIMEPERIOD_DAY && LA364_5<=TIMEPERIOD_DAYS)) ) {
                                alt364=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA364_6 = input.LA(2);
                            if ( ((LA364_6>=TIMEPERIOD_DAY && LA364_6<=TIMEPERIOD_DAYS)) ) {
                                alt364=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA364_7 = input.LA(2);
                            if ( ((LA364_7>=TIMEPERIOD_DAY && LA364_7<=TIMEPERIOD_DAYS)) ) {
                                alt364=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA364_8 = input.LA(2);
                            if ( ((LA364_8>=TIMEPERIOD_DAY && LA364_8<=TIMEPERIOD_DAYS)) ) {
                                alt364=1;
                            }
                            }
                            break;
                    }
                    switch (alt364) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod13754);
                            dayPart974=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart974.getTree());
                            }
                            break;
                    }
                    int alt365=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA365_26 = input.LA(3);
                                    if ( ((LA365_26>=TIMEPERIOD_HOUR && LA365_26<=TIMEPERIOD_HOURS)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA365_27 = input.LA(3);
                                    if ( ((LA365_27>=TIMEPERIOD_HOUR && LA365_27<=TIMEPERIOD_HOURS)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA365_28 = input.LA(3);
                                    if ( ((LA365_28>=TIMEPERIOD_HOUR && LA365_28<=TIMEPERIOD_HOURS)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA365_29 = input.LA(3);
                                    if ( ((LA365_29>=TIMEPERIOD_HOUR && LA365_29<=TIMEPERIOD_HOURS)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA365_30 = input.LA(3);
                                    if ( ((LA365_30>=TIMEPERIOD_HOUR && LA365_30<=TIMEPERIOD_HOURS)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA365_31 = input.LA(3);
                                    if ( ((LA365_31>=TIMEPERIOD_HOUR && LA365_31<=TIMEPERIOD_HOURS)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA365_32 = input.LA(3);
                                    if ( ((LA365_32>=TIMEPERIOD_HOUR && LA365_32<=TIMEPERIOD_HOURS)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA365_33 = input.LA(3);
                                    if ( ((LA365_33>=TIMEPERIOD_HOUR && LA365_33<=TIMEPERIOD_HOURS)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA365_3 = input.LA(2);
                            if ( ((LA365_3>=TIMEPERIOD_HOUR && LA365_3<=TIMEPERIOD_HOURS)) ) {
                                alt365=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA365_4 = input.LA(2);
                            if ( ((LA365_4>=TIMEPERIOD_HOUR && LA365_4<=TIMEPERIOD_HOURS)) ) {
                                alt365=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA365_5 = input.LA(2);
                            if ( ((LA365_5>=TIMEPERIOD_HOUR && LA365_5<=TIMEPERIOD_HOURS)) ) {
                                alt365=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA365_6 = input.LA(2);
                            if ( ((LA365_6>=TIMEPERIOD_HOUR && LA365_6<=TIMEPERIOD_HOURS)) ) {
                                alt365=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA365_7 = input.LA(2);
                            if ( ((LA365_7>=TIMEPERIOD_HOUR && LA365_7<=TIMEPERIOD_HOURS)) ) {
                                alt365=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA365_8 = input.LA(2);
                            if ( ((LA365_8>=TIMEPERIOD_HOUR && LA365_8<=TIMEPERIOD_HOURS)) ) {
                                alt365=1;
                            }
                            }
                            break;
                    }
                    switch (alt365) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13757);
                            hourPart975=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart975.getTree());
                            }
                            break;
                    }
                    int alt366=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA366_26 = input.LA(3);
                                    if ( (LA366_26==MIN||(LA366_26>=TIMEPERIOD_MINUTE && LA366_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA366_27 = input.LA(3);
                                    if ( (LA366_27==MIN||(LA366_27>=TIMEPERIOD_MINUTE && LA366_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA366_28 = input.LA(3);
                                    if ( (LA366_28==MIN||(LA366_28>=TIMEPERIOD_MINUTE && LA366_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA366_29 = input.LA(3);
                                    if ( (LA366_29==MIN||(LA366_29>=TIMEPERIOD_MINUTE && LA366_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA366_30 = input.LA(3);
                                    if ( (LA366_30==MIN||(LA366_30>=TIMEPERIOD_MINUTE && LA366_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA366_31 = input.LA(3);
                                    if ( (LA366_31==MIN||(LA366_31>=TIMEPERIOD_MINUTE && LA366_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA366_32 = input.LA(3);
                                    if ( (LA366_32==MIN||(LA366_32>=TIMEPERIOD_MINUTE && LA366_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA366_33 = input.LA(3);
                                    if ( (LA366_33==MIN||(LA366_33>=TIMEPERIOD_MINUTE && LA366_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA366_3 = input.LA(2);
                            if ( (LA366_3==MIN||(LA366_3>=TIMEPERIOD_MINUTE && LA366_3<=TIMEPERIOD_MINUTES)) ) {
                                alt366=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA366_4 = input.LA(2);
                            if ( (LA366_4==MIN||(LA366_4>=TIMEPERIOD_MINUTE && LA366_4<=TIMEPERIOD_MINUTES)) ) {
                                alt366=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA366_5 = input.LA(2);
                            if ( (LA366_5==MIN||(LA366_5>=TIMEPERIOD_MINUTE && LA366_5<=TIMEPERIOD_MINUTES)) ) {
                                alt366=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA366_6 = input.LA(2);
                            if ( (LA366_6==MIN||(LA366_6>=TIMEPERIOD_MINUTE && LA366_6<=TIMEPERIOD_MINUTES)) ) {
                                alt366=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA366_7 = input.LA(2);
                            if ( (LA366_7==MIN||(LA366_7>=TIMEPERIOD_MINUTE && LA366_7<=TIMEPERIOD_MINUTES)) ) {
                                alt366=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA366_8 = input.LA(2);
                            if ( (LA366_8==MIN||(LA366_8>=TIMEPERIOD_MINUTE && LA366_8<=TIMEPERIOD_MINUTES)) ) {
                                alt366=1;
                            }
                            }
                            break;
                    }
                    switch (alt366) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13760);
                            minutePart976=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart976.getTree());
                            }
                            break;
                    }
                    int alt367=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA367_26 = input.LA(3);
                                    if ( ((LA367_26>=TIMEPERIOD_SEC && LA367_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt367=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA367_27 = input.LA(3);
                                    if ( ((LA367_27>=TIMEPERIOD_SEC && LA367_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt367=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA367_28 = input.LA(3);
                                    if ( ((LA367_28>=TIMEPERIOD_SEC && LA367_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt367=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA367_29 = input.LA(3);
                                    if ( ((LA367_29>=TIMEPERIOD_SEC && LA367_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt367=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA367_30 = input.LA(3);
                                    if ( ((LA367_30>=TIMEPERIOD_SEC && LA367_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt367=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA367_31 = input.LA(3);
                                    if ( ((LA367_31>=TIMEPERIOD_SEC && LA367_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt367=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA367_32 = input.LA(3);
                                    if ( ((LA367_32>=TIMEPERIOD_SEC && LA367_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt367=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA367_33 = input.LA(3);
                                    if ( ((LA367_33>=TIMEPERIOD_SEC && LA367_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt367=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA367_3 = input.LA(2);
                            if ( ((LA367_3>=TIMEPERIOD_SEC && LA367_3<=TIMEPERIOD_SECONDS)) ) {
                                alt367=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA367_4 = input.LA(2);
                            if ( ((LA367_4>=TIMEPERIOD_SEC && LA367_4<=TIMEPERIOD_SECONDS)) ) {
                                alt367=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA367_5 = input.LA(2);
                            if ( ((LA367_5>=TIMEPERIOD_SEC && LA367_5<=TIMEPERIOD_SECONDS)) ) {
                                alt367=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA367_6 = input.LA(2);
                            if ( ((LA367_6>=TIMEPERIOD_SEC && LA367_6<=TIMEPERIOD_SECONDS)) ) {
                                alt367=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA367_7 = input.LA(2);
                            if ( ((LA367_7>=TIMEPERIOD_SEC && LA367_7<=TIMEPERIOD_SECONDS)) ) {
                                alt367=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA367_8 = input.LA(2);
                            if ( ((LA367_8>=TIMEPERIOD_SEC && LA367_8<=TIMEPERIOD_SECONDS)) ) {
                                alt367=1;
                            }
                            }
                            break;
                    }
                    switch (alt367) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13763);
                            secondPart977=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart977.getTree());
                            }
                            break;
                    }
                    int alt368=2;
                    int LA368_0 = input.LA(1);
                    if ( (LA368_0==NUM_DOUBLE||LA368_0==IDENT||(LA368_0>=PLUS && LA368_0<=QUESTION)||LA368_0==MINUS||LA368_0==NUM_INT||(LA368_0>=NUM_LONG && LA368_0<=NUM_FLOAT)) ) {
                        alt368=1;
                    }
                    switch (alt368) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13766);
                            millisecondPart978=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart978.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_weekPart_in_timePeriod13772);
                    weekPart979=weekPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_weekPart.add(weekPart979.getTree());
                    int alt369=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA369_26 = input.LA(3);
                                    if ( ((LA369_26>=TIMEPERIOD_DAY && LA369_26<=TIMEPERIOD_DAYS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA369_27 = input.LA(3);
                                    if ( ((LA369_27>=TIMEPERIOD_DAY && LA369_27<=TIMEPERIOD_DAYS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA369_28 = input.LA(3);
                                    if ( ((LA369_28>=TIMEPERIOD_DAY && LA369_28<=TIMEPERIOD_DAYS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA369_29 = input.LA(3);
                                    if ( ((LA369_29>=TIMEPERIOD_DAY && LA369_29<=TIMEPERIOD_DAYS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA369_30 = input.LA(3);
                                    if ( ((LA369_30>=TIMEPERIOD_DAY && LA369_30<=TIMEPERIOD_DAYS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA369_31 = input.LA(3);
                                    if ( ((LA369_31>=TIMEPERIOD_DAY && LA369_31<=TIMEPERIOD_DAYS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA369_32 = input.LA(3);
                                    if ( ((LA369_32>=TIMEPERIOD_DAY && LA369_32<=TIMEPERIOD_DAYS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA369_33 = input.LA(3);
                                    if ( ((LA369_33>=TIMEPERIOD_DAY && LA369_33<=TIMEPERIOD_DAYS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA369_3 = input.LA(2);
                            if ( ((LA369_3>=TIMEPERIOD_DAY && LA369_3<=TIMEPERIOD_DAYS)) ) {
                                alt369=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA369_4 = input.LA(2);
                            if ( ((LA369_4>=TIMEPERIOD_DAY && LA369_4<=TIMEPERIOD_DAYS)) ) {
                                alt369=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA369_5 = input.LA(2);
                            if ( ((LA369_5>=TIMEPERIOD_DAY && LA369_5<=TIMEPERIOD_DAYS)) ) {
                                alt369=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA369_6 = input.LA(2);
                            if ( ((LA369_6>=TIMEPERIOD_DAY && LA369_6<=TIMEPERIOD_DAYS)) ) {
                                alt369=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA369_7 = input.LA(2);
                            if ( ((LA369_7>=TIMEPERIOD_DAY && LA369_7<=TIMEPERIOD_DAYS)) ) {
                                alt369=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA369_8 = input.LA(2);
                            if ( ((LA369_8>=TIMEPERIOD_DAY && LA369_8<=TIMEPERIOD_DAYS)) ) {
                                alt369=1;
                            }
                            }
                            break;
                    }
                    switch (alt369) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod13774);
                            dayPart980=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart980.getTree());
                            }
                            break;
                    }
                    int alt370=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA370_26 = input.LA(3);
                                    if ( ((LA370_26>=TIMEPERIOD_HOUR && LA370_26<=TIMEPERIOD_HOURS)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA370_27 = input.LA(3);
                                    if ( ((LA370_27>=TIMEPERIOD_HOUR && LA370_27<=TIMEPERIOD_HOURS)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA370_28 = input.LA(3);
                                    if ( ((LA370_28>=TIMEPERIOD_HOUR && LA370_28<=TIMEPERIOD_HOURS)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA370_29 = input.LA(3);
                                    if ( ((LA370_29>=TIMEPERIOD_HOUR && LA370_29<=TIMEPERIOD_HOURS)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA370_30 = input.LA(3);
                                    if ( ((LA370_30>=TIMEPERIOD_HOUR && LA370_30<=TIMEPERIOD_HOURS)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA370_31 = input.LA(3);
                                    if ( ((LA370_31>=TIMEPERIOD_HOUR && LA370_31<=TIMEPERIOD_HOURS)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA370_32 = input.LA(3);
                                    if ( ((LA370_32>=TIMEPERIOD_HOUR && LA370_32<=TIMEPERIOD_HOURS)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA370_33 = input.LA(3);
                                    if ( ((LA370_33>=TIMEPERIOD_HOUR && LA370_33<=TIMEPERIOD_HOURS)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA370_3 = input.LA(2);
                            if ( ((LA370_3>=TIMEPERIOD_HOUR && LA370_3<=TIMEPERIOD_HOURS)) ) {
                                alt370=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA370_4 = input.LA(2);
                            if ( ((LA370_4>=TIMEPERIOD_HOUR && LA370_4<=TIMEPERIOD_HOURS)) ) {
                                alt370=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA370_5 = input.LA(2);
                            if ( ((LA370_5>=TIMEPERIOD_HOUR && LA370_5<=TIMEPERIOD_HOURS)) ) {
                                alt370=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA370_6 = input.LA(2);
                            if ( ((LA370_6>=TIMEPERIOD_HOUR && LA370_6<=TIMEPERIOD_HOURS)) ) {
                                alt370=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA370_7 = input.LA(2);
                            if ( ((LA370_7>=TIMEPERIOD_HOUR && LA370_7<=TIMEPERIOD_HOURS)) ) {
                                alt370=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA370_8 = input.LA(2);
                            if ( ((LA370_8>=TIMEPERIOD_HOUR && LA370_8<=TIMEPERIOD_HOURS)) ) {
                                alt370=1;
                            }
                            }
                            break;
                    }
                    switch (alt370) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13777);
                            hourPart981=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart981.getTree());
                            }
                            break;
                    }
                    int alt371=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA371_26 = input.LA(3);
                                    if ( (LA371_26==MIN||(LA371_26>=TIMEPERIOD_MINUTE && LA371_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA371_27 = input.LA(3);
                                    if ( (LA371_27==MIN||(LA371_27>=TIMEPERIOD_MINUTE && LA371_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA371_28 = input.LA(3);
                                    if ( (LA371_28==MIN||(LA371_28>=TIMEPERIOD_MINUTE && LA371_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA371_29 = input.LA(3);
                                    if ( (LA371_29==MIN||(LA371_29>=TIMEPERIOD_MINUTE && LA371_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA371_30 = input.LA(3);
                                    if ( (LA371_30==MIN||(LA371_30>=TIMEPERIOD_MINUTE && LA371_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA371_31 = input.LA(3);
                                    if ( (LA371_31==MIN||(LA371_31>=TIMEPERIOD_MINUTE && LA371_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA371_32 = input.LA(3);
                                    if ( (LA371_32==MIN||(LA371_32>=TIMEPERIOD_MINUTE && LA371_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA371_33 = input.LA(3);
                                    if ( (LA371_33==MIN||(LA371_33>=TIMEPERIOD_MINUTE && LA371_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA371_3 = input.LA(2);
                            if ( (LA371_3==MIN||(LA371_3>=TIMEPERIOD_MINUTE && LA371_3<=TIMEPERIOD_MINUTES)) ) {
                                alt371=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA371_4 = input.LA(2);
                            if ( (LA371_4==MIN||(LA371_4>=TIMEPERIOD_MINUTE && LA371_4<=TIMEPERIOD_MINUTES)) ) {
                                alt371=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA371_5 = input.LA(2);
                            if ( (LA371_5==MIN||(LA371_5>=TIMEPERIOD_MINUTE && LA371_5<=TIMEPERIOD_MINUTES)) ) {
                                alt371=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA371_6 = input.LA(2);
                            if ( (LA371_6==MIN||(LA371_6>=TIMEPERIOD_MINUTE && LA371_6<=TIMEPERIOD_MINUTES)) ) {
                                alt371=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA371_7 = input.LA(2);
                            if ( (LA371_7==MIN||(LA371_7>=TIMEPERIOD_MINUTE && LA371_7<=TIMEPERIOD_MINUTES)) ) {
                                alt371=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA371_8 = input.LA(2);
                            if ( (LA371_8==MIN||(LA371_8>=TIMEPERIOD_MINUTE && LA371_8<=TIMEPERIOD_MINUTES)) ) {
                                alt371=1;
                            }
                            }
                            break;
                    }
                    switch (alt371) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13780);
                            minutePart982=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart982.getTree());
                            }
                            break;
                    }
                    int alt372=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA372_26 = input.LA(3);
                                    if ( ((LA372_26>=TIMEPERIOD_SEC && LA372_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt372=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA372_27 = input.LA(3);
                                    if ( ((LA372_27>=TIMEPERIOD_SEC && LA372_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt372=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA372_28 = input.LA(3);
                                    if ( ((LA372_28>=TIMEPERIOD_SEC && LA372_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt372=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA372_29 = input.LA(3);
                                    if ( ((LA372_29>=TIMEPERIOD_SEC && LA372_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt372=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA372_30 = input.LA(3);
                                    if ( ((LA372_30>=TIMEPERIOD_SEC && LA372_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt372=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA372_31 = input.LA(3);
                                    if ( ((LA372_31>=TIMEPERIOD_SEC && LA372_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt372=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA372_32 = input.LA(3);
                                    if ( ((LA372_32>=TIMEPERIOD_SEC && LA372_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt372=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA372_33 = input.LA(3);
                                    if ( ((LA372_33>=TIMEPERIOD_SEC && LA372_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt372=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA372_3 = input.LA(2);
                            if ( ((LA372_3>=TIMEPERIOD_SEC && LA372_3<=TIMEPERIOD_SECONDS)) ) {
                                alt372=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA372_4 = input.LA(2);
                            if ( ((LA372_4>=TIMEPERIOD_SEC && LA372_4<=TIMEPERIOD_SECONDS)) ) {
                                alt372=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA372_5 = input.LA(2);
                            if ( ((LA372_5>=TIMEPERIOD_SEC && LA372_5<=TIMEPERIOD_SECONDS)) ) {
                                alt372=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA372_6 = input.LA(2);
                            if ( ((LA372_6>=TIMEPERIOD_SEC && LA372_6<=TIMEPERIOD_SECONDS)) ) {
                                alt372=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA372_7 = input.LA(2);
                            if ( ((LA372_7>=TIMEPERIOD_SEC && LA372_7<=TIMEPERIOD_SECONDS)) ) {
                                alt372=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA372_8 = input.LA(2);
                            if ( ((LA372_8>=TIMEPERIOD_SEC && LA372_8<=TIMEPERIOD_SECONDS)) ) {
                                alt372=1;
                            }
                            }
                            break;
                    }
                    switch (alt372) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13783);
                            secondPart983=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart983.getTree());
                            }
                            break;
                    }
                    int alt373=2;
                    int LA373_0 = input.LA(1);
                    if ( (LA373_0==NUM_DOUBLE||LA373_0==IDENT||(LA373_0>=PLUS && LA373_0<=QUESTION)||LA373_0==MINUS||LA373_0==NUM_INT||(LA373_0>=NUM_LONG && LA373_0<=NUM_FLOAT)) ) {
                        alt373=1;
                    }
                    switch (alt373) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13786);
                            millisecondPart984=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart984.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod13792);
                    dayPart985=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart985.getTree());
                    int alt374=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA374_26 = input.LA(3);
                                    if ( ((LA374_26>=TIMEPERIOD_HOUR && LA374_26<=TIMEPERIOD_HOURS)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA374_27 = input.LA(3);
                                    if ( ((LA374_27>=TIMEPERIOD_HOUR && LA374_27<=TIMEPERIOD_HOURS)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA374_28 = input.LA(3);
                                    if ( ((LA374_28>=TIMEPERIOD_HOUR && LA374_28<=TIMEPERIOD_HOURS)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA374_29 = input.LA(3);
                                    if ( ((LA374_29>=TIMEPERIOD_HOUR && LA374_29<=TIMEPERIOD_HOURS)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA374_30 = input.LA(3);
                                    if ( ((LA374_30>=TIMEPERIOD_HOUR && LA374_30<=TIMEPERIOD_HOURS)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA374_31 = input.LA(3);
                                    if ( ((LA374_31>=TIMEPERIOD_HOUR && LA374_31<=TIMEPERIOD_HOURS)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA374_32 = input.LA(3);
                                    if ( ((LA374_32>=TIMEPERIOD_HOUR && LA374_32<=TIMEPERIOD_HOURS)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA374_33 = input.LA(3);
                                    if ( ((LA374_33>=TIMEPERIOD_HOUR && LA374_33<=TIMEPERIOD_HOURS)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA374_3 = input.LA(2);
                            if ( ((LA374_3>=TIMEPERIOD_HOUR && LA374_3<=TIMEPERIOD_HOURS)) ) {
                                alt374=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA374_4 = input.LA(2);
                            if ( ((LA374_4>=TIMEPERIOD_HOUR && LA374_4<=TIMEPERIOD_HOURS)) ) {
                                alt374=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA374_5 = input.LA(2);
                            if ( ((LA374_5>=TIMEPERIOD_HOUR && LA374_5<=TIMEPERIOD_HOURS)) ) {
                                alt374=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA374_6 = input.LA(2);
                            if ( ((LA374_6>=TIMEPERIOD_HOUR && LA374_6<=TIMEPERIOD_HOURS)) ) {
                                alt374=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA374_7 = input.LA(2);
                            if ( ((LA374_7>=TIMEPERIOD_HOUR && LA374_7<=TIMEPERIOD_HOURS)) ) {
                                alt374=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA374_8 = input.LA(2);
                            if ( ((LA374_8>=TIMEPERIOD_HOUR && LA374_8<=TIMEPERIOD_HOURS)) ) {
                                alt374=1;
                            }
                            }
                            break;
                    }
                    switch (alt374) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13794);
                            hourPart986=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart986.getTree());
                            }
                            break;
                    }
                    int alt375=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA375_26 = input.LA(3);
                                    if ( (LA375_26==MIN||(LA375_26>=TIMEPERIOD_MINUTE && LA375_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA375_27 = input.LA(3);
                                    if ( (LA375_27==MIN||(LA375_27>=TIMEPERIOD_MINUTE && LA375_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA375_28 = input.LA(3);
                                    if ( (LA375_28==MIN||(LA375_28>=TIMEPERIOD_MINUTE && LA375_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA375_29 = input.LA(3);
                                    if ( (LA375_29==MIN||(LA375_29>=TIMEPERIOD_MINUTE && LA375_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA375_30 = input.LA(3);
                                    if ( (LA375_30==MIN||(LA375_30>=TIMEPERIOD_MINUTE && LA375_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA375_31 = input.LA(3);
                                    if ( (LA375_31==MIN||(LA375_31>=TIMEPERIOD_MINUTE && LA375_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA375_32 = input.LA(3);
                                    if ( (LA375_32==MIN||(LA375_32>=TIMEPERIOD_MINUTE && LA375_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA375_33 = input.LA(3);
                                    if ( (LA375_33==MIN||(LA375_33>=TIMEPERIOD_MINUTE && LA375_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA375_3 = input.LA(2);
                            if ( (LA375_3==MIN||(LA375_3>=TIMEPERIOD_MINUTE && LA375_3<=TIMEPERIOD_MINUTES)) ) {
                                alt375=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA375_4 = input.LA(2);
                            if ( (LA375_4==MIN||(LA375_4>=TIMEPERIOD_MINUTE && LA375_4<=TIMEPERIOD_MINUTES)) ) {
                                alt375=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA375_5 = input.LA(2);
                            if ( (LA375_5==MIN||(LA375_5>=TIMEPERIOD_MINUTE && LA375_5<=TIMEPERIOD_MINUTES)) ) {
                                alt375=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA375_6 = input.LA(2);
                            if ( (LA375_6==MIN||(LA375_6>=TIMEPERIOD_MINUTE && LA375_6<=TIMEPERIOD_MINUTES)) ) {
                                alt375=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA375_7 = input.LA(2);
                            if ( (LA375_7==MIN||(LA375_7>=TIMEPERIOD_MINUTE && LA375_7<=TIMEPERIOD_MINUTES)) ) {
                                alt375=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA375_8 = input.LA(2);
                            if ( (LA375_8==MIN||(LA375_8>=TIMEPERIOD_MINUTE && LA375_8<=TIMEPERIOD_MINUTES)) ) {
                                alt375=1;
                            }
                            }
                            break;
                    }
                    switch (alt375) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13797);
                            minutePart987=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart987.getTree());
                            }
                            break;
                    }
                    int alt376=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA376_26 = input.LA(3);
                                    if ( ((LA376_26>=TIMEPERIOD_SEC && LA376_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt376=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA376_27 = input.LA(3);
                                    if ( ((LA376_27>=TIMEPERIOD_SEC && LA376_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt376=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA376_28 = input.LA(3);
                                    if ( ((LA376_28>=TIMEPERIOD_SEC && LA376_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt376=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA376_29 = input.LA(3);
                                    if ( ((LA376_29>=TIMEPERIOD_SEC && LA376_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt376=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA376_30 = input.LA(3);
                                    if ( ((LA376_30>=TIMEPERIOD_SEC && LA376_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt376=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA376_31 = input.LA(3);
                                    if ( ((LA376_31>=TIMEPERIOD_SEC && LA376_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt376=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA376_32 = input.LA(3);
                                    if ( ((LA376_32>=TIMEPERIOD_SEC && LA376_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt376=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA376_33 = input.LA(3);
                                    if ( ((LA376_33>=TIMEPERIOD_SEC && LA376_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt376=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA376_3 = input.LA(2);
                            if ( ((LA376_3>=TIMEPERIOD_SEC && LA376_3<=TIMEPERIOD_SECONDS)) ) {
                                alt376=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA376_4 = input.LA(2);
                            if ( ((LA376_4>=TIMEPERIOD_SEC && LA376_4<=TIMEPERIOD_SECONDS)) ) {
                                alt376=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA376_5 = input.LA(2);
                            if ( ((LA376_5>=TIMEPERIOD_SEC && LA376_5<=TIMEPERIOD_SECONDS)) ) {
                                alt376=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA376_6 = input.LA(2);
                            if ( ((LA376_6>=TIMEPERIOD_SEC && LA376_6<=TIMEPERIOD_SECONDS)) ) {
                                alt376=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA376_7 = input.LA(2);
                            if ( ((LA376_7>=TIMEPERIOD_SEC && LA376_7<=TIMEPERIOD_SECONDS)) ) {
                                alt376=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA376_8 = input.LA(2);
                            if ( ((LA376_8>=TIMEPERIOD_SEC && LA376_8<=TIMEPERIOD_SECONDS)) ) {
                                alt376=1;
                            }
                            }
                            break;
                    }
                    switch (alt376) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13800);
                            secondPart988=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart988.getTree());
                            }
                            break;
                    }
                    int alt377=2;
                    int LA377_0 = input.LA(1);
                    if ( (LA377_0==NUM_DOUBLE||LA377_0==IDENT||(LA377_0>=PLUS && LA377_0<=QUESTION)||LA377_0==MINUS||LA377_0==NUM_INT||(LA377_0>=NUM_LONG && LA377_0<=NUM_FLOAT)) ) {
                        alt377=1;
                    }
                    switch (alt377) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13803);
                            millisecondPart989=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart989.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod13809);
                    hourPart990=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart990.getTree());
                    int alt378=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA378_26 = input.LA(3);
                                    if ( (LA378_26==MIN||(LA378_26>=TIMEPERIOD_MINUTE && LA378_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA378_27 = input.LA(3);
                                    if ( (LA378_27==MIN||(LA378_27>=TIMEPERIOD_MINUTE && LA378_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA378_28 = input.LA(3);
                                    if ( (LA378_28==MIN||(LA378_28>=TIMEPERIOD_MINUTE && LA378_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA378_29 = input.LA(3);
                                    if ( (LA378_29==MIN||(LA378_29>=TIMEPERIOD_MINUTE && LA378_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA378_30 = input.LA(3);
                                    if ( (LA378_30==MIN||(LA378_30>=TIMEPERIOD_MINUTE && LA378_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA378_31 = input.LA(3);
                                    if ( (LA378_31==MIN||(LA378_31>=TIMEPERIOD_MINUTE && LA378_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA378_32 = input.LA(3);
                                    if ( (LA378_32==MIN||(LA378_32>=TIMEPERIOD_MINUTE && LA378_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA378_33 = input.LA(3);
                                    if ( (LA378_33==MIN||(LA378_33>=TIMEPERIOD_MINUTE && LA378_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA378_3 = input.LA(2);
                            if ( (LA378_3==MIN||(LA378_3>=TIMEPERIOD_MINUTE && LA378_3<=TIMEPERIOD_MINUTES)) ) {
                                alt378=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA378_4 = input.LA(2);
                            if ( (LA378_4==MIN||(LA378_4>=TIMEPERIOD_MINUTE && LA378_4<=TIMEPERIOD_MINUTES)) ) {
                                alt378=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA378_5 = input.LA(2);
                            if ( (LA378_5==MIN||(LA378_5>=TIMEPERIOD_MINUTE && LA378_5<=TIMEPERIOD_MINUTES)) ) {
                                alt378=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA378_6 = input.LA(2);
                            if ( (LA378_6==MIN||(LA378_6>=TIMEPERIOD_MINUTE && LA378_6<=TIMEPERIOD_MINUTES)) ) {
                                alt378=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA378_7 = input.LA(2);
                            if ( (LA378_7==MIN||(LA378_7>=TIMEPERIOD_MINUTE && LA378_7<=TIMEPERIOD_MINUTES)) ) {
                                alt378=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA378_8 = input.LA(2);
                            if ( (LA378_8==MIN||(LA378_8>=TIMEPERIOD_MINUTE && LA378_8<=TIMEPERIOD_MINUTES)) ) {
                                alt378=1;
                            }
                            }
                            break;
                    }
                    switch (alt378) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13811);
                            minutePart991=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart991.getTree());
                            }
                            break;
                    }
                    int alt379=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA379_26 = input.LA(3);
                                    if ( ((LA379_26>=TIMEPERIOD_SEC && LA379_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt379=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA379_27 = input.LA(3);
                                    if ( ((LA379_27>=TIMEPERIOD_SEC && LA379_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt379=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA379_28 = input.LA(3);
                                    if ( ((LA379_28>=TIMEPERIOD_SEC && LA379_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt379=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA379_29 = input.LA(3);
                                    if ( ((LA379_29>=TIMEPERIOD_SEC && LA379_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt379=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA379_30 = input.LA(3);
                                    if ( ((LA379_30>=TIMEPERIOD_SEC && LA379_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt379=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA379_31 = input.LA(3);
                                    if ( ((LA379_31>=TIMEPERIOD_SEC && LA379_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt379=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA379_32 = input.LA(3);
                                    if ( ((LA379_32>=TIMEPERIOD_SEC && LA379_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt379=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA379_33 = input.LA(3);
                                    if ( ((LA379_33>=TIMEPERIOD_SEC && LA379_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt379=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA379_3 = input.LA(2);
                            if ( ((LA379_3>=TIMEPERIOD_SEC && LA379_3<=TIMEPERIOD_SECONDS)) ) {
                                alt379=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA379_4 = input.LA(2);
                            if ( ((LA379_4>=TIMEPERIOD_SEC && LA379_4<=TIMEPERIOD_SECONDS)) ) {
                                alt379=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA379_5 = input.LA(2);
                            if ( ((LA379_5>=TIMEPERIOD_SEC && LA379_5<=TIMEPERIOD_SECONDS)) ) {
                                alt379=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA379_6 = input.LA(2);
                            if ( ((LA379_6>=TIMEPERIOD_SEC && LA379_6<=TIMEPERIOD_SECONDS)) ) {
                                alt379=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA379_7 = input.LA(2);
                            if ( ((LA379_7>=TIMEPERIOD_SEC && LA379_7<=TIMEPERIOD_SECONDS)) ) {
                                alt379=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA379_8 = input.LA(2);
                            if ( ((LA379_8>=TIMEPERIOD_SEC && LA379_8<=TIMEPERIOD_SECONDS)) ) {
                                alt379=1;
                            }
                            }
                            break;
                    }
                    switch (alt379) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13814);
                            secondPart992=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart992.getTree());
                            }
                            break;
                    }
                    int alt380=2;
                    int LA380_0 = input.LA(1);
                    if ( (LA380_0==NUM_DOUBLE||LA380_0==IDENT||(LA380_0>=PLUS && LA380_0<=QUESTION)||LA380_0==MINUS||LA380_0==NUM_INT||(LA380_0>=NUM_LONG && LA380_0<=NUM_FLOAT)) ) {
                        alt380=1;
                    }
                    switch (alt380) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13817);
                            millisecondPart993=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart993.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod13823);
                    minutePart994=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart994.getTree());
                    int alt381=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA381_26 = input.LA(3);
                                    if ( ((LA381_26>=TIMEPERIOD_SEC && LA381_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA381_27 = input.LA(3);
                                    if ( ((LA381_27>=TIMEPERIOD_SEC && LA381_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA381_28 = input.LA(3);
                                    if ( ((LA381_28>=TIMEPERIOD_SEC && LA381_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA381_29 = input.LA(3);
                                    if ( ((LA381_29>=TIMEPERIOD_SEC && LA381_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA381_30 = input.LA(3);
                                    if ( ((LA381_30>=TIMEPERIOD_SEC && LA381_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA381_31 = input.LA(3);
                                    if ( ((LA381_31>=TIMEPERIOD_SEC && LA381_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA381_32 = input.LA(3);
                                    if ( ((LA381_32>=TIMEPERIOD_SEC && LA381_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA381_33 = input.LA(3);
                                    if ( ((LA381_33>=TIMEPERIOD_SEC && LA381_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA381_3 = input.LA(2);
                            if ( ((LA381_3>=TIMEPERIOD_SEC && LA381_3<=TIMEPERIOD_SECONDS)) ) {
                                alt381=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA381_4 = input.LA(2);
                            if ( ((LA381_4>=TIMEPERIOD_SEC && LA381_4<=TIMEPERIOD_SECONDS)) ) {
                                alt381=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA381_5 = input.LA(2);
                            if ( ((LA381_5>=TIMEPERIOD_SEC && LA381_5<=TIMEPERIOD_SECONDS)) ) {
                                alt381=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA381_6 = input.LA(2);
                            if ( ((LA381_6>=TIMEPERIOD_SEC && LA381_6<=TIMEPERIOD_SECONDS)) ) {
                                alt381=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA381_7 = input.LA(2);
                            if ( ((LA381_7>=TIMEPERIOD_SEC && LA381_7<=TIMEPERIOD_SECONDS)) ) {
                                alt381=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA381_8 = input.LA(2);
                            if ( ((LA381_8>=TIMEPERIOD_SEC && LA381_8<=TIMEPERIOD_SECONDS)) ) {
                                alt381=1;
                            }
                            }
                            break;
                    }
                    switch (alt381) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13825);
                            secondPart995=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart995.getTree());
                            }
                            break;
                    }
                    int alt382=2;
                    int LA382_0 = input.LA(1);
                    if ( (LA382_0==NUM_DOUBLE||LA382_0==IDENT||(LA382_0>=PLUS && LA382_0<=QUESTION)||LA382_0==MINUS||LA382_0==NUM_INT||(LA382_0>=NUM_LONG && LA382_0<=NUM_FLOAT)) ) {
                        alt382=1;
                    }
                    switch (alt382) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13828);
                            millisecondPart996=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart996.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod13834);
                    secondPart997=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart997.getTree());
                    int alt383=2;
                    int LA383_0 = input.LA(1);
                    if ( (LA383_0==NUM_DOUBLE||LA383_0==IDENT||(LA383_0>=PLUS && LA383_0<=QUESTION)||LA383_0==MINUS||LA383_0==NUM_INT||(LA383_0>=NUM_LONG && LA383_0<=NUM_FLOAT)) ) {
                        alt383=1;
                    }
                    switch (alt383) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13836);
                            millisecondPart998=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart998.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod13842);
                    millisecondPart999=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart999.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_yearPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_yearPart.nextTree());
                }
                stream_yearPart.reset();
                if ( stream_monthPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_monthPart.nextTree());
                }
                stream_monthPart.reset();
                if ( stream_weekPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_weekPart.nextTree());
                }
                stream_weekPart.reset();
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class yearPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.yearPart_return yearPart() throws RecognitionException {
        EsperEPL2GrammarParser.yearPart_return retval = new EsperEPL2GrammarParser.yearPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_YEARS1002=null;
        Token TIMEPERIOD_YEAR1003=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1000 = null;
        EsperEPL2GrammarParser.substitution_return substitution1001 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_YEARS1002_tree=null;
        CommonTree TIMEPERIOD_YEAR1003_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEARS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEARS");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEAR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEAR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt385=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt385=1;
                }
                break;
            case IDENT:
                {
                alt385=2;
                }
                break;
            case QUESTION:
                {
                alt385=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 385, 0, input);
                throw nvae;
            }
            switch (alt385) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_yearPart13889);
                    numberconstant1000=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1000.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_yearPart13893); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_yearPart13895);
                    substitution1001=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1001.getTree());
                    }
                    break;
            }
            int alt386=2;
            int LA386_0 = input.LA(1);
            if ( (LA386_0==TIMEPERIOD_YEARS) ) {
                alt386=1;
            }
            else if ( (LA386_0==TIMEPERIOD_YEAR) ) {
                alt386=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 386, 0, input);
                throw nvae;
            }
            switch (alt386) {
                case 1 :
                    {
                    TIMEPERIOD_YEARS1002=(Token)match(input,TIMEPERIOD_YEARS,FOLLOW_TIMEPERIOD_YEARS_in_yearPart13899); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEARS.add(TIMEPERIOD_YEARS1002);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_YEAR1003=(Token)match(input,TIMEPERIOD_YEAR,FOLLOW_TIMEPERIOD_YEAR_in_yearPart13903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEAR.add(TIMEPERIOD_YEAR1003);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class monthPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.monthPart_return monthPart() throws RecognitionException {
        EsperEPL2GrammarParser.monthPart_return retval = new EsperEPL2GrammarParser.monthPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MONTHS1006=null;
        Token TIMEPERIOD_MONTH1007=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1004 = null;
        EsperEPL2GrammarParser.substitution_return substitution1005 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MONTHS1006_tree=null;
        CommonTree TIMEPERIOD_MONTH1007_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTH=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTH");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTHS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTHS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt387=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt387=1;
                }
                break;
            case IDENT:
                {
                alt387=2;
                }
                break;
            case QUESTION:
                {
                alt387=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 387, 0, input);
                throw nvae;
            }
            switch (alt387) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_monthPart13951);
                    numberconstant1004=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1004.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_monthPart13955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_monthPart13957);
                    substitution1005=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1005.getTree());
                    }
                    break;
            }
            int alt388=2;
            int LA388_0 = input.LA(1);
            if ( (LA388_0==TIMEPERIOD_MONTHS) ) {
                alt388=1;
            }
            else if ( (LA388_0==TIMEPERIOD_MONTH) ) {
                alt388=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 388, 0, input);
                throw nvae;
            }
            switch (alt388) {
                case 1 :
                    {
                    TIMEPERIOD_MONTHS1006=(Token)match(input,TIMEPERIOD_MONTHS,FOLLOW_TIMEPERIOD_MONTHS_in_monthPart13961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTHS.add(TIMEPERIOD_MONTHS1006);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MONTH1007=(Token)match(input,TIMEPERIOD_MONTH,FOLLOW_TIMEPERIOD_MONTH_in_monthPart13965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTH.add(TIMEPERIOD_MONTH1007);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekPart_return weekPart() throws RecognitionException {
        EsperEPL2GrammarParser.weekPart_return retval = new EsperEPL2GrammarParser.weekPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_WEEKS1010=null;
        Token TIMEPERIOD_WEEK1011=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1008 = null;
        EsperEPL2GrammarParser.substitution_return substitution1009 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_WEEKS1010_tree=null;
        CommonTree TIMEPERIOD_WEEK1011_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEK=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEK");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEKS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEKS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt389=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt389=1;
                }
                break;
            case IDENT:
                {
                alt389=2;
                }
                break;
            case QUESTION:
                {
                alt389=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 389, 0, input);
                throw nvae;
            }
            switch (alt389) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_weekPart14013);
                    numberconstant1008=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1008.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekPart14017); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekPart14019);
                    substitution1009=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1009.getTree());
                    }
                    break;
            }
            int alt390=2;
            int LA390_0 = input.LA(1);
            if ( (LA390_0==TIMEPERIOD_WEEKS) ) {
                alt390=1;
            }
            else if ( (LA390_0==TIMEPERIOD_WEEK) ) {
                alt390=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 390, 0, input);
                throw nvae;
            }
            switch (alt390) {
                case 1 :
                    {
                    TIMEPERIOD_WEEKS1010=(Token)match(input,TIMEPERIOD_WEEKS,FOLLOW_TIMEPERIOD_WEEKS_in_weekPart14023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEKS.add(TIMEPERIOD_WEEKS1010);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_WEEK1011=(Token)match(input,TIMEPERIOD_WEEK,FOLLOW_TIMEPERIOD_WEEK_in_weekPart14027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEK.add(TIMEPERIOD_WEEK1011);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS1014=null;
        Token TIMEPERIOD_DAY1015=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1012 = null;
        EsperEPL2GrammarParser.substitution_return substitution1013 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS1014_tree=null;
        CommonTree TIMEPERIOD_DAY1015_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt391=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt391=1;
                }
                break;
            case IDENT:
                {
                alt391=2;
                }
                break;
            case QUESTION:
                {
                alt391=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 391, 0, input);
                throw nvae;
            }
            switch (alt391) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_dayPart14075);
                    numberconstant1012=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1012.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart14079); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart14081);
                    substitution1013=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1013.getTree());
                    }
                    break;
            }
            int alt392=2;
            int LA392_0 = input.LA(1);
            if ( (LA392_0==TIMEPERIOD_DAYS) ) {
                alt392=1;
            }
            else if ( (LA392_0==TIMEPERIOD_DAY) ) {
                alt392=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 392, 0, input);
                throw nvae;
            }
            switch (alt392) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS1014=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart14085); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS1014);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY1015=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart14089); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY1015);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS1018=null;
        Token TIMEPERIOD_HOUR1019=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1016 = null;
        EsperEPL2GrammarParser.substitution_return substitution1017 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS1018_tree=null;
        CommonTree TIMEPERIOD_HOUR1019_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt393=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt393=1;
                }
                break;
            case IDENT:
                {
                alt393=2;
                }
                break;
            case QUESTION:
                {
                alt393=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 393, 0, input);
                throw nvae;
            }
            switch (alt393) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_hourPart14138);
                    numberconstant1016=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1016.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart14142); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart14144);
                    substitution1017=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1017.getTree());
                    }
                    break;
            }
            int alt394=2;
            int LA394_0 = input.LA(1);
            if ( (LA394_0==TIMEPERIOD_HOURS) ) {
                alt394=1;
            }
            else if ( (LA394_0==TIMEPERIOD_HOUR) ) {
                alt394=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 394, 0, input);
                throw nvae;
            }
            switch (alt394) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS1018=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart14148); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS1018);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR1019=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart14152); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR1019);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES1022=null;
        Token TIMEPERIOD_MINUTE1023=null;
        Token MIN1024=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1020 = null;
        EsperEPL2GrammarParser.substitution_return substitution1021 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES1022_tree=null;
        CommonTree TIMEPERIOD_MINUTE1023_tree=null;
        CommonTree MIN1024_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt395=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt395=1;
                }
                break;
            case IDENT:
                {
                alt395=2;
                }
                break;
            case QUESTION:
                {
                alt395=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 395, 0, input);
                throw nvae;
            }
            switch (alt395) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_minutePart14201);
                    numberconstant1020=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1020.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart14205); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart14207);
                    substitution1021=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1021.getTree());
                    }
                    break;
            }
            int alt396=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt396=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt396=2;
                }
                break;
            case MIN:
                {
                alt396=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 396, 0, input);
                throw nvae;
            }
            switch (alt396) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES1022=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart14211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES1022);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE1023=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart14215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE1023);
                    }
                    break;
                case 3 :
                    {
                    MIN1024=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart14219); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN1024);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS1027=null;
        Token TIMEPERIOD_SECOND1028=null;
        Token TIMEPERIOD_SEC1029=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1025 = null;
        EsperEPL2GrammarParser.substitution_return substitution1026 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS1027_tree=null;
        CommonTree TIMEPERIOD_SECOND1028_tree=null;
        CommonTree TIMEPERIOD_SEC1029_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt397=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt397=1;
                }
                break;
            case IDENT:
                {
                alt397=2;
                }
                break;
            case QUESTION:
                {
                alt397=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 397, 0, input);
                throw nvae;
            }
            switch (alt397) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_secondPart14269);
                    numberconstant1025=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1025.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart14273); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart14275);
                    substitution1026=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1026.getTree());
                    }
                    break;
            }
            int alt398=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt398=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt398=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt398=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 398, 0, input);
                throw nvae;
            }
            switch (alt398) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS1027=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart14279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS1027);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND1028=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart14283); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND1028);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC1029=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart14287); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC1029);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS1032=null;
        Token TIMEPERIOD_MILLISECOND1033=null;
        Token TIMEPERIOD_MILLISEC1034=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1030 = null;
        EsperEPL2GrammarParser.substitution_return substitution1031 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS1032_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND1033_tree=null;
        CommonTree TIMEPERIOD_MILLISEC1034_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt399=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt399=1;
                }
                break;
            case IDENT:
                {
                alt399=2;
                }
                break;
            case QUESTION:
                {
                alt399=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 399, 0, input);
                throw nvae;
            }
            switch (alt399) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_millisecondPart14337);
                    numberconstant1030=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1030.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart14341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart14343);
                    substitution1031=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1031.getTree());
                    }
                    break;
            }
            int alt400=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt400=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt400=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt400=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 400, 0, input);
                throw nvae;
            }
            switch (alt400) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS1032=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart14347); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS1032);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND1033=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart14351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND1033);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC1034=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart14355); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC1034);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt401=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt401=1;
                }
                break;
            case NUM_LONG:
                {
                alt401=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt401=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt401=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 401, 0, input);
                throw nvae;
            }
            switch (alt401) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number14410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number14427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number14444); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number14461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution14482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1035 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant1036 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt402=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt402=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt402=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt402=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt402=4;
                }
                break;
            case VALUE_NULL:
                {
                alt402=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 402, 0, input);
                throw nvae;
            }
            switch (alt402) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant14501);
                    numberconstant1035=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant1035.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant14508);
                    stringconstant1036=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant1036.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant14521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant14541); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant14561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number1037 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt403=3;
            int LA403_0 = input.LA(1);
            if ( (LA403_0==MINUS) ) {
                alt403=1;
            }
            else if ( (LA403_0==PLUS) ) {
                alt403=2;
            }
            switch (alt403) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant14583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant14589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant14593);
            number1037=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number1037.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number1037!=null?((CommonTree)number1037.tree):null).getType(), "-" + (number1037!=null?input.toString(number1037.start,number1037.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt404=2;
            int LA404_0 = input.LA(1);
            if ( (LA404_0==STRING_LITERAL) ) {
                alt404=1;
            }
            else if ( (LA404_0==QUOTED_STRING_LITERAL) ) {
                alt404=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 404, 0, input);
                throw nvae;
            }
            switch (alt404) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant14622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant14638); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar5591);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6991);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar9024);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar10409);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar10471);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar11934);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar12415);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar12426);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar12437);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar12448);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar12460);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar12471);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar12482);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar12495);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar12520);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA230 dfa230 = new DFA230(this);
    static final String DFA230_eotS =
        "\u0c2f\uffff";
    static final String DFA230_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0bfa\uffff";
    static final String DFA230_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\17\uffff\1\u0137\u0081\uffff"+
        "\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff"+
        "\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff"+
        "\1\5\74\uffff\1\u0145\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74"+
        "\uffff\1\5\74\uffff\1\5\2\6\123\uffff\2\6\111\uffff\2\6\107\uffff"+
        "\2\6\100\uffff\2\6\122\uffff\2\6\100\uffff\2\6\122\uffff\2\6\100"+
        "\uffff\2\6\120\uffff\2\6\107\uffff\2\6\103\uffff\2\6\116\uffff\2"+
        "\6\100\uffff\2\6\120\uffff\2\6\u0085\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1\0\71\uffff\1\0\55\uffff"+
        "\1\0\5\uffff\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\5\uffff\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\114\uffff\1\0\30\uffff\1\0\73\uffff"+
        "\1\0\53\uffff\1\0\5\uffff";
    static final String DFA230_maxS =
        "\2\u015a\13\uffff\1\u015a\3\uffff\1\u0157\2\uffff\2\u0157\2\uffff"+
        "\4\u0157\1\uffff\2\u0157\12\uffff\3\u0157\2\uffff\3\u0157\3\uffff"+
        "\1\u0157\17\uffff\1\u0137\u0081\uffff\1\u015a\74\uffff\1\u015a\74"+
        "\uffff\1\u015a\74\uffff\1\u015a\74\uffff\1\u015a\74\uffff\1\u015a"+
        "\74\uffff\1\u015a\74\uffff\1\u015a\74\uffff\1\u015a\74\uffff\1\u015a"+
        "\74\uffff\1\u015a\74\uffff\1\u0153\74\uffff\1\u015a\74\uffff\1\u015a"+
        "\74\uffff\1\u015a\74\uffff\1\u015a\74\uffff\1\u0158\2\u0152\123"+
        "\uffff\2\u0152\111\uffff\2\u0152\107\uffff\2\u0152\100\uffff\2\u0152"+
        "\122\uffff\2\u0152\100\uffff\2\u0152\122\uffff\2\u0152\100\uffff"+
        "\2\u0152\120\uffff\2\u0152\107\uffff\2\u0152\103\uffff\2\u0152\116"+
        "\uffff\2\u0152\100\uffff\2\u0152\120\uffff\2\u0152\u0085\uffff\1"+
        "\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1"+
        "\0\71\uffff\1\0\55\uffff\1\0\5\uffff\1\0\55\uffff\1\0\31\uffff\1"+
        "\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1\0\31\uffff\1"+
        "\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\114\uffff"+
        "\1\0\30\uffff\1\0\73\uffff\1\0\53\uffff\1\0\5\uffff";
    static final String DFA230_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\63\uffff\2\6\1\uffff\1\6"+
        "\1\7\1\12\1\1\63\uffff\1\10\1\4\u041b\uffff\123\6\2\uffff\111\6"+
        "\2\uffff\107\6\2\uffff\100\6\2\uffff\122\6\2\uffff\100\6\2\uffff"+
        "\122\6\2\uffff\100\6\2\uffff\120\6\2\uffff\107\6\2\uffff\101\6\4"+
        "\uffff\116\6\2\uffff\100\6\2\uffff\120\6\2\uffff\100\6\1\11\104"+
        "\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\5\6\1\uffff\55"+
        "\6\1\uffff\5\6\1\uffff\62\6\2\uffff\55\6\1\uffff\5\6\1\uffff\55"+
        "\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\5\6\1\uffff\55"+
        "\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31"+
        "\6\1\uffff\5\6\1\uffff\62\6\1\uffff\23\6\1\uffff\30\6\1\uffff\5"+
        "\6\1\uffff\64\6\2\uffff\53\6\1\uffff\5\6";
    static final String DFA230_specialS =
        "\1\0\u00c5\uffff\1\1\74\uffff\1\2\74\uffff\1\3\74\uffff\1\4\74"+
        "\uffff\1\5\74\uffff\1\6\74\uffff\1\7\74\uffff\1\10\74\uffff\1\11"+
        "\74\uffff\1\12\74\uffff\1\13\74\uffff\1\14\74\uffff\1\15\74\uffff"+
        "\1\16\74\uffff\1\17\74\uffff\1\20\74\uffff\1\21\1\22\1\23\123\uffff"+
        "\1\24\1\25\111\uffff\1\26\1\27\107\uffff\1\30\1\31\100\uffff\1\32"+
        "\1\33\122\uffff\1\34\1\35\100\uffff\1\36\1\37\122\uffff\1\40\1\41"+
        "\100\uffff\1\42\1\43\120\uffff\1\44\1\45\107\uffff\1\46\1\47\103"+
        "\uffff\1\50\1\51\116\uffff\1\52\1\53\100\uffff\1\54\1\55\120\uffff"+
        "\1\56\1\57\u0085\uffff\1\60\31\uffff\1\61\31\uffff\1\62\31\uffff"+
        "\1\63\5\uffff\1\64\55\uffff\1\65\71\uffff\1\66\55\uffff\1\67\5\uffff"+
        "\1\70\55\uffff\1\71\31\uffff\1\72\31\uffff\1\73\31\uffff\1\74\5"+
        "\uffff\1\75\55\uffff\1\76\31\uffff\1\77\31\uffff\1\100\31\uffff"+
        "\1\101\31\uffff\1\102\31\uffff\1\103\114\uffff\1\104\30\uffff\1"+
        "\105\73\uffff\1\106\53\uffff\1\107\5\uffff}>";
    static final short[] DFA230_eot = DFA.unpackEncodedString(DFA230_eotS);
    static final short[] DFA230_eof = DFA.unpackEncodedString(DFA230_eofS);
    static final char[] DFA230_min = DFA.unpackEncodedStringToUnsignedChars(DFA230_minS);
    static final char[] DFA230_max = DFA.unpackEncodedStringToUnsignedChars(DFA230_maxS);
    static final short[] DFA230_accept = DFA.unpackEncodedString(DFA230_acceptS);
    static final short[] DFA230_special = DFA.unpackEncodedString(DFA230_specialS);
    static final short[][] DFA230_transition;
    static {
        int numStates = EsperEPL2GrammarParser_DFAS.DFA230_transitionS.length;
        DFA230_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA230_transition[i] = DFA.unpackEncodedString(EsperEPL2GrammarParser_DFAS.DFA230_transitionS[i]);
        }
    }
    class DFA230 extends DFA {
        public DFA230(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 230;
            this.eot = DFA230_eot;
            this.eof = DFA230_eof;
            this.min = DFA230_min;
            this.max = DFA230_max;
            this.accept = DFA230_accept;
            this.special = DFA230_special;
            this.transition = DFA230_transition;
        }
        public String getDescription() {
            return "1423:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR subSelectExpression ( libFunctionNoClass )+ ) -> subSelectExpression | existsSubSelectExpression | NEWKW LCURLY newAssign ( COMMA newAssign )* RCURLY -> ^( NEWKW ( newAssign )* ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 230, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA230_0 = input.LA(1);
                        int index230_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_0==MINUS) ) {s = 1;}
                        else if ( ((LA230_0>=BOOLEAN_TRUE && LA230_0<=VALUE_NULL)||LA230_0==NUM_DOUBLE||LA230_0==PLUS||(LA230_0>=STRING_LITERAL && LA230_0<=QUOTED_STRING_LITERAL)||LA230_0==NUM_INT||(LA230_0>=NUM_LONG && LA230_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA230_0==QUESTION) ) {s = 12;}
                        else if ( (LA230_0==LPAREN) ) {s = 13;}
                        else if ( (LA230_0==BETWEEN||LA230_0==ESCAPE||LA230_0==EVERY_EXPR||LA230_0==WHERE||(LA230_0>=MAX && LA230_0<=MIN)||LA230_0==OUTER||(LA230_0>=JOIN && LA230_0<=FULL)||LA230_0==EVENTS||(LA230_0>=UNIDIRECTIONAL && LA230_0<=METADATASQL)||(LA230_0>=WEEKDAY && LA230_0<=LW)||(LA230_0>=SNAPSHOT && LA230_0<=INDEX)||(LA230_0>=DEFINE && LA230_0<=AFTER)||LA230_0==WHILE||(LA230_0>=MERGE && LA230_0<=MATCHED)||LA230_0==CONTEXT||LA230_0==IDENT||LA230_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA230_0==COUNT) ) {s = 17;}
                        else if ( (LA230_0==SUM) ) {s = 20;}
                        else if ( (LA230_0==AVG) ) {s = 21;}
                        else if ( (LA230_0==COALESCE) ) {s = 24;}
                        else if ( (LA230_0==MEDIAN) ) {s = 25;}
                        else if ( (LA230_0==STDDEV) ) {s = 26;}
                        else if ( (LA230_0==AVEDEV) ) {s = 27;}
                        else if ( (LA230_0==FIRST) ) {s = 29;}
                        else if ( (LA230_0==LAST) ) {s = 30;}
                        else if ( (LA230_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA230_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA230_0==PRIOR) ) {s = 43;}
                        else if ( (LA230_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA230_0==TYPEOF) ) {s = 47;}
                        else if ( (LA230_0==CAST) ) {s = 48;}
                        else if ( (LA230_0==WINDOW) ) {s = 52;}
                        else if ( (LA230_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 66;}
                        else if ( (LA230_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 67;}
                        else if ( (LA230_0==EXISTS) ) {s = 68;}
                        else if ( (LA230_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 69;}
                        else if ( (LA230_0==LCURLY) ) {s = 70;}
                        else if ( (LA230_0==NEWKW) ) {s = 71;}
                        input.seek(index230_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA230_198 = input.LA(1);
                        int index230_198 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_198==STRING_LITERAL) ) {s = 1175;}
                        else if ( (LA230_198==QUOTED_STRING_LITERAL) ) {s = 1176;}
                        else if ( (LA230_198==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA230_198==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA230_198==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA230_198==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA230_198==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA230_198==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA230_198==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA230_198==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA230_198==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA230_198==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA230_198==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA230_198==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA230_198==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA230_198==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA230_198==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA230_198==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA230_198==AT) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA230_198==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA230_198==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA230_198==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA230_198==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA230_198==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA230_198==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA230_198==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA230_198==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA230_198==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA230_198==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA230_198==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA230_198==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA230_198==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA230_198==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA230_198==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA230_198==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA230_198==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA230_198==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA230_198==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA230_198==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA230_198==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA230_198==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA230_198==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA230_198==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA230_198==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA230_198==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA230_198==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA230_198==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA230_198==LW) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA230_198==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA230_198==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA230_198==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA230_198==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA230_198==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA230_198==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA230_198==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA230_198==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA230_198==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA230_198==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA230_198==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA230_198==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA230_198==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA230_198==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA230_198==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA230_198==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA230_198==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA230_198==SET) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA230_198==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA230_198==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA230_198==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA230_198==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA230_198==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA230_198==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA230_198==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA230_198==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA230_198==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA230_198==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        input.seek(index230_198);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA230_259 = input.LA(1);
                        int index230_259 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_259==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA230_259==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA230_259==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA230_259==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA230_259==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA230_259==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA230_259==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA230_259==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA230_259==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA230_259==STRING_LITERAL) ) {s = 1260;}
                        else if ( (LA230_259==QUOTED_STRING_LITERAL) ) {s = 1261;}
                        else if ( (LA230_259==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA230_259==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA230_259==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA230_259==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA230_259==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA230_259==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA230_259==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA230_259==AT) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA230_259==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA230_259==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA230_259==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA230_259==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA230_259==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA230_259==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA230_259==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA230_259==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA230_259==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA230_259==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA230_259==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA230_259==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA230_259==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA230_259==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA230_259==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA230_259==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA230_259==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA230_259==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA230_259==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA230_259==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA230_259==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA230_259==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA230_259==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA230_259==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA230_259==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA230_259==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA230_259==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA230_259==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA230_259==LW) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA230_259==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA230_259==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA230_259==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA230_259==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA230_259==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA230_259==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA230_259==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA230_259==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA230_259==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA230_259==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA230_259==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA230_259==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA230_259==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA230_259==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA230_259==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA230_259==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA230_259==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA230_259==SET) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA230_259==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA230_259==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA230_259==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA230_259==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA230_259==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA230_259==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA230_259==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA230_259==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA230_259==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        input.seek(index230_259);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA230_320 = input.LA(1);
                        int index230_320 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_320==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA230_320==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA230_320==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA230_320==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA230_320==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA230_320==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA230_320==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA230_320==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA230_320==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA230_320==STRING_LITERAL) ) {s = 1335;}
                        else if ( (LA230_320==QUOTED_STRING_LITERAL) ) {s = 1336;}
                        else if ( (LA230_320==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA230_320==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA230_320==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA230_320==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA230_320==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA230_320==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA230_320==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA230_320==AT) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA230_320==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA230_320==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA230_320==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA230_320==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA230_320==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA230_320==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA230_320==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA230_320==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA230_320==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA230_320==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA230_320==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA230_320==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA230_320==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA230_320==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA230_320==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA230_320==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA230_320==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA230_320==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA230_320==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA230_320==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA230_320==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA230_320==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA230_320==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA230_320==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA230_320==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA230_320==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA230_320==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA230_320==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA230_320==LW) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA230_320==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA230_320==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA230_320==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA230_320==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA230_320==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA230_320==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA230_320==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA230_320==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA230_320==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA230_320==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA230_320==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA230_320==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA230_320==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA230_320==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA230_320==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA230_320==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA230_320==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA230_320==SET) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA230_320==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA230_320==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA230_320==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA230_320==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA230_320==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA230_320==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA230_320==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA230_320==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA230_320==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        input.seek(index230_320);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA230_381 = input.LA(1);
                        int index230_381 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_381==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA230_381==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA230_381==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA230_381==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA230_381==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA230_381==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA230_381==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA230_381==STRING_LITERAL) ) {s = 1408;}
                        else if ( (LA230_381==QUOTED_STRING_LITERAL) ) {s = 1409;}
                        else if ( (LA230_381==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA230_381==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA230_381==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA230_381==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA230_381==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA230_381==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA230_381==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA230_381==AT) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA230_381==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA230_381==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA230_381==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA230_381==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA230_381==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA230_381==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA230_381==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA230_381==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA230_381==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA230_381==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA230_381==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA230_381==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA230_381==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA230_381==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA230_381==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA230_381==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA230_381==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA230_381==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA230_381==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA230_381==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA230_381==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA230_381==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA230_381==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA230_381==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA230_381==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA230_381==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA230_381==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA230_381==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA230_381==LW) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA230_381==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA230_381==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA230_381==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA230_381==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA230_381==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA230_381==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA230_381==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA230_381==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA230_381==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA230_381==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA230_381==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA230_381==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA230_381==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA230_381==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA230_381==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA230_381==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA230_381==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA230_381==SET) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA230_381==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA230_381==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA230_381==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA230_381==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA230_381==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA230_381==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA230_381==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA230_381==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA230_381==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        input.seek(index230_381);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA230_442 = input.LA(1);
                        int index230_442 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_442==STRING_LITERAL) ) {s = 1474;}
                        else if ( (LA230_442==QUOTED_STRING_LITERAL) ) {s = 1475;}
                        else if ( (LA230_442==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA230_442==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA230_442==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA230_442==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA230_442==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA230_442==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA230_442==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA230_442==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA230_442==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA230_442==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA230_442==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA230_442==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA230_442==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA230_442==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA230_442==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA230_442==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA230_442==AT) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA230_442==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA230_442==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA230_442==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA230_442==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA230_442==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA230_442==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA230_442==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA230_442==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA230_442==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA230_442==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA230_442==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA230_442==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA230_442==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA230_442==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA230_442==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA230_442==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA230_442==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA230_442==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA230_442==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA230_442==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA230_442==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA230_442==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA230_442==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA230_442==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA230_442==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA230_442==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA230_442==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA230_442==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA230_442==LW) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA230_442==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA230_442==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA230_442==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA230_442==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA230_442==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA230_442==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA230_442==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA230_442==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA230_442==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA230_442==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA230_442==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA230_442==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA230_442==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA230_442==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA230_442==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA230_442==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA230_442==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA230_442==SET) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA230_442==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA230_442==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA230_442==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA230_442==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA230_442==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA230_442==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA230_442==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA230_442==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA230_442==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        input.seek(index230_442);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA230_503 = input.LA(1);
                        int index230_503 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_503==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA230_503==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA230_503==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA230_503==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA230_503==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA230_503==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA230_503==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA230_503==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA230_503==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA230_503==STRING_LITERAL) ) {s = 1558;}
                        else if ( (LA230_503==QUOTED_STRING_LITERAL) ) {s = 1559;}
                        else if ( (LA230_503==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA230_503==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA230_503==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA230_503==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA230_503==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA230_503==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA230_503==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA230_503==AT) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA230_503==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA230_503==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA230_503==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA230_503==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA230_503==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA230_503==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA230_503==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA230_503==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA230_503==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA230_503==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA230_503==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA230_503==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA230_503==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA230_503==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA230_503==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA230_503==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA230_503==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA230_503==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA230_503==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA230_503==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA230_503==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA230_503==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA230_503==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA230_503==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA230_503==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA230_503==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA230_503==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA230_503==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA230_503==LW) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA230_503==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA230_503==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA230_503==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA230_503==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA230_503==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA230_503==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA230_503==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA230_503==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA230_503==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA230_503==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA230_503==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA230_503==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA230_503==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA230_503==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA230_503==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        else if ( (LA230_503==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA230_503==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA230_503==SET) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA230_503==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA230_503==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA230_503==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA230_503==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA230_503==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA230_503==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA230_503==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA230_503==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA230_503==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        input.seek(index230_503);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA230_564 = input.LA(1);
                        int index230_564 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_564==STRING_LITERAL) ) {s = 1624;}
                        else if ( (LA230_564==QUOTED_STRING_LITERAL) ) {s = 1625;}
                        else if ( (LA230_564==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA230_564==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA230_564==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA230_564==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA230_564==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA230_564==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA230_564==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA230_564==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA230_564==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA230_564==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA230_564==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA230_564==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA230_564==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA230_564==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA230_564==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA230_564==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA230_564==AT) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA230_564==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA230_564==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA230_564==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA230_564==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA230_564==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA230_564==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA230_564==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA230_564==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA230_564==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA230_564==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA230_564==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA230_564==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA230_564==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA230_564==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA230_564==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA230_564==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA230_564==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA230_564==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA230_564==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA230_564==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA230_564==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA230_564==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA230_564==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA230_564==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA230_564==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA230_564==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA230_564==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA230_564==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA230_564==LW) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA230_564==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA230_564==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA230_564==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA230_564==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA230_564==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA230_564==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA230_564==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA230_564==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA230_564==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA230_564==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA230_564==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA230_564==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA230_564==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA230_564==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA230_564==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA230_564==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA230_564==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA230_564==SET) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA230_564==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA230_564==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA230_564==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA230_564==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA230_564==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA230_564==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA230_564==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA230_564==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA230_564==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        input.seek(index230_564);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA230_625 = input.LA(1);
                        int index230_625 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_625==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA230_625==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA230_625==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA230_625==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA230_625==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA230_625==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA230_625==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA230_625==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA230_625==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA230_625==STRING_LITERAL) ) {s = 1708;}
                        else if ( (LA230_625==QUOTED_STRING_LITERAL) ) {s = 1709;}
                        else if ( (LA230_625==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA230_625==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA230_625==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA230_625==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA230_625==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA230_625==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA230_625==AT) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA230_625==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA230_625==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA230_625==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA230_625==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA230_625==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA230_625==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA230_625==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA230_625==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA230_625==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA230_625==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA230_625==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA230_625==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA230_625==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA230_625==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA230_625==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA230_625==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA230_625==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA230_625==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA230_625==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA230_625==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA230_625==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA230_625==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA230_625==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA230_625==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA230_625==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA230_625==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA230_625==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA230_625==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA230_625==LW) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA230_625==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA230_625==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA230_625==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA230_625==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA230_625==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA230_625==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA230_625==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA230_625==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA230_625==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA230_625==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA230_625==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA230_625==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA230_625==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA230_625==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA230_625==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA230_625==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA230_625==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA230_625==SET) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA230_625==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA230_625==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA230_625==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA230_625==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA230_625==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA230_625==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA230_625==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA230_625==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA230_625==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA230_625==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        input.seek(index230_625);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA230_686 = input.LA(1);
                        int index230_686 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_686==STRING_LITERAL) ) {s = 1774;}
                        else if ( (LA230_686==QUOTED_STRING_LITERAL) ) {s = 1775;}
                        else if ( (LA230_686==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA230_686==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA230_686==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA230_686==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA230_686==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA230_686==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA230_686==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA230_686==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA230_686==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA230_686==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA230_686==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA230_686==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA230_686==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA230_686==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA230_686==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA230_686==AT) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA230_686==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA230_686==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA230_686==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA230_686==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA230_686==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA230_686==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA230_686==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA230_686==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA230_686==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA230_686==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA230_686==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA230_686==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA230_686==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA230_686==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA230_686==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA230_686==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA230_686==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA230_686==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA230_686==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA230_686==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA230_686==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA230_686==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA230_686==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA230_686==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA230_686==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA230_686==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA230_686==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA230_686==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA230_686==LW) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA230_686==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA230_686==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA230_686==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA230_686==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA230_686==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA230_686==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA230_686==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA230_686==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA230_686==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA230_686==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA230_686==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA230_686==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA230_686==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA230_686==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA230_686==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA230_686==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA230_686==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA230_686==SET) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA230_686==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA230_686==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA230_686==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA230_686==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA230_686==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA230_686==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA230_686==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA230_686==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA230_686==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA230_686==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        input.seek(index230_686);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA230_747 = input.LA(1);
                        int index230_747 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_747==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA230_747==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA230_747==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA230_747==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA230_747==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA230_747==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA230_747==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA230_747==STRING_LITERAL) ) {s = 1856;}
                        else if ( (LA230_747==QUOTED_STRING_LITERAL) ) {s = 1857;}
                        else if ( (LA230_747==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA230_747==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA230_747==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA230_747==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA230_747==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA230_747==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA230_747==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA230_747==AT) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA230_747==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA230_747==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA230_747==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA230_747==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA230_747==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA230_747==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA230_747==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA230_747==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA230_747==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA230_747==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA230_747==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA230_747==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA230_747==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA230_747==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA230_747==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA230_747==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA230_747==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA230_747==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA230_747==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA230_747==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA230_747==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA230_747==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA230_747==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA230_747==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA230_747==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA230_747==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA230_747==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA230_747==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA230_747==LW) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA230_747==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA230_747==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA230_747==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA230_747==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA230_747==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA230_747==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA230_747==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA230_747==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA230_747==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA230_747==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA230_747==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA230_747==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA230_747==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA230_747==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA230_747==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA230_747==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA230_747==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA230_747==SET) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA230_747==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA230_747==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA230_747==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA230_747==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA230_747==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA230_747==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA230_747==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA230_747==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA230_747==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        input.seek(index230_747);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA230_808 = input.LA(1);
                        int index230_808 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_808==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA230_808==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA230_808==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA230_808==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA230_808==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA230_808==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA230_808==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA230_808==STRING_LITERAL) ) {s = 1929;}
                        else if ( (LA230_808==QUOTED_STRING_LITERAL) ) {s = 1930;}
                        else if ( (LA230_808==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA230_808==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA230_808==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA230_808==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA230_808==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA230_808==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA230_808==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA230_808==AT) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA230_808==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA230_808==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA230_808==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA230_808==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA230_808==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA230_808==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA230_808==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA230_808==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA230_808==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA230_808==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA230_808==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA230_808==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA230_808==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA230_808==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA230_808==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA230_808==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA230_808==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA230_808==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA230_808==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA230_808==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA230_808==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA230_808==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA230_808==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA230_808==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA230_808==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA230_808==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA230_808==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA230_808==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA230_808==LW) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA230_808==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA230_808==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA230_808==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA230_808==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA230_808==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA230_808==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA230_808==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA230_808==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA230_808==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA230_808==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA230_808==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA230_808==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA230_808==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA230_808==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA230_808==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA230_808==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA230_808==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA230_808==SET) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA230_808==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA230_808==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA230_808==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA230_808==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA230_808==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA230_808==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA230_808==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA230_808==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA230_808==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        input.seek(index230_808);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA230_869 = input.LA(1);
                        int index230_869 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_869==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( ((LA230_869>=STRING_LITERAL && LA230_869<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index230_869);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA230_930 = input.LA(1);
                        int index230_930 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_930==STRING_LITERAL) ) {s = 1998;}
                        else if ( (LA230_930==QUOTED_STRING_LITERAL) ) {s = 1999;}
                        else if ( (LA230_930==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA230_930==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA230_930==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA230_930==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA230_930==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA230_930==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA230_930==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA230_930==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA230_930==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA230_930==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA230_930==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA230_930==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA230_930==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA230_930==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA230_930==AT) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA230_930==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA230_930==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA230_930==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA230_930==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA230_930==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA230_930==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA230_930==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA230_930==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA230_930==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA230_930==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA230_930==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA230_930==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA230_930==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA230_930==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA230_930==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA230_930==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA230_930==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA230_930==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA230_930==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA230_930==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA230_930==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        else if ( (LA230_930==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( (LA230_930==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA230_930==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA230_930==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA230_930==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA230_930==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA230_930==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA230_930==LW) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA230_930==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA230_930==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA230_930==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA230_930==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA230_930==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA230_930==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA230_930==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA230_930==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA230_930==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA230_930==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA230_930==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA230_930==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA230_930==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA230_930==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        else if ( (LA230_930==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA230_930==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA230_930==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA230_930==SET) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA230_930==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA230_930==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA230_930==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA230_930==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA230_930==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA230_930==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA230_930==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA230_930==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA230_930==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        input.seek(index230_930);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA230_991 = input.LA(1);
                        int index230_991 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_991==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA230_991==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA230_991==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA230_991==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA230_991==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA230_991==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA230_991==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA230_991==STRING_LITERAL) ) {s = 2078;}
                        else if ( (LA230_991==QUOTED_STRING_LITERAL) ) {s = 2079;}
                        else if ( (LA230_991==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA230_991==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA230_991==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        else if ( (LA230_991==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA230_991==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA230_991==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA230_991==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA230_991==AT) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA230_991==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA230_991==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA230_991==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA230_991==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA230_991==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA230_991==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA230_991==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA230_991==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA230_991==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA230_991==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA230_991==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA230_991==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA230_991==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA230_991==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA230_991==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2102;}
                        else if ( (LA230_991==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA230_991==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA230_991==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA230_991==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA230_991==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA230_991==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA230_991==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA230_991==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA230_991==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA230_991==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA230_991==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA230_991==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA230_991==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA230_991==LW) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA230_991==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA230_991==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA230_991==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA230_991==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA230_991==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA230_991==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA230_991==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA230_991==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA230_991==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA230_991==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA230_991==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        else if ( (LA230_991==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA230_991==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA230_991==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA230_991==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA230_991==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA230_991==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA230_991==SET) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA230_991==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA230_991==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA230_991==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA230_991==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA230_991==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA230_991==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA230_991==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA230_991==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA230_991==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        input.seek(index230_991);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA230_1052 = input.LA(1);
                        int index230_1052 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1052==STRING_LITERAL) ) {s = 2144;}
                        else if ( (LA230_1052==QUOTED_STRING_LITERAL) ) {s = 2145;}
                        else if ( (LA230_1052==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA230_1052==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA230_1052==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA230_1052==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA230_1052==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA230_1052==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA230_1052==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2152;}
                        else if ( (LA230_1052==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA230_1052==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA230_1052==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA230_1052==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA230_1052==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA230_1052==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA230_1052==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA230_1052==AT) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA230_1052==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA230_1052==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA230_1052==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA230_1052==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA230_1052==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA230_1052==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA230_1052==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA230_1052==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA230_1052==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        else if ( (LA230_1052==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA230_1052==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA230_1052==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA230_1052==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA230_1052==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA230_1052==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA230_1052==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA230_1052==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA230_1052==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA230_1052==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA230_1052==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA230_1052==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA230_1052==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA230_1052==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA230_1052==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA230_1052==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA230_1052==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA230_1052==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA230_1052==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA230_1052==LW) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA230_1052==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA230_1052==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA230_1052==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA230_1052==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA230_1052==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA230_1052==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA230_1052==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA230_1052==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA230_1052==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA230_1052==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA230_1052==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA230_1052==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA230_1052==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2202;}
                        else if ( (LA230_1052==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA230_1052==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA230_1052==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA230_1052==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA230_1052==SET) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        else if ( (LA230_1052==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA230_1052==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA230_1052==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA230_1052==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA230_1052==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA230_1052==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA230_1052==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA230_1052==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA230_1052==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        input.seek(index230_1052);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA230_1113 = input.LA(1);
                        int index230_1113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1113==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        else if ( (LA230_1113==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2218;}
                        else if ( (LA230_1113==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA230_1113==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA230_1113==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA230_1113==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA230_1113==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA230_1113==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA230_1113==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA230_1113==STRING_LITERAL) ) {s = 2226;}
                        else if ( (LA230_1113==QUOTED_STRING_LITERAL) ) {s = 2227;}
                        else if ( (LA230_1113==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA230_1113==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA230_1113==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA230_1113==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA230_1113==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA230_1113==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA230_1113==AT) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA230_1113==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA230_1113==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA230_1113==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA230_1113==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA230_1113==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA230_1113==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA230_1113==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA230_1113==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA230_1113==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA230_1113==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA230_1113==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA230_1113==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA230_1113==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA230_1113==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA230_1113==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA230_1113==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA230_1113==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA230_1113==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA230_1113==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA230_1113==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA230_1113==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA230_1113==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA230_1113==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA230_1113==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA230_1113==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        else if ( (LA230_1113==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA230_1113==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA230_1113==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA230_1113==LW) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA230_1113==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA230_1113==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA230_1113==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA230_1113==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        else if ( (LA230_1113==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA230_1113==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA230_1113==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA230_1113==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA230_1113==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA230_1113==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA230_1113==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA230_1113==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA230_1113==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA230_1113==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA230_1113==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA230_1113==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2279;}
                        else if ( (LA230_1113==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA230_1113==SET) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA230_1113==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA230_1113==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA230_1113==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        else if ( (LA230_1113==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA230_1113==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA230_1113==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA230_1113==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA230_1113==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA230_1113==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA230_1113==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        input.seek(index230_1113);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA230_1174 = input.LA(1);
                        int index230_1174 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1174==SELECT) ) {s = 2292;}
                        else if ( (LA230_1174==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2293;}
                        else if ( (LA230_1174==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA230_1174==AT) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA230_1174==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA230_1174==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA230_1174==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA230_1174==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA230_1174==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA230_1174==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA230_1174==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA230_1174==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA230_1174==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2304;}
                        else if ( (LA230_1174==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA230_1174==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA230_1174==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA230_1174==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA230_1174==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        else if ( (LA230_1174==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA230_1174==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA230_1174==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA230_1174==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA230_1174==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA230_1174==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA230_1174==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA230_1174==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA230_1174==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA230_1174==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA230_1174==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA230_1174==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA230_1174==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA230_1174==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA230_1174==LW) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA230_1174==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA230_1174==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA230_1174==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA230_1174==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA230_1174==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA230_1174==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA230_1174==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA230_1174==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA230_1174==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA230_1174==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        else if ( (LA230_1174==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA230_1174==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA230_1174==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA230_1174==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA230_1174==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA230_1174==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        input.seek(index230_1174);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA230_1175 = input.LA(1);
                        int index230_1175 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1175==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA230_1175==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA230_1175==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA230_1175==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA230_1175==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2345;}
                        else if ( (LA230_1175==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA230_1175==LT) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA230_1175==GT) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA230_1175==LE) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA230_1175==GE) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA230_1175==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA230_1175==IS) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA230_1175==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA230_1175==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2354;}
                        else if ( (LA230_1175==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA230_1175==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA230_1175==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA230_1175==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA230_1175==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        else if ( (LA230_1175==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA230_1175==RPAREN) ) {s = 2361;}
                        else if ( (LA230_1175==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA230_1175==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA230_1175==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA230_1175==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA230_1175==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        input.seek(index230_1175);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA230_1176 = input.LA(1);
                        int index230_1176 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1176==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA230_1176==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA230_1176==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA230_1176==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA230_1176==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA230_1176==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA230_1176==LT) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA230_1176==GT) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA230_1176==LE) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA230_1176==GE) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA230_1176==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA230_1176==IS) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA230_1176==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2379;}
                        else if ( (LA230_1176==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA230_1176==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA230_1176==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA230_1176==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA230_1176==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        else if ( (LA230_1176==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA230_1176==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA230_1176==RPAREN) ) {s = 2387;}
                        else if ( (LA230_1176==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA230_1176==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA230_1176==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA230_1176==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA230_1176==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        input.seek(index230_1176);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA230_1260 = input.LA(1);
                        int index230_1260 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1260==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        else if ( (LA230_1260==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA230_1260==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA230_1260==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA230_1260==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA230_1260==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA230_1260==LT) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA230_1260==GT) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA230_1260==LE) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA230_1260==GE) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA230_1260==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA230_1260==IS) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        else if ( (LA230_1260==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA230_1260==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA230_1260==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA230_1260==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA230_1260==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA230_1260==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA230_1260==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA230_1260==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA230_1260==RPAREN) ) {s = 2413;}
                        else if ( (LA230_1260==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA230_1260==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA230_1260==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA230_1260==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA230_1260==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        input.seek(index230_1260);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA230_1261 = input.LA(1);
                        int index230_1261 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1261==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA230_1261==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA230_1261==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA230_1261==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA230_1261==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA230_1261==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA230_1261==LT) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA230_1261==GT) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA230_1261==LE) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA230_1261==GE) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        else if ( (LA230_1261==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA230_1261==IS) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        else if ( (LA230_1261==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA230_1261==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA230_1261==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA230_1261==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA230_1261==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA230_1261==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA230_1261==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA230_1261==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA230_1261==RPAREN) ) {s = 2439;}
                        else if ( (LA230_1261==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA230_1261==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA230_1261==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA230_1261==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA230_1261==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        input.seek(index230_1261);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA230_1335 = input.LA(1);
                        int index230_1335 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1335==RPAREN) ) {s = 2445;}
                        else if ( (LA230_1335==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA230_1335==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA230_1335==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA230_1335==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA230_1335==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA230_1335==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA230_1335==LT) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA230_1335==GT) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA230_1335==LE) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA230_1335==GE) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA230_1335==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        else if ( (LA230_1335==IS) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA230_1335==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA230_1335==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA230_1335==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA230_1335==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        else if ( (LA230_1335==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA230_1335==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA230_1335==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA230_1335==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA230_1335==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA230_1335==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA230_1335==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA230_1335==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA230_1335==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        input.seek(index230_1335);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA230_1336 = input.LA(1);
                        int index230_1336 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1336==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA230_1336==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA230_1336==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA230_1336==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA230_1336==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA230_1336==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA230_1336==LT) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA230_1336==GT) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA230_1336==LE) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA230_1336==GE) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA230_1336==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA230_1336==IS) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA230_1336==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA230_1336==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA230_1336==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA230_1336==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA230_1336==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        else if ( (LA230_1336==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA230_1336==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA230_1336==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA230_1336==RPAREN) ) {s = 2491;}
                        else if ( (LA230_1336==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA230_1336==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA230_1336==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        else if ( (LA230_1336==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA230_1336==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        input.seek(index230_1336);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA230_1408 = input.LA(1);
                        int index230_1408 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1408==RPAREN) ) {s = 14;}
                        else if ( (LA230_1408==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA230_1408==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA230_1408==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA230_1408==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA230_1408==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA230_1408==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA230_1408==LT) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA230_1408==GT) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA230_1408==LE) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA230_1408==GE) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA230_1408==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        else if ( (LA230_1408==IS) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA230_1408==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA230_1408==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA230_1408==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA230_1408==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA230_1408==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA230_1408==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA230_1408==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA230_1408==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA230_1408==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA230_1408==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA230_1408==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA230_1408==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA230_1408==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        input.seek(index230_1408);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA230_1409 = input.LA(1);
                        int index230_1409 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1409==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA230_1409==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA230_1409==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA230_1409==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA230_1409==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA230_1409==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA230_1409==LT) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA230_1409==GT) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA230_1409==LE) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA230_1409==GE) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA230_1409==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA230_1409==IS) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        else if ( (LA230_1409==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA230_1409==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA230_1409==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA230_1409==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA230_1409==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA230_1409==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA230_1409==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA230_1409==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA230_1409==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA230_1409==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA230_1409==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA230_1409==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA230_1409==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA230_1409==RPAREN) ) {s = 14;}
                        input.seek(index230_1409);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA230_1474 = input.LA(1);
                        int index230_1474 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1474==RPAREN) ) {s = 2549;}
                        else if ( (LA230_1474==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA230_1474==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA230_1474==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA230_1474==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA230_1474==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA230_1474==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA230_1474==LT) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA230_1474==GT) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA230_1474==LE) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA230_1474==GE) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA230_1474==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2560;}
                        else if ( (LA230_1474==IS) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA230_1474==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA230_1474==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA230_1474==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA230_1474==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA230_1474==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA230_1474==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA230_1474==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA230_1474==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA230_1474==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA230_1474==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA230_1474==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA230_1474==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA230_1474==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        input.seek(index230_1474);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA230_1475 = input.LA(1);
                        int index230_1475 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1475==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA230_1475==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA230_1475==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA230_1475==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA230_1475==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA230_1475==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA230_1475==LT) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA230_1475==GT) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA230_1475==LE) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA230_1475==GE) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA230_1475==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA230_1475==IS) && (synpred3_EsperEPL2Grammar())) {s = 2586;}
                        else if ( (LA230_1475==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA230_1475==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA230_1475==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA230_1475==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA230_1475==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA230_1475==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA230_1475==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA230_1475==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA230_1475==RPAREN) ) {s = 2595;}
                        else if ( (LA230_1475==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA230_1475==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA230_1475==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA230_1475==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA230_1475==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        input.seek(index230_1475);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA230_1558 = input.LA(1);
                        int index230_1558 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1558==RPAREN) ) {s = 2601;}
                        else if ( (LA230_1558==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA230_1558==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA230_1558==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA230_1558==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA230_1558==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA230_1558==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA230_1558==LT) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA230_1558==GT) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA230_1558==LE) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA230_1558==GE) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA230_1558==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        else if ( (LA230_1558==IS) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA230_1558==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA230_1558==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA230_1558==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA230_1558==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA230_1558==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA230_1558==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA230_1558==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA230_1558==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        else if ( (LA230_1558==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA230_1558==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA230_1558==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA230_1558==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA230_1558==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        input.seek(index230_1558);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA230_1559 = input.LA(1);
                        int index230_1559 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1559==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA230_1559==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA230_1559==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA230_1559==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA230_1559==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA230_1559==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA230_1559==LT) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA230_1559==GT) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA230_1559==LE) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA230_1559==GE) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA230_1559==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA230_1559==IS) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA230_1559==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA230_1559==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA230_1559==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA230_1559==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA230_1559==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA230_1559==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA230_1559==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA230_1559==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA230_1559==RPAREN) ) {s = 2647;}
                        else if ( (LA230_1559==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA230_1559==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA230_1559==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA230_1559==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA230_1559==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        input.seek(index230_1559);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA230_1624 = input.LA(1);
                        int index230_1624 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1624==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA230_1624==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA230_1624==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA230_1624==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA230_1624==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA230_1624==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA230_1624==LT) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA230_1624==GT) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA230_1624==LE) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA230_1624==GE) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA230_1624==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA230_1624==IS) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA230_1624==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA230_1624==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA230_1624==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA230_1624==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA230_1624==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA230_1624==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA230_1624==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA230_1624==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA230_1624==RPAREN) ) {s = 2673;}
                        else if ( (LA230_1624==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA230_1624==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA230_1624==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA230_1624==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA230_1624==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        input.seek(index230_1624);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA230_1625 = input.LA(1);
                        int index230_1625 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1625==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA230_1625==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA230_1625==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA230_1625==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA230_1625==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA230_1625==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA230_1625==LT) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA230_1625==GT) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA230_1625==LE) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA230_1625==GE) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA230_1625==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA230_1625==IS) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA230_1625==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA230_1625==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA230_1625==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA230_1625==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA230_1625==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA230_1625==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA230_1625==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA230_1625==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA230_1625==RPAREN) ) {s = 2699;}
                        else if ( (LA230_1625==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA230_1625==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA230_1625==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA230_1625==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA230_1625==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        input.seek(index230_1625);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA230_1708 = input.LA(1);
                        int index230_1708 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1708==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA230_1708==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA230_1708==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA230_1708==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA230_1708==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA230_1708==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA230_1708==LT) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA230_1708==GT) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA230_1708==LE) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA230_1708==GE) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA230_1708==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA230_1708==IS) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA230_1708==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA230_1708==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA230_1708==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA230_1708==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA230_1708==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA230_1708==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA230_1708==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        else if ( (LA230_1708==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA230_1708==RPAREN) ) {s = 2725;}
                        else if ( (LA230_1708==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA230_1708==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA230_1708==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA230_1708==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA230_1708==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        input.seek(index230_1708);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA230_1709 = input.LA(1);
                        int index230_1709 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1709==RPAREN) ) {s = 2731;}
                        else if ( (LA230_1709==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA230_1709==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA230_1709==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA230_1709==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA230_1709==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA230_1709==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA230_1709==LT) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA230_1709==GT) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA230_1709==LE) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA230_1709==GE) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA230_1709==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA230_1709==IS) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA230_1709==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA230_1709==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA230_1709==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA230_1709==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA230_1709==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA230_1709==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA230_1709==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA230_1709==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        else if ( (LA230_1709==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA230_1709==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA230_1709==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA230_1709==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA230_1709==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        input.seek(index230_1709);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA230_1774 = input.LA(1);
                        int index230_1774 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1774==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA230_1774==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA230_1774==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA230_1774==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA230_1774==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA230_1774==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA230_1774==LT) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA230_1774==GT) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA230_1774==LE) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA230_1774==GE) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA230_1774==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA230_1774==IS) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA230_1774==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA230_1774==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA230_1774==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA230_1774==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA230_1774==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA230_1774==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA230_1774==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        else if ( (LA230_1774==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2776;}
                        else if ( (LA230_1774==RPAREN) ) {s = 2777;}
                        else if ( (LA230_1774==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2778;}
                        else if ( (LA230_1774==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA230_1774==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2780;}
                        else if ( (LA230_1774==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA230_1774==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        input.seek(index230_1774);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA230_1775 = input.LA(1);
                        int index230_1775 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1775==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2783;}
                        else if ( (LA230_1775==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA230_1775==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        else if ( (LA230_1775==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2786;}
                        else if ( (LA230_1775==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2787;}
                        else if ( (LA230_1775==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2788;}
                        else if ( (LA230_1775==LT) && (synpred3_EsperEPL2Grammar())) {s = 2789;}
                        else if ( (LA230_1775==GT) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA230_1775==LE) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        else if ( (LA230_1775==GE) && (synpred3_EsperEPL2Grammar())) {s = 2792;}
                        else if ( (LA230_1775==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA230_1775==IS) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        else if ( (LA230_1775==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2795;}
                        else if ( (LA230_1775==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA230_1775==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA230_1775==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA230_1775==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA230_1775==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA230_1775==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        else if ( (LA230_1775==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2802;}
                        else if ( (LA230_1775==RPAREN) ) {s = 2803;}
                        else if ( (LA230_1775==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2804;}
                        else if ( (LA230_1775==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA230_1775==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2806;}
                        else if ( (LA230_1775==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA230_1775==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        input.seek(index230_1775);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA230_1856 = input.LA(1);
                        int index230_1856 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1856==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2809;}
                        else if ( (LA230_1856==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA230_1856==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        else if ( (LA230_1856==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2812;}
                        else if ( (LA230_1856==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2813;}
                        else if ( (LA230_1856==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA230_1856==LT) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA230_1856==GT) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA230_1856==LE) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        else if ( (LA230_1856==GE) && (synpred3_EsperEPL2Grammar())) {s = 2818;}
                        else if ( (LA230_1856==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA230_1856==IS) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        else if ( (LA230_1856==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2821;}
                        else if ( (LA230_1856==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA230_1856==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA230_1856==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA230_1856==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA230_1856==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA230_1856==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        else if ( (LA230_1856==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2828;}
                        else if ( (LA230_1856==RPAREN) ) {s = 2829;}
                        else if ( (LA230_1856==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2830;}
                        else if ( (LA230_1856==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA230_1856==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2832;}
                        else if ( (LA230_1856==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2833;}
                        else if ( (LA230_1856==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        input.seek(index230_1856);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA230_1857 = input.LA(1);
                        int index230_1857 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1857==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2835;}
                        else if ( (LA230_1857==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA230_1857==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        else if ( (LA230_1857==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2838;}
                        else if ( (LA230_1857==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2839;}
                        else if ( (LA230_1857==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA230_1857==LT) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA230_1857==GT) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA230_1857==LE) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        else if ( (LA230_1857==GE) && (synpred3_EsperEPL2Grammar())) {s = 2844;}
                        else if ( (LA230_1857==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2845;}
                        else if ( (LA230_1857==IS) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        else if ( (LA230_1857==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA230_1857==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA230_1857==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2849;}
                        else if ( (LA230_1857==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA230_1857==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA230_1857==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA230_1857==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        else if ( (LA230_1857==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        else if ( (LA230_1857==RPAREN) ) {s = 2855;}
                        else if ( (LA230_1857==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA230_1857==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA230_1857==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2858;}
                        else if ( (LA230_1857==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA230_1857==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        input.seek(index230_1857);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA230_1929 = input.LA(1);
                        int index230_1929 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1929==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2861;}
                        else if ( (LA230_1929==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA230_1929==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        else if ( (LA230_1929==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2864;}
                        else if ( (LA230_1929==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2865;}
                        else if ( (LA230_1929==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2866;}
                        else if ( (LA230_1929==LT) && (synpred3_EsperEPL2Grammar())) {s = 2867;}
                        else if ( (LA230_1929==GT) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA230_1929==LE) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        else if ( (LA230_1929==GE) && (synpred3_EsperEPL2Grammar())) {s = 2870;}
                        else if ( (LA230_1929==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        else if ( (LA230_1929==IS) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        else if ( (LA230_1929==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2873;}
                        else if ( (LA230_1929==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2874;}
                        else if ( (LA230_1929==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA230_1929==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA230_1929==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA230_1929==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA230_1929==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        else if ( (LA230_1929==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2880;}
                        else if ( (LA230_1929==RPAREN) ) {s = 2881;}
                        else if ( (LA230_1929==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA230_1929==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA230_1929==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2884;}
                        else if ( (LA230_1929==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA230_1929==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        input.seek(index230_1929);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA230_1930 = input.LA(1);
                        int index230_1930 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1930==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2887;}
                        else if ( (LA230_1930==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA230_1930==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        else if ( (LA230_1930==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2890;}
                        else if ( (LA230_1930==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2891;}
                        else if ( (LA230_1930==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA230_1930==LT) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA230_1930==GT) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA230_1930==LE) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        else if ( (LA230_1930==GE) && (synpred3_EsperEPL2Grammar())) {s = 2896;}
                        else if ( (LA230_1930==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2897;}
                        else if ( (LA230_1930==IS) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        else if ( (LA230_1930==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA230_1930==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2900;}
                        else if ( (LA230_1930==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA230_1930==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA230_1930==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA230_1930==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA230_1930==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        else if ( (LA230_1930==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2906;}
                        else if ( (LA230_1930==RPAREN) ) {s = 2907;}
                        else if ( (LA230_1930==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA230_1930==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA230_1930==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2910;}
                        else if ( (LA230_1930==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA230_1930==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        input.seek(index230_1930);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA230_1998 = input.LA(1);
                        int index230_1998 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1998==RPAREN) ) {s = 14;}
                        else if ( (LA230_1998==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA230_1998==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        else if ( (LA230_1998==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2916;}
                        else if ( (LA230_1998==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        else if ( (LA230_1998==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA230_1998==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2919;}
                        else if ( (LA230_1998==LT) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        else if ( (LA230_1998==GT) && (synpred3_EsperEPL2Grammar())) {s = 2921;}
                        else if ( (LA230_1998==LE) && (synpred3_EsperEPL2Grammar())) {s = 2922;}
                        else if ( (LA230_1998==GE) && (synpred3_EsperEPL2Grammar())) {s = 2923;}
                        else if ( (LA230_1998==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2924;}
                        else if ( (LA230_1998==IS) && (synpred3_EsperEPL2Grammar())) {s = 2925;}
                        else if ( (LA230_1998==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2926;}
                        else if ( (LA230_1998==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA230_1998==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA230_1998==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA230_1998==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA230_1998==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        else if ( (LA230_1998==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2932;}
                        else if ( (LA230_1998==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2933;}
                        else if ( (LA230_1998==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2934;}
                        else if ( (LA230_1998==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA230_1998==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2936;}
                        else if ( (LA230_1998==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2937;}
                        else if ( (LA230_1998==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        input.seek(index230_1998);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA230_1999 = input.LA(1);
                        int index230_1999 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_1999==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA230_1999==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA230_1999==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        else if ( (LA230_1999==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2942;}
                        else if ( (LA230_1999==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2943;}
                        else if ( (LA230_1999==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA230_1999==LT) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        else if ( (LA230_1999==GT) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA230_1999==LE) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA230_1999==GE) && (synpred3_EsperEPL2Grammar())) {s = 2948;}
                        else if ( (LA230_1999==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2949;}
                        else if ( (LA230_1999==IS) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        else if ( (LA230_1999==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA230_1999==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA230_1999==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2953;}
                        else if ( (LA230_1999==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA230_1999==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA230_1999==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA230_1999==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2957;}
                        else if ( (LA230_1999==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2958;}
                        else if ( (LA230_1999==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2959;}
                        else if ( (LA230_1999==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA230_1999==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA230_1999==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2962;}
                        else if ( (LA230_1999==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2963;}
                        else if ( (LA230_1999==RPAREN) ) {s = 14;}
                        input.seek(index230_1999);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA230_2078 = input.LA(1);
                        int index230_2078 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_2078==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2965;}
                        else if ( (LA230_2078==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA230_2078==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        else if ( (LA230_2078==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2968;}
                        else if ( (LA230_2078==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2969;}
                        else if ( (LA230_2078==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2970;}
                        else if ( (LA230_2078==LT) && (synpred3_EsperEPL2Grammar())) {s = 2971;}
                        else if ( (LA230_2078==GT) && (synpred3_EsperEPL2Grammar())) {s = 2972;}
                        else if ( (LA230_2078==LE) && (synpred3_EsperEPL2Grammar())) {s = 2973;}
                        else if ( (LA230_2078==GE) && (synpred3_EsperEPL2Grammar())) {s = 2974;}
                        else if ( (LA230_2078==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2975;}
                        else if ( (LA230_2078==IS) && (synpred3_EsperEPL2Grammar())) {s = 2976;}
                        else if ( (LA230_2078==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2977;}
                        else if ( (LA230_2078==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2978;}
                        else if ( (LA230_2078==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2979;}
                        else if ( (LA230_2078==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2980;}
                        else if ( (LA230_2078==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2981;}
                        else if ( (LA230_2078==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2982;}
                        else if ( (LA230_2078==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2983;}
                        else if ( (LA230_2078==RPAREN) ) {s = 2984;}
                        else if ( (LA230_2078==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2985;}
                        else if ( (LA230_2078==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2986;}
                        else if ( (LA230_2078==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2987;}
                        else if ( (LA230_2078==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2988;}
                        else if ( (LA230_2078==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2989;}
                        input.seek(index230_2078);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA230_2079 = input.LA(1);
                        int index230_2079 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_2079==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2990;}
                        else if ( (LA230_2079==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2991;}
                        else if ( (LA230_2079==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2992;}
                        else if ( (LA230_2079==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2993;}
                        else if ( (LA230_2079==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2994;}
                        else if ( (LA230_2079==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2995;}
                        else if ( (LA230_2079==LT) && (synpred3_EsperEPL2Grammar())) {s = 2996;}
                        else if ( (LA230_2079==GT) && (synpred3_EsperEPL2Grammar())) {s = 2997;}
                        else if ( (LA230_2079==LE) && (synpred3_EsperEPL2Grammar())) {s = 2998;}
                        else if ( (LA230_2079==GE) && (synpred3_EsperEPL2Grammar())) {s = 2999;}
                        else if ( (LA230_2079==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3000;}
                        else if ( (LA230_2079==IS) && (synpred3_EsperEPL2Grammar())) {s = 3001;}
                        else if ( (LA230_2079==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3002;}
                        else if ( (LA230_2079==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3003;}
                        else if ( (LA230_2079==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3004;}
                        else if ( (LA230_2079==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3005;}
                        else if ( (LA230_2079==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3006;}
                        else if ( (LA230_2079==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3007;}
                        else if ( (LA230_2079==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3008;}
                        else if ( (LA230_2079==RPAREN) ) {s = 3009;}
                        else if ( (LA230_2079==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3010;}
                        else if ( (LA230_2079==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3011;}
                        else if ( (LA230_2079==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3012;}
                        else if ( (LA230_2079==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3013;}
                        else if ( (LA230_2079==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3014;}
                        input.seek(index230_2079);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA230_2144 = input.LA(1);
                        int index230_2144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_2144==RPAREN) ) {s = 14;}
                        else if ( (LA230_2144==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3016;}
                        else if ( (LA230_2144==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3017;}
                        else if ( (LA230_2144==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3018;}
                        else if ( (LA230_2144==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3019;}
                        else if ( (LA230_2144==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3020;}
                        else if ( (LA230_2144==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3021;}
                        else if ( (LA230_2144==LT) && (synpred3_EsperEPL2Grammar())) {s = 3022;}
                        else if ( (LA230_2144==GT) && (synpred3_EsperEPL2Grammar())) {s = 3023;}
                        else if ( (LA230_2144==LE) && (synpred3_EsperEPL2Grammar())) {s = 3024;}
                        else if ( (LA230_2144==GE) && (synpred3_EsperEPL2Grammar())) {s = 3025;}
                        else if ( (LA230_2144==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3026;}
                        else if ( (LA230_2144==IS) && (synpred3_EsperEPL2Grammar())) {s = 3027;}
                        else if ( (LA230_2144==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3028;}
                        else if ( (LA230_2144==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3029;}
                        else if ( (LA230_2144==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3030;}
                        else if ( (LA230_2144==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3031;}
                        else if ( (LA230_2144==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3032;}
                        else if ( (LA230_2144==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3033;}
                        else if ( (LA230_2144==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3034;}
                        else if ( (LA230_2144==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3035;}
                        else if ( (LA230_2144==AS) && (synpred3_EsperEPL2Grammar())) {s = 3036;}
                        else if ( (LA230_2144==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3037;}
                        else if ( (LA230_2144==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3038;}
                        else if ( (LA230_2144==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3039;}
                        else if ( (LA230_2144==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3040;}
                        else if ( (LA230_2144==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3041;}
                        input.seek(index230_2144);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA230_2145 = input.LA(1);
                        int index230_2145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_2145==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3042;}
                        else if ( (LA230_2145==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3043;}
                        else if ( (LA230_2145==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3044;}
                        else if ( (LA230_2145==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3045;}
                        else if ( (LA230_2145==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3046;}
                        else if ( (LA230_2145==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3047;}
                        else if ( (LA230_2145==LT) && (synpred3_EsperEPL2Grammar())) {s = 3048;}
                        else if ( (LA230_2145==GT) && (synpred3_EsperEPL2Grammar())) {s = 3049;}
                        else if ( (LA230_2145==LE) && (synpred3_EsperEPL2Grammar())) {s = 3050;}
                        else if ( (LA230_2145==GE) && (synpred3_EsperEPL2Grammar())) {s = 3051;}
                        else if ( (LA230_2145==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3052;}
                        else if ( (LA230_2145==IS) && (synpred3_EsperEPL2Grammar())) {s = 3053;}
                        else if ( (LA230_2145==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3054;}
                        else if ( (LA230_2145==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3055;}
                        else if ( (LA230_2145==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3056;}
                        else if ( (LA230_2145==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3057;}
                        else if ( (LA230_2145==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3058;}
                        else if ( (LA230_2145==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3059;}
                        else if ( (LA230_2145==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3060;}
                        else if ( (LA230_2145==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3061;}
                        else if ( (LA230_2145==AS) && (synpred3_EsperEPL2Grammar())) {s = 3062;}
                        else if ( (LA230_2145==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3063;}
                        else if ( (LA230_2145==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3064;}
                        else if ( (LA230_2145==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3065;}
                        else if ( (LA230_2145==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3066;}
                        else if ( (LA230_2145==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3067;}
                        else if ( (LA230_2145==RPAREN) ) {s = 14;}
                        input.seek(index230_2145);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA230_2226 = input.LA(1);
                        int index230_2226 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_2226==RPAREN) ) {s = 3069;}
                        else if ( (LA230_2226==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3070;}
                        else if ( (LA230_2226==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3071;}
                        else if ( (LA230_2226==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3072;}
                        else if ( (LA230_2226==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3073;}
                        else if ( (LA230_2226==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3074;}
                        else if ( (LA230_2226==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3075;}
                        else if ( (LA230_2226==LT) && (synpred3_EsperEPL2Grammar())) {s = 3076;}
                        else if ( (LA230_2226==GT) && (synpred3_EsperEPL2Grammar())) {s = 3077;}
                        else if ( (LA230_2226==LE) && (synpred3_EsperEPL2Grammar())) {s = 3078;}
                        else if ( (LA230_2226==GE) && (synpred3_EsperEPL2Grammar())) {s = 3079;}
                        else if ( (LA230_2226==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3080;}
                        else if ( (LA230_2226==IS) && (synpred3_EsperEPL2Grammar())) {s = 3081;}
                        else if ( (LA230_2226==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3082;}
                        else if ( (LA230_2226==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3083;}
                        else if ( (LA230_2226==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3084;}
                        else if ( (LA230_2226==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3085;}
                        else if ( (LA230_2226==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3086;}
                        else if ( (LA230_2226==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3087;}
                        else if ( (LA230_2226==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3088;}
                        else if ( (LA230_2226==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3089;}
                        else if ( (LA230_2226==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3090;}
                        else if ( (LA230_2226==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3091;}
                        else if ( (LA230_2226==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3092;}
                        else if ( (LA230_2226==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3093;}
                        input.seek(index230_2226);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA230_2227 = input.LA(1);
                        int index230_2227 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_2227==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3094;}
                        else if ( (LA230_2227==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3095;}
                        else if ( (LA230_2227==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3096;}
                        else if ( (LA230_2227==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3097;}
                        else if ( (LA230_2227==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3098;}
                        else if ( (LA230_2227==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3099;}
                        else if ( (LA230_2227==LT) && (synpred3_EsperEPL2Grammar())) {s = 3100;}
                        else if ( (LA230_2227==GT) && (synpred3_EsperEPL2Grammar())) {s = 3101;}
                        else if ( (LA230_2227==LE) && (synpred3_EsperEPL2Grammar())) {s = 3102;}
                        else if ( (LA230_2227==GE) && (synpred3_EsperEPL2Grammar())) {s = 3103;}
                        else if ( (LA230_2227==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3104;}
                        else if ( (LA230_2227==IS) && (synpred3_EsperEPL2Grammar())) {s = 3105;}
                        else if ( (LA230_2227==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3106;}
                        else if ( (LA230_2227==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3107;}
                        else if ( (LA230_2227==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3108;}
                        else if ( (LA230_2227==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3109;}
                        else if ( (LA230_2227==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3110;}
                        else if ( (LA230_2227==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3111;}
                        else if ( (LA230_2227==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3112;}
                        else if ( (LA230_2227==RPAREN) ) {s = 3113;}
                        else if ( (LA230_2227==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3114;}
                        else if ( (LA230_2227==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3115;}
                        else if ( (LA230_2227==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3116;}
                        else if ( (LA230_2227==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3117;}
                        else if ( (LA230_2227==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3118;}
                        input.seek(index230_2227);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA230_2361 = input.LA(1);
                        int index230_2361 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2361);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA230_2387 = input.LA(1);
                        int index230_2387 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2387);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA230_2413 = input.LA(1);
                        int index230_2413 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2413);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA230_2439 = input.LA(1);
                        int index230_2439 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2439);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA230_2445 = input.LA(1);
                        int index230_2445 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2445);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA230_2491 = input.LA(1);
                        int index230_2491 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2491);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA230_2549 = input.LA(1);
                        int index230_2549 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2549);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA230_2595 = input.LA(1);
                        int index230_2595 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2595);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA230_2601 = input.LA(1);
                        int index230_2601 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2601);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA230_2647 = input.LA(1);
                        int index230_2647 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2647);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA230_2673 = input.LA(1);
                        int index230_2673 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2673);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA230_2699 = input.LA(1);
                        int index230_2699 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2699);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA230_2725 = input.LA(1);
                        int index230_2725 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2725);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA230_2731 = input.LA(1);
                        int index230_2731 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2731);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA230_2777 = input.LA(1);
                        int index230_2777 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2777);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA230_2803 = input.LA(1);
                        int index230_2803 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2803);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA230_2829 = input.LA(1);
                        int index230_2829 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2829);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA230_2855 = input.LA(1);
                        int index230_2855 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2855);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA230_2881 = input.LA(1);
                        int index230_2881 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2881);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA230_2907 = input.LA(1);
                        int index230_2907 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2907);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA230_2984 = input.LA(1);
                        int index230_2984 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_2984);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA230_3009 = input.LA(1);
                        int index230_3009 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_3009);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA230_3069 = input.LA(1);
                        int index230_3069 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_3069);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA230_3113 = input.LA(1);
                        int index230_3113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index230_3113);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1869 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_expressionDecl_in_startPatternExpressionRule1873 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1879 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1898 = new BitSet(new long[]{0x004002000800E010L,0x4800800000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_expressionDecl_in_startEPLExpressionRule1902 = new BitSet(new long[]{0x004002000800E010L,0x4800800000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000002L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1908 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1941 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPRESSIONDECL_in_expressionDecl1964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0050000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_expressionDecl1966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0050000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_expressionDecl1972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_expressionDecl1974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_expressionDialect_in_expressionDecl1978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_expressionDecl1983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0490000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_expressionDecl1986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0140000000000000L});
    public static final BitSet FOLLOW_columnList_in_expressionDecl1988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_expressionDecl1991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0490000000000000L});
    public static final BitSet FOLLOW_expressionDef_in_expressionDecl1995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_expressionDialect2038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COLON_in_expressionDialect2040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_expressionDef2062 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_expressionDef2064 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_expressionDef2067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_expressionDef2069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_expressionDef2085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_stringconstant_in_expressionDef2087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_expressionDef2089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_expressionLambdaDecl2112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_expressionLambdaDecl2117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_columnList_in_expressionLambdaDecl2119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_expressionLambdaDecl2121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_GOES_in_expressionLambdaDecl2125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_annotationNoEnum2160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum2162 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum2166 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0540008000000000L,0x000000000609006AL});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum2170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum2174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum2179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_annotationEnum2220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum2222 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum2226 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0540008000000000L,0x000000000709006AL});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum2230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum2234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum2239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2280 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum2283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2286 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum2310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2313 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum2336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum2338 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0400008000000000L,0x000000000609006AL});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum2377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum2379 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0440008000000000L,0x000000000709006AL});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum2381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum2412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2511 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x2C00008000000000L,0x000000000609006AL});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2517 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0400008000000000L,0x000000000609006AL});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2559 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x2C40008000000000L,0x000000000709006AL});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2565 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0440008000000000L,0x000000000709006AL});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_contextExpr_in_eplExpression2610 = new BitSet(new long[]{0x0040020008000010L,0x4000800000000000L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2617 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2622 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2627 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2632 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2637 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createContextExpr_in_eplExpression2642 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2647 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2652 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTEXT_in_contextExpr2668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_contextExpr2672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2696 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2699 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2705 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2708 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2712 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2715 = new BitSet(new long[]{0x0104300000010002L,0x0001200000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2719 = new BitSet(new long[]{0x0104300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2725 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2728 = new BitSet(new long[]{0x0104300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2735 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2738 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2741 = new BitSet(new long[]{0x0104200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2748 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2751 = new BitSet(new long[]{0x0104000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2758 = new BitSet(new long[]{0x0130800080005000L,0x0020200000440000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2761 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2768 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2771 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2774 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090008L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2801 = new BitSet(new long[]{0x0040000008000000L,0x02008000000A0000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2810 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2813 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onMergeExpr_in_onExpr2831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2876 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2880 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2925 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2929 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2948 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2950 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2953 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2955 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2963 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_onMergeExpr3000 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_INTO_in_onMergeExpr3002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr3007 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_AS_in_onMergeExpr3010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr3014 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr3020 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_WHERE_in_onMergeExpr3027 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_whereClause_in_onMergeExpr3029 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_mergeItem_in_onMergeExpr3037 = new BitSet(new long[]{0x0000000080030002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_mergeMatched_in_mergeItem3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeUnmatched_in_mergeItem3075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched3088 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched3090 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeMatched3093 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_mergeMatched3095 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeMatchedItem_in_mergeMatched3099 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeMatchedItem3125 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatchedItem3140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_mergeMatchedItem3142 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem3144 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatchedItem3147 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem3149 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem3155 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem3157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_mergeMatchedItem3169 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem3172 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem3174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeMatchedItem3185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched3242 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched3244 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched3246 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeUnmatched3249 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_mergeUnmatched3251 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3255 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatchedItem3282 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeUnmatchedItem3285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_mergeInsert3300 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_mergeInsert3303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_mergeInsert3305 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_mergeInsert3310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_columnList_in_mergeInsert3312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_mergeInsert3314 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeInsert3318 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_selectionList_in_mergeInsert3320 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeInsert3323 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_whereClause_in_mergeInsert3325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr3371 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr3373 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr3379 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr3381 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr3384 = new BitSet(new long[]{0x0100300400010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr3388 = new BitSet(new long[]{0x0100300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr3394 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr3396 = new BitSet(new long[]{0x0100300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr3405 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3407 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr3409 = new BitSet(new long[]{0x0100200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr3416 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr3418 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr3425 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3427 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr3429 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090008L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr3438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr3498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3505 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr3508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr3524 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3526 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr3529 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3531 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr3538 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr3540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr3591 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr3593 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr3597 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr3599 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr3604 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr3606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert3637 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3690 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3694 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3699 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3741 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3743 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3746 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3748 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3775 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3806 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3847 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3853 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x80C0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3858 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x80C0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3863 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x80C0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3872 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3876 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3880 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3895 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3914 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3931 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3934 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter4023 = new BitSet(new long[]{0x803801E807FC4420L,0x469C1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000007090069L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter4026 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter4028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter4033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr4046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr4048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr4052 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr4054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr4058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr4060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_createIndexColumnList_in_createIndexExpr4062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr4064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList4093 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createIndexColumnList4096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList4098 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn4125 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn4127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr4152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr4156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr4159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr4161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr4165 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr4168 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr4170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList4216 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList4219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList4221 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement4252 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement4257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement4259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList4305 = new BitSet(new long[]{0x803801E807FC4420L,0x469C1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000007090069L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement4336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement4348 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement4376 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr4407 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4411 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr4414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4418 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L,0x0000000001000001L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr4420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L,0x0000000001000001L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr4433 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr4444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0140000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr4446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr4449 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_createSchemaQual_in_createSchemaExpr4458 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_CREATE_in_createContextExpr4520 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_CONTEXT_in_createContextExpr4522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextExpr4526 = new BitSet(new long[]{0x0000100000420000L,0xE008000000000000L});
    public static final BitSet FOLLOW_AS_in_createContextExpr4528 = new BitSet(new long[]{0x0000100000420000L,0xE008000000000000L});
    public static final BitSet FOLLOW_createContextDetail_in_createContextExpr4531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createContextChoice_in_createContextDetail4555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_contextContextNested_in_createContextDetail4560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextDetail4562 = new BitSet(new long[]{0x0000100000420000L,0xE008000000000000L});
    public static final BitSet FOLLOW_contextContextNested_in_createContextDetail4564 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextDetail4567 = new BitSet(new long[]{0x0000100000420000L,0xE008000000000000L});
    public static final BitSet FOLLOW_contextContextNested_in_createContextDetail4569 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_CONTEXT_in_contextContextNested4595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_contextContextNested4599 = new BitSet(new long[]{0x0000100000420000L,0xA008000000000000L});
    public static final BitSet FOLLOW_AS_in_contextContextNested4601 = new BitSet(new long[]{0x0000100000400000L,0xA008000000000000L});
    public static final BitSet FOLLOW_createContextChoice_in_contextContextNested4604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_START_in_createContextChoice4629 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_createContextRangePoint_in_createContextChoice4631 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_createContextChoice4633 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_createContextRangePoint_in_createContextChoice4635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INITIATED_in_createContextChoice4652 = new BitSet(new long[]{0x0000080000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_BY_in_createContextChoice4655 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_createContextRangePoint_in_createContextChoice4659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_createContextChoice4661 = new BitSet(new long[]{0x0000080000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_BY_in_createContextChoice4664 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_createContextRangePoint_in_createContextChoice4668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_createContextChoice4685 = new BitSet(new long[]{0x803809E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_BY_in_createContextChoice4688 = new BitSet(new long[]{0x803809E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_createContextPartitionItem_in_createContextChoice4692 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextChoice4695 = new BitSet(new long[]{0x803809E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_createContextPartitionItem_in_createContextChoice4697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_createContextGroupItem_in_createContextChoice4716 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextChoice4719 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_createContextGroupItem_in_createContextChoice4721 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_FROM_in_createContextChoice4725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextChoice4727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_createContextChoice4745 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_BY_in_createContextChoice4748 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_createContextCoalesceItem_in_createContextChoice4752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextChoice4755 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_createContextCoalesceItem_in_createContextChoice4757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextChoice4763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000006090008L});
    public static final BitSet FOLLOW_number_in_createContextChoice4765 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextChoice4770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createContextFilter_in_createContextRangePoint4804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_createContextRangePoint4811 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_createContextRangePoint4814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextRangePoint4818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_createContextRangePoint4837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_createContextRangePoint4842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_timePeriod_in_createContextRangePoint4844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextFilter4864 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_AS_in_createContextFilter4867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextFilter4872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createContextPartitionItem4899 = new BitSet(new long[]{0x0000000400001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_AND_EXPR_in_createContextPartitionItem4903 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextPartitionItem4905 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_eventProperty_in_createContextPartitionItem4908 = new BitSet(new long[]{0x0000000400001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_FROM_in_createContextPartitionItem4912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextPartitionItem4914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_createContextCoalesceItem4940 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createContextCoalesceItem4942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextCoalesceItem4944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_createContextGroupItem4968 = new BitSet(new long[]{0x803809E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_BY_in_createContextGroupItem4970 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_createContextGroupItem4973 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createContextGroupItem4975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextGroupItem4979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaQual5009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_columnList_in_createSchemaQual5011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList5037 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_variantList5040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000001L});
    public static final BitSet FOLLOW_variantListElement_in_variantList5042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement5069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement5075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr5100 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr5106 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr5110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_insertIntoExpr5112 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr5115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr5117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr5119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList5152 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnList5155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_columnList5157 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause5195 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause5198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause5202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin5216 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin5219 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList5233 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList5236 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin5279 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin5283 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin5287 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin5290 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin5311 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin5325 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin5327 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin5329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent5407 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent5410 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent5413 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent5416 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair5431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair5433 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair5436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause5458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause5494 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause5500 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause5506 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause5512 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_selectionList_in_selectClause5515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList5546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList5549 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList5552 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement5578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement5596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement5601 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement5604 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement5608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector5664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector5666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STAR_in_streamSelector5668 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector5671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector5675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression5706 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x8040000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression5710 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x8040000000000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression5714 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x8040000000000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression5718 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x8040000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression5725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression5727 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x8040000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression5730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression5732 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x8040000000000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression5739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression5743 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression5749 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression5756 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression5763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression5767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr5823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_forExpr5827 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr5830 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x05C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expressionList_in_forExpr5832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr5835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog5871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog5885 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog5891 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog5898 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog5903 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5909 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog5915 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog5921 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog5927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog5934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy5971 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy5973 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy5978 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5980 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures6009 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures6011 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures6014 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures6016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem6041 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem6044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem6049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection6080 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection6083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern6098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern6100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern6102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern6104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip6126 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6130 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6134 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6138 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6142 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval6182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval6184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration6210 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration6215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration6217 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat6250 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary6275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary6281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested6293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested6295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested6297 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000019L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested6302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested6308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested6314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom6353 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000019L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom6359 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom6365 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom6371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom6377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine6421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine6423 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine6426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine6428 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem6455 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem6457 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem6459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression6484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression6486 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression6488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression6490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression6523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression6525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression6529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression6531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression6536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression6546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression6551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression6562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression6613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression6615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression6617 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression6620 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x05C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression6622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression6625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression6678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression6680 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression6685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_MERGE_in_viewExpression6689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression6692 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x05D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression6694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression6697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr6757 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr6760 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr6762 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr6797 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr6800 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr6802 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement6827 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement6832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement6836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause6874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit6912 = new BitSet(new long[]{0x0030800080005002L,0x0000000000440000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit6927 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit6931 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit6935 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit6939 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit6970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit6996 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_number_in_outputLimit7007 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit7013 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit7019 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AT_in_outputLimit7050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit7052 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit7069 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_outputLimit7071 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit7074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit7076 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit7096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_outputLimit7098 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outputLimit7101 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_outputLimit7103 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit7108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit7110 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_outputLimitAndTerm_in_outputLimit7143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outputLimitAndTerm7317 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_WHEN_in_outputLimitAndTerm7319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_outputLimitAndTerm7321 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outputLimitAndTerm7324 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_outputLimitAndTerm7326 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimitAndTerm7331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimitAndTerm7333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter7363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter7366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter7370 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter7372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit7418 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit7424 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit7431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090008L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit7437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090008L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit7443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit7449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet7501 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7505 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7509 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7513 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7517 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7522 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet7528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause7558 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_whenClause7561 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause7563 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_whenClause7566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause7579 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_elseClause7582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression7595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression7609 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression7612 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression7615 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression7618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression7629 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_caseExpression7631 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression7633 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression7636 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression7639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression7663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression7674 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression7679 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression7681 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression7713 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression7718 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression7720 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression7752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000184L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression7757 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression7760 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression7763 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression7767 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000184L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression7782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression7788 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression7791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression7804 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression7817 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression7835 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression7849 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression7851 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression7865 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression7879 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression7909 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression7926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression7932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression7938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression7944 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x05C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression7946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression7949 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression7954 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression8114 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000007800L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression8146 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression8150 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression8154 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression8158 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression8182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000007800L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression8199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression8205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression8211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression8217 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x05C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression8219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression8222 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000007800L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression8227 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000007800L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression8323 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression8350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0090000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression8362 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression8368 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression8371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2320000000000000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression8393 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression8396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0120000000000000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression8422 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression8424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2120000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression8450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression8456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression8579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression8581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression8627 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression8629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression8679 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression8681 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression8684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression8686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression8738 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression8740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery8802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr8827 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr8833 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr8835 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr8839 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr8841 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression8882 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010008L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression8887 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression8890 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression8894 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010008L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression8908 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060001L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression8913 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression8916 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression8919 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression8923 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060001L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression8938 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression8940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression8953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression8958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression8963 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_unaryExpression8965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression8967 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8972 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8974 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8979 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8981 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression9018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression9030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression9036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression9041 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression9046 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression9048 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression9053 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression9055 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression9092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWKW_in_unaryExpression9097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_unaryExpression9099 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_newAssign_in_unaryExpression9101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_unaryExpression9104 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_newAssign_in_unaryExpression9106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_unaryExpression9110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_newAssign9132 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_newAssign9135 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_newAssign9137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression9165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression9187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression9209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression9211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr9244 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr9250 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr9253 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr9256 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr9263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr9266 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr9274 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr9277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr9286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr9310 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x8040000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr9315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr9317 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x8040000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr9320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr9322 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x8040000000000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr9329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr9333 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr9339 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr9346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr9350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression9390 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0CC0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_arrayExpression9393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression9396 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_arrayExpression9398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression9405 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_arrayExpression9410 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_arrayExpression9412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_arrayExpression9417 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_arrayExpression9419 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc9468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9471 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9475 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9480 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc9495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9498 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9502 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9507 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc9522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9525 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9537 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9542 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc9557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc9577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9580 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9584 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9589 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc9604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9607 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9611 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9616 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc9631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9634 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9638 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9643 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc9658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc9663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc9668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc9673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9676 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9681 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9687 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc9700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9702 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9707 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9713 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9718 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9725 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9727 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc9774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9776 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9781 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9787 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9792 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9794 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9799 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9801 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc9848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9851 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc9862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9864 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9868 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9873 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9880 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9882 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc9927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc9933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9935 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc9938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc9950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9953 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_builtinFunc9977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9980 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc9991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9993 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9995 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc10002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc10005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10012 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10014 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10019 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10021 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc10066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10069 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc10072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc10080 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10085 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10092 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10094 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10099 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10101 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation10145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation10147 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x05C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation10150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation10153 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_firstAggregation10155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation10161 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation10166 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation10168 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation10173 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation10175 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation10230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation10232 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x05C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation10235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation10238 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_lastAggregation10240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation10246 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation10251 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation10253 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation10258 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation10260 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation10316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation10318 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x05C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation10320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation10323 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation10328 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation10330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation10335 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation10337 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr10394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr10414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr10427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_aggregationFilterExpr10446 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_aggregationFilterExpr10448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction10476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction10481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction10493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction10496 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction10498 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass10531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass10533 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass10537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass10541 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x05D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass10544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass10548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass10581 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass10586 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x05D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass10589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass10593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent10625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent10632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent10644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_funcIdent10656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_funcIdent10668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_funcIdent10680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_funcIdent10691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs10708 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs10713 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs10717 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs10720 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs10723 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_libFunctionArgItem10737 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_expressionWithTime_in_libFunctionArgItem10740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList10751 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList10753 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList10756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression10784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression10803 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_followedByRepeat_in_followedByExpression10806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByRepeat10859 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat10866 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_followedByRepeat10868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_FOLLOWMAX_END_in_followedByRepeat10870 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_orExpression_in_followedByRepeat10874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_orExpression10903 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression10908 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression10910 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression10942 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression10947 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression10949 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression10984 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression10988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression10993 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression10995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression11060 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression11066 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression11072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression11074 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression11080 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression11089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList11204 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList11206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList11209 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList11211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList11215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_distinctExpressionAtom11238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix11253 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix11259 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00D0000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix11261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix11263 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix11270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix11272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix11280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix11282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression11344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression11348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression11363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression11365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression11370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression11376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression11379 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x05D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression11381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression11384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression11433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression11435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression11438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression11440 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x05D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression11444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression11448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression11461 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression11464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression11466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange11487 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x06C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange11494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0220000000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange11499 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04E0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange11502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange11522 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange11524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange11535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression11622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression11624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression11633 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0090000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression11644 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x05C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression11646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression11649 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression11661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression11706 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression11709 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic11739 = new BitSet(new long[]{0x803801E81FFD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_propertyExpressionSelect_in_propertyExpressionAtomic11741 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic11744 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAnnotation_in_propertyExpressionAtomic11746 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic11750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic11752 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic11757 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic11759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic11763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionSelect11821 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionSelect11823 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionSelect11825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_propertyExpressionAnnotation11848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAnnotation11852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_propertyExpressionAnnotation11855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAnnotation11859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_propertyExpressionAnnotation11861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList11891 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList11894 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList11897 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement11923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement11939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement11944 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement11947 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement11951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector11995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector11997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector11999 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector12002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector12006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression12053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression12055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression12064 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0090000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression12075 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x05C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression12077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression12080 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression12092 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterAnnotation_in_patternFilterExpression12103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_patternFilterAnnotation12155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterAnnotation12159 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterAnnotation12162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000006090008L});
    public static final BitSet FOLLOW_number_in_patternFilterAnnotation12164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterAnnotation12166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier12202 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier12221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier12225 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy12270 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy12305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy12309 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList12351 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList12354 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04C0008000000000L,0x0000000007090078L});
    public static final BitSet FOLLOW_expression_in_expressionList12357 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList12385 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList12388 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x04D0008000000000L,0x0000000007090079L});
    public static final BitSet FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList12391 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime12420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime12431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime12442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime12453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime12465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime12476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime12488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime12500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime12505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTimeInclLast12525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeInclLast12530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable12541 = new BitSet(new long[]{0x0600000000000002L,0x0000007000000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable12546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable12550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable12554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable12558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable12562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar12619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand12639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand12652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand12664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand12666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_number_in_frequencyOperand12669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand12673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand12675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand12724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand12728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand12730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand12733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_number_in_rangeOperand12736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand12740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand12742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator12856 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator12860 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator12862 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator12865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator12913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator12917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator12919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator12922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList12969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090019L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList12971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList12974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090019L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList12976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2020000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList12980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter13002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter13008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter13013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty13029 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty13032 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty13034 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic13060 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0090000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic13069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic13073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic13075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic13080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic13094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic13099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic13105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic13108 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic13113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic13127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent13250 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent13262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent13264 = new BitSet(new long[]{0x803801E807FC4422L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent13268 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent13307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent13316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent13323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent13330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent13337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent13348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent13355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent13362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent13369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent13376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent13383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent13390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent13397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent13404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent13411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent13418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent13425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent13432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent13439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent13446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent13453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent13460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent13467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent13474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent13481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent13488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent13495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent13502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent13509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent13516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent13523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent13530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent13537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_keywordAllowedIdent13544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent13551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent13558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent13565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent13574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent13583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent13590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent13597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent13604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent13611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent13618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent13625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent13632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent13639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTEXT_in_keywordAllowedIdent13646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr13667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr13676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent13690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent13698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yearPart_in_timePeriod13723 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod13725 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod13728 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13731 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13734 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13737 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13740 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod13749 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod13751 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13754 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13757 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod13772 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13774 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13777 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13780 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13783 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13792 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13794 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13797 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13800 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13809 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13811 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13814 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13823 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13834 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040008000000000L,0x0000000006090018L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_yearPart13889 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_yearPart13893 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_yearPart13895 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEARS_in_yearPart13899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEAR_in_yearPart13903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_monthPart13951 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_IDENT_in_monthPart13955 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_substitution_in_monthPart13957 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTHS_in_monthPart13961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTH_in_monthPart13965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_weekPart14013 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_IDENT_in_weekPart14017 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_substitution_in_weekPart14019 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEKS_in_weekPart14023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEK_in_weekPart14027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_dayPart14075 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart14079 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_substitution_in_dayPart14081 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart14085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart14089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_hourPart14138 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart14142 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart14144 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart14148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart14152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_minutePart14201 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart14205 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart14207 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart14211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart14215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart14219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_secondPart14269 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart14273 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart14275 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart14279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart14283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart14287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_millisecondPart14337 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart14341 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart14343 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart14347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart14351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart14355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number14410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number14427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number14444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number14461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution14482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant14501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant14508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant14521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant14541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant14561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant14583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000006090008L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant14589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000006090008L});
    public static final BitSet FOLLOW_number_in_numberconstant14593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant14622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant14638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar5591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar9024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar10409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar10471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar11934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar12415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar12426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar12437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar12448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar12460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar12471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar12482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar12495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar12520 = new BitSet(new long[]{0x0000000000000002L});
}
