  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", "TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "EXPRESSIONDECL", "NEWKW", "START", "CONTEXT", "INITIATED", "TERMINATED", "DATAFLOW", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "FOLLOWED_BY_ITEM", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_IS_EXPR", "EVAL_ISNOT_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "TERM_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "INDEXCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "YEAR_PART", "MONTH_PART", "WEEK_PART", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "ACCESS_AGG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_DEF", "VARIANT_LIST", "MERGE_UNM", "MERGE_MAT", "MERGE_UPD", "MERGE_INS", "MERGE_DEL", "NEW_ITEM", "AGG_FILTER_EXPR", "CREATE_CTX", "CREATE_CTX_FIXED", "CREATE_CTX_PART", "CREATE_CTX_COAL", "CREATE_CTX_CAT", "CREATE_CTX_INIT", "CREATE_CTX_CATITEM", "CREATE_CTX_NESTED", "CREATE_CTX_PATTERN", "CREATE_DATAFLOW", "GOP", "GOPPARAM", "GOPPARAMITM", "GOPOUT", "GOPOUTITM", "GOPOUTTYP", "GOPCFG", "GOPCFGITM", "GOPCFGEPL", "PARTITIONITEM", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "JSON_OBJECT", "JSON_ARRAY", "JSON_FIELD", "LBRACK", "RBRACK", "IDENT", "LPAREN", "RPAREN", "COLON", "LCURLY", "RCURLY", "GOES", "ATCHAR", "COMMA", "EQUALS", "DOT", "STAR", "FOLLOWED_BY", "LT", "GT", "QUESTION", "BOR", "PLUS", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "NUM_INT", "FOLLOWMAX_BEGIN", "FOLLOWMAX_END", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int FLOAT_SUFFIX=384;
    public static final int NUMERIC_PARAM_LIST=131;
    public static final int GOPCFGITM=296;
    public static final int OUTERJOIN_EXPR=175;
    public static final int CREATE_COL_TYPE_LIST=256;
    public static final int MERGE_INS=275;
    public static final int TIMEPERIOD_MILLISECONDS=105;
    public static final int CREATE_CTX_FIXED=280;
    public static final int RPAREN=326;
    public static final int LNOT=362;
    public static final int INC=366;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=342;
    public static final int STREAM_EXPR=174;
    public static final int MATCHES=116;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=140;
    public static final int REGEXP=9;
    public static final int GOES=330;
    public static final int MATCHED=122;
    public static final int INITIATED=127;
    public static final int FOLLOWED_BY_EXPR=134;
    public static final int MATCH_UNTIL_RANGE_CLOSED=254;
    public static final int RBRACK=323;
    public static final int GE=349;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=139;
    public static final int EVENT_FILTER_NOT_IN=150;
    public static final int NUM_DOUBLE=306;
    public static final int TIMEPERIOD_MILLISEC=103;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=221;
    public static final int MEDIAN=23;
    public static final int GROUP=44;
    public static final int SUBSELECT_GROUP_EXPR=227;
    public static final int YEAR_PART=207;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=357;
    public static final int EXPRCOL=198;
    public static final int SL_COMMENT=377;
    public static final int NULL_TYPE=305;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=252;
    public static final int GT=338;
    public static final int LAND=374;
    public static final int EVENT_PROP_EXPR=183;
    public static final int LBRACK=322;
    public static final int VIEW_EXPR=156;
    public static final int MERGE_UPD=274;
    public static final int CREATE_SCHEMA_DEF=270;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=141;
    public static final int ON_MERGE_EXPR=244;
    public static final int TIMEPERIOD_SEC=100;
    public static final int ON_SELECT_EXPR=242;
    public static final int TICKED_STRING_LITERAL=358;
    public static final int SUM=18;
    public static final int JSON_ARRAY=320;
    public static final int HexDigit=382;
    public static final int AT=86;
    public static final int AS=17;
    public static final int TIMEPERIOD_MONTH=90;
    public static final int LEFT=38;
    public static final int AVG=19;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int PARTITIONITEM=298;
    public static final int DATABASE_JOIN_EXPR=158;
    public static final int IDENT=324;
    public static final int PLUS=341;
    public static final int EVENT_PROP_INDEXED=186;
    public static final int CREATE_SCHEMA_EXPR=268;
    public static final int CREATE_INDEX_EXPR=236;
    public static final int ACCESS_AGG=265;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int RIGHT_OUTERJOIN_EXPR=178;
    public static final int BY=43;
    public static final int MATCHREC_DEFINE=315;
    public static final int MERGE=121;
    public static final int MERGE_UNM=272;
    public static final int FOLLOWMAX_END=356;
    public static final int LEFT_OUTERJOIN_EXPR=177;
    public static final int GROUP_BY_EXPR=180;
    public static final int EPL_EXPR=307;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int GOPOUTITM=293;
    public static final int MINUS=351;
    public static final int INDEXCOL=199;
    public static final int SEMI=375;
    public static final int STAR_ASSIGN=369;
    public static final int FIRST_AGGREG=262;
    public static final int COLON=327;
    public static final int PREVIOUSTAIL=70;
    public static final int VALUE_NULL=108;
    public static final int NOT_IN_SET=215;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=187;
    public static final int NOT_IN_SUBSELECT_EXPR=230;
    public static final int GUARD_EXPR=154;
    public static final int RCURLY=329;
    public static final int EXISTS_SUBSELECT_EXPR=228;
    public static final int WEEK_PART=209;
    public static final int ROW_LIMIT_EXPR=109;
    public static final int SELECTION_EXPR=171;
    public static final int LW=76;
    public static final int LT=337;
    public static final int CREATE_CTX=279;
    public static final int ORDER_BY_EXPR=181;
    public static final int NEW_ITEM=277;
    public static final int MOD_ASSIGN=370;
    public static final int IN_SUBSELECT_QUERY_EXPR=231;
    public static final int JSON_FIELD=321;
    public static final int COUNT=26;
    public static final int EQUALS=333;
    public static final int RETAININTERSECTION=65;
    public static final int TERMINATED=128;
    public static final int TIMEPERIOD_WEEKS=93;
    public static final int PATTERN=66;
    public static final int MATCHREC_AFTER_SKIP=313;
    public static final int ESCAPE=10;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=169;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int EVAL_ISNOT_EXPR=167;
    public static final int EVENT_FILTER_BETWEEN=151;
    public static final int COALESCE=22;
    public static final int FLOAT_TYPE=301;
    public static final int ANNOTATION_VALUE=261;
    public static final int CLASS_IDENT=153;
    public static final int MATCHREC_PATTERN_ALTER=311;
    public static final int CREATE_WINDOW_EXPR=237;
    public static final int PROPERTY_SELECTION_STREAM=143;
    public static final int ON_DELETE_EXPR=241;
    public static final int ON=41;
    public static final int DELETE=81;
    public static final int INT_TYPE=299;
    public static final int EVAL_BITWISE_EXPR=161;
    public static final int EVERY_EXPR=14;
    public static final int TIMEPERIOD_HOURS=97;
    public static final int STRING_TYPE=303;
    public static final int MATCHREC_DEFINE_ITEM=316;
    public static final int STDDEV=24;
    public static final int OUTPUT=50;
    public static final int WEEKDAY_OPERATOR=233;
    public static final int WHERE=16;
    public static final int DEC=368;
    public static final int GOPOUT=292;
    public static final int BXOR_ASSIGN=371;
    public static final int SNAPSHOT=82;
    public static final int AFTER_LIMIT_EXPR=192;
    public static final int MAX=20;
    public static final int DEFINE=114;
    public static final int TIMEPERIOD_YEARS=89;
    public static final int CONTEXT=126;
    public static final int TIMEPERIOD_DAYS=95;
    public static final int CREATE_CTX_CAT=283;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=188;
    public static final int BOR_ASSIGN=372;
    public static final int COMMA=332;
    public static final int PARTITION=115;
    public static final int IS=42;
    public static final int WHEN_LIMIT_EXPR=195;
    public static final int SOME=49;
    public static final int MATCHREC_MEASURE_ITEM=318;
    public static final int EQUAL=361;
    public static final int EVENT_FILTER_NOT_BETWEEN=152;
    public static final int IN_RANGE=224;
    public static final int TIMEPERIOD_WEEK=92;
    public static final int PROPERTY_WILDCARD_SELECT=144;
    public static final int INSERTINTO_EXPR=197;
    public static final int UNIDIRECTIONAL=63;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=255;
    public static final int TIMEPERIOD_MINUTES=99;
    public static final int RSTREAM=59;
    public static final int TIMEPERIOD_MINUTE=98;
    public static final int NOT_BETWEEN=216;
    public static final int EVAL_OR_EXPR=163;
    public static final int MATCHREC_PATTERN_ATOM=309;
    public static final int BAND=344;
    public static final int QUOTED_STRING_LITERAL=343;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=339;
    public static final int EVENT_FILTER_IDENT=145;
    public static final int UnicodeEscape=380;
    public static final int DBSELECT_EXPR=219;
    public static final int FOLLOWMAX_BEGIN=355;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=267;
    public static final int DBFROM_CLAUSE=220;
    public static final int LE=348;
    public static final int EVAL_IDENT=170;
    public static final int CRONTAB_LIMIT_EXPR=193;
    public static final int STAR=335;
    public static final int DOT_EXPR=203;
    public static final int ISTREAM=60;
    public static final int MOD=353;
    public static final int LIB_FUNC_CHAIN=202;
    public static final int MONTH_PART=208;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=201;
    public static final int FULL_OUTERJOIN_EXPR=179;
    public static final int CREATE_CTX_NESTED=286;
    public static final int MATCHREC_PATTERN_CONCAT=310;
    public static final int USING=120;
    public static final int CAST_EXPR=235;
    public static final int TIMEPERIOD_SECONDS=102;
    public static final int NOT_EQUAL=347;
    public static final int LAST_AGGREG=263;
    public static final int NEWKW=124;
    public static final int HOUR_PART=211;
    public static final int FOLLOWED_BY=336;
    public static final int MATCHREC_PATTERN_NESTED=312;
    public static final int GOPPARAMITM=291;
    public static final int METHOD_JOIN_EXPR=250;
    public static final int CREATE_CTX_PART=281;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=138;
    public static final int CREATE_CTX_COAL=282;
    public static final int ELSE=30;
    public static final int MINUS_ASSIGN=367;
    public static final int INSERTINTO_STREAM_NAME=223;
    public static final int UNARY_MINUS=204;
    public static final int LCURLY=328;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int EVENT_FILTER_NOT_RANGE=148;
    public static final int WS=376;
    public static final int FOLLOWED_BY_ITEM=135;
    public static final int ON_SELECT_INSERT_EXPR=245;
    public static final int GOPPARAM=290;
    public static final int BNOT=363;
    public static final int EVAL_IS_EXPR=166;
    public static final int WHERE_EXPR=159;
    public static final int END=33;
    public static final int INNERJOIN_EXPR=176;
    public static final int TERM_LIMIT_EXPR=196;
    public static final int NOT_REGEXP=218;
    public static final int MATCH_UNTIL_EXPR=251;
    public static final int ANNOTATION=259;
    public static final int LONG_TYPE=300;
    public static final int MATCHREC_PATTERN=308;
    public static final int ATCHAR=331;
    public static final int MINUTE_PART=212;
    public static final int PATTERN_NOT_EXPR=137;
    public static final int SQL_NE=346;
    public static final int UPDATE_EXPR=266;
    public static final int LPAREN=325;
    public static final int IN_SUBSELECT_EXPR=229;
    public static final int BOOLEAN_TRUE=106;
    public static final int OR_EXPR=11;
    public static final int JSON_OBJECT=319;
    public static final int THEN=32;
    public static final int NOT_IN_RANGE=225;
    public static final int MATCHREC_INTERVAL=314;
    public static final int OFFSET=110;
    public static final int SECOND_PART=213;
    public static final int MATCH_RECOGNIZE=112;
    public static final int CASE2=29;
    public static final int BXOR=345;
    public static final int TIMEPERIOD_DAY=94;
    public static final int MERGE_MAT=273;
    public static final int EXISTS=74;
    public static final int TIMEPERIOD_MILLISECOND=104;
    public static final int EVAL_NOTEQUALS_EXPR=165;
    public static final int CREATE_CTX_CATITEM=285;
    public static final int CREATE_VARIABLE_EXPR=249;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=253;
    public static final int PATTERN_FILTER_EXPR=136;
    public static final int LAST_OPERATOR=232;
    public static final int NUMBERSETSTAR=258;
    public static final int EVAL_AND_EXPR=162;
    public static final int SET=83;
    public static final int INSTANCEOF=77;
    public static final int EVENT_PROP_SIMPLE=184;
    public static final int MIN=21;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=271;
    public static final int EVAL_EQUALS_GROUP_EXPR=168;
    public static final int SCHEMA=62;
    public static final int BAND_ASSIGN=373;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=194;
    public static final int WHEN=31;
    public static final int PLUS_ASSIGN=365;
    public static final int DAY_PART=210;
    public static final int START=125;
    public static final int EVENT_FILTER_IN=149;
    public static final int DIV=352;
    public static final int OBJECT_PARAM_ORDERED_EXPR=133;
    public static final int EXPRESSIONDECL=123;
    public static final int OctalEscape=381;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=214;
    public static final int FIRST=52;
    public static final int PRIOR=73;
    public static final int CAST=79;
    public static final int LOR=350;
    public static final int WILDCARD_SELECT=222;
    public static final int EXPONENT=383;
    public static final int PATTERN_INCL_EXPR=157;
    public static final int WHILE=119;
    public static final int BOOL_TYPE=304;
    public static final int GOPCFG=295;
    public static final int ANNOTATION_ARRAY=260;
    public static final int CASE=28;
    public static final int GOP=289;
    public static final int WINDOW_AGGREG=264;
    public static final int DIV_ASSIGN=364;
    public static final int CREATE_CTX_INIT=284;
    public static final int SQL=67;
    public static final int FULL=40;
    public static final int WEEKDAY=75;
    public static final int INSERT=54;
    public static final int ON_UPDATE_EXPR=243;
    public static final int ARRAY_EXPR=206;
    public static final int CREATE_COL_TYPE=257;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=107;
    public static final int TIMEPERIOD_SECOND=101;
    public static final int SUBSELECT_EXPR=226;
    public static final int NUMERIC_PARAM_RANGE=130;
    public static final int CONCAT=200;
    public static final int ON_EXPR=239;
    public static final int NUM_LONG=359;
    public static final int TIME_PERIOD=205;
    public static final int DOUBLE_TYPE=302;
    public static final int ORDER_ELEMENT_EXPR=182;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=234;
    public static final int UNTIL=85;
    public static final int ON_SET_EXPR=248;
    public static final int NUM_INT=354;
    public static final int ON_EXPR_FROM=247;
    public static final int NUM_FLOAT=360;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=142;
    public static final int EscapeSequence=379;
    public static final int INNER=36;
    public static final int NUMERIC_PARAM_FREQUENCY=132;
    public static final int ORDER=56;
    public static final int EVENT_FILTER_PARAM=146;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=189;
    public static final int IRSTREAM=61;
    public static final int UPDATE=111;
    public static final int FOR=118;
    public static final int ON_STREAM=240;
    public static final int EVENT_FILTER_RANGE=147;
    public static final int INDEX=87;
    public static final int ML_COMMENT=378;
    public static final int TIMEPERIOD_LIMIT_EXPR=191;
    public static final int TIMEPERIOD_HOUR=96;
    public static final int ALL=47;
    public static final int BOR=340;
    public static final int DOT=334;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int MATCHREC_MEASURES=317;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int HAVING_EXPR=160;
    public static final int MERGE_DEL=276;
    public static final int EVAL_EQUALS_EXPR=164;
    public static final int NOT_LIKE=217;
    public static final int EVENT_LIMIT_EXPR=190;
    public static final int ON_SELECT_INSERT_OUTPUT=246;
    public static final int CREATE_DATAFLOW=288;
    public static final int AFTER=117;
    public static final int MEASURES=113;
    public static final int AGG_FILTER_EXPR=278;
    public static final int CREATE_CTX_PATTERN=287;
    public static final int JOIN=37;
    public static final int GOPOUTTYP=294;
    public static final int ANY=48;
    public static final int OBSERVER_EXPR=155;
    public static final int CREATE_SCHEMA_EXPR_QUAL=269;
    public static final int EVENT_PROP_MAPPED=185;
    public static final int TIMEPERIOD_YEAR=88;
    public static final int AVEDEV=25;
    public static final int TIMEPERIOD_MONTHS=91;
    public static final int GOPCFGEPL=297;
    public static final int SELECTION_ELEMENT_EXPR=172;
    public static final int CREATE_WINDOW_SELECT_EXPR=238;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=173;
    public static final int DATAFLOW=129;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      private static java.util.Set<Integer> afterScriptTokens = new java.util.HashSet<Integer>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public synchronized static Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public synchronized static Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_YEAR, "'year'");
    	parserTokenParaphases.put(TIMEPERIOD_YEARS, "'years'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTH, "'month'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTHS, "'months'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEK, "'week'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEKS, "'weeks'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserTokenParaphases.put(CONTEXT, "'context'");
    	parserTokenParaphases.put(START, "'start'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(INITIATED, "'initiated'");
    	parserTokenParaphases.put(TERMINATED, "'terminated'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      public synchronized static java.util.Set<Integer> getAfterScriptTokens() {
        if (afterScriptTokens.size() == 0) {
    	afterScriptTokens.add(CREATE);
    	afterScriptTokens.add(EXPRESSIONDECL);
    	afterScriptTokens.add(SELECT);
    	afterScriptTokens.add(INSERT);
    	afterScriptTokens.add(ON);
    	afterScriptTokens.add(DELETE);
    	afterScriptTokens.add(UPDATE);
    	afterScriptTokens.add(ATCHAR);
        }
        return afterScriptTokens;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF4=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl2 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression3 = null;
        CommonTree EOF4_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=3;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==ATCHAR) ) {
                    alt1=1;
                }
                else if ( (LA1_0==EXPRESSIONDECL) ) {
                    alt1=2;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1971);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startPatternExpressionRule1975);
            	    expressionDecl2=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionDecl2.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1981);
            patternExpression3=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression3.getTree());
            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1985); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum5 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl6 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression7 = null;
        CommonTree EOF8_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_expressionDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionDecl");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==ATCHAR) ) {
                    alt2=1;
                }
                else if ( (LA2_0==EXPRESSIONDECL) ) {
                    alt2=2;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule2000);
            	    annotationEnum5=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum5.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startEPLExpressionRule2004);
            	    expressionDecl6=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expressionDecl.add(expressionDecl6.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule2010);
            eplExpression7=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule2014); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF8);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                while ( stream_expressionDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDecl.nextTree());
                }
                stream_expressionDecl.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF10=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty9 = null;
        CommonTree EOF10_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule2043);
            eventProperty9=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty9.getTree());
            EOF10=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule2047); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startJsonValueRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startJsonValueRule_return startJsonValueRule() throws RecognitionException {
        EsperEPL2GrammarParser.startJsonValueRule_return retval = new EsperEPL2GrammarParser.startJsonValueRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF12=null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue11 = null;
        CommonTree EOF12_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_jsonvalue_in_startJsonValueRule2060);
            jsonvalue11=jsonvalue();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonvalue11.getTree());
            EOF12=(Token)match(input,EOF,FOLLOW_EOF_in_startJsonValueRule2064); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDecl_return expressionDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDecl_return retval = new EsperEPL2GrammarParser.expressionDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token array=null;
        Token name=null;
        Token EXPRESSIONDECL13=null;
        Token RBRACK15=null;
        Token LPAREN17=null;
        Token RPAREN19=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier14 = null;
        EsperEPL2GrammarParser.expressionDialect_return expressionDialect16 = null;
        EsperEPL2GrammarParser.columnList_return columnList18 = null;
        EsperEPL2GrammarParser.expressionDef_return expressionDef20 = null;
        CommonTree array_tree=null;
        CommonTree name_tree=null;
        CommonTree EXPRESSIONDECL13_tree=null;
        CommonTree RBRACK15_tree=null;
        CommonTree LPAREN17_tree=null;
        CommonTree RPAREN19_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_EXPRESSIONDECL=new RewriteRuleTokenStream(adaptor,"token EXPRESSIONDECL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionDef=new RewriteRuleSubtreeStream(adaptor,"rule expressionDef");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_expressionDialect=new RewriteRuleSubtreeStream(adaptor,"rule expressionDialect");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            EXPRESSIONDECL13=(Token)match(input,EXPRESSIONDECL,FOLLOW_EXPRESSIONDECL_in_expressionDecl2083); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXPRESSIONDECL.add(EXPRESSIONDECL13);
            int alt3=2;
            int LA3_0 = input.LA(1);
            if ( (LA3_0==IDENT) ) {
                int LA3_1 = input.LA(2);
                if ( (LA3_1==IDENT||LA3_1==DOT) ) {
                    alt3=1;
                }
                else if ( (LA3_1==LBRACK) ) {
                    int LA3_6 = input.LA(3);
                    if ( (LA3_6==RBRACK) ) {
                        alt3=1;
                    }
                }
            }
            else if ( (LA3_0==TICKED_STRING_LITERAL) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifier_in_expressionDecl2085);
                    classIdentifier14=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier14.getTree());
                    }
                    break;
            }
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==LBRACK) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    {
                    array=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_expressionDecl2091); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(array);
                    RBRACK15=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_expressionDecl2093); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK15);
                    }
                    break;
            }
            int alt5=2;
            int LA5_0 = input.LA(1);
            if ( (LA5_0==IDENT) ) {
                int LA5_1 = input.LA(2);
                if ( (LA5_1==COLON) ) {
                    alt5=1;
                }
            }
            switch (alt5) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionDialect_in_expressionDecl2097);
                    expressionDialect16=expressionDialect();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionDialect.add(expressionDialect16.getTree());
                    }
                    break;
            }
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDecl2102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt7=2;
            int LA7_0 = input.LA(1);
            if ( (LA7_0==LPAREN) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    {
                    LPAREN17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionDecl2105); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN17);
                    int alt6=2;
                    int LA6_0 = input.LA(1);
                    if ( (LA6_0==IDENT) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_columnList_in_expressionDecl2107);
                            columnList18=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList18.getTree());
                            }
                            break;
                    }
                    RPAREN19=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionDecl2110); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN19);
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionDef_in_expressionDecl2114);
            expressionDef20=expressionDef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionDef.add(expressionDef20.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_array=new RewriteRuleTokenStream(adaptor,"token array",array);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EXPRESSIONDECL.nextNode(), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_expressionDef.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_expressionDialect.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDialect.nextTree());
                }
                stream_expressionDialect.reset();
                if ( stream_array.hasNext() ) {
                    adaptor.addChild(root_1, stream_array.nextNode());
                }
                stream_array.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDialect_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDialect_return expressionDialect() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDialect_return retval = new EsperEPL2GrammarParser.expressionDialect_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token COLON21=null;
        CommonTree d_tree=null;
        CommonTree COLON21_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            d=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDialect2157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(d);
            COLON21=(Token)match(input,COLON,FOLLOW_COLON_in_expressionDialect2159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON21);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_COLON.nextNode(), root_1);
                adaptor.addChild(root_1, stream_d.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDef_return expressionDef() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDef_return retval = new EsperEPL2GrammarParser.expressionDef_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY22=null;
        Token RCURLY25=null;
        Token LBRACK26=null;
        Token RBRACK28=null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl23 = null;
        EsperEPL2GrammarParser.expression_return expression24 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant27 = null;
        CommonTree LCURLY22_tree=null;
        CommonTree RCURLY25_tree=null;
        CommonTree LBRACK26_tree=null;
        CommonTree RBRACK28_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expressionLambdaDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionLambdaDecl");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        try {
            int alt9=2;
            int LA9_0 = input.LA(1);
            if ( (LA9_0==LCURLY) ) {
                alt9=1;
            }
            else if ( (LA9_0==LBRACK) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);
                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    LCURLY22=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_expressionDef2181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY22);
                    int alt8=2;
                    int LA8_0 = input.LA(1);
                    if ( (LA8_0==IDENT) ) {
                        int LA8_1 = input.LA(2);
                        if ( (LA8_1==GOES) ) {
                            alt8=1;
                        }
                    }
                    else if ( (LA8_0==LPAREN) ) {
                        int LA8_2 = input.LA(2);
                        if ( (LA8_2==IDENT) ) {
                            int LA8_108 = input.LA(3);
                            if ( (LA8_108==RPAREN) ) {
                                int LA8_207 = input.LA(4);
                                if ( (LA8_207==GOES) ) {
                                    alt8=1;
                                }
                            }
                            else if ( (LA8_108==COMMA) ) {
                                alt8=1;
                            }
                        }
                    }
                    switch (alt8) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionLambdaDecl_in_expressionDef2183);
                            expressionLambdaDecl23=expressionLambdaDecl();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionLambdaDecl.add(expressionLambdaDecl23.getTree());
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_expressionDef2186);
                    expression24=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression24.getTree());
                    RCURLY25=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_expressionDef2188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY25);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOES, "GOES"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( stream_expressionLambdaDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionLambdaDecl.nextTree());
                        }
                        stream_expressionLambdaDecl.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    LBRACK26=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_expressionDef2204); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK26);
                    pushFollow(FOLLOW_stringconstant_in_expressionDef2206);
                    stringconstant27=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant27.getTree());
                    RBRACK28=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_expressionDef2208); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK28);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRESSIONDECL, "EXPRESSIONDECL"), root_1);
                        adaptor.addChild(root_1, stream_stringconstant.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionLambdaDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionLambdaDecl_return retval = new EsperEPL2GrammarParser.expressionLambdaDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LPAREN29=null;
        Token RPAREN31=null;
        Token GOES32=null;
        EsperEPL2GrammarParser.columnList_return columnList30 = null;
        CommonTree i_tree=null;
        CommonTree LPAREN29_tree=null;
        CommonTree RPAREN31_tree=null;
        CommonTree GOES32_tree=null;
        RewriteRuleTokenStream stream_GOES=new RewriteRuleTokenStream(adaptor,"token GOES");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            int alt10=2;
            int LA10_0 = input.LA(1);
            if ( (LA10_0==IDENT) ) {
                alt10=1;
            }
            else if ( (LA10_0==LPAREN) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);
                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionLambdaDecl2231); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    {
                    LPAREN29=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionLambdaDecl2236); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN29);
                    pushFollow(FOLLOW_columnList_in_expressionLambdaDecl2238);
                    columnList30=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList30.getTree());
                    RPAREN31=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionLambdaDecl2240); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN31);
                    }
                    }
                    break;
            }
            GOES32=(Token)match(input,GOES,FOLLOW_GOES_in_expressionLambdaDecl2244); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GOES.add(GOES32);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_GOES.nextNode(), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ATCHAR33=null;
        Token char_literal35=null;
        Token char_literal38=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier34 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum36 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum37 = null;
        CommonTree ATCHAR33_tree=null;
        CommonTree char_literal35_tree=null;
        CommonTree char_literal38_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            ATCHAR33=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationNoEnum2279); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR33);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum2281);
            classIdentifier34=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier34.getTree());
            int alt12=2;
            int LA12_0 = input.LA(1);
            if ( (LA12_0==LPAREN) ) {
                int LA12_1 = input.LA(2);
                if ( (LA12_1==IDENT) ) {
                    int LA12_14 = input.LA(3);
                    if ( (LA12_14==EQUALS) ) {
                        int LA12_32 = input.LA(4);
                        if ( ((LA12_32>=BOOLEAN_TRUE && LA12_32<=VALUE_NULL)||LA12_32==NUM_DOUBLE||LA12_32==LCURLY||LA12_32==ATCHAR||(LA12_32>=PLUS && LA12_32<=QUOTED_STRING_LITERAL)||LA12_32==MINUS||LA12_32==NUM_INT||(LA12_32>=NUM_LONG && LA12_32<=NUM_FLOAT)) ) {
                            alt12=1;
                        }
                    }
                }
                else if ( ((LA12_1>=BOOLEAN_TRUE && LA12_1<=VALUE_NULL)||LA12_1==NUM_DOUBLE||LA12_1==RPAREN||LA12_1==LCURLY||LA12_1==ATCHAR||(LA12_1>=PLUS && LA12_1<=QUOTED_STRING_LITERAL)||LA12_1==MINUS||LA12_1==NUM_INT||(LA12_1>=NUM_LONG && LA12_1<=NUM_FLOAT)) ) {
                    alt12=1;
                }
            }
            switch (alt12) {
                case 1 :
                    {
                    char_literal35=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum2285); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal35);
                    int alt11=3;
                    int LA11_0 = input.LA(1);
                    if ( (LA11_0==IDENT) ) {
                        alt11=1;
                    }
                    else if ( ((LA11_0>=BOOLEAN_TRUE && LA11_0<=VALUE_NULL)||LA11_0==NUM_DOUBLE||LA11_0==LCURLY||LA11_0==ATCHAR||(LA11_0>=PLUS && LA11_0<=QUOTED_STRING_LITERAL)||LA11_0==MINUS||LA11_0==NUM_INT||(LA11_0>=NUM_LONG && LA11_0<=NUM_FLOAT)) ) {
                        alt11=2;
                    }
                    switch (alt11) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum2289);
                            elementValuePairsNoEnum36=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum36.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum2293);
                            elementValueNoEnum37=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum37.getTree());
                            }
                            break;
                    }
                    char_literal38=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum2298); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal38);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ATCHAR39=null;
        Token char_literal41=null;
        Token char_literal44=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier40 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum42 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum43 = null;
        CommonTree ATCHAR39_tree=null;
        CommonTree char_literal41_tree=null;
        CommonTree char_literal44_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            ATCHAR39=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationEnum2339); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR39);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum2341);
            classIdentifier40=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier40.getTree());
            int alt14=2;
            int LA14_0 = input.LA(1);
            if ( (LA14_0==LPAREN) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    {
                    char_literal41=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum2345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal41);
                    int alt13=3;
                    int LA13_0 = input.LA(1);
                    if ( (LA13_0==IDENT) ) {
                        int LA13_1 = input.LA(2);
                        if ( (LA13_1==EQUALS) ) {
                            alt13=1;
                        }
                        else if ( (LA13_1==RPAREN||LA13_1==DOT) ) {
                            alt13=2;
                        }
                    }
                    else if ( ((LA13_0>=BOOLEAN_TRUE && LA13_0<=VALUE_NULL)||LA13_0==NUM_DOUBLE||LA13_0==LCURLY||LA13_0==ATCHAR||(LA13_0>=PLUS && LA13_0<=QUOTED_STRING_LITERAL)||LA13_0==MINUS||LA13_0==NUM_INT||(LA13_0>=TICKED_STRING_LITERAL && LA13_0<=NUM_FLOAT)) ) {
                        alt13=2;
                    }
                    switch (alt13) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum2349);
                            elementValuePairsEnum42=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum42.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum2353);
                            elementValueEnum43=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum43.getTree());
                            }
                            break;
                    }
                    char_literal44=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum2358); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal44);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA46=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum45 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum47 = null;
        CommonTree COMMA46_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2399);
            elementValuePairNoEnum45=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum45.getTree());
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);
                if ( (LA15_0==COMMA) ) {
                    alt15=1;
                }
                switch (alt15) {
            	case 1 :
            	    {
            	    COMMA46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum2402); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2405);
            	    elementValuePairNoEnum47=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum47.getTree());
            	    }
            	    break;
            	default :
            	    break loop15;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA49=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum48 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum50 = null;
        CommonTree COMMA49_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2426);
            elementValuePairEnum48=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum48.getTree());
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);
                if ( (LA16_0==COMMA) ) {
                    alt16=1;
                }
                switch (alt16) {
            	case 1 :
            	    {
            	    COMMA49=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum2429); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2432);
            	    elementValuePairEnum50=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum50.getTree());
            	    }
            	    break;
            	default :
            	    break loop16;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal51=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum52 = null;
        CommonTree i_tree=null;
        CommonTree char_literal51_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum2455); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal51=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum2457); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal51);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2459);
            elementValueNoEnum52=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum52.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal53=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum54 = null;
        CommonTree i_tree=null;
        CommonTree char_literal53_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum2496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal53=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum2498); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal53);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum2500);
            elementValueEnum54=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum54.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum55 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum56 = null;
        EsperEPL2GrammarParser.constant_return constant57 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt17=3;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt17=1;
                }
                break;
            case LCURLY:
                {
                alt17=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt17=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);
                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2531);
                    annotationEnum55=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum55.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2542);
                    elementValueArrayNoEnum56=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum56.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2555);
                    constant57=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant57.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum58 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum59 = null;
        EsperEPL2GrammarParser.constant_return constant60 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier61 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt18=4;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt18=1;
                }
                break;
            case LCURLY:
                {
                alt18=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt18=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt18=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);
                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2578);
                    annotationEnum58=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum58.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2589);
                    elementValueArrayEnum59=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum59.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2602);
                    constant60=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant60.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2610);
                    classIdentifier61=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier61.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal62=null;
        Token char_literal64=null;
        Token char_literal66=null;
        Token char_literal67=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum63 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum65 = null;
        CommonTree char_literal62_tree=null;
        CommonTree char_literal64_tree=null;
        CommonTree char_literal66_tree=null;
        CommonTree char_literal67_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal62=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal62);
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( ((LA20_0>=BOOLEAN_TRUE && LA20_0<=VALUE_NULL)||LA20_0==NUM_DOUBLE||LA20_0==LCURLY||LA20_0==ATCHAR||(LA20_0>=PLUS && LA20_0<=QUOTED_STRING_LITERAL)||LA20_0==MINUS||LA20_0==NUM_INT||(LA20_0>=NUM_LONG && LA20_0<=NUM_FLOAT)) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2633);
                    elementValueNoEnum63=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum63.getTree());
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);
                        if ( (LA19_0==COMMA) ) {
                            int LA19_1 = input.LA(2);
                            if ( ((LA19_1>=BOOLEAN_TRUE && LA19_1<=VALUE_NULL)||LA19_1==NUM_DOUBLE||LA19_1==LCURLY||LA19_1==ATCHAR||(LA19_1>=PLUS && LA19_1<=QUOTED_STRING_LITERAL)||LA19_1==MINUS||LA19_1==NUM_INT||(LA19_1>=NUM_LONG && LA19_1<=NUM_FLOAT)) ) {
                                alt19=1;
                            }
                        }
                        switch (alt19) {
                    	case 1 :
                    	    {
                    	    char_literal64=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2636); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal64);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2638);
                    	    elementValueNoEnum65=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum65.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop19;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==COMMA) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    char_literal66=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2645); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal66);
                    }
                    break;
            }
            char_literal67=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal67);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal68=null;
        Token char_literal70=null;
        Token char_literal72=null;
        Token char_literal73=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum69 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum71 = null;
        CommonTree char_literal68_tree=null;
        CommonTree char_literal70_tree=null;
        CommonTree char_literal72_tree=null;
        CommonTree char_literal73_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal68=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal68);
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( ((LA23_0>=BOOLEAN_TRUE && LA23_0<=VALUE_NULL)||LA23_0==NUM_DOUBLE||LA23_0==IDENT||LA23_0==LCURLY||LA23_0==ATCHAR||(LA23_0>=PLUS && LA23_0<=QUOTED_STRING_LITERAL)||LA23_0==MINUS||LA23_0==NUM_INT||(LA23_0>=TICKED_STRING_LITERAL && LA23_0<=NUM_FLOAT)) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2681);
                    elementValueEnum69=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum69.getTree());
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);
                        if ( (LA22_0==COMMA) ) {
                            int LA22_1 = input.LA(2);
                            if ( ((LA22_1>=BOOLEAN_TRUE && LA22_1<=VALUE_NULL)||LA22_1==NUM_DOUBLE||LA22_1==IDENT||LA22_1==LCURLY||LA22_1==ATCHAR||(LA22_1>=PLUS && LA22_1<=QUOTED_STRING_LITERAL)||LA22_1==MINUS||LA22_1==NUM_INT||(LA22_1>=TICKED_STRING_LITERAL && LA22_1<=NUM_FLOAT)) ) {
                                alt22=1;
                            }
                        }
                        switch (alt22) {
                    	case 1 :
                    	    {
                    	    char_literal70=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2684); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal70);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2686);
                    	    elementValueEnum71=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum71.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop22;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==COMMA) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    char_literal72=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal72);
                    }
                    break;
            }
            char_literal73=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2697); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal73);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.contextExpr_return contextExpr74 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr75 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr76 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr77 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr78 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr79 = null;
        EsperEPL2GrammarParser.createContextExpr_return createContextExpr80 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr81 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr82 = null;
        EsperEPL2GrammarParser.createDataflow_return createDataflow83 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr84 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==CONTEXT) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    pushFollow(FOLLOW_contextExpr_in_eplExpression2729);
                    contextExpr74=contextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, contextExpr74.getTree());
                    }
                    break;
            }
            int alt26=9;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt26=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt26=2;
                    }
                    break;
                case INDEX:
                    {
                    alt26=3;
                    }
                    break;
                case CONTEXT:
                    {
                    alt26=6;
                    }
                    break;
                case DATAFLOW:
                    {
                    alt26=9;
                    }
                    break;
                case IDENT:
                    {
                    int LA26_10 = input.LA(3);
                    if ( (LA26_10==SCHEMA) ) {
                        alt26=5;
                    }
                    else if ( (LA26_10==VARIABLE) ) {
                        alt26=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 10, input);
                        throw nvae;
                    }
                    }
                    break;
                case SCHEMA:
                    {
                    alt26=5;
                    }
                    break;
                case VARIABLE:
                    {
                    alt26=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt26=7;
                }
                break;
            case UPDATE:
                {
                alt26=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);
                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2736);
                    selectExpr75=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr75.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2741);
                    createWindowExpr76=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr76.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2746);
                    createIndexExpr77=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr77.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2751);
                    createVariableExpr78=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr78.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2756);
                    createSchemaExpr79=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr79.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_createContextExpr_in_eplExpression2761);
                    createContextExpr80=createContextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextExpr80.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2766);
                    onExpr81=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr81.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2771);
                    updateExpr82=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr82.getTree());
                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_createDataflow_in_eplExpression2776);
                    createDataflow83=createDataflow();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createDataflow83.getTree());
                    }
                    break;
            }
            int alt27=2;
            int LA27_0 = input.LA(1);
            if ( (LA27_0==FOR) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2779);
                    forExpr84=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr84.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class contextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.contextExpr_return contextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.contextExpr_return retval = new EsperEPL2GrammarParser.contextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token CONTEXT85=null;
        CommonTree i_tree=null;
        CommonTree CONTEXT85_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        try {
            {
            CONTEXT85=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextExpr2792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT85);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_contextExpr2796); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTEXT.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT86=null;
        Token SELECT88=null;
        Token FROM90=null;
        Token WHERE93=null;
        Token GROUP95=null;
        Token BY96=null;
        Token HAVING98=null;
        Token OUTPUT100=null;
        Token ORDER102=null;
        Token BY103=null;
        Token ROW_LIMIT_EXPR105=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr87 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause89 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause91 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog92 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause94 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr97 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause99 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit101 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr104 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit106 = null;
        CommonTree INSERT86_tree=null;
        CommonTree SELECT88_tree=null;
        CommonTree FROM90_tree=null;
        CommonTree WHERE93_tree=null;
        CommonTree GROUP95_tree=null;
        CommonTree BY96_tree=null;
        CommonTree HAVING98_tree=null;
        CommonTree OUTPUT100_tree=null;
        CommonTree ORDER102_tree=null;
        CommonTree BY103_tree=null;
        CommonTree ROW_LIMIT_EXPR105_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt28=2;
            int LA28_0 = input.LA(1);
            if ( (LA28_0==INSERT) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    {
                    INSERT86=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2820); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2823);
                    insertIntoExpr87=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr87.getTree());
                    }
                    break;
            }
            SELECT88=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2829); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2832);
            selectClause89=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause89.getTree());
            FROM90=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2836); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2839);
            fromClause91=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause91.getTree());
            int alt29=2;
            int LA29_0 = input.LA(1);
            if ( (LA29_0==MATCH_RECOGNIZE) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2843);
                    matchRecog92=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog92.getTree());
                    }
                    break;
            }
            int alt30=2;
            int LA30_0 = input.LA(1);
            if ( (LA30_0==WHERE) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    {
                    WHERE93=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2849); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2852);
                    whereClause94=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause94.getTree());
                    }
                    break;
            }
            int alt31=2;
            int LA31_0 = input.LA(1);
            if ( (LA31_0==GROUP) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    {
                    GROUP95=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2859); if (state.failed) return retval;
                    BY96=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2862); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2865);
                    groupByListExpr97=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr97.getTree());
                    }
                    break;
            }
            int alt32=2;
            int LA32_0 = input.LA(1);
            if ( (LA32_0==HAVING) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    {
                    HAVING98=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2872); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2875);
                    havingClause99=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause99.getTree());
                    }
                    break;
            }
            int alt33=2;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==OUTPUT) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    {
                    OUTPUT100=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2882); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2885);
                    outputLimit101=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit101.getTree());
                    }
                    break;
            }
            int alt34=2;
            int LA34_0 = input.LA(1);
            if ( (LA34_0==ORDER) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    {
                    ORDER102=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2892); if (state.failed) return retval;
                    BY103=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2895); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2898);
                    orderByListExpr104=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr104.getTree());
                    }
                    break;
            }
            int alt35=2;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==ROW_LIMIT_EXPR) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR105=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2905); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2908);
                    rowLimit106=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit106.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON107=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr108 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr109 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr110 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr111 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert112 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr113 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr114 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr115 = null;
        CommonTree ON107_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON107=(Token)match(input,ON,FOLLOW_ON_in_onExpr2923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON107);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2925);
            onStreamExpr108=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr108.getTree());
            int alt39=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt39=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt39=2;
                }
                break;
            case SET:
                {
                alt39=3;
                }
                break;
            case UPDATE:
                {
                alt39=4;
                }
                break;
            case MERGE:
                {
                alt39=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);
                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2930);
                    onDeleteExpr109=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr109.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2934);
                    onSelectExpr110=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr110.getTree());
                    int alt38=2;
                    int LA38_0 = input.LA(1);
                    if ( (LA38_0==INSERT) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            {
                            int cnt36=0;
                            loop36:
                            do {
                                int alt36=2;
                                int LA36_0 = input.LA(1);
                                if ( (LA36_0==INSERT) ) {
                                    alt36=1;
                                }
                                switch (alt36) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2937);
                            	    onSelectInsertExpr111=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr111.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt36 >= 1 ) break loop36;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(36, input);
                                        throw eee;
                                }
                                cnt36++;
                            } while (true);
                            int alt37=2;
                            int LA37_0 = input.LA(1);
                            if ( (LA37_0==OUTPUT) ) {
                                alt37=1;
                            }
                            switch (alt37) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2940);
                                    outputClauseInsert112=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert112.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2947);
                    onSetExpr113=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr113.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2951);
                    onUpdateExpr114=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr114.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2955);
                    onMergeExpr115=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr115.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS118=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression116 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression117 = null;
        CommonTree i_tree=null;
        CommonTree AS118_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==IDENT||LA40_0==TICKED_STRING_LITERAL) ) {
                alt40=1;
            }
            else if ( (LA40_0==PATTERN) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);
                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr3000);
                    eventFilterExpression116=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression116.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr3004);
                    patternInclusionExpression117=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression117.getTree());
                    }
                    break;
            }
            int alt41=3;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==AS) ) {
                alt41=1;
            }
            else if ( (LA41_0==IDENT) ) {
                alt41=2;
            }
            switch (alt41) {
                case 1 :
                    {
                    AS118=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr3008); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS118);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr3012); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr3018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE119=null;
        Token ISTREAM120=null;
        Token AS122=null;
        Token SET123=null;
        Token COMMA125=null;
        Token WHERE127=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier121 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment124 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment126 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause128 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE119_tree=null;
        CommonTree ISTREAM120_tree=null;
        CommonTree AS122_tree=null;
        CommonTree SET123_tree=null;
        CommonTree COMMA125_tree=null;
        CommonTree WHERE127_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE119=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr3049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE119);
            ISTREAM120=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr3051); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM120);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr3053);
            classIdentifier121=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier121.getTree());
            int alt42=3;
            int LA42_0 = input.LA(1);
            if ( (LA42_0==AS) ) {
                alt42=1;
            }
            else if ( (LA42_0==IDENT) ) {
                alt42=2;
            }
            switch (alt42) {
                case 1 :
                    {
                    AS122=(Token)match(input,AS,FOLLOW_AS_in_updateExpr3056); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS122);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr3060); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr3066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET123=(Token)match(input,SET,FOLLOW_SET_in_updateExpr3072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET123);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr3074);
            onSetAssignment124=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment124.getTree());
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);
                if ( (LA43_0==COMMA) ) {
                    alt43=1;
                }
                switch (alt43) {
            	case 1 :
            	    {
            	    COMMA125=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr3077); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA125);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr3079);
            	    onSetAssignment126=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment126.getTree());
            	    }
            	    break;
            	default :
            	    break loop43;
                }
            } while (true);
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( (LA44_0==WHERE) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    {
                    WHERE127=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr3087); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE127);
                    pushFollow(FOLLOW_whereClause_in_updateExpr3089);
                    whereClause128=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause128.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE129=null;
        Token INTO130=null;
        Token AS131=null;
        Token WHERE132=null;
        EsperEPL2GrammarParser.whereClause_return whereClause133 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem134 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE129_tree=null;
        CommonTree INTO130_tree=null;
        CommonTree AS131_tree=null;
        CommonTree WHERE132_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE129=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr3124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE129);
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( (LA45_0==INTO) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    {
                    INTO130=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr3126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO130);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt46=3;
            int LA46_0 = input.LA(1);
            if ( (LA46_0==AS) ) {
                alt46=1;
            }
            else if ( (LA46_0==IDENT) ) {
                alt46=2;
            }
            switch (alt46) {
                case 1 :
                    {
                    AS131=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr3134); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS131);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3138); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3144); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt47=2;
            int LA47_0 = input.LA(1);
            if ( (LA47_0==WHERE) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    {
                    WHERE132=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr3151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE132);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr3153);
                    whereClause133=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause133.getTree());
                    }
                    break;
            }
            int cnt48=0;
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);
                if ( (LA48_0==WHEN) ) {
                    alt48=1;
                }
                switch (alt48) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr3161);
            	    mergeItem134=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem134.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt48 >= 1 ) break loop48;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(48, input);
                        throw eee;
                }
                cnt48++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched135 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched136 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( (LA49_0==WHEN) ) {
                int LA49_1 = input.LA(2);
                if ( (LA49_1==MATCHED) ) {
                    alt49=1;
                }
                else if ( (LA49_1==NOT_EXPR) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);
                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem3195);
                    mergeMatched135=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched135.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem3199);
                    mergeUnmatched136=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched136.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN137=null;
        Token MATCHED138=null;
        Token AND_EXPR139=null;
        EsperEPL2GrammarParser.expression_return expression140 = null;
        EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem141 = null;
        CommonTree WHEN137_tree=null;
        CommonTree MATCHED138_tree=null;
        CommonTree AND_EXPR139_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeMatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatchedItem");
        try {
            {
            WHEN137=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched3212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN137);
            MATCHED138=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched3214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED138);
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==AND_EXPR) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    AND_EXPR139=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched3217); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR139);
                    pushFollow(FOLLOW_expression_in_mergeMatched3219);
                    expression140=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression140.getTree());
                    }
                    break;
            }
            int cnt51=0;
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);
                if ( (LA51_0==THEN) ) {
                    alt51=1;
                }
                switch (alt51) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatchedItem_in_mergeMatched3223);
            	    mergeMatchedItem141=mergeMatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatchedItem.add(mergeMatchedItem141.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt51 >= 1 ) break loop51;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(51, input);
                        throw eee;
                }
                cnt51++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_MAT, "MERGE_MAT"), root_1);
                if ( !(stream_mergeMatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeMatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatchedItem.nextTree());
                }
                stream_mergeMatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatchedItem_return retval = new EsperEPL2GrammarParser.mergeMatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token d=null;
        Token THEN142=null;
        Token SET143=null;
        Token COMMA145=null;
        Token WHERE147=null;
        Token WHERE149=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment144 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment146 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause148 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause150 = null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert151 = null;
        CommonTree u_tree=null;
        CommonTree d_tree=null;
        CommonTree THEN142_tree=null;
        CommonTree SET143_tree=null;
        CommonTree COMMA145_tree=null;
        CommonTree WHERE147_tree=null;
        CommonTree WHERE149_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_mergeInsert=new RewriteRuleSubtreeStream(adaptor,"rule mergeInsert");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            THEN142=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatchedItem3249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN142);
            int alt55=3;
            switch ( input.LA(1) ) {
            case UPDATE:
                {
                alt55=1;
                }
                break;
            case DELETE:
                {
                alt55=2;
                }
                break;
            case INSERT:
                {
                alt55=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);
                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    {
                    {
                    u=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatchedItem3264); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(u);
                    SET143=(Token)match(input,SET,FOLLOW_SET_in_mergeMatchedItem3266); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET143);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3268);
                    onSetAssignment144=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment144.getTree());
                    loop52:
                    do {
                        int alt52=2;
                        int LA52_0 = input.LA(1);
                        if ( (LA52_0==COMMA) ) {
                            alt52=1;
                        }
                        switch (alt52) {
                    	case 1 :
                    	    {
                    	    COMMA145=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatchedItem3271); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA145);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3273);
                    	    onSetAssignment146=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment146.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop52;
                        }
                    } while (true);
                    }
                    int alt53=2;
                    int LA53_0 = input.LA(1);
                    if ( (LA53_0==WHERE) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            {
                            WHERE147=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3279); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE147);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3281);
                            whereClause148=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause148.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatchedItem3293); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    int alt54=2;
                    int LA54_0 = input.LA(1);
                    if ( (LA54_0==WHERE) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            {
                            WHERE149=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3296); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE149);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3298);
                            whereClause150=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause150.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_mergeInsert_in_mergeMatchedItem3309);
                    mergeInsert151=mergeInsert();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mergeInsert.add(mergeInsert151.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_DEL, "MERGE_DEL"), root_1);
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_1, (CommonTree)adaptor.create(INT_TYPE, "dummy"));
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (u != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_mergeInsert.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN152=null;
        Token NOT_EXPR153=null;
        Token MATCHED154=null;
        Token AND_EXPR155=null;
        EsperEPL2GrammarParser.expression_return expression156 = null;
        EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem157 = null;
        CommonTree WHEN152_tree=null;
        CommonTree NOT_EXPR153_tree=null;
        CommonTree MATCHED154_tree=null;
        CommonTree AND_EXPR155_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeUnmatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatchedItem");
        try {
            {
            WHEN152=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched3366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN152);
            NOT_EXPR153=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched3368); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR153);
            MATCHED154=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched3370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED154);
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==AND_EXPR) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    {
                    AND_EXPR155=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched3373); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR155);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched3375);
                    expression156=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression156.getTree());
                    }
                    break;
            }
            int cnt57=0;
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);
                if ( (LA57_0==THEN) ) {
                    alt57=1;
                }
                switch (alt57) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3379);
            	    mergeUnmatchedItem157=mergeUnmatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatchedItem.add(mergeUnmatchedItem157.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt57 >= 1 ) break loop57;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        throw eee;
                }
                cnt57++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UNM, "MERGE_UNM"), root_1);
                if ( !(stream_mergeUnmatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeUnmatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatchedItem.nextTree());
                }
                stream_mergeUnmatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatchedItem_return retval = new EsperEPL2GrammarParser.mergeUnmatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token THEN158=null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert159 = null;
        CommonTree THEN158_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            THEN158=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatchedItem3406); if (state.failed) return retval;
            pushFollow(FOLLOW_mergeInsert_in_mergeUnmatchedItem3409);
            mergeInsert159=mergeInsert();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeInsert159.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeInsert_return mergeInsert() throws RecognitionException {
        EsperEPL2GrammarParser.mergeInsert_return retval = new EsperEPL2GrammarParser.mergeInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT160=null;
        Token INTO161=null;
        Token LPAREN163=null;
        Token RPAREN165=null;
        Token SELECT166=null;
        Token WHERE168=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier162 = null;
        EsperEPL2GrammarParser.columnList_return columnList164 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList167 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause169 = null;
        CommonTree INSERT160_tree=null;
        CommonTree INTO161_tree=null;
        CommonTree LPAREN163_tree=null;
        CommonTree RPAREN165_tree=null;
        CommonTree SELECT166_tree=null;
        CommonTree WHERE168_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            INSERT160=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeInsert3424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT160);
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==INTO) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    INTO161=(Token)match(input,INTO,FOLLOW_INTO_in_mergeInsert3427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO161);
                    pushFollow(FOLLOW_classIdentifier_in_mergeInsert3429);
                    classIdentifier162=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier162.getTree());
                    }
                    break;
            }
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==LPAREN) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    LPAREN163=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeInsert3434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN163);
                    pushFollow(FOLLOW_columnList_in_mergeInsert3436);
                    columnList164=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList164.getTree());
                    RPAREN165=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeInsert3438); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN165);
                    }
                    break;
            }
            SELECT166=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeInsert3442); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT166);
            pushFollow(FOLLOW_selectionList_in_mergeInsert3444);
            selectionList167=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList167.getTree());
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==WHERE) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    WHERE168=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeInsert3447); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE168);
                    pushFollow(FOLLOW_whereClause_in_mergeInsert3449);
                    whereClause169=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause169.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT170=null;
        Token SELECT172=null;
        Token DISTINCT173=null;
        Token WHERE176=null;
        Token GROUP178=null;
        Token BY179=null;
        Token HAVING181=null;
        Token ORDER183=null;
        Token BY184=null;
        Token ROW_LIMIT_EXPR186=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr171 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList174 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom175 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause177 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr180 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause182 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr185 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit187 = null;
        CommonTree INSERT170_tree=null;
        CommonTree SELECT172_tree=null;
        CommonTree DISTINCT173_tree=null;
        CommonTree WHERE176_tree=null;
        CommonTree GROUP178_tree=null;
        CommonTree BY179_tree=null;
        CommonTree HAVING181_tree=null;
        CommonTree ORDER183_tree=null;
        CommonTree BY184_tree=null;
        CommonTree ROW_LIMIT_EXPR186_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==INSERT) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    INSERT170=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr3495); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT170);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr3497);
                    insertIntoExpr171=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr171.getTree());
                    }
                    break;
            }
            SELECT172=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr3503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT172);
            int alt62=2;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==DISTINCT) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    DISTINCT173=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr3505); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT173);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr3508);
            selectionList174=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList174.getTree());
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==FROM) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr3512);
                    onExprFrom175=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom175.getTree());
                    }
                    break;
            }
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==WHERE) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    WHERE176=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr3518); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE176);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr3520);
                    whereClause177=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause177.getTree());
                    }
                    break;
            }
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==GROUP) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    GROUP178=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr3529); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP178);
                    BY179=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY179);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr3533);
                    groupByListExpr180=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr180.getTree());
                    }
                    break;
            }
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==HAVING) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    HAVING181=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr3540); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING181);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr3542);
                    havingClause182=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause182.getTree());
                    }
                    break;
            }
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==ORDER) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    ORDER183=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr3549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER183);
                    BY184=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3551); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY184);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr3553);
                    orderByListExpr185=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr185.getTree());
                    }
                    break;
            }
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==ROW_LIMIT_EXPR) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR186=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR186);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr3562);
                    rowLimit187=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit187.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE188=null;
        Token AS189=null;
        Token SET190=null;
        Token COMMA192=null;
        Token WHERE194=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment191 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment193 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause195 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE188_tree=null;
        CommonTree AS189_tree=null;
        CommonTree SET190_tree=null;
        CommonTree COMMA192_tree=null;
        CommonTree WHERE194_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE188=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr3622); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE188);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3629); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt69=3;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==AS) ) {
                alt69=1;
            }
            else if ( (LA69_0==IDENT) ) {
                alt69=2;
            }
            switch (alt69) {
                case 1 :
                    {
                    AS189=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr3632); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS189);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3636); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3642); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET190=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr3648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET190);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3650);
            onSetAssignment191=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment191.getTree());
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);
                if ( (LA70_0==COMMA) ) {
                    alt70=1;
                }
                switch (alt70) {
            	case 1 :
            	    {
            	    COMMA192=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr3653); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA192);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3655);
            	    onSetAssignment193=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment193.getTree());
            	    }
            	    break;
            	default :
            	    break loop70;
                }
            } while (true);
            int alt71=2;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==WHERE) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    WHERE194=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr3662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE194);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr3664);
                    whereClause195=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause195.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT196=null;
        Token SELECT198=null;
        Token WHERE200=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr197 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList199 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause201 = null;
        CommonTree INSERT196_tree=null;
        CommonTree SELECT198_tree=null;
        CommonTree WHERE200_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT196=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3715); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT196);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3717);
            insertIntoExpr197=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr197.getTree());
            SELECT198=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3721); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT198);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3723);
            selectionList199=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList199.getTree());
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==WHERE) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    WHERE200=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE200);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3730);
                    whereClause201=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause201.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT202=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT202_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT202=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT202);
            int alt73=2;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==FIRST) ) {
                alt73=1;
            }
            else if ( (LA73_0==ALL) ) {
                alt73=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);
                throw nvae;
            }
            switch (alt73) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3766); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE203=null;
        Token WHERE205=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom204 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause206 = null;
        CommonTree DELETE203_tree=null;
        CommonTree WHERE205_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE203=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE203);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3818);
            onExprFrom204=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom204.getTree());
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==WHERE) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    WHERE205=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE205);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3825);
                    whereClause206=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause206.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET207=null;
        Token COMMA209=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment208 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment210 = null;
        CommonTree SET207_tree=null;
        CommonTree COMMA209_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET207=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3865); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET207);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3867);
            onSetAssignment208=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment208.getTree());
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);
                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }
                switch (alt75) {
            	case 1 :
            	    {
            	    COMMA209=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3870); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA209);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3872);
            	    onSetAssignment210=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment210.getTree());
            	    }
            	    break;
            	default :
            	    break loop75;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS212=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty211 = null;
        EsperEPL2GrammarParser.expression_return expression213 = null;
        CommonTree EQUALS212_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3897);
            eventProperty211=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty211.getTree());
            EQUALS212=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3899); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS212);
            pushFollow(FOLLOW_expression_in_onSetAssignment3901);
            expression213=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression213.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM214=null;
        Token AS215=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM214_tree=null;
        CommonTree AS215_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM214=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3926); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM214);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt76=3;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==AS) ) {
                alt76=1;
            }
            else if ( (LA76_0==IDENT) ) {
                alt76=2;
            }
            switch (alt76) {
                case 1 :
                    {
                    AS215=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS215);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3937); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3943); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE216=null;
        Token WINDOW217=null;
        Token DOT218=null;
        Token DOT220=null;
        Token AS222=null;
        Token LPAREN224=null;
        Token RPAREN226=null;
        Token WHERE227=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression219 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression221 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter223 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList225 = null;
        EsperEPL2GrammarParser.expression_return expression228 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE216_tree=null;
        CommonTree WINDOW217_tree=null;
        CommonTree DOT218_tree=null;
        CommonTree DOT220_tree=null;
        CommonTree AS222_tree=null;
        CommonTree LPAREN224_tree=null;
        CommonTree RPAREN226_tree=null;
        CommonTree WHERE227_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE216=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE216);
            WINDOW217=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3973); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW217);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt78=2;
            int LA78_0 = input.LA(1);
            if ( (LA78_0==DOT) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    DOT218=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3980); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT218);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3982);
                    viewExpression219=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression219.getTree());
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);
                        if ( (LA77_0==DOT) ) {
                            alt77=1;
                        }
                        switch (alt77) {
                    	case 1 :
                    	    {
                    	    DOT220=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3985); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT220);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3987);
                    	    viewExpression221=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression221.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop77;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt79=3;
            int LA79_0 = input.LA(1);
            if ( (LA79_0==RETAINUNION) ) {
                alt79=1;
            }
            else if ( (LA79_0==RETAININTERSECTION) ) {
                alt79=2;
            }
            switch (alt79) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3996); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr4000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==AS) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    {
                    AS222=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr4004); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS222);
                    }
                    break;
            }
            int alt81=2;
            int LA81_0 = input.LA(1);
            if ( (LA81_0==SELECT||LA81_0==IDENT||LA81_0==TICKED_STRING_LITERAL) ) {
                alt81=1;
            }
            else if ( (LA81_0==LPAREN) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);
                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr4019);
                    createWindowExprModelAfter223=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter223.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN224=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr4034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN224);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr4036);
                    createColumnList225=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList225.getTree());
                    RPAREN226=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr4038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN226);
                    }
                    break;
            }
            int alt83=2;
            int LA83_0 = input.LA(1);
            if ( (LA83_0==INSERT) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr4055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt82=2;
                    int LA82_0 = input.LA(1);
                    if ( (LA82_0==WHERE) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            {
                            WHERE227=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr4058); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE227);
                            pushFollow(FOLLOW_expression_in_createWindowExpr4060);
                            expression228=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression228.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT229=null;
        Token FROM231=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList230 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier232 = null;
        CommonTree SELECT229_tree=null;
        CommonTree FROM231_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt84=2;
            int LA84_0 = input.LA(1);
            if ( (LA84_0==SELECT) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    {
                    SELECT229=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter4147); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter4150);
                    createSelectionList230=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList230.getTree());
                    FROM231=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter4152); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter4157);
            classIdentifier232=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier232.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE233=null;
        Token INDEX234=null;
        Token ON235=null;
        Token LPAREN236=null;
        Token RPAREN238=null;
        EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList237 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE233_tree=null;
        CommonTree INDEX234_tree=null;
        CommonTree ON235_tree=null;
        CommonTree LPAREN236_tree=null;
        CommonTree RPAREN238_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createIndexColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumnList");
        try {
            {
            CREATE233=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr4170); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE233);
            INDEX234=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr4172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX234);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4176); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON235=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr4178); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON235);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN236=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr4184); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN236);
            pushFollow(FOLLOW_createIndexColumnList_in_createIndexExpr4186);
            createIndexColumnList237=createIndexColumnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumnList.add(createIndexColumnList237.getTree());
            RPAREN238=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr4188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN238);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_createIndexColumnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumnList_return retval = new EsperEPL2GrammarParser.createIndexColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA240=null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn239 = null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn241 = null;
        CommonTree COMMA240_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createIndexColumn=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumn");
        try {
            {
            pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList4217);
            createIndexColumn239=createIndexColumn();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn239.getTree());
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);
                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }
                switch (alt85) {
            	case 1 :
            	    {
            	    COMMA240=(Token)match(input,COMMA,FOLLOW_COMMA_in_createIndexColumnList4220); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA240);
            	    pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList4222);
            	    createIndexColumn241=createIndexColumn();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn241.getTree());
            	    }
            	    break;
            	default :
            	    break loop85;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                if ( !(stream_createIndexColumn.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createIndexColumn.hasNext() ) {
                    adaptor.addChild(root_1, stream_createIndexColumn.nextTree());
                }
                stream_createIndexColumn.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumn_return retval = new EsperEPL2GrammarParser.createIndexColumn_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT242=null;
        Token IDENT243=null;
        CommonTree IDENT242_tree=null;
        CommonTree IDENT243_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            IDENT242=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT242);
            int alt86=2;
            int LA86_0 = input.LA(1);
            if ( (LA86_0==IDENT) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    {
                    IDENT243=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT243);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token n=null;
        Token CREATE244=null;
        Token VARIABLE245=null;
        Token EQUALS247=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier246 = null;
        EsperEPL2GrammarParser.expression_return expression248 = null;
        CommonTree c_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE244_tree=null;
        CommonTree VARIABLE245_tree=null;
        CommonTree EQUALS247_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE244=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr4276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE244);
            int alt87=2;
            int LA87_0 = input.LA(1);
            if ( (LA87_0==IDENT) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    {
                    c=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr4280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(c);
                    }
                    break;
            }
            VARIABLE245=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr4283); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE245);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr4285);
            classIdentifier246=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier246.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr4289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt88=2;
            int LA88_0 = input.LA(1);
            if ( (LA88_0==EQUALS) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    {
                    EQUALS247=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr4292); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS247);
                    pushFollow(FOLLOW_expression_in_createVariableExpr4294);
                    expression248=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression248.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA250=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement249 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement251 = null;
        CommonTree COMMA250_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList4340);
            createColumnListElement249=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement249.getTree());
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);
                if ( (LA89_0==COMMA) ) {
                    alt89=1;
                }
                switch (alt89) {
            	case 1 :
            	    {
            	    COMMA250=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList4343); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA250);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList4345);
            	    createColumnListElement251=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement251.getTree());
            	    }
            	    break;
            	default :
            	    break loop89;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token b=null;
        Token RBRACK254=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy252 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier253 = null;
        CommonTree b_tree=null;
        CommonTree RBRACK254_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4373);
            classIdentifierNonGreedy252=classIdentifierNonGreedy();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy252.getTree());
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement4376);
            classIdentifier253=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier253.getTree());
            int alt90=2;
            int LA90_0 = input.LA(1);
            if ( (LA90_0==LBRACK) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement4381); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK254=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement4383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK254);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA256=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement255 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement257 = null;
        CommonTree COMMA256_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4426);
            createSelectionListElement255=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement255.getTree());
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);
                if ( (LA91_0==COMMA) ) {
                    alt91=1;
                }
                switch (alt91) {
            	case 1 :
            	    {
            	    COMMA256=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList4429); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA256);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4431);
            	    createSelectionListElement257=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement257.getTree());
            	    }
            	    break;
            	default :
            	    break loop91;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS259=null;
        Token AS261=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty258 = null;
        EsperEPL2GrammarParser.constant_return constant260 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS259_tree=null;
        CommonTree AS261_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt93=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt93=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case CONTEXT:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt93=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt93=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);
                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement4460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement4472);
                    eventProperty258=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty258.getTree());
                    int alt92=2;
                    int LA92_0 = input.LA(1);
                    if ( (LA92_0==AS) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            {
                            AS259=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4475); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS259);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4479); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement4500);
                    constant260=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant260.getTree());
                    AS261=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4502); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS261);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token CREATE262=null;
        EsperEPL2GrammarParser.createSchemaDef_return createSchemaDef263 = null;
        CommonTree keyword_tree=null;
        CommonTree CREATE262_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleSubtreeStream stream_createSchemaDef=new RewriteRuleSubtreeStream(adaptor,"rule createSchemaDef");
        try {
            {
            CREATE262=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr4531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE262);
            int alt94=2;
            int LA94_0 = input.LA(1);
            if ( (LA94_0==IDENT) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4535); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            pushFollow(FOLLOW_createSchemaDef_in_createSchemaExpr4538);
            createSchemaDef263=createSchemaDef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSchemaDef.add(createSchemaDef263.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_createSchemaDef.nextTree());
                if ( stream_keyword.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyword.nextNode());
                }
                stream_keyword.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaDef_return createSchemaDef() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaDef_return retval = new EsperEPL2GrammarParser.createSchemaDef_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token SCHEMA264=null;
        Token AS265=null;
        Token LPAREN267=null;
        Token RPAREN269=null;
        EsperEPL2GrammarParser.variantList_return variantList266 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList268 = null;
        EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual270 = null;
        CommonTree name_tree=null;
        CommonTree SCHEMA264_tree=null;
        CommonTree AS265_tree=null;
        CommonTree LPAREN267_tree=null;
        CommonTree RPAREN269_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_createSchemaQual=new RewriteRuleSubtreeStream(adaptor,"rule createSchemaQual");
        try {
            {
            SCHEMA264=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaDef4563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA264);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaDef4567); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt95=2;
            int LA95_0 = input.LA(1);
            if ( (LA95_0==AS) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    {
                    AS265=(Token)match(input,AS,FOLLOW_AS_in_createSchemaDef4569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS265);
                    }
                    break;
            }
            int alt97=2;
            int LA97_0 = input.LA(1);
            if ( (LA97_0==IDENT||LA97_0==STAR||LA97_0==TICKED_STRING_LITERAL) ) {
                alt97=1;
            }
            else if ( (LA97_0==LPAREN) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);
                throw nvae;
            }
            switch (alt97) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaDef4582);
                    variantList266=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList266.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN267=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaDef4593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN267);
                    int alt96=2;
                    int LA96_0 = input.LA(1);
                    if ( (LA96_0==IDENT||LA96_0==TICKED_STRING_LITERAL) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaDef4595);
                            createColumnList268=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList268.getTree());
                            }
                            break;
                    }
                    RPAREN269=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaDef4598); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN269);
                    }
                    break;
            }
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);
                if ( (LA98_0==IDENT) ) {
                    alt98=1;
                }
                switch (alt98) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_createSchemaQual_in_createSchemaDef4607);
            	    createSchemaQual270=createSchemaQual();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSchemaQual.add(createSchemaQual270.getTree());
            	    }
            	    break;
            	default :
            	    break loop98;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_DEF, "CREATE_SCHEMA_DEF"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                while ( stream_createSchemaQual.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSchemaQual.nextTree());
                }
                stream_createSchemaQual.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createDataflow_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createDataflow_return createDataflow() throws RecognitionException {
        EsperEPL2GrammarParser.createDataflow_return retval = new EsperEPL2GrammarParser.createDataflow_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CREATE271=null;
        Token DATAFLOW272=null;
        Token AS273=null;
        EsperEPL2GrammarParser.gopList_return gopList274 = null;
        CommonTree name_tree=null;
        CommonTree CREATE271_tree=null;
        CommonTree DATAFLOW272_tree=null;
        CommonTree AS273_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_DATAFLOW=new RewriteRuleTokenStream(adaptor,"token DATAFLOW");
        RewriteRuleSubtreeStream stream_gopList=new RewriteRuleSubtreeStream(adaptor,"rule gopList");
        try {
            {
            CREATE271=(Token)match(input,CREATE,FOLLOW_CREATE_in_createDataflow4643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE271);
            DATAFLOW272=(Token)match(input,DATAFLOW,FOLLOW_DATAFLOW_in_createDataflow4645); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DATAFLOW.add(DATAFLOW272);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createDataflow4649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt99=2;
            int LA99_0 = input.LA(1);
            if ( (LA99_0==AS) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    {
                    AS273=(Token)match(input,AS,FOLLOW_AS_in_createDataflow4651); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS273);
                    }
                    break;
            }
            pushFollow(FOLLOW_gopList_in_createDataflow4654);
            gopList274=gopList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopList.add(gopList274.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_DATAFLOW, "CREATE_DATAFLOW"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_gopList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopList_return gopList() throws RecognitionException {
        EsperEPL2GrammarParser.gopList_return retval = new EsperEPL2GrammarParser.gopList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.gop_return gop275 = null;
        EsperEPL2GrammarParser.gop_return gop276 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_gop_in_gopList4678);
            gop275=gop();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, gop275.getTree());
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);
                if ( (LA100_0==CREATE||LA100_0==SELECT||LA100_0==IDENT||LA100_0==ATCHAR) ) {
                    alt100=1;
                }
                switch (alt100) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_gop_in_gopList4680);
            	    gop276=gop();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, gop276.getTree());
            	    }
            	    break;
            	default :
            	    break loop100;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gop_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gop_return gop() throws RecognitionException {
        EsperEPL2GrammarParser.gop_return retval = new EsperEPL2GrammarParser.gop_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token opName=null;
        Token s=null;
        Token LCURLY280=null;
        Token COMMA282=null;
        Token RCURLY283=null;
        Token COMMA285=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum277 = null;
        EsperEPL2GrammarParser.gopParams_return gopParams278 = null;
        EsperEPL2GrammarParser.gopOut_return gopOut279 = null;
        EsperEPL2GrammarParser.gopDetail_return gopDetail281 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr284 = null;
        CommonTree opName_tree=null;
        CommonTree s_tree=null;
        CommonTree LCURLY280_tree=null;
        CommonTree COMMA282_tree=null;
        CommonTree RCURLY283_tree=null;
        CommonTree COMMA285_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_gopOut=new RewriteRuleSubtreeStream(adaptor,"rule gopOut");
        RewriteRuleSubtreeStream stream_gopDetail=new RewriteRuleSubtreeStream(adaptor,"rule gopDetail");
        RewriteRuleSubtreeStream stream_gopParams=new RewriteRuleSubtreeStream(adaptor,"rule gopParams");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        try {
            int alt107=2;
            int LA107_0 = input.LA(1);
            if ( (LA107_0==SELECT||LA107_0==IDENT||LA107_0==ATCHAR) ) {
                alt107=1;
            }
            else if ( (LA107_0==CREATE) ) {
                alt107=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);
                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    {
                    loop101:
                    do {
                        int alt101=2;
                        int LA101_0 = input.LA(1);
                        if ( (LA101_0==ATCHAR) ) {
                            alt101=1;
                        }
                        switch (alt101) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_annotationEnum_in_gop4693);
                    	    annotationEnum277=annotationEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum277.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop101;
                        }
                    } while (true);
                    int alt102=2;
                    int LA102_0 = input.LA(1);
                    if ( (LA102_0==IDENT) ) {
                        alt102=1;
                    }
                    else if ( (LA102_0==SELECT) ) {
                        alt102=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 102, 0, input);
                        throw nvae;
                    }
                    switch (alt102) {
                        case 1 :
                            {
                            opName=(Token)match(input,IDENT,FOLLOW_IDENT_in_gop4699); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(opName);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,SELECT,FOLLOW_SELECT_in_gop4705); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SELECT.add(s);
                            }
                            break;
                    }
                    int alt103=2;
                    int LA103_0 = input.LA(1);
                    if ( (LA103_0==LPAREN) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_gopParams_in_gop4708);
                            gopParams278=gopParams();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_gopParams.add(gopParams278.getTree());
                            }
                            break;
                    }
                    int alt104=2;
                    int LA104_0 = input.LA(1);
                    if ( (LA104_0==FOLLOWED_BY) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_gopOut_in_gop4711);
                            gopOut279=gopOut();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_gopOut.add(gopOut279.getTree());
                            }
                            break;
                    }
                    LCURLY280=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_gop4714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY280);
                    int alt105=2;
                    int LA105_0 = input.LA(1);
                    if ( (LA105_0==SELECT||LA105_0==IDENT) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_gopDetail_in_gop4716);
                            gopDetail281=gopDetail();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_gopDetail.add(gopDetail281.getTree());
                            }
                            break;
                    }
                    int alt106=2;
                    int LA106_0 = input.LA(1);
                    if ( (LA106_0==COMMA) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            {
                            COMMA282=(Token)match(input,COMMA,FOLLOW_COMMA_in_gop4719); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA282);
                            }
                            break;
                    }
                    RCURLY283=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_gop4722); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY283);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
                    RewriteRuleTokenStream stream_opName=new RewriteRuleTokenStream(adaptor,"token opName",opName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOP, "GOP"), root_1);
                        if ( stream_opName.hasNext() ) {
                            adaptor.addChild(root_1, stream_opName.nextNode());
                        }
                        stream_opName.reset();
                        if ( stream_s.hasNext() ) {
                            adaptor.addChild(root_1, stream_s.nextNode());
                        }
                        stream_s.reset();
                        if ( stream_gopParams.hasNext() ) {
                            adaptor.addChild(root_1, stream_gopParams.nextTree());
                        }
                        stream_gopParams.reset();
                        if ( stream_gopOut.hasNext() ) {
                            adaptor.addChild(root_1, stream_gopOut.nextTree());
                        }
                        stream_gopOut.reset();
                        if ( stream_gopDetail.hasNext() ) {
                            adaptor.addChild(root_1, stream_gopDetail.nextTree());
                        }
                        stream_gopDetail.reset();
                        while ( stream_annotationEnum.hasNext() ) {
                            adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                        }
                        stream_annotationEnum.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createSchemaExpr_in_gop4755);
                    createSchemaExpr284=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr284.getTree());
                    COMMA285=(Token)match(input,COMMA,FOLLOW_COMMA_in_gop4757); if (state.failed) return retval;
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParams_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParams_return gopParams() throws RecognitionException {
        EsperEPL2GrammarParser.gopParams_return retval = new EsperEPL2GrammarParser.gopParams_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN286=null;
        Token RPAREN288=null;
        EsperEPL2GrammarParser.gopParamsItemList_return gopParamsItemList287 = null;
        CommonTree LPAREN286_tree=null;
        CommonTree RPAREN288_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_gopParamsItemList=new RewriteRuleSubtreeStream(adaptor,"rule gopParamsItemList");
        try {
            {
            LPAREN286=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gopParams4771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN286);
            pushFollow(FOLLOW_gopParamsItemList_in_gopParams4773);
            gopParamsItemList287=gopParamsItemList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopParamsItemList.add(gopParamsItemList287.getTree());
            RPAREN288=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gopParams4775); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN288);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPPARAM, "GOPPARAM"), root_1);
                adaptor.addChild(root_1, stream_gopParamsItemList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItemList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItemList_return gopParamsItemList() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItemList_return retval = new EsperEPL2GrammarParser.gopParamsItemList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA290=null;
        EsperEPL2GrammarParser.gopParamsItem_return gopParamsItem289 = null;
        EsperEPL2GrammarParser.gopParamsItem_return gopParamsItem291 = null;
        CommonTree COMMA290_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_gopParamsItem_in_gopParamsItemList4797);
            gopParamsItem289=gopParamsItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, gopParamsItem289.getTree());
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);
                if ( (LA108_0==COMMA) ) {
                    alt108=1;
                }
                switch (alt108) {
            	case 1 :
            	    {
            	    COMMA290=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopParamsItemList4800); if (state.failed) return retval;
            	    pushFollow(FOLLOW_gopParamsItem_in_gopParamsItemList4803);
            	    gopParamsItem291=gopParamsItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, gopParamsItem291.getTree());
            	    }
            	    break;
            	default :
            	    break loop108;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItem_return gopParamsItem() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItem_return retval = new EsperEPL2GrammarParser.gopParamsItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.classIdentifier_return n = null;
        EsperEPL2GrammarParser.gopParamsItemMany_return gopParamsItemMany292 = null;
        EsperEPL2GrammarParser.gopParamsItemAs_return gopParamsItemAs293 = null;
        RewriteRuleSubtreeStream stream_gopParamsItemMany=new RewriteRuleSubtreeStream(adaptor,"rule gopParamsItemMany");
        RewriteRuleSubtreeStream stream_gopParamsItemAs=new RewriteRuleSubtreeStream(adaptor,"rule gopParamsItemAs");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            int alt109=2;
            int LA109_0 = input.LA(1);
            if ( (LA109_0==IDENT||LA109_0==TICKED_STRING_LITERAL) ) {
                alt109=1;
            }
            else if ( (LA109_0==LPAREN) ) {
                alt109=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);
                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifier_in_gopParamsItem4822);
                    n=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(n.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_gopParamsItemMany_in_gopParamsItem4826);
                    gopParamsItemMany292=gopParamsItemMany();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopParamsItemMany.add(gopParamsItemMany292.getTree());
                    }
                    break;
            }
            int alt110=2;
            int LA110_0 = input.LA(1);
            if ( (LA110_0==AS) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopParamsItemAs_in_gopParamsItem4829);
                    gopParamsItemAs293=gopParamsItemAs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopParamsItemAs.add(gopParamsItemAs293.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPPARAMITM, "GOPPARAMITM"), root_1);
                if ( stream_n.hasNext() ) {
                    adaptor.addChild(root_1, stream_n.nextTree());
                }
                stream_n.reset();
                if ( stream_gopParamsItemMany.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopParamsItemMany.nextTree());
                }
                stream_gopParamsItemMany.reset();
                if ( stream_gopParamsItemAs.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopParamsItemAs.nextTree());
                }
                stream_gopParamsItemAs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItemMany_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItemMany_return gopParamsItemMany() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItemMany_return retval = new EsperEPL2GrammarParser.gopParamsItemMany_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN294=null;
        Token COMMA296=null;
        Token RPAREN298=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier295 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier297 = null;
        CommonTree LPAREN294_tree=null;
        CommonTree COMMA296_tree=null;
        CommonTree RPAREN298_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN294=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gopParamsItemMany4859); if (state.failed) return retval;
            pushFollow(FOLLOW_classIdentifier_in_gopParamsItemMany4862);
            classIdentifier295=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier295.getTree());
            {
            COMMA296=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopParamsItemMany4865); if (state.failed) return retval;
            pushFollow(FOLLOW_classIdentifier_in_gopParamsItemMany4868);
            classIdentifier297=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier297.getTree());
            }
            RPAREN298=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gopParamsItemMany4871); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItemAs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItemAs_return gopParamsItemAs() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItemAs_return retval = new EsperEPL2GrammarParser.gopParamsItemAs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token AS299=null;
        CommonTree a_tree=null;
        CommonTree AS299_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            AS299=(Token)match(input,AS,FOLLOW_AS_in_gopParamsItemAs4883); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS299);
            a=(Token)match(input,IDENT,FOLLOW_IDENT_in_gopParamsItemAs4887); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(a);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AS.nextNode(), root_1);
                adaptor.addChild(root_1, stream_a.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOut_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOut_return gopOut() throws RecognitionException {
        EsperEPL2GrammarParser.gopOut_return retval = new EsperEPL2GrammarParser.gopOut_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FOLLOWED_BY300=null;
        Token COMMA302=null;
        EsperEPL2GrammarParser.gopOutItem_return gopOutItem301 = null;
        EsperEPL2GrammarParser.gopOutItem_return gopOutItem303 = null;
        CommonTree FOLLOWED_BY300_tree=null;
        CommonTree COMMA302_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_gopOutItem=new RewriteRuleSubtreeStream(adaptor,"rule gopOutItem");
        try {
            {
            FOLLOWED_BY300=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_gopOut4909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(FOLLOWED_BY300);
            pushFollow(FOLLOW_gopOutItem_in_gopOut4911);
            gopOutItem301=gopOutItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopOutItem.add(gopOutItem301.getTree());
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);
                if ( (LA111_0==COMMA) ) {
                    alt111=1;
                }
                switch (alt111) {
            	case 1 :
            	    {
            	    COMMA302=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopOut4914); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA302);
            	    pushFollow(FOLLOW_gopOutItem_in_gopOut4916);
            	    gopOutItem303=gopOutItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_gopOutItem.add(gopOutItem303.getTree());
            	    }
            	    break;
            	default :
            	    break loop111;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPOUT, "GOPOUT"), root_1);
                if ( !(stream_gopOutItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_gopOutItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopOutItem.nextTree());
                }
                stream_gopOutItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutItem_return gopOutItem() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutItem_return retval = new EsperEPL2GrammarParser.gopOutItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.classIdentifier_return n = null;
        EsperEPL2GrammarParser.gopOutTypeList_return gopOutTypeList304 = null;
        RewriteRuleSubtreeStream stream_gopOutTypeList=new RewriteRuleSubtreeStream(adaptor,"rule gopOutTypeList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifier_in_gopOutItem4942);
            n=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(n.getTree());
            int alt112=2;
            int LA112_0 = input.LA(1);
            if ( (LA112_0==LT) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopOutTypeList_in_gopOutItem4944);
                    gopOutTypeList304=gopOutTypeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopOutTypeList.add(gopOutTypeList304.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPOUTITM, "GOPOUTITM"), root_1);
                adaptor.addChild(root_1, stream_n.nextTree());
                if ( stream_gopOutTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopOutTypeList.nextTree());
                }
                stream_gopOutTypeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutTypeList_return gopOutTypeList() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutTypeList_return retval = new EsperEPL2GrammarParser.gopOutTypeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LT305=null;
        Token COMMA307=null;
        Token GT309=null;
        EsperEPL2GrammarParser.gopOutTypeParam_return gopOutTypeParam306 = null;
        EsperEPL2GrammarParser.gopOutTypeParam_return gopOutTypeParam308 = null;
        CommonTree LT305_tree=null;
        CommonTree COMMA307_tree=null;
        CommonTree GT309_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LT305=(Token)match(input,LT,FOLLOW_LT_in_gopOutTypeList4971); if (state.failed) return retval;
            pushFollow(FOLLOW_gopOutTypeParam_in_gopOutTypeList4974);
            gopOutTypeParam306=gopOutTypeParam();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, gopOutTypeParam306.getTree());
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);
                if ( (LA113_0==COMMA) ) {
                    alt113=1;
                }
                switch (alt113) {
            	case 1 :
            	    {
            	    COMMA307=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopOutTypeList4977); if (state.failed) return retval;
            	    pushFollow(FOLLOW_gopOutTypeParam_in_gopOutTypeList4980);
            	    gopOutTypeParam308=gopOutTypeParam();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, gopOutTypeParam308.getTree());
            	    }
            	    break;
            	default :
            	    break loop113;
                }
            } while (true);
            GT309=(Token)match(input,GT,FOLLOW_GT_in_gopOutTypeList4984); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutTypeParam_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutTypeParam_return gopOutTypeParam() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutTypeParam_return retval = new EsperEPL2GrammarParser.gopOutTypeParam_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        EsperEPL2GrammarParser.gopOutTypeItem_return gopOutTypeItem310 = null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleSubtreeStream stream_gopOutTypeItem=new RewriteRuleSubtreeStream(adaptor,"rule gopOutTypeItem");
        try {
            {
            int alt114=2;
            int LA114_0 = input.LA(1);
            if ( (LA114_0==IDENT||LA114_0==TICKED_STRING_LITERAL) ) {
                alt114=1;
            }
            else if ( (LA114_0==QUESTION) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);
                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopOutTypeItem_in_gopOutTypeParam4998);
                    gopOutTypeItem310=gopOutTypeItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopOutTypeItem.add(gopOutTypeItem310.getTree());
                    }
                    break;
                case 2 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_gopOutTypeParam5004); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPOUTTYP, "GOPOUTTYP"), root_1);
                if ( stream_gopOutTypeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopOutTypeItem.nextTree());
                }
                stream_gopOutTypeItem.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutTypeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutTypeItem_return gopOutTypeItem() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutTypeItem_return retval = new EsperEPL2GrammarParser.gopOutTypeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier311 = null;
        EsperEPL2GrammarParser.gopOutTypeList_return gopOutTypeList312 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_classIdentifier_in_gopOutTypeItem5031);
            classIdentifier311=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier311.getTree());
            int alt115=2;
            int LA115_0 = input.LA(1);
            if ( (LA115_0==LT) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopOutTypeList_in_gopOutTypeItem5033);
                    gopOutTypeList312=gopOutTypeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gopOutTypeList312.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopDetail_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopDetail_return gopDetail() throws RecognitionException {
        EsperEPL2GrammarParser.gopDetail_return retval = new EsperEPL2GrammarParser.gopDetail_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA314=null;
        EsperEPL2GrammarParser.gopConfig_return gopConfig313 = null;
        EsperEPL2GrammarParser.gopConfig_return gopConfig315 = null;
        CommonTree COMMA314_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_gopConfig=new RewriteRuleSubtreeStream(adaptor,"rule gopConfig");
        try {
            {
            pushFollow(FOLLOW_gopConfig_in_gopDetail5045);
            gopConfig313=gopConfig();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopConfig.add(gopConfig313.getTree());
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);
                if ( (LA116_0==COMMA) ) {
                    int LA116_1 = input.LA(2);
                    if ( (LA116_1==SELECT||LA116_1==IDENT) ) {
                        alt116=1;
                    }
                }
                switch (alt116) {
            	case 1 :
            	    {
            	    COMMA314=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopDetail5048); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA314);
            	    pushFollow(FOLLOW_gopConfig_in_gopDetail5050);
            	    gopConfig315=gopConfig();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_gopConfig.add(gopConfig315.getTree());
            	    }
            	    break;
            	default :
            	    break loop116;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPCFG, "GOPCFG"), root_1);
                if ( !(stream_gopConfig.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_gopConfig.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopConfig.nextTree());
                }
                stream_gopConfig.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopConfig_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopConfig_return gopConfig() throws RecognitionException {
        EsperEPL2GrammarParser.gopConfig_return retval = new EsperEPL2GrammarParser.gopConfig_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token SELECT316=null;
        Token COLON317=null;
        Token EQUALS318=null;
        Token LPAREN319=null;
        Token RPAREN321=null;
        Token COLON322=null;
        Token EQUALS323=null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr320 = null;
        EsperEPL2GrammarParser.expression_return expression324 = null;
        EsperEPL2GrammarParser.jsonobject_return jsonobject325 = null;
        EsperEPL2GrammarParser.jsonarray_return jsonarray326 = null;
        CommonTree n_tree=null;
        CommonTree SELECT316_tree=null;
        CommonTree COLON317_tree=null;
        CommonTree EQUALS318_tree=null;
        CommonTree LPAREN319_tree=null;
        CommonTree RPAREN321_tree=null;
        CommonTree COLON322_tree=null;
        CommonTree EQUALS323_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_selectExpr=new RewriteRuleSubtreeStream(adaptor,"rule selectExpr");
        RewriteRuleSubtreeStream stream_jsonarray=new RewriteRuleSubtreeStream(adaptor,"rule jsonarray");
        RewriteRuleSubtreeStream stream_jsonobject=new RewriteRuleSubtreeStream(adaptor,"rule jsonobject");
        try {
            int alt120=2;
            int LA120_0 = input.LA(1);
            if ( (LA120_0==SELECT) ) {
                alt120=1;
            }
            else if ( (LA120_0==IDENT) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);
                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    {
                    SELECT316=(Token)match(input,SELECT,FOLLOW_SELECT_in_gopConfig5074); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT316);
                    int alt117=2;
                    int LA117_0 = input.LA(1);
                    if ( (LA117_0==COLON) ) {
                        alt117=1;
                    }
                    else if ( (LA117_0==EQUALS) ) {
                        alt117=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 117, 0, input);
                        throw nvae;
                    }
                    switch (alt117) {
                        case 1 :
                            {
                            COLON317=(Token)match(input,COLON,FOLLOW_COLON_in_gopConfig5077); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON317);
                            }
                            break;
                        case 2 :
                            {
                            EQUALS318=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_gopConfig5079); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS318);
                            }
                            break;
                    }
                    LPAREN319=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gopConfig5082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN319);
                    pushFollow(FOLLOW_selectExpr_in_gopConfig5084);
                    selectExpr320=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectExpr.add(selectExpr320.getTree());
                    RPAREN321=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gopConfig5086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN321);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPCFGEPL, "GOPCFGEPL"), root_1);
                        adaptor.addChild(root_1, stream_selectExpr.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    n=(Token)match(input,IDENT,FOLLOW_IDENT_in_gopConfig5103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(n);
                    int alt118=2;
                    int LA118_0 = input.LA(1);
                    if ( (LA118_0==COLON) ) {
                        alt118=1;
                    }
                    else if ( (LA118_0==EQUALS) ) {
                        alt118=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 118, 0, input);
                        throw nvae;
                    }
                    switch (alt118) {
                        case 1 :
                            {
                            COLON322=(Token)match(input,COLON,FOLLOW_COLON_in_gopConfig5106); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON322);
                            }
                            break;
                        case 2 :
                            {
                            EQUALS323=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_gopConfig5108); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS323);
                            }
                            break;
                    }
                    int alt119=3;
                    switch ( input.LA(1) ) {
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case FOR:
                    case WHILE:
                    case USING:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case QUESTION:
                    case PLUS:
                    case STRING_LITERAL:
                    case QUOTED_STRING_LITERAL:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt119=1;
                        }
                        break;
                    case LCURLY:
                        {
                        switch ( input.LA(2) ) {
                        case STRING_LITERAL:
                            {
                            int LA119_77 = input.LA(3);
                            if ( (LA119_77==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_77>=IN_SET && LA119_77<=REGEXP)||(LA119_77>=OR_EXPR && LA119_77<=NOT_EXPR)||LA119_77==IS||LA119_77==RCURLY||(LA119_77>=COMMA && LA119_77<=EQUALS)||LA119_77==STAR||(LA119_77>=LT && LA119_77<=GT)||(LA119_77>=BOR && LA119_77<=PLUS)||(LA119_77>=BAND && LA119_77<=MOD)) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 77, input);
                                throw nvae;
                            }
                            }
                            break;
                        case QUOTED_STRING_LITERAL:
                            {
                            int LA119_78 = input.LA(3);
                            if ( ((LA119_78>=IN_SET && LA119_78<=REGEXP)||(LA119_78>=OR_EXPR && LA119_78<=NOT_EXPR)||LA119_78==IS||LA119_78==RCURLY||(LA119_78>=COMMA && LA119_78<=EQUALS)||LA119_78==STAR||(LA119_78>=LT && LA119_78<=GT)||(LA119_78>=BOR && LA119_78<=PLUS)||(LA119_78>=BAND && LA119_78<=MOD)) ) {
                                alt119=1;
                            }
                            else if ( (LA119_78==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 78, input);
                                throw nvae;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA119_79 = input.LA(3);
                            if ( ((LA119_79>=IN_SET && LA119_79<=REGEXP)||(LA119_79>=OR_EXPR && LA119_79<=NOT_EXPR)||LA119_79==IS||LA119_79==LBRACK||LA119_79==LPAREN||LA119_79==RCURLY||(LA119_79>=COMMA && LA119_79<=STAR)||(LA119_79>=LT && LA119_79<=PLUS)||(LA119_79>=BAND && LA119_79<=MOD)||LA119_79==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_79==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 79, input);
                                throw nvae;
                            }
                            }
                            break;
                        case TICKED_STRING_LITERAL:
                            {
                            int LA119_80 = input.LA(3);
                            if ( (LA119_80==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_80>=IN_SET && LA119_80<=REGEXP)||(LA119_80>=OR_EXPR && LA119_80<=NOT_EXPR)||LA119_80==IS||LA119_80==LBRACK||LA119_80==LPAREN||LA119_80==RCURLY||(LA119_80>=COMMA && LA119_80<=STAR)||(LA119_80>=LT && LA119_80<=PLUS)||(LA119_80>=BAND && LA119_80<=MOD)||LA119_80==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 80, input);
                                throw nvae;
                            }
                            }
                            break;
                        case AT:
                            {
                            int LA119_81 = input.LA(3);
                            if ( ((LA119_81>=IN_SET && LA119_81<=REGEXP)||(LA119_81>=OR_EXPR && LA119_81<=NOT_EXPR)||LA119_81==IS||LA119_81==LBRACK||LA119_81==LPAREN||LA119_81==RCURLY||(LA119_81>=COMMA && LA119_81<=STAR)||(LA119_81>=LT && LA119_81<=PLUS)||(LA119_81>=BAND && LA119_81<=MOD)||LA119_81==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_81==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 81, input);
                                throw nvae;
                            }
                            }
                            break;
                        case COUNT:
                            {
                            int LA119_82 = input.LA(3);
                            if ( ((LA119_82>=IN_SET && LA119_82<=REGEXP)||(LA119_82>=OR_EXPR && LA119_82<=NOT_EXPR)||LA119_82==IS||LA119_82==LBRACK||LA119_82==LPAREN||LA119_82==RCURLY||(LA119_82>=COMMA && LA119_82<=STAR)||(LA119_82>=LT && LA119_82<=PLUS)||(LA119_82>=BAND && LA119_82<=MOD)||LA119_82==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_82==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 82, input);
                                throw nvae;
                            }
                            }
                            break;
                        case ESCAPE:
                            {
                            int LA119_83 = input.LA(3);
                            if ( ((LA119_83>=IN_SET && LA119_83<=REGEXP)||(LA119_83>=OR_EXPR && LA119_83<=NOT_EXPR)||LA119_83==IS||LA119_83==LBRACK||LA119_83==LPAREN||LA119_83==RCURLY||(LA119_83>=COMMA && LA119_83<=STAR)||(LA119_83>=LT && LA119_83<=PLUS)||(LA119_83>=BAND && LA119_83<=MOD)||LA119_83==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_83==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 83, input);
                                throw nvae;
                            }
                            }
                            break;
                        case EVERY_EXPR:
                            {
                            int LA119_84 = input.LA(3);
                            if ( (LA119_84==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_84>=IN_SET && LA119_84<=REGEXP)||(LA119_84>=OR_EXPR && LA119_84<=NOT_EXPR)||LA119_84==IS||LA119_84==LBRACK||LA119_84==LPAREN||LA119_84==RCURLY||(LA119_84>=COMMA && LA119_84<=STAR)||(LA119_84>=LT && LA119_84<=PLUS)||(LA119_84>=BAND && LA119_84<=MOD)||LA119_84==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 84, input);
                                throw nvae;
                            }
                            }
                            break;
                        case SUM:
                            {
                            int LA119_85 = input.LA(3);
                            if ( ((LA119_85>=IN_SET && LA119_85<=REGEXP)||(LA119_85>=OR_EXPR && LA119_85<=NOT_EXPR)||LA119_85==IS||LA119_85==LBRACK||LA119_85==LPAREN||LA119_85==RCURLY||(LA119_85>=COMMA && LA119_85<=STAR)||(LA119_85>=LT && LA119_85<=PLUS)||(LA119_85>=BAND && LA119_85<=MOD)||LA119_85==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_85==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 85, input);
                                throw nvae;
                            }
                            }
                            break;
                        case AVG:
                            {
                            int LA119_86 = input.LA(3);
                            if ( ((LA119_86>=IN_SET && LA119_86<=REGEXP)||(LA119_86>=OR_EXPR && LA119_86<=NOT_EXPR)||LA119_86==IS||LA119_86==LBRACK||LA119_86==LPAREN||LA119_86==RCURLY||(LA119_86>=COMMA && LA119_86<=STAR)||(LA119_86>=LT && LA119_86<=PLUS)||(LA119_86>=BAND && LA119_86<=MOD)||LA119_86==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_86==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 86, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MAX:
                            {
                            int LA119_87 = input.LA(3);
                            if ( ((LA119_87>=IN_SET && LA119_87<=REGEXP)||(LA119_87>=OR_EXPR && LA119_87<=NOT_EXPR)||LA119_87==IS||LA119_87==LBRACK||LA119_87==LPAREN||LA119_87==RCURLY||(LA119_87>=COMMA && LA119_87<=STAR)||(LA119_87>=LT && LA119_87<=PLUS)||(LA119_87>=BAND && LA119_87<=MOD)||LA119_87==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_87==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 87, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MIN:
                            {
                            int LA119_88 = input.LA(3);
                            if ( (LA119_88==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_88>=IN_SET && LA119_88<=REGEXP)||(LA119_88>=OR_EXPR && LA119_88<=NOT_EXPR)||LA119_88==IS||LA119_88==LBRACK||LA119_88==LPAREN||LA119_88==RCURLY||(LA119_88>=COMMA && LA119_88<=STAR)||(LA119_88>=LT && LA119_88<=PLUS)||(LA119_88>=BAND && LA119_88<=MOD)||LA119_88==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 88, input);
                                throw nvae;
                            }
                            }
                            break;
                        case COALESCE:
                            {
                            int LA119_89 = input.LA(3);
                            if ( ((LA119_89>=IN_SET && LA119_89<=REGEXP)||(LA119_89>=OR_EXPR && LA119_89<=NOT_EXPR)||LA119_89==IS||LA119_89==LBRACK||LA119_89==LPAREN||LA119_89==RCURLY||(LA119_89>=COMMA && LA119_89<=STAR)||(LA119_89>=LT && LA119_89<=PLUS)||(LA119_89>=BAND && LA119_89<=MOD)||LA119_89==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_89==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 89, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MEDIAN:
                            {
                            int LA119_90 = input.LA(3);
                            if ( ((LA119_90>=IN_SET && LA119_90<=REGEXP)||(LA119_90>=OR_EXPR && LA119_90<=NOT_EXPR)||LA119_90==IS||LA119_90==LBRACK||LA119_90==LPAREN||LA119_90==RCURLY||(LA119_90>=COMMA && LA119_90<=STAR)||(LA119_90>=LT && LA119_90<=PLUS)||(LA119_90>=BAND && LA119_90<=MOD)||LA119_90==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_90==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 90, input);
                                throw nvae;
                            }
                            }
                            break;
                        case STDDEV:
                            {
                            int LA119_91 = input.LA(3);
                            if ( ((LA119_91>=IN_SET && LA119_91<=REGEXP)||(LA119_91>=OR_EXPR && LA119_91<=NOT_EXPR)||LA119_91==IS||LA119_91==LBRACK||LA119_91==LPAREN||LA119_91==RCURLY||(LA119_91>=COMMA && LA119_91<=STAR)||(LA119_91>=LT && LA119_91<=PLUS)||(LA119_91>=BAND && LA119_91<=MOD)||LA119_91==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_91==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 91, input);
                                throw nvae;
                            }
                            }
                            break;
                        case AVEDEV:
                            {
                            int LA119_92 = input.LA(3);
                            if ( ((LA119_92>=IN_SET && LA119_92<=REGEXP)||(LA119_92>=OR_EXPR && LA119_92<=NOT_EXPR)||LA119_92==IS||LA119_92==LBRACK||LA119_92==LPAREN||LA119_92==RCURLY||(LA119_92>=COMMA && LA119_92<=STAR)||(LA119_92>=LT && LA119_92<=PLUS)||(LA119_92>=BAND && LA119_92<=MOD)||LA119_92==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_92==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 92, input);
                                throw nvae;
                            }
                            }
                            break;
                        case EVENTS:
                            {
                            int LA119_93 = input.LA(3);
                            if ( ((LA119_93>=IN_SET && LA119_93<=REGEXP)||(LA119_93>=OR_EXPR && LA119_93<=NOT_EXPR)||LA119_93==IS||LA119_93==LBRACK||LA119_93==LPAREN||LA119_93==RCURLY||(LA119_93>=COMMA && LA119_93<=STAR)||(LA119_93>=LT && LA119_93<=PLUS)||(LA119_93>=BAND && LA119_93<=MOD)||LA119_93==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_93==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 93, input);
                                throw nvae;
                            }
                            }
                            break;
                        case FIRST:
                            {
                            int LA119_94 = input.LA(3);
                            if ( ((LA119_94>=IN_SET && LA119_94<=REGEXP)||(LA119_94>=OR_EXPR && LA119_94<=NOT_EXPR)||LA119_94==IS||LA119_94==LBRACK||LA119_94==LPAREN||LA119_94==RCURLY||(LA119_94>=COMMA && LA119_94<=STAR)||(LA119_94>=LT && LA119_94<=PLUS)||(LA119_94>=BAND && LA119_94<=MOD)||LA119_94==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_94==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 94, input);
                                throw nvae;
                            }
                            }
                            break;
                        case LAST:
                            {
                            int LA119_95 = input.LA(3);
                            if ( ((LA119_95>=IN_SET && LA119_95<=REGEXP)||(LA119_95>=OR_EXPR && LA119_95<=NOT_EXPR)||LA119_95==IS||LA119_95==LBRACK||LA119_95==LPAREN||LA119_95==RCURLY||(LA119_95>=COMMA && LA119_95<=STAR)||(LA119_95>=LT && LA119_95<=PLUS)||(LA119_95>=BAND && LA119_95<=MOD)||LA119_95==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_95==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 95, input);
                                throw nvae;
                            }
                            }
                            break;
                        case WHILE:
                            {
                            int LA119_96 = input.LA(3);
                            if ( ((LA119_96>=IN_SET && LA119_96<=REGEXP)||(LA119_96>=OR_EXPR && LA119_96<=NOT_EXPR)||LA119_96==IS||LA119_96==LBRACK||LA119_96==LPAREN||LA119_96==RCURLY||(LA119_96>=COMMA && LA119_96<=STAR)||(LA119_96>=LT && LA119_96<=PLUS)||(LA119_96>=BAND && LA119_96<=MOD)||LA119_96==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_96==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 96, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MERGE:
                            {
                            int LA119_97 = input.LA(3);
                            if ( (LA119_97==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_97>=IN_SET && LA119_97<=REGEXP)||(LA119_97>=OR_EXPR && LA119_97<=NOT_EXPR)||LA119_97==IS||LA119_97==LBRACK||LA119_97==LPAREN||LA119_97==RCURLY||(LA119_97>=COMMA && LA119_97<=STAR)||(LA119_97>=LT && LA119_97<=PLUS)||(LA119_97>=BAND && LA119_97<=MOD)||LA119_97==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 97, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MATCHED:
                            {
                            int LA119_98 = input.LA(3);
                            if ( (LA119_98==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_98>=IN_SET && LA119_98<=REGEXP)||(LA119_98>=OR_EXPR && LA119_98<=NOT_EXPR)||LA119_98==IS||LA119_98==LBRACK||LA119_98==LPAREN||LA119_98==RCURLY||(LA119_98>=COMMA && LA119_98<=STAR)||(LA119_98>=LT && LA119_98<=PLUS)||(LA119_98>=BAND && LA119_98<=MOD)||LA119_98==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 98, input);
                                throw nvae;
                            }
                            }
                            break;
                        case UNIDIRECTIONAL:
                            {
                            int LA119_99 = input.LA(3);
                            if ( (LA119_99==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_99>=IN_SET && LA119_99<=REGEXP)||(LA119_99>=OR_EXPR && LA119_99<=NOT_EXPR)||LA119_99==IS||LA119_99==LBRACK||LA119_99==LPAREN||LA119_99==RCURLY||(LA119_99>=COMMA && LA119_99<=STAR)||(LA119_99>=LT && LA119_99<=PLUS)||(LA119_99>=BAND && LA119_99<=MOD)||LA119_99==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 99, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RETAINUNION:
                            {
                            int LA119_100 = input.LA(3);
                            if ( ((LA119_100>=IN_SET && LA119_100<=REGEXP)||(LA119_100>=OR_EXPR && LA119_100<=NOT_EXPR)||LA119_100==IS||LA119_100==LBRACK||LA119_100==LPAREN||LA119_100==RCURLY||(LA119_100>=COMMA && LA119_100<=STAR)||(LA119_100>=LT && LA119_100<=PLUS)||(LA119_100>=BAND && LA119_100<=MOD)||LA119_100==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_100==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 100, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RETAININTERSECTION:
                            {
                            int LA119_101 = input.LA(3);
                            if ( (LA119_101==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_101>=IN_SET && LA119_101<=REGEXP)||(LA119_101>=OR_EXPR && LA119_101<=NOT_EXPR)||LA119_101==IS||LA119_101==LBRACK||LA119_101==LPAREN||LA119_101==RCURLY||(LA119_101>=COMMA && LA119_101<=STAR)||(LA119_101>=LT && LA119_101<=PLUS)||(LA119_101>=BAND && LA119_101<=MOD)||LA119_101==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 101, input);
                                throw nvae;
                            }
                            }
                            break;
                        case UNTIL:
                            {
                            int LA119_102 = input.LA(3);
                            if ( (LA119_102==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_102>=IN_SET && LA119_102<=REGEXP)||(LA119_102>=OR_EXPR && LA119_102<=NOT_EXPR)||LA119_102==IS||LA119_102==LBRACK||LA119_102==LPAREN||LA119_102==RCURLY||(LA119_102>=COMMA && LA119_102<=STAR)||(LA119_102>=LT && LA119_102<=PLUS)||(LA119_102>=BAND && LA119_102<=MOD)||LA119_102==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 102, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PATTERN:
                            {
                            int LA119_103 = input.LA(3);
                            if ( (LA119_103==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_103>=IN_SET && LA119_103<=REGEXP)||(LA119_103>=OR_EXPR && LA119_103<=NOT_EXPR)||LA119_103==IS||LA119_103==LBRACK||LA119_103==LPAREN||LA119_103==RCURLY||(LA119_103>=COMMA && LA119_103<=STAR)||(LA119_103>=LT && LA119_103<=PLUS)||(LA119_103>=BAND && LA119_103<=MOD)||LA119_103==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 103, input);
                                throw nvae;
                            }
                            }
                            break;
                        case SQL:
                            {
                            int LA119_104 = input.LA(3);
                            if ( ((LA119_104>=IN_SET && LA119_104<=REGEXP)||(LA119_104>=OR_EXPR && LA119_104<=NOT_EXPR)||LA119_104==IS||LA119_104==LBRACK||LA119_104==LPAREN||LA119_104==RCURLY||(LA119_104>=COMMA && LA119_104<=STAR)||(LA119_104>=LT && LA119_104<=PLUS)||(LA119_104>=BAND && LA119_104<=MOD)||LA119_104==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_104==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 104, input);
                                throw nvae;
                            }
                            }
                            break;
                        case METADATASQL:
                            {
                            int LA119_105 = input.LA(3);
                            if ( (LA119_105==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_105>=IN_SET && LA119_105<=REGEXP)||(LA119_105>=OR_EXPR && LA119_105<=NOT_EXPR)||LA119_105==IS||LA119_105==LBRACK||LA119_105==LPAREN||LA119_105==RCURLY||(LA119_105>=COMMA && LA119_105<=STAR)||(LA119_105>=LT && LA119_105<=PLUS)||(LA119_105>=BAND && LA119_105<=MOD)||LA119_105==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 105, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PREVIOUS:
                            {
                            int LA119_106 = input.LA(3);
                            if ( ((LA119_106>=IN_SET && LA119_106<=REGEXP)||(LA119_106>=OR_EXPR && LA119_106<=NOT_EXPR)||LA119_106==IS||LA119_106==LBRACK||LA119_106==LPAREN||LA119_106==RCURLY||(LA119_106>=COMMA && LA119_106<=STAR)||(LA119_106>=LT && LA119_106<=PLUS)||(LA119_106>=BAND && LA119_106<=MOD)||LA119_106==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_106==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 106, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PREVIOUSTAIL:
                            {
                            int LA119_107 = input.LA(3);
                            if ( ((LA119_107>=IN_SET && LA119_107<=REGEXP)||(LA119_107>=OR_EXPR && LA119_107<=NOT_EXPR)||LA119_107==IS||LA119_107==LBRACK||LA119_107==LPAREN||LA119_107==RCURLY||(LA119_107>=COMMA && LA119_107<=STAR)||(LA119_107>=LT && LA119_107<=PLUS)||(LA119_107>=BAND && LA119_107<=MOD)||LA119_107==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_107==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 107, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PRIOR:
                            {
                            int LA119_108 = input.LA(3);
                            if ( ((LA119_108>=IN_SET && LA119_108<=REGEXP)||(LA119_108>=OR_EXPR && LA119_108<=NOT_EXPR)||LA119_108==IS||LA119_108==LBRACK||LA119_108==LPAREN||LA119_108==RCURLY||(LA119_108>=COMMA && LA119_108<=STAR)||(LA119_108>=LT && LA119_108<=PLUS)||(LA119_108>=BAND && LA119_108<=MOD)||LA119_108==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_108==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 108, input);
                                throw nvae;
                            }
                            }
                            break;
                        case WEEKDAY:
                            {
                            int LA119_109 = input.LA(3);
                            if ( (LA119_109==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_109>=IN_SET && LA119_109<=REGEXP)||(LA119_109>=OR_EXPR && LA119_109<=NOT_EXPR)||LA119_109==IS||LA119_109==LBRACK||LA119_109==LPAREN||LA119_109==RCURLY||(LA119_109>=COMMA && LA119_109<=STAR)||(LA119_109>=LT && LA119_109<=PLUS)||(LA119_109>=BAND && LA119_109<=MOD)||LA119_109==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 109, input);
                                throw nvae;
                            }
                            }
                            break;
                        case LW:
                            {
                            int LA119_110 = input.LA(3);
                            if ( (LA119_110==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_110>=IN_SET && LA119_110<=REGEXP)||(LA119_110>=OR_EXPR && LA119_110<=NOT_EXPR)||LA119_110==IS||LA119_110==LBRACK||LA119_110==LPAREN||LA119_110==RCURLY||(LA119_110>=COMMA && LA119_110<=STAR)||(LA119_110>=LT && LA119_110<=PLUS)||(LA119_110>=BAND && LA119_110<=MOD)||LA119_110==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 110, input);
                                throw nvae;
                            }
                            }
                            break;
                        case INSTANCEOF:
                            {
                            int LA119_111 = input.LA(3);
                            if ( ((LA119_111>=IN_SET && LA119_111<=REGEXP)||(LA119_111>=OR_EXPR && LA119_111<=NOT_EXPR)||LA119_111==IS||LA119_111==LBRACK||LA119_111==LPAREN||LA119_111==RCURLY||(LA119_111>=COMMA && LA119_111<=STAR)||(LA119_111>=LT && LA119_111<=PLUS)||(LA119_111>=BAND && LA119_111<=MOD)||LA119_111==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_111==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 111, input);
                                throw nvae;
                            }
                            }
                            break;
                        case TYPEOF:
                            {
                            int LA119_112 = input.LA(3);
                            if ( ((LA119_112>=IN_SET && LA119_112<=REGEXP)||(LA119_112>=OR_EXPR && LA119_112<=NOT_EXPR)||LA119_112==IS||LA119_112==LBRACK||LA119_112==LPAREN||LA119_112==RCURLY||(LA119_112>=COMMA && LA119_112<=STAR)||(LA119_112>=LT && LA119_112<=PLUS)||(LA119_112>=BAND && LA119_112<=MOD)||LA119_112==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_112==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 112, input);
                                throw nvae;
                            }
                            }
                            break;
                        case CAST:
                            {
                            int LA119_113 = input.LA(3);
                            if ( ((LA119_113>=IN_SET && LA119_113<=REGEXP)||(LA119_113>=OR_EXPR && LA119_113<=NOT_EXPR)||LA119_113==IS||LA119_113==LBRACK||LA119_113==LPAREN||LA119_113==RCURLY||(LA119_113>=COMMA && LA119_113<=STAR)||(LA119_113>=LT && LA119_113<=PLUS)||(LA119_113>=BAND && LA119_113<=MOD)||LA119_113==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_113==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 113, input);
                                throw nvae;
                            }
                            }
                            break;
                        case SNAPSHOT:
                            {
                            int LA119_114 = input.LA(3);
                            if ( (LA119_114==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_114>=IN_SET && LA119_114<=REGEXP)||(LA119_114>=OR_EXPR && LA119_114<=NOT_EXPR)||LA119_114==IS||LA119_114==LBRACK||LA119_114==LPAREN||LA119_114==RCURLY||(LA119_114>=COMMA && LA119_114<=STAR)||(LA119_114>=LT && LA119_114<=PLUS)||(LA119_114>=BAND && LA119_114<=MOD)||LA119_114==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 114, input);
                                throw nvae;
                            }
                            }
                            break;
                        case VARIABLE:
                            {
                            int LA119_115 = input.LA(3);
                            if ( ((LA119_115>=IN_SET && LA119_115<=REGEXP)||(LA119_115>=OR_EXPR && LA119_115<=NOT_EXPR)||LA119_115==IS||LA119_115==LBRACK||LA119_115==LPAREN||LA119_115==RCURLY||(LA119_115>=COMMA && LA119_115<=STAR)||(LA119_115>=LT && LA119_115<=PLUS)||(LA119_115>=BAND && LA119_115<=MOD)||LA119_115==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_115==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 115, input);
                                throw nvae;
                            }
                            }
                            break;
                        case INDEX:
                            {
                            int LA119_116 = input.LA(3);
                            if ( ((LA119_116>=IN_SET && LA119_116<=REGEXP)||(LA119_116>=OR_EXPR && LA119_116<=NOT_EXPR)||LA119_116==IS||LA119_116==LBRACK||LA119_116==LPAREN||LA119_116==RCURLY||(LA119_116>=COMMA && LA119_116<=STAR)||(LA119_116>=LT && LA119_116<=PLUS)||(LA119_116>=BAND && LA119_116<=MOD)||LA119_116==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_116==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 116, input);
                                throw nvae;
                            }
                            }
                            break;
                        case WINDOW:
                            {
                            int LA119_117 = input.LA(3);
                            if ( ((LA119_117>=IN_SET && LA119_117<=REGEXP)||(LA119_117>=OR_EXPR && LA119_117<=NOT_EXPR)||LA119_117==IS||LA119_117==LBRACK||LA119_117==LPAREN||LA119_117==RCURLY||(LA119_117>=COMMA && LA119_117<=STAR)||(LA119_117>=LT && LA119_117<=PLUS)||(LA119_117>=BAND && LA119_117<=MOD)||LA119_117==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_117==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 117, input);
                                throw nvae;
                            }
                            }
                            break;
                        case LEFT:
                            {
                            int LA119_118 = input.LA(3);
                            if ( (LA119_118==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_118>=IN_SET && LA119_118<=REGEXP)||(LA119_118>=OR_EXPR && LA119_118<=NOT_EXPR)||LA119_118==IS||LA119_118==LBRACK||LA119_118==LPAREN||LA119_118==RCURLY||(LA119_118>=COMMA && LA119_118<=STAR)||(LA119_118>=LT && LA119_118<=PLUS)||(LA119_118>=BAND && LA119_118<=MOD)||LA119_118==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 118, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RIGHT:
                            {
                            int LA119_119 = input.LA(3);
                            if ( ((LA119_119>=IN_SET && LA119_119<=REGEXP)||(LA119_119>=OR_EXPR && LA119_119<=NOT_EXPR)||LA119_119==IS||LA119_119==LBRACK||LA119_119==LPAREN||LA119_119==RCURLY||(LA119_119>=COMMA && LA119_119<=STAR)||(LA119_119>=LT && LA119_119<=PLUS)||(LA119_119>=BAND && LA119_119<=MOD)||LA119_119==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_119==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 119, input);
                                throw nvae;
                            }
                            }
                            break;
                        case OUTER:
                            {
                            int LA119_120 = input.LA(3);
                            if ( ((LA119_120>=IN_SET && LA119_120<=REGEXP)||(LA119_120>=OR_EXPR && LA119_120<=NOT_EXPR)||LA119_120==IS||LA119_120==LBRACK||LA119_120==LPAREN||LA119_120==RCURLY||(LA119_120>=COMMA && LA119_120<=STAR)||(LA119_120>=LT && LA119_120<=PLUS)||(LA119_120>=BAND && LA119_120<=MOD)||LA119_120==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_120==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 120, input);
                                throw nvae;
                            }
                            }
                            break;
                        case FULL:
                            {
                            int LA119_121 = input.LA(3);
                            if ( ((LA119_121>=IN_SET && LA119_121<=REGEXP)||(LA119_121>=OR_EXPR && LA119_121<=NOT_EXPR)||LA119_121==IS||LA119_121==LBRACK||LA119_121==LPAREN||LA119_121==RCURLY||(LA119_121>=COMMA && LA119_121<=STAR)||(LA119_121>=LT && LA119_121<=PLUS)||(LA119_121>=BAND && LA119_121<=MOD)||LA119_121==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_121==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 121, input);
                                throw nvae;
                            }
                            }
                            break;
                        case JOIN:
                            {
                            int LA119_122 = input.LA(3);
                            if ( (LA119_122==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_122>=IN_SET && LA119_122<=REGEXP)||(LA119_122>=OR_EXPR && LA119_122<=NOT_EXPR)||LA119_122==IS||LA119_122==LBRACK||LA119_122==LPAREN||LA119_122==RCURLY||(LA119_122>=COMMA && LA119_122<=STAR)||(LA119_122>=LT && LA119_122<=PLUS)||(LA119_122>=BAND && LA119_122<=MOD)||LA119_122==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 122, input);
                                throw nvae;
                            }
                            }
                            break;
                        case DEFINE:
                            {
                            int LA119_123 = input.LA(3);
                            if ( ((LA119_123>=IN_SET && LA119_123<=REGEXP)||(LA119_123>=OR_EXPR && LA119_123<=NOT_EXPR)||LA119_123==IS||LA119_123==LBRACK||LA119_123==LPAREN||LA119_123==RCURLY||(LA119_123>=COMMA && LA119_123<=STAR)||(LA119_123>=LT && LA119_123<=PLUS)||(LA119_123>=BAND && LA119_123<=MOD)||LA119_123==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_123==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 123, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PARTITION:
                            {
                            int LA119_124 = input.LA(3);
                            if ( ((LA119_124>=IN_SET && LA119_124<=REGEXP)||(LA119_124>=OR_EXPR && LA119_124<=NOT_EXPR)||LA119_124==IS||LA119_124==LBRACK||LA119_124==LPAREN||LA119_124==RCURLY||(LA119_124>=COMMA && LA119_124<=STAR)||(LA119_124>=LT && LA119_124<=PLUS)||(LA119_124>=BAND && LA119_124<=MOD)||LA119_124==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_124==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 124, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MATCHES:
                            {
                            int LA119_125 = input.LA(3);
                            if ( ((LA119_125>=IN_SET && LA119_125<=REGEXP)||(LA119_125>=OR_EXPR && LA119_125<=NOT_EXPR)||LA119_125==IS||LA119_125==LBRACK||LA119_125==LPAREN||LA119_125==RCURLY||(LA119_125>=COMMA && LA119_125<=STAR)||(LA119_125>=LT && LA119_125<=PLUS)||(LA119_125>=BAND && LA119_125<=MOD)||LA119_125==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_125==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 125, input);
                                throw nvae;
                            }
                            }
                            break;
                        case CONTEXT:
                            {
                            int LA119_126 = input.LA(3);
                            if ( (LA119_126==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_126>=IN_SET && LA119_126<=REGEXP)||(LA119_126>=OR_EXPR && LA119_126<=NOT_EXPR)||LA119_126==IS||LA119_126==LBRACK||LA119_126==LPAREN||LA119_126==RCURLY||(LA119_126>=COMMA && LA119_126<=STAR)||(LA119_126>=LT && LA119_126<=PLUS)||(LA119_126>=BAND && LA119_126<=MOD)||LA119_126==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 126, input);
                                throw nvae;
                            }
                            }
                            break;
                        case FOR:
                            {
                            int LA119_127 = input.LA(3);
                            if ( ((LA119_127>=IN_SET && LA119_127<=REGEXP)||(LA119_127>=OR_EXPR && LA119_127<=NOT_EXPR)||LA119_127==IS||LA119_127==LBRACK||LA119_127==LPAREN||LA119_127==RCURLY||(LA119_127>=COMMA && LA119_127<=STAR)||(LA119_127>=LT && LA119_127<=PLUS)||(LA119_127>=BAND && LA119_127<=MOD)||LA119_127==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else if ( (LA119_127==COLON) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 127, input);
                                throw nvae;
                            }
                            }
                            break;
                        case USING:
                            {
                            int LA119_128 = input.LA(3);
                            if ( (LA119_128==COLON) ) {
                                alt119=2;
                            }
                            else if ( ((LA119_128>=IN_SET && LA119_128<=REGEXP)||(LA119_128>=OR_EXPR && LA119_128<=NOT_EXPR)||LA119_128==IS||LA119_128==LBRACK||LA119_128==LPAREN||LA119_128==RCURLY||(LA119_128>=COMMA && LA119_128<=STAR)||(LA119_128>=LT && LA119_128<=PLUS)||(LA119_128>=BAND && LA119_128<=MOD)||LA119_128==ESCAPECHAR) ) {
                                alt119=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 128, input);
                                throw nvae;
                            }
                            }
                            break;
                        case BETWEEN:
                        case NOT_EXPR:
                        case WHERE:
                        case CASE:
                        case PREVIOUSCOUNT:
                        case PREVIOUSWINDOW:
                        case EXISTS:
                        case CURRENT_TIMESTAMP:
                        case SET:
                        case BOOLEAN_TRUE:
                        case BOOLEAN_FALSE:
                        case VALUE_NULL:
                        case AFTER:
                        case NEWKW:
                        case NUM_DOUBLE:
                        case LPAREN:
                        case LCURLY:
                        case RCURLY:
                        case QUESTION:
                        case PLUS:
                        case MINUS:
                        case NUM_INT:
                        case NUM_LONG:
                        case NUM_FLOAT:
                            {
                            alt119=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 119, 73, input);
                            throw nvae;
                        }
                        }
                        break;
                    case LBRACK:
                        {
                        alt119=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 119, 0, input);
                        throw nvae;
                    }
                    switch (alt119) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expression_in_gopConfig5112);
                            expression324=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression324.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_jsonobject_in_gopConfig5116);
                            jsonobject325=jsonobject();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_jsonobject.add(jsonobject325.getTree());
                            }
                            break;
                        case 3 :
                            {
                            pushFollow(FOLLOW_jsonarray_in_gopConfig5120);
                            jsonarray326=jsonarray();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_jsonarray.add(jsonarray326.getTree());
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPCFGITM, "GOPCFGITM"), root_1);
                        adaptor.addChild(root_1, stream_n.nextNode());
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        if ( stream_jsonobject.hasNext() ) {
                            adaptor.addChild(root_1, stream_jsonobject.nextTree());
                        }
                        stream_jsonobject.reset();
                        if ( stream_jsonarray.hasNext() ) {
                            adaptor.addChild(root_1, stream_jsonarray.nextTree());
                        }
                        stream_jsonarray.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamFilterExpression_return streamFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamFilterExpression_return retval = new EsperEPL2GrammarParser.streamFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT327=null;
        Token DOT328=null;
        Token DOT330=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression329 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression331 = null;
        CommonTree IDENT327_tree=null;
        CommonTree DOT328_tree=null;
        CommonTree DOT330_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT327=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamFilterExpression5153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT327_tree = (CommonTree)adaptor.create(IDENT327);
            adaptor.addChild(root_0, IDENT327_tree);
            }
            int alt122=2;
            int LA122_0 = input.LA(1);
            if ( (LA122_0==DOT) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    {
                    DOT328=(Token)match(input,DOT,FOLLOW_DOT_in_streamFilterExpression5156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT328_tree = (CommonTree)adaptor.create(DOT328);
                    adaptor.addChild(root_0, DOT328_tree);
                    }
                    pushFollow(FOLLOW_viewExpression_in_streamFilterExpression5158);
                    viewExpression329=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, viewExpression329.getTree());
                    loop121:
                    do {
                        int alt121=2;
                        int LA121_0 = input.LA(1);
                        if ( (LA121_0==DOT) ) {
                            alt121=1;
                        }
                        switch (alt121) {
                    	case 1 :
                    	    {
                    	    DOT330=(Token)match(input,DOT,FOLLOW_DOT_in_streamFilterExpression5161); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT330_tree = (CommonTree)adaptor.create(DOT330);
                    	    adaptor.addChild(root_0, DOT330_tree);
                    	    }
                    	    pushFollow(FOLLOW_viewExpression_in_streamFilterExpression5163);
                    	    viewExpression331=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, viewExpression331.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop121;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextExpr_return createContextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createContextExpr_return retval = new EsperEPL2GrammarParser.createContextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CREATE332=null;
        Token CONTEXT333=null;
        Token AS334=null;
        EsperEPL2GrammarParser.createContextDetail_return createContextDetail335 = null;
        CommonTree name_tree=null;
        CommonTree CREATE332_tree=null;
        CommonTree CONTEXT333_tree=null;
        CommonTree AS334_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        RewriteRuleSubtreeStream stream_createContextDetail=new RewriteRuleSubtreeStream(adaptor,"rule createContextDetail");
        try {
            {
            CREATE332=(Token)match(input,CREATE,FOLLOW_CREATE_in_createContextExpr5179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE332);
            CONTEXT333=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_createContextExpr5181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT333);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextExpr5185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt123=2;
            int LA123_0 = input.LA(1);
            if ( (LA123_0==AS) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    {
                    AS334=(Token)match(input,AS,FOLLOW_AS_in_createContextExpr5187); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS334);
                    }
                    break;
            }
            pushFollow(FOLLOW_createContextDetail_in_createContextExpr5190);
            createContextDetail335=createContextDetail();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createContextDetail.add(createContextDetail335.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX, "CREATE_CTX"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_createContextDetail.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextDetail_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextDetail_return createContextDetail() throws RecognitionException {
        EsperEPL2GrammarParser.createContextDetail_return retval = new EsperEPL2GrammarParser.createContextDetail_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA338=null;
        Token COMMA340=null;
        EsperEPL2GrammarParser.createContextChoice_return createContextChoice336 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested337 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested339 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested341 = null;
        CommonTree COMMA338_tree=null;
        CommonTree COMMA340_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_contextContextNested=new RewriteRuleSubtreeStream(adaptor,"rule contextContextNested");
        try {
            int alt125=2;
            int LA125_0 = input.LA(1);
            if ( (LA125_0==COALESCE||LA125_0==GROUP||LA125_0==PARTITION||LA125_0==START||LA125_0==INITIATED) ) {
                alt125=1;
            }
            else if ( (LA125_0==CONTEXT) ) {
                alt125=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);
                throw nvae;
            }
            switch (alt125) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createContextChoice_in_createContextDetail5214);
                    createContextChoice336=createContextChoice();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextChoice336.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_contextContextNested_in_createContextDetail5219);
                    contextContextNested337=contextContextNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested337.getTree());
                    COMMA338=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail5221); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA338);
                    pushFollow(FOLLOW_contextContextNested_in_createContextDetail5223);
                    contextContextNested339=contextContextNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested339.getTree());
                    loop124:
                    do {
                        int alt124=2;
                        int LA124_0 = input.LA(1);
                        if ( (LA124_0==COMMA) ) {
                            alt124=1;
                        }
                        switch (alt124) {
                    	case 1 :
                    	    {
                    	    COMMA340=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail5226); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA340);
                    	    pushFollow(FOLLOW_contextContextNested_in_createContextDetail5228);
                    	    contextContextNested341=contextContextNested();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested341.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop124;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_NESTED, "CREATE_CTX_NESTED"), root_1);
                        if ( !(stream_contextContextNested.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_contextContextNested.hasNext() ) {
                            adaptor.addChild(root_1, stream_contextContextNested.nextTree());
                        }
                        stream_contextContextNested.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class contextContextNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.contextContextNested_return contextContextNested() throws RecognitionException {
        EsperEPL2GrammarParser.contextContextNested_return retval = new EsperEPL2GrammarParser.contextContextNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CONTEXT342=null;
        Token AS343=null;
        EsperEPL2GrammarParser.createContextChoice_return createContextChoice344 = null;
        CommonTree name_tree=null;
        CommonTree CONTEXT342_tree=null;
        CommonTree AS343_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        RewriteRuleSubtreeStream stream_createContextChoice=new RewriteRuleSubtreeStream(adaptor,"rule createContextChoice");
        try {
            {
            CONTEXT342=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextContextNested5254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT342);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_contextContextNested5258); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt126=2;
            int LA126_0 = input.LA(1);
            if ( (LA126_0==AS) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    {
                    AS343=(Token)match(input,AS,FOLLOW_AS_in_contextContextNested5260); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS343);
                    }
                    break;
            }
            pushFollow(FOLLOW_createContextChoice_in_contextContextNested5263);
            createContextChoice344=createContextChoice();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createContextChoice.add(createContextChoice344.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX, "CREATE_CTX"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_createContextChoice.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextChoice_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextChoice_return createContextChoice() throws RecognitionException {
        EsperEPL2GrammarParser.createContextChoice_return retval = new EsperEPL2GrammarParser.createContextChoice_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token g=null;
        Token p=null;
        Token START345=null;
        Token END347=null;
        Token INITIATED349=null;
        Token BY350=null;
        Token TERMINATED352=null;
        Token BY353=null;
        Token PARTITION355=null;
        Token BY356=null;
        Token COMMA358=null;
        Token COMMA361=null;
        Token FROM363=null;
        Token COALESCE365=null;
        Token BY366=null;
        Token COMMA368=null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint346 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint348 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint351 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint354 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem357 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem359 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem360 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem362 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression364 = null;
        EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem367 = null;
        EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem369 = null;
        EsperEPL2GrammarParser.number_return number370 = null;
        CommonTree g_tree=null;
        CommonTree p_tree=null;
        CommonTree START345_tree=null;
        CommonTree END347_tree=null;
        CommonTree INITIATED349_tree=null;
        CommonTree BY350_tree=null;
        CommonTree TERMINATED352_tree=null;
        CommonTree BY353_tree=null;
        CommonTree PARTITION355_tree=null;
        CommonTree BY356_tree=null;
        CommonTree COMMA358_tree=null;
        CommonTree COMMA361_tree=null;
        CommonTree FROM363_tree=null;
        CommonTree COALESCE365_tree=null;
        CommonTree BY366_tree=null;
        CommonTree COMMA368_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INITIATED=new RewriteRuleTokenStream(adaptor,"token INITIATED");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_START=new RewriteRuleTokenStream(adaptor,"token START");
        RewriteRuleTokenStream stream_COALESCE=new RewriteRuleTokenStream(adaptor,"token COALESCE");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_createContextRangePoint=new RewriteRuleSubtreeStream(adaptor,"rule createContextRangePoint");
        RewriteRuleSubtreeStream stream_createContextPartitionItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextPartitionItem");
        RewriteRuleSubtreeStream stream_createContextCoalesceItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextCoalesceItem");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_createContextGroupItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextGroupItem");
        try {
            int alt135=5;
            switch ( input.LA(1) ) {
            case START:
                {
                alt135=1;
                }
                break;
            case INITIATED:
                {
                alt135=2;
                }
                break;
            case PARTITION:
                {
                alt135=3;
                }
                break;
            case GROUP:
                {
                alt135=4;
                }
                break;
            case COALESCE:
                {
                alt135=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);
                throw nvae;
            }
            switch (alt135) {
                case 1 :
                    {
                    START345=(Token)match(input,START,FOLLOW_START_in_createContextChoice5288); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_START.add(START345);
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5290);
                    createContextRangePoint346=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint346.getTree());
                    END347=(Token)match(input,END,FOLLOW_END_in_createContextChoice5292); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END347);
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5294);
                    createContextRangePoint348=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint348.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_FIXED, "CREATE_CTX_FIXED"), root_1);
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    INITIATED349=(Token)match(input,INITIATED,FOLLOW_INITIATED_in_createContextChoice5311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INITIATED.add(INITIATED349);
                    int alt127=2;
                    int LA127_0 = input.LA(1);
                    if ( (LA127_0==BY) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            {
                            BY350=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5314); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY350);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5318);
                    createContextRangePoint351=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint351.getTree());
                    TERMINATED352=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_createContextChoice5320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED352);
                    int alt128=2;
                    int LA128_0 = input.LA(1);
                    if ( (LA128_0==BY) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            {
                            BY353=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5323); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY353);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5327);
                    createContextRangePoint354=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint354.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_INIT, "CREATE_CTX_INIT"), root_1);
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    PARTITION355=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_createContextChoice5344); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION355);
                    int alt129=2;
                    int LA129_0 = input.LA(1);
                    if ( (LA129_0==BY) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            {
                            BY356=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5347); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY356);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextPartitionItem_in_createContextChoice5351);
                    createContextPartitionItem357=createContextPartitionItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem357.getTree());
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);
                        if ( (LA130_0==COMMA) ) {
                            int LA130_3 = input.LA(2);
                            if ( (LA130_3==WINDOW||LA130_3==ESCAPE||LA130_3==EVERY_EXPR||(LA130_3>=SUM && LA130_3<=COUNT)||LA130_3==OUTER||(LA130_3>=JOIN && LA130_3<=FULL)||(LA130_3>=EVENTS && LA130_3<=LAST)||(LA130_3>=UNIDIRECTIONAL && LA130_3<=PREVIOUSTAIL)||LA130_3==PRIOR||(LA130_3>=WEEKDAY && LA130_3<=CAST)||LA130_3==SNAPSHOT||(LA130_3>=VARIABLE && LA130_3<=INDEX)||(LA130_3>=DEFINE && LA130_3<=MATCHES)||(LA130_3>=FOR && LA130_3<=MATCHED)||LA130_3==IDENT||LA130_3==TICKED_STRING_LITERAL) ) {
                                alt130=1;
                            }
                            else if ( (LA130_3==CONTEXT) ) {
                                int LA130_51 = input.LA(3);
                                if ( (LA130_51==AND_EXPR||LA130_51==FROM||LA130_51==LBRACK||LA130_51==LPAREN||LA130_51==COMMA||LA130_51==DOT||LA130_51==QUESTION||LA130_51==ESCAPECHAR) ) {
                                    alt130=1;
                                }
                            }
                        }
                        switch (alt130) {
                    	case 1 :
                    	    {
                    	    COMMA358=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice5354); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA358);
                    	    pushFollow(FOLLOW_createContextPartitionItem_in_createContextChoice5356);
                    	    createContextPartitionItem359=createContextPartitionItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem359.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop130;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_PART, "CREATE_CTX_PART"), root_1);
                        if ( !(stream_createContextPartitionItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextPartitionItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextPartitionItem.nextTree());
                        }
                        stream_createContextPartitionItem.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createContextGroupItem_in_createContextChoice5375);
                    createContextGroupItem360=createContextGroupItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem360.getTree());
                    loop131:
                    do {
                        int alt131=2;
                        int LA131_0 = input.LA(1);
                        if ( (LA131_0==COMMA) ) {
                            alt131=1;
                        }
                        switch (alt131) {
                    	case 1 :
                    	    {
                    	    COMMA361=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice5378); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA361);
                    	    pushFollow(FOLLOW_createContextGroupItem_in_createContextChoice5380);
                    	    createContextGroupItem362=createContextGroupItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem362.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop131;
                        }
                    } while (true);
                    FROM363=(Token)match(input,FROM,FOLLOW_FROM_in_createContextChoice5384); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM363);
                    pushFollow(FOLLOW_eventFilterExpression_in_createContextChoice5386);
                    eventFilterExpression364=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression364.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CAT, "CREATE_CTX_CAT"), root_1);
                        if ( !(stream_createContextGroupItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextGroupItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextGroupItem.nextTree());
                        }
                        stream_createContextGroupItem.reset();
                        adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    COALESCE365=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_createContextChoice5404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COALESCE.add(COALESCE365);
                    int alt132=2;
                    int LA132_0 = input.LA(1);
                    if ( (LA132_0==BY) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            {
                            BY366=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5407); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY366);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextCoalesceItem_in_createContextChoice5411);
                    createContextCoalesceItem367=createContextCoalesceItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextCoalesceItem.add(createContextCoalesceItem367.getTree());
                    loop133:
                    do {
                        int alt133=2;
                        int LA133_0 = input.LA(1);
                        if ( (LA133_0==COMMA) ) {
                            alt133=1;
                        }
                        switch (alt133) {
                    	case 1 :
                    	    {
                    	    COMMA368=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice5414); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA368);
                    	    pushFollow(FOLLOW_createContextCoalesceItem_in_createContextChoice5416);
                    	    createContextCoalesceItem369=createContextCoalesceItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextCoalesceItem.add(createContextCoalesceItem369.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop133;
                        }
                    } while (true);
                    g=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice5422); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(g);
                    pushFollow(FOLLOW_number_in_createContextChoice5424);
                    number370=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number370.getTree());
                    int alt134=2;
                    int LA134_0 = input.LA(1);
                    if ( (LA134_0==IDENT) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            {
                            p=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice5429); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(p);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_COAL, "CREATE_CTX_COAL"), root_1);
                        if ( !(stream_createContextCoalesceItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextCoalesceItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextCoalesceItem.nextTree());
                        }
                        stream_createContextCoalesceItem.reset();
                        adaptor.addChild(root_1, stream_g.nextNode());
                        adaptor.addChild(root_1, stream_number.nextTree());
                        if ( stream_p.hasNext() ) {
                            adaptor.addChild(root_1, stream_p.nextNode());
                        }
                        stream_p.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextRangePoint_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint() throws RecognitionException {
        EsperEPL2GrammarParser.createContextRangePoint_return retval = new EsperEPL2GrammarParser.createContextRangePoint_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR373=null;
        Token AFTER375=null;
        EsperEPL2GrammarParser.createContextFilter_return createContextFilter371 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression372 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet374 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod376 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR373_tree=null;
        CommonTree AFTER375_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            int alt137=4;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt137=1;
                }
                break;
            case PATTERN:
                {
                alt137=2;
                }
                break;
            case LPAREN:
                {
                alt137=3;
                }
                break;
            case AFTER:
                {
                alt137=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);
                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createContextFilter_in_createContextRangePoint5463);
                    createContextFilter371=createContextFilter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextFilter371.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_createContextRangePoint5470);
                    patternInclusionExpression372=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression372.getTree());
                    int alt136=2;
                    int LA136_0 = input.LA(1);
                    if ( (LA136_0==ATCHAR) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            {
                            ATCHAR373=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_createContextRangePoint5473); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR373);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextRangePoint5477); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_PATTERN, "CREATE_CTX_PATTERN"), root_1);
                        adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_createContextRangePoint5496);
                    crontabLimitParameterSet374=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, crontabLimitParameterSet374.getTree());
                    }
                    break;
                case 4 :
                    {
                    AFTER375=(Token)match(input,AFTER,FOLLOW_AFTER_in_createContextRangePoint5501); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(AFTER375);
                    pushFollow(FOLLOW_timePeriod_in_createContextRangePoint5503);
                    timePeriod376=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod376.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_timePeriod.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextFilter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextFilter_return createContextFilter() throws RecognitionException {
        EsperEPL2GrammarParser.createContextFilter_return retval = new EsperEPL2GrammarParser.createContextFilter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS378=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression377 = null;
        CommonTree i_tree=null;
        CommonTree AS378_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_createContextFilter5523);
            eventFilterExpression377=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression377.getTree());
            int alt139=2;
            int LA139_0 = input.LA(1);
            if ( (LA139_0==AS||LA139_0==IDENT) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    {
                    int alt138=2;
                    int LA138_0 = input.LA(1);
                    if ( (LA138_0==AS) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            {
                            AS378=(Token)match(input,AS,FOLLOW_AS_in_createContextFilter5526); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS378);
                            }
                            break;
                    }
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextFilter5531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextPartitionItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextPartitionItem_return retval = new EsperEPL2GrammarParser.createContextPartitionItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR380=null;
        Token COMMA381=null;
        Token FROM383=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty379 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty382 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression384 = null;
        CommonTree AND_EXPR380_tree=null;
        CommonTree COMMA381_tree=null;
        CommonTree FROM383_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem5558);
            eventProperty379=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty379.getTree());
            loop141:
            do {
                int alt141=2;
                int LA141_0 = input.LA(1);
                if ( (LA141_0==AND_EXPR||LA141_0==COMMA) ) {
                    alt141=1;
                }
                switch (alt141) {
            	case 1 :
            	    {
            	    int alt140=2;
            	    int LA140_0 = input.LA(1);
            	    if ( (LA140_0==AND_EXPR) ) {
            	        alt140=1;
            	    }
            	    else if ( (LA140_0==COMMA) ) {
            	        alt140=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 140, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt140) {
            	        case 1 :
            	            {
            	            AND_EXPR380=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_createContextPartitionItem5562); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR380);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            COMMA381=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextPartitionItem5564); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_COMMA.add(COMMA381);
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem5567);
            	    eventProperty382=eventProperty();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty382.getTree());
            	    }
            	    break;
            	default :
            	    break loop141;
                }
            } while (true);
            FROM383=(Token)match(input,FROM,FOLLOW_FROM_in_createContextPartitionItem5571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM383);
            pushFollow(FOLLOW_eventFilterExpression_in_createContextPartitionItem5573);
            eventFilterExpression384=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression384.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_eventProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventProperty.nextTree());
                }
                stream_eventProperty.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextCoalesceItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextCoalesceItem_return retval = new EsperEPL2GrammarParser.createContextCoalesceItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FROM386=null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass385 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression387 = null;
        CommonTree FROM386_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionNoClass_in_createContextCoalesceItem5599);
            libFunctionNoClass385=libFunctionNoClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass385.getTree());
            FROM386=(Token)match(input,FROM,FOLLOW_FROM_in_createContextCoalesceItem5601); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM386);
            pushFollow(FOLLOW_eventFilterExpression_in_createContextCoalesceItem5603);
            eventFilterExpression387=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression387.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COALESCE, "COALESCE"), root_1);
                adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextGroupItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextGroupItem_return retval = new EsperEPL2GrammarParser.createContextGroupItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token GROUP388=null;
        Token BY389=null;
        Token AS391=null;
        EsperEPL2GrammarParser.expression_return expression390 = null;
        CommonTree i_tree=null;
        CommonTree GROUP388_tree=null;
        CommonTree BY389_tree=null;
        CommonTree AS391_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            GROUP388=(Token)match(input,GROUP,FOLLOW_GROUP_in_createContextGroupItem5627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GROUP.add(GROUP388);
            int alt142=2;
            int LA142_0 = input.LA(1);
            if ( (LA142_0==BY) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    {
                    BY389=(Token)match(input,BY,FOLLOW_BY_in_createContextGroupItem5629); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY389);
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_createContextGroupItem5632);
            expression390=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression390.getTree());
            AS391=(Token)match(input,AS,FOLLOW_AS_in_createContextGroupItem5634); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS391);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextGroupItem5638); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CATITEM, "CREATE_CTX_CATITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaQual_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaQual_return retval = new EsperEPL2GrammarParser.createSchemaQual_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.columnList_return columnList392 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaQual5668); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_columnList_in_createSchemaQual5670);
            columnList392=columnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList392.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA394=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement393 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement395 = null;
        CommonTree COMMA394_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList5696);
            variantListElement393=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement393.getTree());
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);
                if ( (LA143_0==COMMA) ) {
                    int LA143_4 = input.LA(2);
                    if ( (LA143_4==STAR||LA143_4==TICKED_STRING_LITERAL) ) {
                        alt143=1;
                    }
                    else if ( (LA143_4==IDENT) ) {
                        int LA143_6 = input.LA(3);
                        if ( (LA143_6==EOF||LA143_6==FOR||LA143_6==IDENT||LA143_6==COMMA||LA143_6==DOT) ) {
                            alt143=1;
                        }
                    }
                }
                switch (alt143) {
            	case 1 :
            	    {
            	    COMMA394=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList5699); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA394);
            	    pushFollow(FOLLOW_variantListElement_in_variantList5701);
            	    variantListElement395=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement395.getTree());
            	    }
            	    break;
            	default :
            	    break loop143;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR396=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier397 = null;
        CommonTree STAR396_tree=null;
        try {
            int alt144=2;
            int LA144_0 = input.LA(1);
            if ( (LA144_0==STAR) ) {
                alt144=1;
            }
            else if ( (LA144_0==IDENT||LA144_0==TICKED_STRING_LITERAL) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);
                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR396=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement5728); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR396_tree = (CommonTree)adaptor.create(STAR396);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR396_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement5734);
                    classIdentifier397=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier397.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token INTO398=null;
        Token LPAREN400=null;
        Token RPAREN402=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier399 = null;
        EsperEPL2GrammarParser.columnList_return columnList401 = null;
        CommonTree s_tree=null;
        CommonTree INTO398_tree=null;
        CommonTree LPAREN400_tree=null;
        CommonTree RPAREN402_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt145=3;
            int LA145_0 = input.LA(1);
            if ( (LA145_0==ISTREAM) ) {
                alt145=1;
            }
            else if ( (LA145_0==RSTREAM) ) {
                alt145=2;
            }
            switch (alt145) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr5759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr5765); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO398=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr5769); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO398);
            pushFollow(FOLLOW_classIdentifier_in_insertIntoExpr5771);
            classIdentifier399=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier399.getTree());
            int alt146=2;
            int LA146_0 = input.LA(1);
            if ( (LA146_0==LPAREN) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    {
                    LPAREN400=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr5774); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN400);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr5776);
                    columnList401=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList401.getTree());
                    RPAREN402=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr5778); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN402);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT403=null;
        Token COMMA404=null;
        Token IDENT405=null;
        CommonTree IDENT403_tree=null;
        CommonTree COMMA404_tree=null;
        CommonTree IDENT405_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT403=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList5811); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT403);
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);
                if ( (LA147_0==COMMA) ) {
                    int LA147_4 = input.LA(2);
                    if ( (LA147_4==IDENT) ) {
                        int LA147_6 = input.LA(3);
                        if ( (LA147_6==EOF||LA147_6==FOR||LA147_6==IDENT||LA147_6==RPAREN||LA147_6==COMMA) ) {
                            alt147=1;
                        }
                    }
                }
                switch (alt147) {
            	case 1 :
            	    {
            	    COMMA404=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList5814); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA404);
            	    IDENT405=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList5816); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT405);
            	    }
            	    break;
            	default :
            	    break loop147;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression406 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin407 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList408 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause5854);
            streamExpression406=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression406.getTree());
            int alt148=2;
            int LA148_0 = input.LA(1);
            if ( (LA148_0==EOF||LA148_0==WHERE||(LA148_0>=GROUP && LA148_0<=HAVING)||LA148_0==OUTPUT||LA148_0==ORDER||LA148_0==ROW_LIMIT_EXPR||LA148_0==MATCH_RECOGNIZE||LA148_0==FOR||LA148_0==RPAREN||LA148_0==COMMA) ) {
                alt148=1;
            }
            else if ( ((LA148_0>=INNER && LA148_0<=FULL)) ) {
                alt148=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);
                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause5857);
                    regularJoin407=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin407.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause5861);
                    outerJoinList408=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList408.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA409=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression410 = null;
        CommonTree COMMA409_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);
                if ( (LA149_0==COMMA) ) {
                    alt149=1;
                }
                switch (alt149) {
            	case 1 :
            	    {
            	    COMMA409=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin5875); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin5878);
            	    streamExpression410=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression410.getTree());
            	    }
            	    break;
            	default :
            	    break loop149;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin411 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin412 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList5892);
            outerJoin411=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin411.getTree());
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);
                if ( ((LA150_0>=INNER && LA150_0<=FULL)) ) {
                    alt150=1;
                }
                switch (alt150) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList5895);
            	    outerJoin412=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin412.getTree());
            	    }
            	    break;
            	default :
            	    break loop150;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER413=null;
        Token JOIN414=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression415 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent416 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER413_tree=null;
        CommonTree JOIN414_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt153=2;
            int LA153_0 = input.LA(1);
            if ( ((LA153_0>=JOIN && LA153_0<=FULL)) ) {
                alt153=1;
            }
            else if ( (LA153_0==INNER) ) {
                alt153=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);
                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    {
                    int alt152=2;
                    int LA152_0 = input.LA(1);
                    if ( ((LA152_0>=LEFT && LA152_0<=FULL)) ) {
                        alt152=1;
                    }
                    switch (alt152) {
                        case 1 :
                            {
                            int alt151=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt151=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt151=2;
                                }
                                break;
                            case FULL:
                                {
                                alt151=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 151, 0, input);
                                throw nvae;
                            }
                            switch (alt151) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin5938); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin5942); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin5946); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER413=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin5949); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER413);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin5970); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN414=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin5984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN414);
            pushFollow(FOLLOW_streamExpression_in_outerJoin5986);
            streamExpression415=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression415.getTree());
            int alt154=2;
            int LA154_0 = input.LA(1);
            if ( (LA154_0==ON) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outerJoinIdent_in_outerJoin5988);
                    outerJoinIdent416=outerJoinIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent416.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON417=null;
        Token AND_EXPR419=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair418 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair420 = null;
        CommonTree ON417_tree=null;
        CommonTree AND_EXPR419_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON417=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent6066); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent6069);
            outerJoinIdentPair418=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair418.getTree());
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);
                if ( (LA155_0==AND_EXPR) ) {
                    alt155=1;
                }
                switch (alt155) {
            	case 1 :
            	    {
            	    AND_EXPR419=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent6072); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent6075);
            	    outerJoinIdentPair420=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair420.getTree());
            	    }
            	    break;
            	default :
            	    break loop155;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS422=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty421 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty423 = null;
        CommonTree EQUALS422_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair6090);
            eventProperty421=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty421.getTree());
            EQUALS422=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair6092); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair6095);
            eventProperty423=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty423.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression424 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause6117);
            evalOrExpression424=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression424.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList425 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt156=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt156=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt156=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt156=3;
                    }
                    break;
            }
            switch (alt156) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause6153); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause6159); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause6165); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt157=2;
            int LA157_0 = input.LA(1);
            if ( (LA157_0==DISTINCT) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause6171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause6174);
            selectionList425=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList425.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA427=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement426 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement428 = null;
        CommonTree COMMA427_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList6205);
            selectionListElement426=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement426.getTree());
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);
                if ( (LA158_0==COMMA) ) {
                    alt158=1;
                }
                switch (alt158) {
            	case 1 :
            	    {
            	    COMMA427=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList6208); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList6211);
            	    selectionListElement428=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement428.getTree());
            	    }
            	    break;
            	default :
            	    break loop158;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS431=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector429 = null;
        EsperEPL2GrammarParser.expression_return expression430 = null;
        CommonTree s_tree=null;
        CommonTree AS431_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt160=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt160=1;
                }
                break;
            case IDENT:
                {
                int LA160_2 = input.LA(2);
                if ( (LA160_2==DOT) ) {
                    int LA160_77 = input.LA(3);
                    if ( (LA160_77==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt160=2;
                    }
                    else if ( (LA160_77==WINDOW||LA160_77==BETWEEN||LA160_77==ESCAPE||LA160_77==EVERY_EXPR||LA160_77==WHERE||(LA160_77>=SUM && LA160_77<=COUNT)||LA160_77==OUTER||(LA160_77>=JOIN && LA160_77<=FULL)||(LA160_77>=EVENTS && LA160_77<=LAST)||(LA160_77>=UNIDIRECTIONAL && LA160_77<=PREVIOUSTAIL)||LA160_77==PRIOR||(LA160_77>=WEEKDAY && LA160_77<=CAST)||(LA160_77>=SNAPSHOT && LA160_77<=INDEX)||(LA160_77>=DEFINE && LA160_77<=MATCHED)||LA160_77==CONTEXT||LA160_77==IDENT||LA160_77==TICKED_STRING_LITERAL) ) {
                        alt160=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 160, 77, input);
                        throw nvae;
                    }
                }
                else if ( (LA160_2==EOF||(LA160_2>=IN_SET && LA160_2<=REGEXP)||(LA160_2>=OR_EXPR && LA160_2<=NOT_EXPR)||(LA160_2>=WHERE && LA160_2<=AS)||(LA160_2>=WHEN && LA160_2<=THEN)||LA160_2==FROM||LA160_2==IS||(LA160_2>=GROUP && LA160_2<=HAVING)||LA160_2==OUTPUT||LA160_2==INSERT||LA160_2==ORDER||LA160_2==ROW_LIMIT_EXPR||LA160_2==FOR||LA160_2==LBRACK||LA160_2==LPAREN||(LA160_2>=COMMA && LA160_2<=EQUALS)||LA160_2==STAR||(LA160_2>=LT && LA160_2<=PLUS)||(LA160_2>=BAND && LA160_2<=MOD)||LA160_2==ESCAPECHAR) ) {
                    alt160=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case QUESTION:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt160=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);
                throw nvae;
            }
            switch (alt160) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement6237); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement6255);
                    streamSelector429=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector429.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement6260);
                    expression430=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression430.getTree());
                    int alt159=2;
                    int LA159_0 = input.LA(1);
                    if ( (LA159_0==AS) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            {
                            AS431=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement6263); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS431);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement6267);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT432=null;
        Token STAR433=null;
        Token AS434=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT432_tree=null;
        CommonTree STAR433_tree=null;
        CommonTree AS434_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector6323); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT432=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector6325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT432);
            STAR433=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector6327); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR433);
            int alt161=2;
            int LA161_0 = input.LA(1);
            if ( (LA161_0==AS) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    {
                    AS434=(Token)match(input,AS,FOLLOW_AS_in_streamSelector6330); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS434);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector6334); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT439=null;
        Token DOT441=null;
        Token AS443=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression435 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression436 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression437 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression438 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression440 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression442 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT439_tree=null;
        CommonTree DOT441_tree=null;
        CommonTree AS443_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt162=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA162_1 = input.LA(2);
                if ( (LA162_1==EOF||(LA162_1>=WHERE && LA162_1<=AS)||(LA162_1>=INNER && LA162_1<=ON)||(LA162_1>=GROUP && LA162_1<=HAVING)||LA162_1==OUTPUT||LA162_1==ORDER||(LA162_1>=UNIDIRECTIONAL && LA162_1<=RETAININTERSECTION)||LA162_1==ROW_LIMIT_EXPR||LA162_1==MATCH_RECOGNIZE||LA162_1==FOR||LA162_1==LBRACK||(LA162_1>=IDENT && LA162_1<=RPAREN)||(LA162_1>=COMMA && LA162_1<=DOT)) ) {
                    alt162=1;
                }
                else if ( (LA162_1==COLON) ) {
                    alt162=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt162=1;
                }
                break;
            case PATTERN:
                {
                alt162=2;
                }
                break;
            case SQL:
                {
                alt162=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);
                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression6364);
                    eventFilterExpression435=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression435.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression6368);
                    patternInclusionExpression436=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression436.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression6372);
                    databaseJoinExpression437=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression437.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression6376);
                    methodJoinExpression438=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression438.getTree());
                    }
                    break;
            }
            int alt164=2;
            int LA164_0 = input.LA(1);
            if ( (LA164_0==DOT) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    {
                    DOT439=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression6383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT439);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression6385);
                    viewExpression440=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression440.getTree());
                    loop163:
                    do {
                        int alt163=2;
                        int LA163_0 = input.LA(1);
                        if ( (LA163_0==DOT) ) {
                            alt163=1;
                        }
                        switch (alt163) {
                    	case 1 :
                    	    {
                    	    DOT441=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression6388); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT441);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression6390);
                    	    viewExpression442=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression442.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop163;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt165=3;
            int LA165_0 = input.LA(1);
            if ( (LA165_0==AS) ) {
                alt165=1;
            }
            else if ( (LA165_0==IDENT) ) {
                alt165=2;
            }
            switch (alt165) {
                case 1 :
                    {
                    AS443=(Token)match(input,AS,FOLLOW_AS_in_streamExpression6397); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS443);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression6401); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression6407); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt166=2;
            int LA166_0 = input.LA(1);
            if ( (LA166_0==UNIDIRECTIONAL) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression6414); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt167=3;
            int LA167_0 = input.LA(1);
            if ( (LA167_0==RETAINUNION) ) {
                alt167=1;
            }
            else if ( (LA167_0==RETAININTERSECTION) ) {
                alt167=2;
            }
            switch (alt167) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression6421); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression6425); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR444=null;
        Token LPAREN445=null;
        Token RPAREN447=null;
        EsperEPL2GrammarParser.expressionList_return expressionList446 = null;
        CommonTree i_tree=null;
        CommonTree FOR444_tree=null;
        CommonTree LPAREN445_tree=null;
        CommonTree RPAREN447_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR444=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr6481); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR444);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr6485); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt169=2;
            int LA169_0 = input.LA(1);
            if ( (LA169_0==LPAREN) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    {
                    LPAREN445=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr6488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN445);
                    int alt168=2;
                    int LA168_0 = input.LA(1);
                    if ( (LA168_0==WINDOW||LA168_0==BETWEEN||LA168_0==ESCAPE||(LA168_0>=NOT_EXPR && LA168_0<=EVERY_EXPR)||LA168_0==WHERE||(LA168_0>=SUM && LA168_0<=COUNT)||LA168_0==CASE||LA168_0==OUTER||(LA168_0>=JOIN && LA168_0<=FULL)||(LA168_0>=EVENTS && LA168_0<=LAST)||(LA168_0>=UNIDIRECTIONAL && LA168_0<=CURRENT_TIMESTAMP)||(LA168_0>=SNAPSHOT && LA168_0<=INDEX)||(LA168_0>=BOOLEAN_TRUE && LA168_0<=VALUE_NULL)||(LA168_0>=DEFINE && LA168_0<=MATCHED)||LA168_0==NEWKW||LA168_0==CONTEXT||LA168_0==NUM_DOUBLE||(LA168_0>=IDENT && LA168_0<=LPAREN)||LA168_0==LCURLY||LA168_0==QUESTION||(LA168_0>=PLUS && LA168_0<=QUOTED_STRING_LITERAL)||LA168_0==MINUS||LA168_0==NUM_INT||(LA168_0>=TICKED_STRING_LITERAL && LA168_0<=NUM_FLOAT)) ) {
                        alt168=1;
                    }
                    switch (alt168) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr6490);
                            expressionList446=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList446.getTree());
                            }
                            break;
                    }
                    RPAREN447=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr6493); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN447);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE448=null;
        Token LPAREN449=null;
        Token RPAREN457=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy450 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures451 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection452 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip453 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern454 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval455 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine456 = null;
        CommonTree MATCH_RECOGNIZE448_tree=null;
        CommonTree LPAREN449_tree=null;
        CommonTree RPAREN457_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE448=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog6529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE448);
            LPAREN449=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog6543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN449);
            int alt170=2;
            int LA170_0 = input.LA(1);
            if ( (LA170_0==PARTITION) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog6549);
                    matchRecogPartitionBy450=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy450.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog6556);
            matchRecogMeasures451=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures451.getTree());
            int alt171=2;
            int LA171_0 = input.LA(1);
            if ( (LA171_0==ALL) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog6561);
                    matchRecogMatchesSelection452=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection452.getTree());
                    }
                    break;
            }
            int alt172=2;
            int LA172_0 = input.LA(1);
            if ( (LA172_0==AFTER) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog6567);
                    matchRecogMatchesAfterSkip453=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip453.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog6573);
            matchRecogPattern454=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern454.getTree());
            int alt173=2;
            int LA173_0 = input.LA(1);
            if ( (LA173_0==IDENT) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog6579);
                    matchRecogMatchesInterval455=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval455.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog6585);
            matchRecogDefine456=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine456.getTree());
            RPAREN457=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog6592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN457);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION458=null;
        Token BY459=null;
        Token COMMA461=null;
        EsperEPL2GrammarParser.expression_return expression460 = null;
        EsperEPL2GrammarParser.expression_return expression462 = null;
        CommonTree PARTITION458_tree=null;
        CommonTree BY459_tree=null;
        CommonTree COMMA461_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION458=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy6629); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION458);
            BY459=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy6631); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY459);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy6633);
            expression460=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression460.getTree());
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);
                if ( (LA174_0==COMMA) ) {
                    alt174=1;
                }
                switch (alt174) {
            	case 1 :
            	    {
            	    COMMA461=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy6636); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA461);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy6638);
            	    expression462=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression462.getTree());
            	    }
            	    break;
            	default :
            	    break loop174;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES463=null;
        Token COMMA465=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem464 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem466 = null;
        CommonTree MEASURES463_tree=null;
        CommonTree COMMA465_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES463=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures6667); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES463);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures6669);
            matchRecogMeasureItem464=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem464.getTree());
            loop175:
            do {
                int alt175=2;
                int LA175_0 = input.LA(1);
                if ( (LA175_0==COMMA) ) {
                    alt175=1;
                }
                switch (alt175) {
            	case 1 :
            	    {
            	    COMMA465=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures6672); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA465);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures6674);
            	    matchRecogMeasureItem466=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem466.getTree());
            	    }
            	    break;
            	default :
            	    break loop175;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS468=null;
        EsperEPL2GrammarParser.expression_return expression467 = null;
        CommonTree i_tree=null;
        CommonTree AS468_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem6699);
            expression467=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression467.getTree());
            int alt177=2;
            int LA177_0 = input.LA(1);
            if ( (LA177_0==AS) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    {
                    AS468=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem6702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS468);
                    int alt176=2;
                    int LA176_0 = input.LA(1);
                    if ( (LA176_0==IDENT) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem6707); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL469=null;
        Token MATCHES470=null;
        CommonTree ALL469_tree=null;
        CommonTree MATCHES470_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL469=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection6738); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL469_tree = (CommonTree)adaptor.create(ALL469);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL469_tree, root_0);
            }
            MATCHES470=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection6741); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN471=null;
        Token LPAREN472=null;
        Token RPAREN474=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration473 = null;
        CommonTree PATTERN471_tree=null;
        CommonTree LPAREN472_tree=null;
        CommonTree RPAREN474_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN471=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern6756); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN471);
            LPAREN472=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern6758); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN472);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern6760);
            matchRecogPatternAlteration473=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration473.getTree());
            RPAREN474=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern6762); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN474);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER475=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER475_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER475=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip6784); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER475);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6788);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6792);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6796);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6800);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6804);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod476 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval6840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval6842);
            timePeriod476=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod476.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat477 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat478 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration6868);
            matchRecogPatternConcat477=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat477.getTree());
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);
                if ( (LA178_0==BOR) ) {
                    alt178=1;
                }
                switch (alt178) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration6873); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration6875);
            	    matchRecogPatternConcat478=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat478.getTree());
            	    }
            	    break;
            	default :
            	    break loop178;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary479 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt179=0;
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);
                if ( ((LA179_0>=IDENT && LA179_0<=LPAREN)) ) {
                    alt179=1;
                }
                switch (alt179) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat6908);
            	    matchRecogPatternUnary479=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary479.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt179 >= 1 ) break loop179;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(179, input);
                        throw eee;
                }
                cnt179++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested480 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom481 = null;
        try {
            int alt180=2;
            int LA180_0 = input.LA(1);
            if ( (LA180_0==LPAREN) ) {
                alt180=1;
            }
            else if ( (LA180_0==IDENT) ) {
                alt180=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);
                throw nvae;
            }
            switch (alt180) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary6933);
                    matchRecogPatternNested480=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested480.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary6939);
                    matchRecogPatternAtom481=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom481.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN482=null;
        Token RPAREN484=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration483 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN482_tree=null;
        CommonTree RPAREN484_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN482=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested6951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN482);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested6953);
            matchRecogPatternAlteration483=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration483.getTree());
            RPAREN484=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested6955); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN484);
            int alt181=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt181=1;
                    }
                    break;
                case PLUS:
                    {
                    alt181=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt181=3;
                    }
                    break;
            }
            switch (alt181) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested6960); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested6966); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested6972); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom7011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt184=2;
            int LA184_0 = input.LA(1);
            if ( (LA184_0==STAR||LA184_0==QUESTION||LA184_0==PLUS) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    {
                    int alt182=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt182=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt182=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt182=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 182, 0, input);
                        throw nvae;
                    }
                    switch (alt182) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom7017); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom7023); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom7029); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt183=2;
                    int LA183_0 = input.LA(1);
                    if ( (LA183_0==QUESTION) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom7035); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE485=null;
        Token COMMA487=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem486 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem488 = null;
        CommonTree DEFINE485_tree=null;
        CommonTree COMMA487_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE485=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine7079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE485);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine7081);
            matchRecogDefineItem486=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem486.getTree());
            loop185:
            do {
                int alt185=2;
                int LA185_0 = input.LA(1);
                if ( (LA185_0==COMMA) ) {
                    alt185=1;
                }
                switch (alt185) {
            	case 1 :
            	    {
            	    COMMA487=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine7084); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA487);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine7086);
            	    matchRecogDefineItem488=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem488.getTree());
            	    }
            	    break;
            	default :
            	    break loop185;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS489=null;
        EsperEPL2GrammarParser.expression_return expression490 = null;
        CommonTree i_tree=null;
        CommonTree AS489_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem7113); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS489=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem7115); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS489);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem7117);
            expression490=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression490.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN491=null;
        Token LBRACK492=null;
        Token RBRACK494=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression493 = null;
        CommonTree PATTERN491_tree=null;
        CommonTree LBRACK492_tree=null;
        CommonTree RBRACK494_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN491=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression7142); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN491);
            LBRACK492=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression7144); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK492);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression7146);
            patternExpression493=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression493.getTree());
            RBRACK494=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression7148); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK494);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL495=null;
        Token COLON496=null;
        Token LBRACK497=null;
        Token METADATASQL498=null;
        Token RBRACK499=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL495_tree=null;
        CommonTree COLON496_tree=null;
        CommonTree LBRACK497_tree=null;
        CommonTree METADATASQL498_tree=null;
        CommonTree RBRACK499_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL495=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression7181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL495);
            COLON496=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression7183); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON496);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression7187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK497=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression7189); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK497);
            int alt186=2;
            int LA186_0 = input.LA(1);
            if ( (LA186_0==STRING_LITERAL) ) {
                alt186=1;
            }
            else if ( (LA186_0==QUOTED_STRING_LITERAL) ) {
                alt186=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);
                throw nvae;
            }
            switch (alt186) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression7194); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression7200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt188=2;
            int LA188_0 = input.LA(1);
            if ( (LA188_0==METADATASQL) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    {
                    METADATASQL498=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression7204); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL498);
                    int alt187=2;
                    int LA187_0 = input.LA(1);
                    if ( (LA187_0==STRING_LITERAL) ) {
                        alt187=1;
                    }
                    else if ( (LA187_0==QUOTED_STRING_LITERAL) ) {
                        alt187=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 187, 0, input);
                        throw nvae;
                    }
                    switch (alt187) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression7209); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression7215); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK499=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression7220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK499);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON500=null;
        Token LPAREN502=null;
        Token RPAREN504=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier501 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList503 = null;
        CommonTree i_tree=null;
        CommonTree COLON500_tree=null;
        CommonTree LPAREN502_tree=null;
        CommonTree RPAREN504_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression7271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON500=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression7273); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON500);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression7275);
            classIdentifier501=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier501.getTree());
            int alt190=2;
            int LA190_0 = input.LA(1);
            if ( (LA190_0==LPAREN) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    {
                    LPAREN502=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression7278); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN502);
                    int alt189=2;
                    int LA189_0 = input.LA(1);
                    if ( (LA189_0==WINDOW||LA189_0==BETWEEN||LA189_0==ESCAPE||(LA189_0>=NOT_EXPR && LA189_0<=EVERY_EXPR)||LA189_0==WHERE||(LA189_0>=SUM && LA189_0<=COUNT)||LA189_0==CASE||LA189_0==OUTER||(LA189_0>=JOIN && LA189_0<=FULL)||(LA189_0>=EVENTS && LA189_0<=LAST)||(LA189_0>=UNIDIRECTIONAL && LA189_0<=CURRENT_TIMESTAMP)||(LA189_0>=SNAPSHOT && LA189_0<=INDEX)||(LA189_0>=BOOLEAN_TRUE && LA189_0<=VALUE_NULL)||(LA189_0>=DEFINE && LA189_0<=MATCHED)||LA189_0==NEWKW||LA189_0==CONTEXT||LA189_0==NUM_DOUBLE||(LA189_0>=IDENT && LA189_0<=LPAREN)||LA189_0==LCURLY||LA189_0==QUESTION||(LA189_0>=PLUS && LA189_0<=QUOTED_STRING_LITERAL)||LA189_0==MINUS||LA189_0==NUM_INT||(LA189_0>=TICKED_STRING_LITERAL && LA189_0<=NUM_FLOAT)) ) {
                        alt189=1;
                    }
                    switch (alt189) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression7280);
                            expressionList503=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList503.getTree());
                            }
                            break;
                    }
                    RPAREN504=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression7283); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN504);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON505=null;
        Token LPAREN506=null;
        Token RPAREN508=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList507 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON505_tree=null;
        CommonTree LPAREN506_tree=null;
        CommonTree RPAREN508_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression7336); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON505=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression7338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON505);
            int alt191=2;
            int LA191_0 = input.LA(1);
            if ( (LA191_0==IDENT) ) {
                alt191=1;
            }
            else if ( (LA191_0==MERGE) ) {
                alt191=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);
                throw nvae;
            }
            switch (alt191) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression7343); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression7347); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN506=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression7350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN506);
            int alt192=2;
            int LA192_0 = input.LA(1);
            if ( (LA192_0==WINDOW||LA192_0==BETWEEN||LA192_0==ESCAPE||(LA192_0>=NOT_EXPR && LA192_0<=EVERY_EXPR)||LA192_0==WHERE||(LA192_0>=SUM && LA192_0<=COUNT)||LA192_0==CASE||LA192_0==OUTER||(LA192_0>=JOIN && LA192_0<=FULL)||(LA192_0>=EVENTS && LA192_0<=LAST)||(LA192_0>=UNIDIRECTIONAL && LA192_0<=CURRENT_TIMESTAMP)||(LA192_0>=SNAPSHOT && LA192_0<=INDEX)||(LA192_0>=BOOLEAN_TRUE && LA192_0<=VALUE_NULL)||(LA192_0>=DEFINE && LA192_0<=MATCHED)||LA192_0==NEWKW||LA192_0==CONTEXT||LA192_0==NUM_DOUBLE||LA192_0==LBRACK||(LA192_0>=IDENT && LA192_0<=LPAREN)||LA192_0==LCURLY||LA192_0==STAR||LA192_0==QUESTION||(LA192_0>=PLUS && LA192_0<=QUOTED_STRING_LITERAL)||LA192_0==MINUS||LA192_0==NUM_INT||(LA192_0>=TICKED_STRING_LITERAL && LA192_0<=NUM_FLOAT)) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression7352);
                    expressionWithTimeList507=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList507.getTree());
                    }
                    break;
            }
            RPAREN508=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression7355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN508);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA510=null;
        EsperEPL2GrammarParser.expression_return expression509 = null;
        EsperEPL2GrammarParser.expression_return expression511 = null;
        CommonTree COMMA510_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr7415);
            expression509=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression509.getTree());
            loop193:
            do {
                int alt193=2;
                int LA193_0 = input.LA(1);
                if ( (LA193_0==COMMA) ) {
                    alt193=1;
                }
                switch (alt193) {
            	case 1 :
            	    {
            	    COMMA510=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr7418); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA510);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr7420);
            	    expression511=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression511.getTree());
            	    }
            	    break;
            	default :
            	    break loop193;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA513=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement512 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement514 = null;
        CommonTree COMMA513_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr7455);
            orderByListElement512=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement512.getTree());
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);
                if ( (LA194_0==COMMA) ) {
                    alt194=1;
                }
                switch (alt194) {
            	case 1 :
            	    {
            	    COMMA513=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr7458); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA513);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr7460);
            	    orderByListElement514=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement514.getTree());
            	    }
            	    break;
            	default :
            	    break loop194;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression515 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement7485);
            expression515=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression515.getTree());
            int alt195=3;
            int LA195_0 = input.LA(1);
            if ( (LA195_0==ASC) ) {
                alt195=1;
            }
            else if ( (LA195_0==DESC) ) {
                alt195=2;
            }
            switch (alt195) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement7490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement7494); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression516 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause7532);
            evalOrExpression516=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression516.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token t=null;
        Token THEN522=null;
        Token TERMINATED524=null;
        Token AND_EXPR525=null;
        Token THEN527=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter517 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod518 = null;
        EsperEPL2GrammarParser.number_return number519 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet520 = null;
        EsperEPL2GrammarParser.expression_return expression521 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr523 = null;
        EsperEPL2GrammarParser.expression_return expression526 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr528 = null;
        EsperEPL2GrammarParser.outputLimitAndTerm_return outputLimitAndTerm529 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree t_tree=null;
        CommonTree THEN522_tree=null;
        CommonTree TERMINATED524_tree=null;
        CommonTree AND_EXPR525_tree=null;
        CommonTree THEN527_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_outputLimitAndTerm=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAndTerm");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt196=2;
            int LA196_0 = input.LA(1);
            if ( (LA196_0==AFTER) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit7570);
                    outputLimitAfter517=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter517.getTree());
                    }
                    break;
            }
            int alt197=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt197=1;
                    }
                    break;
                case FIRST:
                    {
                    alt197=2;
                    }
                    break;
                case LAST:
                    {
                    alt197=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt197=4;
                    }
                    break;
            }
            switch (alt197) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit7585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit7589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit7593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit7597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt203=5;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt203=1;
                }
                break;
            case AT:
                {
                alt203=2;
                }
                break;
            case WHEN:
                {
                int LA203_3 = input.LA(2);
                if ( (LA203_3==TERMINATED) ) {
                    alt203=4;
                }
                else if ( (LA203_3==WINDOW||LA203_3==BETWEEN||LA203_3==ESCAPE||(LA203_3>=NOT_EXPR && LA203_3<=EVERY_EXPR)||LA203_3==WHERE||(LA203_3>=SUM && LA203_3<=COUNT)||LA203_3==CASE||LA203_3==OUTER||(LA203_3>=JOIN && LA203_3<=FULL)||(LA203_3>=EVENTS && LA203_3<=LAST)||(LA203_3>=UNIDIRECTIONAL && LA203_3<=CURRENT_TIMESTAMP)||(LA203_3>=SNAPSHOT && LA203_3<=INDEX)||(LA203_3>=BOOLEAN_TRUE && LA203_3<=VALUE_NULL)||(LA203_3>=DEFINE && LA203_3<=MATCHED)||LA203_3==NEWKW||LA203_3==CONTEXT||LA203_3==NUM_DOUBLE||(LA203_3>=IDENT && LA203_3<=LPAREN)||LA203_3==LCURLY||LA203_3==QUESTION||(LA203_3>=PLUS && LA203_3<=QUOTED_STRING_LITERAL)||LA203_3==MINUS||LA203_3==NUM_INT||(LA203_3>=TICKED_STRING_LITERAL && LA203_3<=NUM_FLOAT)) ) {
                    alt203=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 3, input);
                    throw nvae;
                }
                }
                break;
            case EOF:
            case AND_EXPR:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
            case RPAREN:
                {
                alt203=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);
                throw nvae;
            }
            switch (alt203) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit7628); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt199=2;
                    int LA199_0 = input.LA(1);
                    if ( (LA199_0==MINUS) && (synpred2_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_0==PLUS) && (synpred2_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_0==NUM_INT) ) {
                        int LA199_3 = input.LA(2);
                        if ( (LA199_3==EVENTS) ) {
                            alt199=2;
                        }
                        else if ( (LA199_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_3==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA199_0==NUM_LONG) ) {
                        int LA199_4 = input.LA(2);
                        if ( (LA199_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==EVENTS) ) {
                            alt199=2;
                        }
                        else if ( (LA199_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA199_0==NUM_FLOAT) ) {
                        int LA199_5 = input.LA(2);
                        if ( (LA199_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==EVENTS) ) {
                            alt199=2;
                        }
                        else if ( (LA199_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA199_0==NUM_DOUBLE) ) {
                        int LA199_6 = input.LA(2);
                        if ( (LA199_6==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_6==EVENTS) ) {
                            alt199=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 6, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA199_0==IDENT) ) {
                        int LA199_7 = input.LA(2);
                        if ( (LA199_7==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==EVENTS) ) {
                            alt199=2;
                        }
                        else if ( (LA199_7==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_7==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 7, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA199_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 199, 0, input);
                        throw nvae;
                    }
                    switch (alt199) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit7654);
                            timePeriod518=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod518.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt198=2;
                            int LA198_0 = input.LA(1);
                            if ( (LA198_0==NUM_DOUBLE||LA198_0==NUM_INT||(LA198_0>=NUM_LONG && LA198_0<=NUM_FLOAT)) ) {
                                alt198=1;
                            }
                            else if ( (LA198_0==IDENT) ) {
                                alt198=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 198, 0, input);
                                throw nvae;
                            }
                            switch (alt198) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit7665);
                                    number519=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number519.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit7671); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit7677); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit7708); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit7710);
                    crontabLimitParameterSet520=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet520.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit7727); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit7729);
                    expression521=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression521.getTree());
                    int alt200=2;
                    int LA200_0 = input.LA(1);
                    if ( (LA200_0==THEN) ) {
                        alt200=1;
                    }
                    switch (alt200) {
                        case 1 :
                            {
                            THEN522=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit7732); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN522);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit7734);
                            onSetExpr523=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr523.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    t=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit7754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(t);
                    TERMINATED524=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimit7756); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED524);
                    int alt201=2;
                    int LA201_0 = input.LA(1);
                    if ( (LA201_0==AND_EXPR) ) {
                        int LA201_1 = input.LA(2);
                        if ( (LA201_1==WINDOW||LA201_1==BETWEEN||LA201_1==ESCAPE||(LA201_1>=NOT_EXPR && LA201_1<=EVERY_EXPR)||LA201_1==WHERE||(LA201_1>=SUM && LA201_1<=COUNT)||LA201_1==CASE||LA201_1==OUTER||(LA201_1>=JOIN && LA201_1<=FULL)||(LA201_1>=EVENTS && LA201_1<=LAST)||(LA201_1>=UNIDIRECTIONAL && LA201_1<=CURRENT_TIMESTAMP)||(LA201_1>=SNAPSHOT && LA201_1<=INDEX)||(LA201_1>=BOOLEAN_TRUE && LA201_1<=VALUE_NULL)||(LA201_1>=DEFINE && LA201_1<=MATCHED)||LA201_1==NEWKW||LA201_1==CONTEXT||LA201_1==NUM_DOUBLE||(LA201_1>=IDENT && LA201_1<=LPAREN)||LA201_1==LCURLY||LA201_1==QUESTION||(LA201_1>=PLUS && LA201_1<=QUOTED_STRING_LITERAL)||LA201_1==MINUS||LA201_1==NUM_INT||(LA201_1>=TICKED_STRING_LITERAL && LA201_1<=NUM_FLOAT)) ) {
                            alt201=1;
                        }
                    }
                    switch (alt201) {
                        case 1 :
                            {
                            AND_EXPR525=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimit7759); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR525);
                            pushFollow(FOLLOW_expression_in_outputLimit7761);
                            expression526=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression526.getTree());
                            }
                            break;
                    }
                    int alt202=2;
                    int LA202_0 = input.LA(1);
                    if ( (LA202_0==THEN) ) {
                        alt202=1;
                    }
                    switch (alt202) {
                        case 1 :
                            {
                            THEN527=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit7766); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN527);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit7768);
                            onSetExpr528=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr528.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    }
                    break;
            }
            int alt204=2;
            int LA204_0 = input.LA(1);
            if ( (LA204_0==AND_EXPR) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAndTerm_in_outputLimit7801);
                    outputLimitAndTerm529=outputLimitAndTerm();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAndTerm.add(outputLimitAndTerm529.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (t != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TERM_LIMIT_EXPR, "TERM_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_TERMINATED.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAndTerm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAndTerm_return outputLimitAndTerm() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAndTerm_return retval = new EsperEPL2GrammarParser.outputLimitAndTerm_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR530=null;
        Token WHEN531=null;
        Token TERMINATED532=null;
        Token AND_EXPR533=null;
        Token THEN535=null;
        EsperEPL2GrammarParser.expression_return expression534 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr536 = null;
        CommonTree AND_EXPR530_tree=null;
        CommonTree WHEN531_tree=null;
        CommonTree TERMINATED532_tree=null;
        CommonTree AND_EXPR533_tree=null;
        CommonTree THEN535_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        try {
            {
            AND_EXPR530=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimitAndTerm7975); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR530);
            WHEN531=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimitAndTerm7977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN531);
            TERMINATED532=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimitAndTerm7979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED532);
            int alt205=2;
            int LA205_0 = input.LA(1);
            if ( (LA205_0==AND_EXPR) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    {
                    AND_EXPR533=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimitAndTerm7982); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR533);
                    pushFollow(FOLLOW_expression_in_outputLimitAndTerm7984);
                    expression534=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression534.getTree());
                    }
                    break;
            }
            int alt206=2;
            int LA206_0 = input.LA(1);
            if ( (LA206_0==THEN) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    {
                    THEN535=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimitAndTerm7989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THEN.add(THEN535);
                    pushFollow(FOLLOW_onSetExpr_in_outputLimitAndTerm7991);
                    onSetExpr536=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr536.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_TERMINATED.nextNode(), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS539=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod537 = null;
        EsperEPL2GrammarParser.number_return number538 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS539_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter8021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt207=2;
            switch ( input.LA(1) ) {
            case IDENT:
            case QUESTION:
            case PLUS:
            case MINUS:
                {
                alt207=1;
                }
                break;
            case NUM_INT:
                {
                int LA207_3 = input.LA(2);
                if ( (LA207_3==MIN||(LA207_3>=TIMEPERIOD_YEAR && LA207_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt207=1;
                }
                else if ( (LA207_3==EVENTS) ) {
                    alt207=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 207, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA207_4 = input.LA(2);
                if ( (LA207_4==MIN||(LA207_4>=TIMEPERIOD_YEAR && LA207_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt207=1;
                }
                else if ( (LA207_4==EVENTS) ) {
                    alt207=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 207, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA207_5 = input.LA(2);
                if ( (LA207_5==MIN||(LA207_5>=TIMEPERIOD_YEAR && LA207_5<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt207=1;
                }
                else if ( (LA207_5==EVENTS) ) {
                    alt207=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 207, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA207_6 = input.LA(2);
                if ( (LA207_6==MIN||(LA207_6>=TIMEPERIOD_YEAR && LA207_6<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt207=1;
                }
                else if ( (LA207_6==EVENTS) ) {
                    alt207=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 207, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);
                throw nvae;
            }
            switch (alt207) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter8024);
                    timePeriod537=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod537.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter8028);
                    number538=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number538.getTree());
                    EVENTS539=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter8030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS539);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt208=2;
            int LA208_0 = input.LA(1);
            if ( (LA208_0==NUM_DOUBLE||LA208_0==PLUS||LA208_0==MINUS||LA208_0==NUM_INT||(LA208_0>=NUM_LONG && LA208_0<=NUM_FLOAT)) ) {
                alt208=1;
            }
            else if ( (LA208_0==IDENT) ) {
                alt208=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);
                throw nvae;
            }
            switch (alt208) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit8076);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit8082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt211=2;
            int LA211_0 = input.LA(1);
            if ( (LA211_0==OFFSET||LA211_0==COMMA) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    {
                    int alt209=2;
                    int LA209_0 = input.LA(1);
                    if ( (LA209_0==COMMA) ) {
                        alt209=1;
                    }
                    else if ( (LA209_0==OFFSET) ) {
                        alt209=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 209, 0, input);
                        throw nvae;
                    }
                    switch (alt209) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit8089); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit8095); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt210=2;
                    int LA210_0 = input.LA(1);
                    if ( (LA210_0==NUM_DOUBLE||LA210_0==PLUS||LA210_0==MINUS||LA210_0==NUM_INT||(LA210_0>=NUM_LONG && LA210_0<=NUM_FLOAT)) ) {
                        alt210=1;
                    }
                    else if ( (LA210_0==IDENT) ) {
                        alt210=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 210, 0, input);
                        throw nvae;
                    }
                    switch (alt210) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit8101);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit8107); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN540=null;
        Token COMMA542=null;
        Token COMMA544=null;
        Token COMMA546=null;
        Token COMMA548=null;
        Token COMMA550=null;
        Token RPAREN552=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime541 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime543 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime545 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime547 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime549 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime551 = null;
        CommonTree LPAREN540_tree=null;
        CommonTree COMMA542_tree=null;
        CommonTree COMMA544_tree=null;
        CommonTree COMMA546_tree=null;
        CommonTree COMMA548_tree=null;
        CommonTree COMMA550_tree=null;
        CommonTree RPAREN552_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN540=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet8159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN540);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet8161);
            expressionWithTime541=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime541.getTree());
            COMMA542=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet8163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA542);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet8165);
            expressionWithTime543=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime543.getTree());
            COMMA544=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet8167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA544);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet8169);
            expressionWithTime545=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime545.getTree());
            COMMA546=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet8171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA546);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet8173);
            expressionWithTime547=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime547.getTree());
            COMMA548=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet8175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA548);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet8177);
            expressionWithTime549=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime549.getTree());
            int alt212=2;
            int LA212_0 = input.LA(1);
            if ( (LA212_0==COMMA) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    {
                    COMMA550=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet8180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA550);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet8182);
                    expressionWithTime551=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime551.getTree());
                    }
                    break;
            }
            RPAREN552=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet8186); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN552);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN553=null;
        Token THEN555=null;
        EsperEPL2GrammarParser.expression_return expression554 = null;
        EsperEPL2GrammarParser.expression_return expression556 = null;
        CommonTree WHEN553_tree=null;
        CommonTree THEN555_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN553=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause8216); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause8219);
            expression554=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression554.getTree());
            THEN555=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause8221); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause8224);
            expression556=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression556.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE557=null;
        EsperEPL2GrammarParser.expression_return expression558 = null;
        CommonTree ELSE557_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE557=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause8237); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause8240);
            expression558=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression558.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression559 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression8253);
            caseExpression559=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression559.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE560=null;
        Token END563=null;
        Token CASE564=null;
        Token END568=null;
        EsperEPL2GrammarParser.whenClause_return whenClause561 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause562 = null;
        EsperEPL2GrammarParser.expression_return expression565 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause566 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause567 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression569 = null;
        CommonTree CASE560_tree=null;
        CommonTree END563_tree=null;
        CommonTree CASE564_tree=null;
        CommonTree END568_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt217=3;
            int LA217_0 = input.LA(1);
            if ( (LA217_0==CASE) ) {
                int LA217_1 = input.LA(2);
                if ( (LA217_1==WINDOW||LA217_1==BETWEEN||LA217_1==ESCAPE||(LA217_1>=NOT_EXPR && LA217_1<=EVERY_EXPR)||LA217_1==WHERE||(LA217_1>=SUM && LA217_1<=COUNT)||LA217_1==CASE||LA217_1==OUTER||(LA217_1>=JOIN && LA217_1<=FULL)||(LA217_1>=EVENTS && LA217_1<=LAST)||(LA217_1>=UNIDIRECTIONAL && LA217_1<=CURRENT_TIMESTAMP)||(LA217_1>=SNAPSHOT && LA217_1<=INDEX)||(LA217_1>=BOOLEAN_TRUE && LA217_1<=VALUE_NULL)||(LA217_1>=DEFINE && LA217_1<=MATCHED)||LA217_1==NEWKW||LA217_1==CONTEXT||LA217_1==NUM_DOUBLE||(LA217_1>=IDENT && LA217_1<=LPAREN)||LA217_1==LCURLY||LA217_1==QUESTION||(LA217_1>=PLUS && LA217_1<=QUOTED_STRING_LITERAL)||LA217_1==MINUS||LA217_1==NUM_INT||(LA217_1>=TICKED_STRING_LITERAL && LA217_1<=NUM_FLOAT)) ) {
                    alt217=2;
                }
                else if ( (LA217_1==WHEN) ) {
                    alt217=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 217, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA217_0==WINDOW||LA217_0==BETWEEN||LA217_0==ESCAPE||(LA217_0>=NOT_EXPR && LA217_0<=EVERY_EXPR)||LA217_0==WHERE||(LA217_0>=SUM && LA217_0<=COUNT)||LA217_0==OUTER||(LA217_0>=JOIN && LA217_0<=FULL)||(LA217_0>=EVENTS && LA217_0<=LAST)||(LA217_0>=UNIDIRECTIONAL && LA217_0<=CURRENT_TIMESTAMP)||(LA217_0>=SNAPSHOT && LA217_0<=INDEX)||(LA217_0>=BOOLEAN_TRUE && LA217_0<=VALUE_NULL)||(LA217_0>=DEFINE && LA217_0<=MATCHED)||LA217_0==NEWKW||LA217_0==CONTEXT||LA217_0==NUM_DOUBLE||(LA217_0>=IDENT && LA217_0<=LPAREN)||LA217_0==LCURLY||LA217_0==QUESTION||(LA217_0>=PLUS && LA217_0<=QUOTED_STRING_LITERAL)||LA217_0==MINUS||LA217_0==NUM_INT||(LA217_0>=TICKED_STRING_LITERAL && LA217_0<=NUM_FLOAT)) ) {
                alt217=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);
                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE560=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression8267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE560_tree = (CommonTree)adaptor.create(CASE560);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE560_tree, root_0);
                    }
                    int cnt213=0;
                    loop213:
                    do {
                        int alt213=2;
                        int LA213_0 = input.LA(1);
                        if ( (LA213_0==WHEN) ) {
                            alt213=1;
                        }
                        switch (alt213) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression8270);
                    	    whenClause561=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause561.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt213 >= 1 ) break loop213;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(213, input);
                                throw eee;
                        }
                        cnt213++;
                    } while (true);
                    int alt214=2;
                    int LA214_0 = input.LA(1);
                    if ( (LA214_0==ELSE) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression8273);
                            elseClause562=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause562.getTree());
                            }
                            break;
                    }
                    END563=(Token)match(input,END,FOLLOW_END_in_caseExpression8276); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE564=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression8287); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE564);
                    pushFollow(FOLLOW_expression_in_caseExpression8289);
                    expression565=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression565.getTree());
                    int cnt215=0;
                    loop215:
                    do {
                        int alt215=2;
                        int LA215_0 = input.LA(1);
                        if ( (LA215_0==WHEN) ) {
                            alt215=1;
                        }
                        switch (alt215) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression8291);
                    	    whenClause566=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause566.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt215 >= 1 ) break loop215;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(215, input);
                                throw eee;
                        }
                        cnt215++;
                    } while (true);
                    int alt216=2;
                    int LA216_0 = input.LA(1);
                    if ( (LA216_0==ELSE) ) {
                        alt216=1;
                    }
                    switch (alt216) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression8294);
                            elseClause567=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause567.getTree());
                            }
                            break;
                    }
                    END568=(Token)match(input,END,FOLLOW_END_in_caseExpression8297); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END568);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression8321);
                    evalOrExpression569=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression569.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression570 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression571 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression8332);
            evalAndExpression570=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression570.getTree());
            loop218:
            do {
                int alt218=2;
                int LA218_0 = input.LA(1);
                if ( (LA218_0==OR_EXPR) ) {
                    alt218=1;
                }
                switch (alt218) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression8337); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression8339);
            	    evalAndExpression571=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression571.getTree());
            	    }
            	    break;
            	default :
            	    break loop218;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression572 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression573 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression8371);
            bitWiseExpression572=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression572.getTree());
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);
                if ( (LA219_0==AND_EXPR) ) {
                    int LA219_16 = input.LA(2);
                    if ( (LA219_16==WINDOW||LA219_16==BETWEEN||LA219_16==ESCAPE||(LA219_16>=NOT_EXPR && LA219_16<=EVERY_EXPR)||LA219_16==WHERE||(LA219_16>=SUM && LA219_16<=COUNT)||LA219_16==OUTER||(LA219_16>=JOIN && LA219_16<=FULL)||(LA219_16>=EVENTS && LA219_16<=LAST)||(LA219_16>=UNIDIRECTIONAL && LA219_16<=CURRENT_TIMESTAMP)||(LA219_16>=SNAPSHOT && LA219_16<=INDEX)||(LA219_16>=BOOLEAN_TRUE && LA219_16<=VALUE_NULL)||(LA219_16>=DEFINE && LA219_16<=MATCHED)||LA219_16==NEWKW||LA219_16==CONTEXT||LA219_16==NUM_DOUBLE||(LA219_16>=IDENT && LA219_16<=LPAREN)||LA219_16==LCURLY||LA219_16==QUESTION||(LA219_16>=PLUS && LA219_16<=QUOTED_STRING_LITERAL)||LA219_16==MINUS||LA219_16==NUM_INT||(LA219_16>=TICKED_STRING_LITERAL && LA219_16<=NUM_FLOAT)) ) {
                        alt219=1;
                    }
                }
                switch (alt219) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression8376); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression8378);
            	    bitWiseExpression573=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression573.getTree());
            	    }
            	    break;
            	default :
            	    break loop219;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND575=null;
        Token BOR576=null;
        Token BXOR577=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression574 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression578 = null;
        CommonTree BAND575_tree=null;
        CommonTree BOR576_tree=null;
        CommonTree BXOR577_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression8410);
            negatedExpression574=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression574.getTree());
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);
                if ( (LA221_0==BOR||(LA221_0>=BAND && LA221_0<=BXOR)) ) {
                    alt221=1;
                }
                switch (alt221) {
            	case 1 :
            	    {
            	    int alt220=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt220=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt220=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt220=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 220, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt220) {
            	        case 1 :
            	            {
            	            BAND575=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression8415); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND575_tree = (CommonTree)adaptor.create(BAND575);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND575_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR576=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression8418); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR576_tree = (CommonTree)adaptor.create(BOR576);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR576_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR577=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression8421); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR577_tree = (CommonTree)adaptor.create(BXOR577);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR577_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression8425);
            	    negatedExpression578=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression578.getTree());
            	    }
            	    break;
            	default :
            	    break loop221;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR580=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression579 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression581 = null;
        CommonTree NOT_EXPR580_tree=null;
        try {
            int alt222=2;
            int LA222_0 = input.LA(1);
            if ( (LA222_0==WINDOW||LA222_0==BETWEEN||LA222_0==ESCAPE||LA222_0==EVERY_EXPR||LA222_0==WHERE||(LA222_0>=SUM && LA222_0<=COUNT)||LA222_0==OUTER||(LA222_0>=JOIN && LA222_0<=FULL)||(LA222_0>=EVENTS && LA222_0<=LAST)||(LA222_0>=UNIDIRECTIONAL && LA222_0<=CURRENT_TIMESTAMP)||(LA222_0>=SNAPSHOT && LA222_0<=INDEX)||(LA222_0>=BOOLEAN_TRUE && LA222_0<=VALUE_NULL)||(LA222_0>=DEFINE && LA222_0<=MATCHED)||LA222_0==NEWKW||LA222_0==CONTEXT||LA222_0==NUM_DOUBLE||(LA222_0>=IDENT && LA222_0<=LPAREN)||LA222_0==LCURLY||LA222_0==QUESTION||(LA222_0>=PLUS && LA222_0<=QUOTED_STRING_LITERAL)||LA222_0==MINUS||LA222_0==NUM_INT||(LA222_0>=TICKED_STRING_LITERAL && LA222_0<=NUM_FLOAT)) ) {
                alt222=1;
            }
            else if ( (LA222_0==NOT_EXPR) ) {
                alt222=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);
                throw nvae;
            }
            switch (alt222) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression8440);
                    evalEqualsExpression579=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression579.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR580=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression8446); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR580_tree = (CommonTree)adaptor.create(NOT_EXPR580);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR580_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression8449);
                    evalEqualsExpression581=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression581.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR583=null;
        Token LPAREN585=null;
        Token RPAREN587=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression582 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression584 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList586 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression588 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR583_tree=null;
        CommonTree LPAREN585_tree=null;
        CommonTree RPAREN587_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression8462);
            evalRelationalExpression582=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression582.getTree());
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);
                if ( (LA228_0==IS||LA228_0==EQUALS||(LA228_0>=SQL_NE && LA228_0<=NOT_EQUAL)) ) {
                    alt228=1;
                }
                switch (alt228) {
            	case 1 :
            	    {
            	    int alt223=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt223=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA223_2 = input.LA(2);
            	        if ( (LA223_2==NOT_EXPR) ) {
            	            alt223=3;
            	        }
            	        else if ( (LA223_2==WINDOW||LA223_2==BETWEEN||LA223_2==ESCAPE||LA223_2==EVERY_EXPR||LA223_2==WHERE||(LA223_2>=SUM && LA223_2<=COUNT)||LA223_2==OUTER||(LA223_2>=JOIN && LA223_2<=FULL)||(LA223_2>=ALL && LA223_2<=SOME)||(LA223_2>=EVENTS && LA223_2<=LAST)||(LA223_2>=UNIDIRECTIONAL && LA223_2<=CURRENT_TIMESTAMP)||(LA223_2>=SNAPSHOT && LA223_2<=INDEX)||(LA223_2>=BOOLEAN_TRUE && LA223_2<=VALUE_NULL)||(LA223_2>=DEFINE && LA223_2<=MATCHED)||LA223_2==NEWKW||LA223_2==CONTEXT||LA223_2==NUM_DOUBLE||(LA223_2>=IDENT && LA223_2<=LPAREN)||LA223_2==LCURLY||LA223_2==QUESTION||(LA223_2>=PLUS && LA223_2<=QUOTED_STRING_LITERAL)||LA223_2==MINUS||LA223_2==NUM_INT||(LA223_2>=TICKED_STRING_LITERAL && LA223_2<=NUM_FLOAT)) ) {
            	            alt223=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 223, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt223=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt223=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 223, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt223) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression8475); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression8493); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression8507); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR583=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression8509); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR583);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression8523); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression8537); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt227=2;
            	    int LA227_0 = input.LA(1);
            	    if ( (LA227_0==WINDOW||LA227_0==BETWEEN||LA227_0==ESCAPE||LA227_0==EVERY_EXPR||LA227_0==WHERE||(LA227_0>=SUM && LA227_0<=COUNT)||LA227_0==OUTER||(LA227_0>=JOIN && LA227_0<=FULL)||(LA227_0>=EVENTS && LA227_0<=LAST)||(LA227_0>=UNIDIRECTIONAL && LA227_0<=CURRENT_TIMESTAMP)||(LA227_0>=SNAPSHOT && LA227_0<=INDEX)||(LA227_0>=BOOLEAN_TRUE && LA227_0<=VALUE_NULL)||(LA227_0>=DEFINE && LA227_0<=MATCHED)||LA227_0==NEWKW||LA227_0==CONTEXT||LA227_0==NUM_DOUBLE||(LA227_0>=IDENT && LA227_0<=LPAREN)||LA227_0==LCURLY||LA227_0==QUESTION||(LA227_0>=PLUS && LA227_0<=QUOTED_STRING_LITERAL)||LA227_0==MINUS||LA227_0==NUM_INT||(LA227_0>=TICKED_STRING_LITERAL && LA227_0<=NUM_FLOAT)) ) {
            	        alt227=1;
            	    }
            	    else if ( ((LA227_0>=ALL && LA227_0<=SOME)) ) {
            	        alt227=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 227, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt227) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression8567);
            	            evalRelationalExpression584=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression584.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt224=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt224=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt224=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt224=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 224, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt224) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression8584); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression8590); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression8596); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt226=2;
            	            int LA226_0 = input.LA(1);
            	            if ( (LA226_0==LPAREN) ) {
            	                int LA226_1 = input.LA(2);
            	                if ( (LA226_1==SELECT) ) {
            	                    alt226=2;
            	                }
            	                else if ( (LA226_1==WINDOW||LA226_1==BETWEEN||LA226_1==ESCAPE||(LA226_1>=NOT_EXPR && LA226_1<=EVERY_EXPR)||LA226_1==WHERE||(LA226_1>=SUM && LA226_1<=COUNT)||LA226_1==CASE||LA226_1==OUTER||(LA226_1>=JOIN && LA226_1<=FULL)||(LA226_1>=EVENTS && LA226_1<=LAST)||(LA226_1>=UNIDIRECTIONAL && LA226_1<=CURRENT_TIMESTAMP)||(LA226_1>=SNAPSHOT && LA226_1<=INDEX)||(LA226_1>=BOOLEAN_TRUE && LA226_1<=VALUE_NULL)||(LA226_1>=DEFINE && LA226_1<=MATCHED)||LA226_1==NEWKW||LA226_1==CONTEXT||LA226_1==NUM_DOUBLE||(LA226_1>=IDENT && LA226_1<=RPAREN)||LA226_1==LCURLY||LA226_1==QUESTION||(LA226_1>=PLUS && LA226_1<=QUOTED_STRING_LITERAL)||LA226_1==MINUS||LA226_1==NUM_INT||(LA226_1>=TICKED_STRING_LITERAL && LA226_1<=NUM_FLOAT)) ) {
            	                    alt226=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 226, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 226, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt226) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN585=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression8602); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN585);
            	                    int alt225=2;
            	                    int LA225_0 = input.LA(1);
            	                    if ( (LA225_0==WINDOW||LA225_0==BETWEEN||LA225_0==ESCAPE||(LA225_0>=NOT_EXPR && LA225_0<=EVERY_EXPR)||LA225_0==WHERE||(LA225_0>=SUM && LA225_0<=COUNT)||LA225_0==CASE||LA225_0==OUTER||(LA225_0>=JOIN && LA225_0<=FULL)||(LA225_0>=EVENTS && LA225_0<=LAST)||(LA225_0>=UNIDIRECTIONAL && LA225_0<=CURRENT_TIMESTAMP)||(LA225_0>=SNAPSHOT && LA225_0<=INDEX)||(LA225_0>=BOOLEAN_TRUE && LA225_0<=VALUE_NULL)||(LA225_0>=DEFINE && LA225_0<=MATCHED)||LA225_0==NEWKW||LA225_0==CONTEXT||LA225_0==NUM_DOUBLE||(LA225_0>=IDENT && LA225_0<=LPAREN)||LA225_0==LCURLY||LA225_0==QUESTION||(LA225_0>=PLUS && LA225_0<=QUOTED_STRING_LITERAL)||LA225_0==MINUS||LA225_0==NUM_INT||(LA225_0>=TICKED_STRING_LITERAL && LA225_0<=NUM_FLOAT)) ) {
            	                        alt225=1;
            	                    }
            	                    switch (alt225) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression8604);
            	                            expressionList586=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList586.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN587=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression8607); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN587);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression8612);
            	                    subSelectGroupExpression588=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression588.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop228;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && eq != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && is != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_IS_EXPR, "EVAL_IS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && isnot != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_ISNOT_EXPR, "EVAL_ISNOT_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (sqlne != null || ne != null || isnot != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN591=null;
        Token RPAREN593=null;
        Token COMMA597=null;
        Token IN_SET599=null;
        Token BETWEEN601=null;
        Token LIKE603=null;
        Token ESCAPE605=null;
        Token REGEXP607=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr589 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr590 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList592 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression594 = null;
        EsperEPL2GrammarParser.expression_return expression595 = null;
        EsperEPL2GrammarParser.expression_return expression596 = null;
        EsperEPL2GrammarParser.expression_return expression598 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery600 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList602 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr604 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant606 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr608 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN591_tree=null;
        CommonTree RPAREN593_tree=null;
        CommonTree COMMA597_tree=null;
        CommonTree IN_SET599_tree=null;
        CommonTree BETWEEN601_tree=null;
        CommonTree LIKE603_tree=null;
        CommonTree ESCAPE605_tree=null;
        CommonTree REGEXP607_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8772);
            concatenationExpr589=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr589.getTree());
            int alt242=2;
            int LA242_0 = input.LA(1);
            if ( (LA242_0==EOF||(LA242_0>=OR_EXPR && LA242_0<=AND_EXPR)||(LA242_0>=WHERE && LA242_0<=AS)||(LA242_0>=ELSE && LA242_0<=FROM)||LA242_0==IS||(LA242_0>=GROUP && LA242_0<=HAVING)||LA242_0==ALL||LA242_0==OUTPUT||LA242_0==INSERT||(LA242_0>=ORDER && LA242_0<=DESC)||LA242_0==PATTERN||(LA242_0>=TIMEPERIOD_SEC && LA242_0<=TIMEPERIOD_SECONDS)||LA242_0==ROW_LIMIT_EXPR||LA242_0==MEASURES||(LA242_0>=AFTER && LA242_0<=FOR)||LA242_0==RBRACK||(LA242_0>=RPAREN && LA242_0<=COLON)||LA242_0==RCURLY||(LA242_0>=ATCHAR && LA242_0<=EQUALS)||(LA242_0>=LT && LA242_0<=GT)||LA242_0==BOR||(LA242_0>=BAND && LA242_0<=GE)||LA242_0==FOLLOWMAX_END) ) {
                alt242=1;
            }
            else if ( ((LA242_0>=IN_SET && LA242_0<=REGEXP)||LA242_0==NOT_EXPR) ) {
                alt242=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);
                throw nvae;
            }
            switch (alt242) {
                case 1 :
                    {
                    {
                    loop234:
                    do {
                        int alt234=2;
                        int LA234_0 = input.LA(1);
                        if ( ((LA234_0>=LT && LA234_0<=GT)||(LA234_0>=LE && LA234_0<=GE)) ) {
                            alt234=1;
                        }
                        switch (alt234) {
                    	case 1 :
                    	    {
                    	    int alt229=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt229=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt229=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt229=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt229=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 229, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt229) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression8804); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression8808); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression8812); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression8816); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt233=2;
                    	    int LA233_0 = input.LA(1);
                    	    if ( (LA233_0==WINDOW||LA233_0==BETWEEN||LA233_0==ESCAPE||LA233_0==EVERY_EXPR||LA233_0==WHERE||(LA233_0>=SUM && LA233_0<=COUNT)||LA233_0==OUTER||(LA233_0>=JOIN && LA233_0<=FULL)||(LA233_0>=EVENTS && LA233_0<=LAST)||(LA233_0>=UNIDIRECTIONAL && LA233_0<=CURRENT_TIMESTAMP)||(LA233_0>=SNAPSHOT && LA233_0<=INDEX)||(LA233_0>=BOOLEAN_TRUE && LA233_0<=VALUE_NULL)||(LA233_0>=DEFINE && LA233_0<=MATCHED)||LA233_0==NEWKW||LA233_0==CONTEXT||LA233_0==NUM_DOUBLE||(LA233_0>=IDENT && LA233_0<=LPAREN)||LA233_0==LCURLY||LA233_0==QUESTION||(LA233_0>=PLUS && LA233_0<=QUOTED_STRING_LITERAL)||LA233_0==MINUS||LA233_0==NUM_INT||(LA233_0>=TICKED_STRING_LITERAL && LA233_0<=NUM_FLOAT)) ) {
                    	        alt233=1;
                    	    }
                    	    else if ( ((LA233_0>=ALL && LA233_0<=SOME)) ) {
                    	        alt233=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 233, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt233) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8840);
                    	            concatenationExpr590=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr590.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt230=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt230=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt230=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt230=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 230, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt230) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression8857); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression8863); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression8869); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt232=2;
                    	            int LA232_0 = input.LA(1);
                    	            if ( (LA232_0==LPAREN) ) {
                    	                int LA232_1 = input.LA(2);
                    	                if ( (LA232_1==SELECT) ) {
                    	                    alt232=2;
                    	                }
                    	                else if ( (LA232_1==WINDOW||LA232_1==BETWEEN||LA232_1==ESCAPE||(LA232_1>=NOT_EXPR && LA232_1<=EVERY_EXPR)||LA232_1==WHERE||(LA232_1>=SUM && LA232_1<=COUNT)||LA232_1==CASE||LA232_1==OUTER||(LA232_1>=JOIN && LA232_1<=FULL)||(LA232_1>=EVENTS && LA232_1<=LAST)||(LA232_1>=UNIDIRECTIONAL && LA232_1<=CURRENT_TIMESTAMP)||(LA232_1>=SNAPSHOT && LA232_1<=INDEX)||(LA232_1>=BOOLEAN_TRUE && LA232_1<=VALUE_NULL)||(LA232_1>=DEFINE && LA232_1<=MATCHED)||LA232_1==NEWKW||LA232_1==CONTEXT||LA232_1==NUM_DOUBLE||(LA232_1>=IDENT && LA232_1<=RPAREN)||LA232_1==LCURLY||LA232_1==QUESTION||(LA232_1>=PLUS && LA232_1<=QUOTED_STRING_LITERAL)||LA232_1==MINUS||LA232_1==NUM_INT||(LA232_1>=TICKED_STRING_LITERAL && LA232_1<=NUM_FLOAT)) ) {
                    	                    alt232=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 232, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 232, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt232) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN591=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression8875); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN591);
                    	                    int alt231=2;
                    	                    int LA231_0 = input.LA(1);
                    	                    if ( (LA231_0==WINDOW||LA231_0==BETWEEN||LA231_0==ESCAPE||(LA231_0>=NOT_EXPR && LA231_0<=EVERY_EXPR)||LA231_0==WHERE||(LA231_0>=SUM && LA231_0<=COUNT)||LA231_0==CASE||LA231_0==OUTER||(LA231_0>=JOIN && LA231_0<=FULL)||(LA231_0>=EVENTS && LA231_0<=LAST)||(LA231_0>=UNIDIRECTIONAL && LA231_0<=CURRENT_TIMESTAMP)||(LA231_0>=SNAPSHOT && LA231_0<=INDEX)||(LA231_0>=BOOLEAN_TRUE && LA231_0<=VALUE_NULL)||(LA231_0>=DEFINE && LA231_0<=MATCHED)||LA231_0==NEWKW||LA231_0==CONTEXT||LA231_0==NUM_DOUBLE||(LA231_0>=IDENT && LA231_0<=LPAREN)||LA231_0==LCURLY||LA231_0==QUESTION||(LA231_0>=PLUS && LA231_0<=QUOTED_STRING_LITERAL)||LA231_0==MINUS||LA231_0==NUM_INT||(LA231_0>=TICKED_STRING_LITERAL && LA231_0<=NUM_FLOAT)) ) {
                    	                        alt231=1;
                    	                    }
                    	                    switch (alt231) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression8877);
                    	                            expressionList592=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList592.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN593=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression8880); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN593);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression8885);
                    	                    subSelectGroupExpression594=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression594.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop234;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt235=2;
                    int LA235_0 = input.LA(1);
                    if ( (LA235_0==NOT_EXPR) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression8981); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt241=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA241_1 = input.LA(2);
                        if ( (LA241_1==LPAREN) ) {
                            int LA241_5 = input.LA(3);
                            if ( (LA241_5==SELECT) ) {
                                alt241=2;
                            }
                            else if ( (LA241_5==WINDOW||LA241_5==BETWEEN||LA241_5==ESCAPE||(LA241_5>=NOT_EXPR && LA241_5<=EVERY_EXPR)||LA241_5==WHERE||(LA241_5>=SUM && LA241_5<=COUNT)||LA241_5==CASE||LA241_5==OUTER||(LA241_5>=JOIN && LA241_5<=FULL)||(LA241_5>=EVENTS && LA241_5<=LAST)||(LA241_5>=UNIDIRECTIONAL && LA241_5<=CURRENT_TIMESTAMP)||(LA241_5>=SNAPSHOT && LA241_5<=INDEX)||(LA241_5>=BOOLEAN_TRUE && LA241_5<=VALUE_NULL)||(LA241_5>=DEFINE && LA241_5<=MATCHED)||LA241_5==NEWKW||LA241_5==CONTEXT||LA241_5==NUM_DOUBLE||(LA241_5>=IDENT && LA241_5<=LPAREN)||LA241_5==LCURLY||LA241_5==QUESTION||(LA241_5>=PLUS && LA241_5<=QUOTED_STRING_LITERAL)||LA241_5==MINUS||LA241_5==NUM_INT||(LA241_5>=TICKED_STRING_LITERAL && LA241_5<=NUM_FLOAT)) ) {
                                alt241=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 241, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA241_1==LBRACK) ) {
                            alt241=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 241, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt241=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt241=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt241=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 241, 0, input);
                        throw nvae;
                    }
                    switch (alt241) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression9008); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt236=2;
                            int LA236_0 = input.LA(1);
                            if ( (LA236_0==LPAREN) ) {
                                alt236=1;
                            }
                            else if ( (LA236_0==LBRACK) ) {
                                alt236=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 236, 0, input);
                                throw nvae;
                            }
                            switch (alt236) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression9020); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression9026); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression9029);
                            expression595=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression595.getTree());
                            int alt238=2;
                            int LA238_0 = input.LA(1);
                            if ( (LA238_0==COLON) ) {
                                alt238=1;
                            }
                            else if ( (LA238_0==RBRACK||LA238_0==RPAREN||LA238_0==COMMA) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 0, input);
                                throw nvae;
                            }
                            switch (alt238) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression9051); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression9054);
                                    expression596=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression596.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop237:
                                    do {
                                        int alt237=2;
                                        int LA237_0 = input.LA(1);
                                        if ( (LA237_0==COMMA) ) {
                                            alt237=1;
                                        }
                                        switch (alt237) {
                                    	case 1 :
                                    	    {
                                    	    COMMA597=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression9080); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA597);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression9082);
                                    	    expression598=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression598.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop237;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt239=2;
                            int LA239_0 = input.LA(1);
                            if ( (LA239_0==RPAREN) ) {
                                alt239=1;
                            }
                            else if ( (LA239_0==RBRACK) ) {
                                alt239=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 239, 0, input);
                                throw nvae;
                            }
                            switch (alt239) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression9108); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression9114); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET599=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression9237); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET599);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression9239);
                            inSubSelectQuery600=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery600.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN601=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression9285); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN601);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression9287);
                            betweenList602=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList602.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE603=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression9337); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE603);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression9339);
                            concatenationExpr604=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr604.getTree());
                            int alt240=2;
                            int LA240_0 = input.LA(1);
                            if ( (LA240_0==ESCAPE) ) {
                                alt240=1;
                            }
                            switch (alt240) {
                                case 1 :
                                    {
                                    ESCAPE605=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression9342); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE605);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression9344);
                                    stringconstant606=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant606.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP607=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression9396); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP607);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression9398);
                            concatenationExpr608=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr608.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr609 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery9460);
            subQueryExpr609=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr609.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR612=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression610 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression611 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression613 = null;
        CommonTree c_tree=null;
        CommonTree LOR612_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr9485);
            additiveExpression610=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression610.getTree());
            int alt244=2;
            int LA244_0 = input.LA(1);
            if ( (LA244_0==LOR) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr9491); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr9493);
                    additiveExpression611=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression611.getTree());
                    loop243:
                    do {
                        int alt243=2;
                        int LA243_0 = input.LA(1);
                        if ( (LA243_0==LOR) ) {
                            alt243=1;
                        }
                        switch (alt243) {
                    	case 1 :
                    	    {
                    	    LOR612=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr9497); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR612);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr9499);
                    	    additiveExpression613=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression613.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop243;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS615=null;
        Token MINUS616=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression614 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression617 = null;
        CommonTree PLUS615_tree=null;
        CommonTree MINUS616_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression9540);
            multiplyExpression614=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression614.getTree());
            loop246:
            do {
                int alt246=2;
                int LA246_0 = input.LA(1);
                if ( (LA246_0==PLUS||LA246_0==MINUS) ) {
                    alt246=1;
                }
                switch (alt246) {
            	case 1 :
            	    {
            	    int alt245=2;
            	    int LA245_0 = input.LA(1);
            	    if ( (LA245_0==PLUS) ) {
            	        alt245=1;
            	    }
            	    else if ( (LA245_0==MINUS) ) {
            	        alt245=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 245, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt245) {
            	        case 1 :
            	            {
            	            PLUS615=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression9545); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS615_tree = (CommonTree)adaptor.create(PLUS615);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS615_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS616=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression9548); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS616_tree = (CommonTree)adaptor.create(MINUS616);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS616_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression9552);
            	    multiplyExpression617=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression617.getTree());
            	    }
            	    break;
            	default :
            	    break loop246;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR619=null;
        Token DIV620=null;
        Token MOD621=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression618 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression622 = null;
        CommonTree STAR619_tree=null;
        CommonTree DIV620_tree=null;
        CommonTree MOD621_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression9566);
            unaryExpression618=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression618.getTree());
            loop248:
            do {
                int alt248=2;
                int LA248_0 = input.LA(1);
                if ( (LA248_0==STAR||(LA248_0>=DIV && LA248_0<=MOD)) ) {
                    alt248=1;
                }
                switch (alt248) {
            	case 1 :
            	    {
            	    int alt247=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt247=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt247=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt247=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 247, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt247) {
            	        case 1 :
            	            {
            	            STAR619=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression9571); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR619_tree = (CommonTree)adaptor.create(STAR619);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR619_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV620=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression9574); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV620_tree = (CommonTree)adaptor.create(DIV620);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV620_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD621=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression9577); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD621_tree = (CommonTree)adaptor.create(MOD621);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD621_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression9581);
            	    unaryExpression622=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression622.getTree());
            	    }
            	    break;
            	default :
            	    break loop248;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS623=null;
        Token LPAREN627=null;
        Token RPAREN629=null;
        Token NEWKW639=null;
        Token LCURLY640=null;
        Token COMMA642=null;
        Token RCURLY644=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty624 = null;
        EsperEPL2GrammarParser.constant_return constant625 = null;
        EsperEPL2GrammarParser.substitution_return substitution626 = null;
        EsperEPL2GrammarParser.expression_return expression628 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass630 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass631 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction632 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc633 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression634 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression635 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass636 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass637 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression638 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign641 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign643 = null;
        CommonTree d_tree=null;
        CommonTree MINUS623_tree=null;
        CommonTree LPAREN627_tree=null;
        CommonTree RPAREN629_tree=null;
        CommonTree NEWKW639_tree=null;
        CommonTree LCURLY640_tree=null;
        CommonTree COMMA642_tree=null;
        CommonTree RCURLY644_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_NEWKW=new RewriteRuleTokenStream(adaptor,"token NEWKW");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_newAssign=new RewriteRuleSubtreeStream(adaptor,"rule newAssign");
        RewriteRuleSubtreeStream stream_subSelectExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt254=10;
            alt254 = dfa254.predict(input);
            switch (alt254) {
                case 1 :
                    {
                    MINUS623=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression9596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS623);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression9598);
                    eventProperty624=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty624.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression9611);
                    constant625=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant625.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression9616);
                    substitution626=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution626.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN627=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression9621); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN627);
                    pushFollow(FOLLOW_expression_in_unaryExpression9623);
                    expression628=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression628.getTree());
                    RPAREN629=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression9625); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN629);
                    int alt250=2;
                    int LA250_0 = input.LA(1);
                    if ( (LA250_0==DOT) ) {
                        alt250=1;
                    }
                    switch (alt250) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9630); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9632);
                            libFunctionNoClass630=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass630.getTree());
                            loop249:
                            do {
                                int alt249=2;
                                int LA249_0 = input.LA(1);
                                if ( (LA249_0==DOT) ) {
                                    alt249=1;
                                }
                                switch (alt249) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9637); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9639);
                            	    libFunctionNoClass631=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass631.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop249;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression9676);
                    eventPropertyOrLibFunction632=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction632.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression9688);
                    builtinFunc633=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc633.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression9694);
                    arrayExpression634=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression634.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression9699);
                    subSelectExpression635=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelectExpression.add(subSelectExpression635.getTree());
                    int alt252=2;
                    int LA252_0 = input.LA(1);
                    if ( (LA252_0==DOT) ) {
                        alt252=1;
                    }
                    switch (alt252) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9704); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9706);
                            libFunctionNoClass636=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass636.getTree());
                            loop251:
                            do {
                                int alt251=2;
                                int LA251_0 = input.LA(1);
                                if ( (LA251_0==DOT) ) {
                                    alt251=1;
                                }
                                switch (alt251) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9711); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9713);
                            	    libFunctionNoClass637=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass637.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop251;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_subSelectExpression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_subSelectExpression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression9750);
                    existsSubSelectExpression638=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression638.getTree());
                    }
                    break;
                case 10 :
                    {
                    NEWKW639=(Token)match(input,NEWKW,FOLLOW_NEWKW_in_unaryExpression9755); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NEWKW.add(NEWKW639);
                    LCURLY640=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_unaryExpression9757); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY640);
                    pushFollow(FOLLOW_newAssign_in_unaryExpression9759);
                    newAssign641=newAssign();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newAssign.add(newAssign641.getTree());
                    loop253:
                    do {
                        int alt253=2;
                        int LA253_0 = input.LA(1);
                        if ( (LA253_0==COMMA) ) {
                            alt253=1;
                        }
                        switch (alt253) {
                    	case 1 :
                    	    {
                    	    COMMA642=(Token)match(input,COMMA,FOLLOW_COMMA_in_unaryExpression9762); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA642);
                    	    pushFollow(FOLLOW_newAssign_in_unaryExpression9764);
                    	    newAssign643=newAssign();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_newAssign.add(newAssign643.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop253;
                        }
                    } while (true);
                    RCURLY644=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_unaryExpression9768); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY644);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NEWKW.nextNode(), root_1);
                        while ( stream_newAssign.hasNext() ) {
                            adaptor.addChild(root_1, stream_newAssign.nextTree());
                        }
                        stream_newAssign.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class newAssign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.newAssign_return newAssign() throws RecognitionException {
        EsperEPL2GrammarParser.newAssign_return retval = new EsperEPL2GrammarParser.newAssign_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS646=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty645 = null;
        EsperEPL2GrammarParser.expression_return expression647 = null;
        CommonTree EQUALS646_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_newAssign9790);
            eventProperty645=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty645.getTree());
            int alt255=2;
            int LA255_0 = input.LA(1);
            if ( (LA255_0==EQUALS) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    {
                    EQUALS646=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_newAssign9793); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS646);
                    pushFollow(FOLLOW_expression_in_newAssign9795);
                    expression647=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression647.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEW_ITEM, "NEW_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr648 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression9823);
            subQueryExpr648=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr648.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr649 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression9845);
            subQueryExpr649=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr649.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS650=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr651 = null;
        CommonTree EXISTS650_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS650=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression9867); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS650);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression9869);
            subQueryExpr651=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr651.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN652=null;
        Token SELECT653=null;
        Token DISTINCT654=null;
        Token FROM656=null;
        Token WHERE658=null;
        Token RPAREN660=null;
        EsperEPL2GrammarParser.selectionList_return selectionList655 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr657 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause659 = null;
        CommonTree LPAREN652_tree=null;
        CommonTree SELECT653_tree=null;
        CommonTree DISTINCT654_tree=null;
        CommonTree FROM656_tree=null;
        CommonTree WHERE658_tree=null;
        CommonTree RPAREN660_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN652=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr9902); if (state.failed) return retval;
            SELECT653=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr9908); if (state.failed) return retval;
            int alt256=2;
            int LA256_0 = input.LA(1);
            if ( (LA256_0==DISTINCT) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    {
                    DISTINCT654=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr9911); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT654_tree = (CommonTree)adaptor.create(DISTINCT654);
                    adaptor.addChild(root_0, DISTINCT654_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr9914);
            selectionList655=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList655.getTree());
            FROM656=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr9921); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr9924);
            subSelectFilterExpr657=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr657.getTree());
            int alt257=2;
            int LA257_0 = input.LA(1);
            if ( (LA257_0==WHERE) ) {
                alt257=1;
            }
            switch (alt257) {
                case 1 :
                    {
                    WHERE658=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr9932); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr9935);
                    whereClause659=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause659.getTree());
                    }
                    break;
            }
            RPAREN660=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr9944); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT662=null;
        Token DOT664=null;
        Token AS666=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression661 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression663 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression665 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT662_tree=null;
        CommonTree DOT664_tree=null;
        CommonTree AS666_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr9968);
            eventFilterExpression661=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression661.getTree());
            int alt259=2;
            int LA259_0 = input.LA(1);
            if ( (LA259_0==DOT) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    {
                    DOT662=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr9973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT662);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr9975);
                    viewExpression663=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression663.getTree());
                    loop258:
                    do {
                        int alt258=2;
                        int LA258_0 = input.LA(1);
                        if ( (LA258_0==DOT) ) {
                            alt258=1;
                        }
                        switch (alt258) {
                    	case 1 :
                    	    {
                    	    DOT664=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr9978); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT664);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr9980);
                    	    viewExpression665=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression665.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop258;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt260=3;
            int LA260_0 = input.LA(1);
            if ( (LA260_0==AS) ) {
                alt260=1;
            }
            else if ( (LA260_0==IDENT) ) {
                alt260=2;
            }
            switch (alt260) {
                case 1 :
                    {
                    AS666=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr9987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS666);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr9991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr9997); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt261=3;
            int LA261_0 = input.LA(1);
            if ( (LA261_0==RETAINUNION) ) {
                alt261=1;
            }
            else if ( (LA261_0==RETAININTERSECTION) ) {
                alt261=2;
            }
            switch (alt261) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr10004); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr10008); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LCURLY667=null;
        Token COMMA669=null;
        Token RCURLY671=null;
        EsperEPL2GrammarParser.expression_return expression668 = null;
        EsperEPL2GrammarParser.expression_return expression670 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass672 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass673 = null;
        CommonTree d_tree=null;
        CommonTree LCURLY667_tree=null;
        CommonTree COMMA669_tree=null;
        CommonTree RCURLY671_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LCURLY667=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression10048); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY667);
            int alt263=2;
            int LA263_0 = input.LA(1);
            if ( (LA263_0==WINDOW||LA263_0==BETWEEN||LA263_0==ESCAPE||(LA263_0>=NOT_EXPR && LA263_0<=EVERY_EXPR)||LA263_0==WHERE||(LA263_0>=SUM && LA263_0<=COUNT)||LA263_0==CASE||LA263_0==OUTER||(LA263_0>=JOIN && LA263_0<=FULL)||(LA263_0>=EVENTS && LA263_0<=LAST)||(LA263_0>=UNIDIRECTIONAL && LA263_0<=CURRENT_TIMESTAMP)||(LA263_0>=SNAPSHOT && LA263_0<=INDEX)||(LA263_0>=BOOLEAN_TRUE && LA263_0<=VALUE_NULL)||(LA263_0>=DEFINE && LA263_0<=MATCHED)||LA263_0==NEWKW||LA263_0==CONTEXT||LA263_0==NUM_DOUBLE||(LA263_0>=IDENT && LA263_0<=LPAREN)||LA263_0==LCURLY||LA263_0==QUESTION||(LA263_0>=PLUS && LA263_0<=QUOTED_STRING_LITERAL)||LA263_0==MINUS||LA263_0==NUM_INT||(LA263_0>=TICKED_STRING_LITERAL && LA263_0<=NUM_FLOAT)) ) {
                alt263=1;
            }
            switch (alt263) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression10051);
                    expression668=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression668.getTree());
                    loop262:
                    do {
                        int alt262=2;
                        int LA262_0 = input.LA(1);
                        if ( (LA262_0==COMMA) ) {
                            alt262=1;
                        }
                        switch (alt262) {
                    	case 1 :
                    	    {
                    	    COMMA669=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression10054); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA669);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression10056);
                    	    expression670=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression670.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop262;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY671=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression10063); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY671);
            int alt265=2;
            int LA265_0 = input.LA(1);
            if ( (LA265_0==DOT) ) {
                alt265=1;
            }
            switch (alt265) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression10068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression10070);
                    libFunctionNoClass672=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass672.getTree());
                    loop264:
                    do {
                        int alt264=2;
                        int LA264_0 = input.LA(1);
                        if ( (LA264_0==DOT) ) {
                            alt264=1;
                        }
                        switch (alt264) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression10075); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression10077);
                    	    libFunctionNoClass673=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass673.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop264;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_2);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token SUM674=null;
        Token LPAREN675=null;
        Token ALL676=null;
        Token DISTINCT677=null;
        Token RPAREN680=null;
        Token AVG681=null;
        Token LPAREN682=null;
        Token ALL683=null;
        Token DISTINCT684=null;
        Token RPAREN687=null;
        Token COUNT688=null;
        Token LPAREN689=null;
        Token ALL690=null;
        Token DISTINCT691=null;
        Token STAR693=null;
        Token RPAREN695=null;
        Token MEDIAN696=null;
        Token LPAREN697=null;
        Token ALL698=null;
        Token DISTINCT699=null;
        Token RPAREN702=null;
        Token STDDEV703=null;
        Token LPAREN704=null;
        Token ALL705=null;
        Token DISTINCT706=null;
        Token RPAREN709=null;
        Token AVEDEV710=null;
        Token LPAREN711=null;
        Token ALL712=null;
        Token DISTINCT713=null;
        Token RPAREN716=null;
        Token COALESCE720=null;
        Token LPAREN721=null;
        Token COMMA723=null;
        Token COMMA725=null;
        Token RPAREN727=null;
        Token PREVIOUS728=null;
        Token LPAREN729=null;
        Token COMMA731=null;
        Token RPAREN733=null;
        Token PREVIOUSTAIL736=null;
        Token LPAREN737=null;
        Token COMMA739=null;
        Token RPAREN741=null;
        Token PREVIOUSCOUNT744=null;
        Token LPAREN745=null;
        Token RPAREN747=null;
        Token PREVIOUSWINDOW748=null;
        Token LPAREN749=null;
        Token RPAREN751=null;
        Token PRIOR754=null;
        Token LPAREN755=null;
        Token NUM_INT756=null;
        Token COMMA757=null;
        Token RPAREN759=null;
        Token INSTANCEOF760=null;
        Token LPAREN761=null;
        Token COMMA763=null;
        Token COMMA765=null;
        Token RPAREN767=null;
        Token TYPEOF768=null;
        Token LPAREN769=null;
        Token RPAREN771=null;
        Token CAST772=null;
        Token LPAREN773=null;
        Token COMMA775=null;
        Token AS776=null;
        Token RPAREN778=null;
        Token EXISTS781=null;
        Token LPAREN782=null;
        Token RPAREN784=null;
        Token CURRENT_TIMESTAMP785=null;
        Token LPAREN786=null;
        Token RPAREN787=null;
        EsperEPL2GrammarParser.expression_return expression678 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr679 = null;
        EsperEPL2GrammarParser.expression_return expression685 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr686 = null;
        EsperEPL2GrammarParser.expression_return expression692 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr694 = null;
        EsperEPL2GrammarParser.expression_return expression700 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr701 = null;
        EsperEPL2GrammarParser.expression_return expression707 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr708 = null;
        EsperEPL2GrammarParser.expression_return expression714 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr715 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation717 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation718 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation719 = null;
        EsperEPL2GrammarParser.expression_return expression722 = null;
        EsperEPL2GrammarParser.expression_return expression724 = null;
        EsperEPL2GrammarParser.expression_return expression726 = null;
        EsperEPL2GrammarParser.expression_return expression730 = null;
        EsperEPL2GrammarParser.expression_return expression732 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass734 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass735 = null;
        EsperEPL2GrammarParser.expression_return expression738 = null;
        EsperEPL2GrammarParser.expression_return expression740 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass742 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass743 = null;
        EsperEPL2GrammarParser.expression_return expression746 = null;
        EsperEPL2GrammarParser.expression_return expression750 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass752 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass753 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty758 = null;
        EsperEPL2GrammarParser.expression_return expression762 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier764 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier766 = null;
        EsperEPL2GrammarParser.expression_return expression770 = null;
        EsperEPL2GrammarParser.expression_return expression774 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier777 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass779 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass780 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty783 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass788 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass789 = null;
        CommonTree d_tree=null;
        CommonTree SUM674_tree=null;
        CommonTree LPAREN675_tree=null;
        CommonTree ALL676_tree=null;
        CommonTree DISTINCT677_tree=null;
        CommonTree RPAREN680_tree=null;
        CommonTree AVG681_tree=null;
        CommonTree LPAREN682_tree=null;
        CommonTree ALL683_tree=null;
        CommonTree DISTINCT684_tree=null;
        CommonTree RPAREN687_tree=null;
        CommonTree COUNT688_tree=null;
        CommonTree LPAREN689_tree=null;
        CommonTree ALL690_tree=null;
        CommonTree DISTINCT691_tree=null;
        CommonTree STAR693_tree=null;
        CommonTree RPAREN695_tree=null;
        CommonTree MEDIAN696_tree=null;
        CommonTree LPAREN697_tree=null;
        CommonTree ALL698_tree=null;
        CommonTree DISTINCT699_tree=null;
        CommonTree RPAREN702_tree=null;
        CommonTree STDDEV703_tree=null;
        CommonTree LPAREN704_tree=null;
        CommonTree ALL705_tree=null;
        CommonTree DISTINCT706_tree=null;
        CommonTree RPAREN709_tree=null;
        CommonTree AVEDEV710_tree=null;
        CommonTree LPAREN711_tree=null;
        CommonTree ALL712_tree=null;
        CommonTree DISTINCT713_tree=null;
        CommonTree RPAREN716_tree=null;
        CommonTree COALESCE720_tree=null;
        CommonTree LPAREN721_tree=null;
        CommonTree COMMA723_tree=null;
        CommonTree COMMA725_tree=null;
        CommonTree RPAREN727_tree=null;
        CommonTree PREVIOUS728_tree=null;
        CommonTree LPAREN729_tree=null;
        CommonTree COMMA731_tree=null;
        CommonTree RPAREN733_tree=null;
        CommonTree PREVIOUSTAIL736_tree=null;
        CommonTree LPAREN737_tree=null;
        CommonTree COMMA739_tree=null;
        CommonTree RPAREN741_tree=null;
        CommonTree PREVIOUSCOUNT744_tree=null;
        CommonTree LPAREN745_tree=null;
        CommonTree RPAREN747_tree=null;
        CommonTree PREVIOUSWINDOW748_tree=null;
        CommonTree LPAREN749_tree=null;
        CommonTree RPAREN751_tree=null;
        CommonTree PRIOR754_tree=null;
        CommonTree LPAREN755_tree=null;
        CommonTree NUM_INT756_tree=null;
        CommonTree COMMA757_tree=null;
        CommonTree RPAREN759_tree=null;
        CommonTree INSTANCEOF760_tree=null;
        CommonTree LPAREN761_tree=null;
        CommonTree COMMA763_tree=null;
        CommonTree COMMA765_tree=null;
        CommonTree RPAREN767_tree=null;
        CommonTree TYPEOF768_tree=null;
        CommonTree LPAREN769_tree=null;
        CommonTree RPAREN771_tree=null;
        CommonTree CAST772_tree=null;
        CommonTree LPAREN773_tree=null;
        CommonTree COMMA775_tree=null;
        CommonTree AS776_tree=null;
        CommonTree RPAREN778_tree=null;
        CommonTree EXISTS781_tree=null;
        CommonTree LPAREN782_tree=null;
        CommonTree RPAREN784_tree=null;
        CommonTree CURRENT_TIMESTAMP785_tree=null;
        CommonTree LPAREN786_tree=null;
        CommonTree RPAREN787_tree=null;
        RewriteRuleTokenStream stream_CAST=new RewriteRuleTokenStream(adaptor,"token CAST");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PREVIOUSTAIL=new RewriteRuleTokenStream(adaptor,"token PREVIOUSTAIL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_CURRENT_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token CURRENT_TIMESTAMP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PREVIOUS=new RewriteRuleTokenStream(adaptor,"token PREVIOUS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_PREVIOUSWINDOW=new RewriteRuleTokenStream(adaptor,"token PREVIOUSWINDOW");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            int alt295=20;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt295=1;
                }
                break;
            case AVG:
                {
                alt295=2;
                }
                break;
            case COUNT:
                {
                alt295=3;
                }
                break;
            case MEDIAN:
                {
                alt295=4;
                }
                break;
            case STDDEV:
                {
                alt295=5;
                }
                break;
            case AVEDEV:
                {
                alt295=6;
                }
                break;
            case FIRST:
                {
                alt295=7;
                }
                break;
            case LAST:
                {
                alt295=8;
                }
                break;
            case WINDOW:
                {
                alt295=9;
                }
                break;
            case COALESCE:
                {
                alt295=10;
                }
                break;
            case PREVIOUS:
                {
                alt295=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt295=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt295=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt295=14;
                }
                break;
            case PRIOR:
                {
                alt295=15;
                }
                break;
            case INSTANCEOF:
                {
                alt295=16;
                }
                break;
            case TYPEOF:
                {
                alt295=17;
                }
                break;
            case CAST:
                {
                alt295=18;
                }
                break;
            case EXISTS:
                {
                alt295=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt295=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 295, 0, input);
                throw nvae;
            }
            switch (alt295) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM674=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc10126); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM674_tree = (CommonTree)adaptor.create(SUM674);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM674_tree, root_0);
                    }
                    LPAREN675=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10129); if (state.failed) return retval;
                    int alt266=3;
                    int LA266_0 = input.LA(1);
                    if ( (LA266_0==ALL) ) {
                        alt266=1;
                    }
                    else if ( (LA266_0==DISTINCT) ) {
                        alt266=2;
                    }
                    switch (alt266) {
                        case 1 :
                            {
                            ALL676=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10133); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT677=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10138); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT677_tree = (CommonTree)adaptor.create(DISTINCT677);
                            adaptor.addChild(root_0, DISTINCT677_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10142);
                    expression678=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression678.getTree());
                    int alt267=2;
                    int LA267_0 = input.LA(1);
                    if ( (LA267_0==COMMA) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10144);
                            aggregationFilterExpr679=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr679.getTree());
                            }
                            break;
                    }
                    RPAREN680=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10147); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG681=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc10153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG681_tree = (CommonTree)adaptor.create(AVG681);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG681_tree, root_0);
                    }
                    LPAREN682=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10156); if (state.failed) return retval;
                    int alt268=3;
                    int LA268_0 = input.LA(1);
                    if ( (LA268_0==ALL) ) {
                        alt268=1;
                    }
                    else if ( (LA268_0==DISTINCT) ) {
                        alt268=2;
                    }
                    switch (alt268) {
                        case 1 :
                            {
                            ALL683=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10160); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT684=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10165); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT684_tree = (CommonTree)adaptor.create(DISTINCT684);
                            adaptor.addChild(root_0, DISTINCT684_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10169);
                    expression685=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression685.getTree());
                    int alt269=2;
                    int LA269_0 = input.LA(1);
                    if ( (LA269_0==COMMA) ) {
                        alt269=1;
                    }
                    switch (alt269) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10171);
                            aggregationFilterExpr686=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr686.getTree());
                            }
                            break;
                    }
                    RPAREN687=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10174); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT688=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc10180); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT688_tree = (CommonTree)adaptor.create(COUNT688);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT688_tree, root_0);
                    }
                    LPAREN689=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10183); if (state.failed) return retval;
                    int alt271=2;
                    int LA271_0 = input.LA(1);
                    if ( (LA271_0==WINDOW||LA271_0==BETWEEN||LA271_0==ESCAPE||(LA271_0>=NOT_EXPR && LA271_0<=EVERY_EXPR)||LA271_0==WHERE||(LA271_0>=SUM && LA271_0<=COUNT)||LA271_0==CASE||LA271_0==OUTER||(LA271_0>=JOIN && LA271_0<=FULL)||(LA271_0>=DISTINCT && LA271_0<=ALL)||(LA271_0>=EVENTS && LA271_0<=LAST)||(LA271_0>=UNIDIRECTIONAL && LA271_0<=CURRENT_TIMESTAMP)||(LA271_0>=SNAPSHOT && LA271_0<=INDEX)||(LA271_0>=BOOLEAN_TRUE && LA271_0<=VALUE_NULL)||(LA271_0>=DEFINE && LA271_0<=MATCHED)||LA271_0==NEWKW||LA271_0==CONTEXT||LA271_0==NUM_DOUBLE||(LA271_0>=IDENT && LA271_0<=LPAREN)||LA271_0==LCURLY||LA271_0==QUESTION||(LA271_0>=PLUS && LA271_0<=QUOTED_STRING_LITERAL)||LA271_0==MINUS||LA271_0==NUM_INT||(LA271_0>=TICKED_STRING_LITERAL && LA271_0<=NUM_FLOAT)) ) {
                        alt271=1;
                    }
                    else if ( (LA271_0==STAR) ) {
                        alt271=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 271, 0, input);
                        throw nvae;
                    }
                    switch (alt271) {
                        case 1 :
                            {
                            {
                            int alt270=3;
                            int LA270_0 = input.LA(1);
                            if ( (LA270_0==ALL) ) {
                                alt270=1;
                            }
                            else if ( (LA270_0==DISTINCT) ) {
                                alt270=2;
                            }
                            switch (alt270) {
                                case 1 :
                                    {
                                    ALL690=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10195); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT691=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10200); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT691_tree = (CommonTree)adaptor.create(DISTINCT691);
                                    adaptor.addChild(root_0, DISTINCT691_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc10204);
                            expression692=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression692.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR693=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc10215); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    int alt272=2;
                    int LA272_0 = input.LA(1);
                    if ( (LA272_0==COMMA) ) {
                        alt272=1;
                    }
                    switch (alt272) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10226);
                            aggregationFilterExpr694=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr694.getTree());
                            }
                            break;
                    }
                    RPAREN695=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10229); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN696=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc10235); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN696_tree = (CommonTree)adaptor.create(MEDIAN696);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN696_tree, root_0);
                    }
                    LPAREN697=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10238); if (state.failed) return retval;
                    int alt273=3;
                    int LA273_0 = input.LA(1);
                    if ( (LA273_0==ALL) ) {
                        alt273=1;
                    }
                    else if ( (LA273_0==DISTINCT) ) {
                        alt273=2;
                    }
                    switch (alt273) {
                        case 1 :
                            {
                            ALL698=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10242); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT699=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10247); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT699_tree = (CommonTree)adaptor.create(DISTINCT699);
                            adaptor.addChild(root_0, DISTINCT699_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10251);
                    expression700=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression700.getTree());
                    int alt274=2;
                    int LA274_0 = input.LA(1);
                    if ( (LA274_0==COMMA) ) {
                        alt274=1;
                    }
                    switch (alt274) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10253);
                            aggregationFilterExpr701=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr701.getTree());
                            }
                            break;
                    }
                    RPAREN702=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10256); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV703=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc10262); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV703_tree = (CommonTree)adaptor.create(STDDEV703);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV703_tree, root_0);
                    }
                    LPAREN704=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10265); if (state.failed) return retval;
                    int alt275=3;
                    int LA275_0 = input.LA(1);
                    if ( (LA275_0==ALL) ) {
                        alt275=1;
                    }
                    else if ( (LA275_0==DISTINCT) ) {
                        alt275=2;
                    }
                    switch (alt275) {
                        case 1 :
                            {
                            ALL705=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10269); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT706=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10274); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT706_tree = (CommonTree)adaptor.create(DISTINCT706);
                            adaptor.addChild(root_0, DISTINCT706_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10278);
                    expression707=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression707.getTree());
                    int alt276=2;
                    int LA276_0 = input.LA(1);
                    if ( (LA276_0==COMMA) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10280);
                            aggregationFilterExpr708=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr708.getTree());
                            }
                            break;
                    }
                    RPAREN709=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10283); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV710=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc10289); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV710_tree = (CommonTree)adaptor.create(AVEDEV710);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV710_tree, root_0);
                    }
                    LPAREN711=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10292); if (state.failed) return retval;
                    int alt277=3;
                    int LA277_0 = input.LA(1);
                    if ( (LA277_0==ALL) ) {
                        alt277=1;
                    }
                    else if ( (LA277_0==DISTINCT) ) {
                        alt277=2;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            ALL712=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10296); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT713=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10301); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT713_tree = (CommonTree)adaptor.create(DISTINCT713);
                            adaptor.addChild(root_0, DISTINCT713_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10305);
                    expression714=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression714.getTree());
                    int alt278=2;
                    int LA278_0 = input.LA(1);
                    if ( (LA278_0==COMMA) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10307);
                            aggregationFilterExpr715=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr715.getTree());
                            }
                            break;
                    }
                    RPAREN716=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10310); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc10316);
                    firstAggregation717=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation717.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc10321);
                    lastAggregation718=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation718.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc10326);
                    windowAggregation719=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation719.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE720=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc10331); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE720_tree = (CommonTree)adaptor.create(COALESCE720);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE720_tree, root_0);
                    }
                    LPAREN721=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10334); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10337);
                    expression722=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression722.getTree());
                    COMMA723=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10339); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10342);
                    expression724=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression724.getTree());
                    loop279:
                    do {
                        int alt279=2;
                        int LA279_0 = input.LA(1);
                        if ( (LA279_0==COMMA) ) {
                            alt279=1;
                        }
                        switch (alt279) {
                    	case 1 :
                    	    {
                    	    COMMA725=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10345); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc10348);
                    	    expression726=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression726.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop279;
                        }
                    } while (true);
                    RPAREN727=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10352); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    PREVIOUS728=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc10358); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUS.add(PREVIOUS728);
                    LPAREN729=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN729);
                    pushFollow(FOLLOW_expression_in_builtinFunc10362);
                    expression730=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression730.getTree());
                    int alt280=2;
                    int LA280_0 = input.LA(1);
                    if ( (LA280_0==COMMA) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            {
                            COMMA731=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10365); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA731);
                            pushFollow(FOLLOW_expression_in_builtinFunc10367);
                            expression732=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression732.getTree());
                            }
                            break;
                    }
                    RPAREN733=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10371); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN733);
                    int alt282=2;
                    int LA282_0 = input.LA(1);
                    if ( (LA282_0==DOT) ) {
                        alt282=1;
                    }
                    switch (alt282) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10376); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10378);
                            libFunctionNoClass734=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass734.getTree());
                            loop281:
                            do {
                                int alt281=2;
                                int LA281_0 = input.LA(1);
                                if ( (LA281_0==DOT) ) {
                                    alt281=1;
                                }
                                switch (alt281) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10383); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10385);
                            	    libFunctionNoClass735=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass735.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop281;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    {
                    PREVIOUSTAIL736=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc10432); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSTAIL.add(PREVIOUSTAIL736);
                    LPAREN737=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN737);
                    pushFollow(FOLLOW_expression_in_builtinFunc10436);
                    expression738=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression738.getTree());
                    int alt283=2;
                    int LA283_0 = input.LA(1);
                    if ( (LA283_0==COMMA) ) {
                        alt283=1;
                    }
                    switch (alt283) {
                        case 1 :
                            {
                            COMMA739=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10439); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA739);
                            pushFollow(FOLLOW_expression_in_builtinFunc10441);
                            expression740=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression740.getTree());
                            }
                            break;
                    }
                    RPAREN741=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10445); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN741);
                    int alt285=2;
                    int LA285_0 = input.LA(1);
                    if ( (LA285_0==DOT) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10450); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10452);
                            libFunctionNoClass742=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass742.getTree());
                            loop284:
                            do {
                                int alt284=2;
                                int LA284_0 = input.LA(1);
                                if ( (LA284_0==DOT) ) {
                                    alt284=1;
                                }
                                switch (alt284) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10457); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10459);
                            	    libFunctionNoClass743=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass743.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop284;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT744=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc10506); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT744_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT744);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT744_tree, root_0);
                    }
                    LPAREN745=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10509); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10512);
                    expression746=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression746.getTree());
                    RPAREN747=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10514); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    PREVIOUSWINDOW748=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc10520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSWINDOW.add(PREVIOUSWINDOW748);
                    LPAREN749=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN749);
                    pushFollow(FOLLOW_expression_in_builtinFunc10524);
                    expression750=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression750.getTree());
                    RPAREN751=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN751);
                    int alt287=2;
                    int LA287_0 = input.LA(1);
                    if ( (LA287_0==DOT) ) {
                        alt287=1;
                    }
                    switch (alt287) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10531); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10533);
                            libFunctionNoClass752=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass752.getTree());
                            loop286:
                            do {
                                int alt286=2;
                                int LA286_0 = input.LA(1);
                                if ( (LA286_0==DOT) ) {
                                    alt286=1;
                                }
                                switch (alt286) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10538); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10540);
                            	    libFunctionNoClass753=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass753.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop286;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR754=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc10585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR754_tree = (CommonTree)adaptor.create(PRIOR754);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR754_tree, root_0);
                    }
                    LPAREN755=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10588); if (state.failed) return retval;
                    NUM_INT756=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc10591); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT756_tree = (CommonTree)adaptor.create(NUM_INT756);
                    adaptor.addChild(root_0, NUM_INT756_tree);
                    }
                    COMMA757=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10593); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc10596);
                    eventProperty758=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty758.getTree());
                    RPAREN759=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10598); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF760=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc10608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF760_tree = (CommonTree)adaptor.create(INSTANCEOF760);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF760_tree, root_0);
                    }
                    LPAREN761=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10611); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10614);
                    expression762=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression762.getTree());
                    COMMA763=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10616); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc10619);
                    classIdentifier764=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier764.getTree());
                    loop288:
                    do {
                        int alt288=2;
                        int LA288_0 = input.LA(1);
                        if ( (LA288_0==COMMA) ) {
                            alt288=1;
                        }
                        switch (alt288) {
                    	case 1 :
                    	    {
                    	    COMMA765=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10622); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc10625);
                    	    classIdentifier766=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier766.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop288;
                        }
                    } while (true);
                    RPAREN767=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10629); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF768=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc10635); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF768_tree = (CommonTree)adaptor.create(TYPEOF768);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF768_tree, root_0);
                    }
                    LPAREN769=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10638); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10641);
                    expression770=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression770.getTree());
                    RPAREN771=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10643); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    CAST772=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc10649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CAST.add(CAST772);
                    LPAREN773=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10651); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN773);
                    pushFollow(FOLLOW_expression_in_builtinFunc10653);
                    expression774=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression774.getTree());
                    int alt289=2;
                    int LA289_0 = input.LA(1);
                    if ( (LA289_0==COMMA) ) {
                        alt289=1;
                    }
                    else if ( (LA289_0==AS) ) {
                        alt289=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 289, 0, input);
                        throw nvae;
                    }
                    switch (alt289) {
                        case 1 :
                            {
                            COMMA775=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10656); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA775);
                            }
                            break;
                        case 2 :
                            {
                            AS776=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc10660); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS776);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc10663);
                    classIdentifier777=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier777.getTree());
                    RPAREN778=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10665); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN778);
                    int alt291=2;
                    int LA291_0 = input.LA(1);
                    if ( (LA291_0==DOT) ) {
                        alt291=1;
                    }
                    switch (alt291) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10670); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10672);
                            libFunctionNoClass779=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass779.getTree());
                            loop290:
                            do {
                                int alt290=2;
                                int LA290_0 = input.LA(1);
                                if ( (LA290_0==DOT) ) {
                                    alt290=1;
                                }
                                switch (alt290) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10677); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10679);
                            	    libFunctionNoClass780=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass780.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop290;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_2, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS781=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc10724); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS781_tree = (CommonTree)adaptor.create(EXISTS781);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS781_tree, root_0);
                    }
                    LPAREN782=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10727); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc10730);
                    eventProperty783=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty783.getTree());
                    RPAREN784=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10732); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    CURRENT_TIMESTAMP785=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc10738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURRENT_TIMESTAMP.add(CURRENT_TIMESTAMP785);
                    int alt292=2;
                    int LA292_0 = input.LA(1);
                    if ( (LA292_0==LPAREN) ) {
                        alt292=1;
                    }
                    switch (alt292) {
                        case 1 :
                            {
                            LPAREN786=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10741); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN786);
                            RPAREN787=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10743); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN787);
                            }
                            break;
                    }
                    int alt294=2;
                    int LA294_0 = input.LA(1);
                    if ( (LA294_0==DOT) ) {
                        alt294=1;
                    }
                    switch (alt294) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10750); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10752);
                            libFunctionNoClass788=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass788.getTree());
                            loop293:
                            do {
                                int alt293=2;
                                int LA293_0 = input.LA(1);
                                if ( (LA293_0==DOT) ) {
                                    alt293=1;
                                }
                                switch (alt293) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10757); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10759);
                            	    libFunctionNoClass789=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass789.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop293;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_2);
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token FIRST790=null;
        Token LPAREN791=null;
        Token COMMA793=null;
        Token RPAREN795=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr792 = null;
        EsperEPL2GrammarParser.expression_return expression794 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass796 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass797 = null;
        CommonTree d_tree=null;
        CommonTree FIRST790_tree=null;
        CommonTree LPAREN791_tree=null;
        CommonTree COMMA793_tree=null;
        CommonTree RPAREN795_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            FIRST790=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation10803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST790);
            LPAREN791=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation10805); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN791);
            int alt297=2;
            int LA297_0 = input.LA(1);
            if ( (LA297_0==WINDOW||LA297_0==BETWEEN||LA297_0==ESCAPE||(LA297_0>=NOT_EXPR && LA297_0<=EVERY_EXPR)||LA297_0==WHERE||(LA297_0>=SUM && LA297_0<=COUNT)||LA297_0==CASE||LA297_0==OUTER||(LA297_0>=JOIN && LA297_0<=FULL)||(LA297_0>=EVENTS && LA297_0<=LAST)||(LA297_0>=UNIDIRECTIONAL && LA297_0<=CURRENT_TIMESTAMP)||(LA297_0>=SNAPSHOT && LA297_0<=INDEX)||(LA297_0>=BOOLEAN_TRUE && LA297_0<=VALUE_NULL)||(LA297_0>=DEFINE && LA297_0<=MATCHED)||LA297_0==NEWKW||LA297_0==CONTEXT||LA297_0==NUM_DOUBLE||(LA297_0>=IDENT && LA297_0<=LPAREN)||LA297_0==LCURLY||LA297_0==STAR||LA297_0==QUESTION||(LA297_0>=PLUS && LA297_0<=QUOTED_STRING_LITERAL)||LA297_0==MINUS||LA297_0==NUM_INT||(LA297_0>=TICKED_STRING_LITERAL && LA297_0<=NUM_FLOAT)) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_firstAggregation10808);
                    accessAggExpr792=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr792.getTree());
                    int alt296=2;
                    int LA296_0 = input.LA(1);
                    if ( (LA296_0==COMMA) ) {
                        alt296=1;
                    }
                    switch (alt296) {
                        case 1 :
                            {
                            COMMA793=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation10811); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA793);
                            pushFollow(FOLLOW_expression_in_firstAggregation10813);
                            expression794=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression794.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN795=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation10819); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN795);
            int alt299=2;
            int LA299_0 = input.LA(1);
            if ( (LA299_0==DOT) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation10824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation10826);
                    libFunctionNoClass796=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass796.getTree());
                    loop298:
                    do {
                        int alt298=2;
                        int LA298_0 = input.LA(1);
                        if ( (LA298_0==DOT) ) {
                            alt298=1;
                        }
                        switch (alt298) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation10831); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation10833);
                    	    libFunctionNoClass797=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass797.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop298;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LAST798=null;
        Token LPAREN799=null;
        Token COMMA801=null;
        Token RPAREN803=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr800 = null;
        EsperEPL2GrammarParser.expression_return expression802 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass804 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass805 = null;
        CommonTree d_tree=null;
        CommonTree LAST798_tree=null;
        CommonTree LPAREN799_tree=null;
        CommonTree COMMA801_tree=null;
        CommonTree RPAREN803_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LAST798=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation10888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST798);
            LPAREN799=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation10890); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN799);
            int alt301=2;
            int LA301_0 = input.LA(1);
            if ( (LA301_0==WINDOW||LA301_0==BETWEEN||LA301_0==ESCAPE||(LA301_0>=NOT_EXPR && LA301_0<=EVERY_EXPR)||LA301_0==WHERE||(LA301_0>=SUM && LA301_0<=COUNT)||LA301_0==CASE||LA301_0==OUTER||(LA301_0>=JOIN && LA301_0<=FULL)||(LA301_0>=EVENTS && LA301_0<=LAST)||(LA301_0>=UNIDIRECTIONAL && LA301_0<=CURRENT_TIMESTAMP)||(LA301_0>=SNAPSHOT && LA301_0<=INDEX)||(LA301_0>=BOOLEAN_TRUE && LA301_0<=VALUE_NULL)||(LA301_0>=DEFINE && LA301_0<=MATCHED)||LA301_0==NEWKW||LA301_0==CONTEXT||LA301_0==NUM_DOUBLE||(LA301_0>=IDENT && LA301_0<=LPAREN)||LA301_0==LCURLY||LA301_0==STAR||LA301_0==QUESTION||(LA301_0>=PLUS && LA301_0<=QUOTED_STRING_LITERAL)||LA301_0==MINUS||LA301_0==NUM_INT||(LA301_0>=TICKED_STRING_LITERAL && LA301_0<=NUM_FLOAT)) ) {
                alt301=1;
            }
            switch (alt301) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_lastAggregation10893);
                    accessAggExpr800=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr800.getTree());
                    int alt300=2;
                    int LA300_0 = input.LA(1);
                    if ( (LA300_0==COMMA) ) {
                        alt300=1;
                    }
                    switch (alt300) {
                        case 1 :
                            {
                            COMMA801=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation10896); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA801);
                            pushFollow(FOLLOW_expression_in_lastAggregation10898);
                            expression802=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression802.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN803=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation10904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN803);
            int alt303=2;
            int LA303_0 = input.LA(1);
            if ( (LA303_0==DOT) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation10909); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation10911);
                    libFunctionNoClass804=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass804.getTree());
                    loop302:
                    do {
                        int alt302=2;
                        int LA302_0 = input.LA(1);
                        if ( (LA302_0==DOT) ) {
                            alt302=1;
                        }
                        switch (alt302) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation10916); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation10918);
                    	    libFunctionNoClass805=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass805.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop302;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token WINDOW806=null;
        Token LPAREN807=null;
        Token RPAREN809=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr808 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass810 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass811 = null;
        CommonTree d_tree=null;
        CommonTree WINDOW806_tree=null;
        CommonTree LPAREN807_tree=null;
        CommonTree RPAREN809_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            WINDOW806=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation10974); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW806);
            LPAREN807=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation10976); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN807);
            int alt304=2;
            int LA304_0 = input.LA(1);
            if ( (LA304_0==WINDOW||LA304_0==BETWEEN||LA304_0==ESCAPE||(LA304_0>=NOT_EXPR && LA304_0<=EVERY_EXPR)||LA304_0==WHERE||(LA304_0>=SUM && LA304_0<=COUNT)||LA304_0==CASE||LA304_0==OUTER||(LA304_0>=JOIN && LA304_0<=FULL)||(LA304_0>=EVENTS && LA304_0<=LAST)||(LA304_0>=UNIDIRECTIONAL && LA304_0<=CURRENT_TIMESTAMP)||(LA304_0>=SNAPSHOT && LA304_0<=INDEX)||(LA304_0>=BOOLEAN_TRUE && LA304_0<=VALUE_NULL)||(LA304_0>=DEFINE && LA304_0<=MATCHED)||LA304_0==NEWKW||LA304_0==CONTEXT||LA304_0==NUM_DOUBLE||(LA304_0>=IDENT && LA304_0<=LPAREN)||LA304_0==LCURLY||LA304_0==STAR||LA304_0==QUESTION||(LA304_0>=PLUS && LA304_0<=QUOTED_STRING_LITERAL)||LA304_0==MINUS||LA304_0==NUM_INT||(LA304_0>=TICKED_STRING_LITERAL && LA304_0<=NUM_FLOAT)) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_windowAggregation10978);
                    accessAggExpr808=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr808.getTree());
                    }
                    break;
            }
            RPAREN809=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation10981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN809);
            int alt306=2;
            int LA306_0 = input.LA(1);
            if ( (LA306_0==DOT) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation10986); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation10988);
                    libFunctionNoClass810=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass810.getTree());
                    loop305:
                    do {
                        int alt305=2;
                        int LA305_0 = input.LA(1);
                        if ( (LA305_0==DOT) ) {
                            alt305=1;
                        }
                        switch (alt305) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation10993); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation10995);
                    	    libFunctionNoClass811=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass811.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop305;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector812 = null;
        EsperEPL2GrammarParser.expression_return expression813 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyStreamSelector=new RewriteRuleSubtreeStream(adaptor,"rule propertyStreamSelector");
        try {
            int alt307=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt307=1;
                }
                break;
            case IDENT:
                {
                int LA307_2 = input.LA(2);
                if ( (LA307_2==DOT) ) {
                    int LA307_77 = input.LA(3);
                    if ( (LA307_77==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt307=2;
                    }
                    else if ( (LA307_77==WINDOW||LA307_77==BETWEEN||LA307_77==ESCAPE||LA307_77==EVERY_EXPR||LA307_77==WHERE||(LA307_77>=SUM && LA307_77<=COUNT)||LA307_77==OUTER||(LA307_77>=JOIN && LA307_77<=FULL)||(LA307_77>=EVENTS && LA307_77<=LAST)||(LA307_77>=UNIDIRECTIONAL && LA307_77<=PREVIOUSTAIL)||LA307_77==PRIOR||(LA307_77>=WEEKDAY && LA307_77<=CAST)||(LA307_77>=SNAPSHOT && LA307_77<=INDEX)||(LA307_77>=DEFINE && LA307_77<=MATCHED)||LA307_77==CONTEXT||LA307_77==IDENT||LA307_77==TICKED_STRING_LITERAL) ) {
                        alt307=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 307, 77, input);
                        throw nvae;
                    }
                }
                else if ( ((LA307_2>=IN_SET && LA307_2<=REGEXP)||(LA307_2>=OR_EXPR && LA307_2<=NOT_EXPR)||LA307_2==IS||LA307_2==LBRACK||(LA307_2>=LPAREN && LA307_2<=RPAREN)||(LA307_2>=COMMA && LA307_2<=EQUALS)||LA307_2==STAR||(LA307_2>=LT && LA307_2<=PLUS)||(LA307_2>=BAND && LA307_2<=MOD)||LA307_2==ESCAPECHAR) ) {
                    alt307=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 307, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case QUESTION:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt307=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 307, 0, input);
                throw nvae;
            }
            switch (alt307) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr11052); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr11072);
                    propertyStreamSelector812=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyStreamSelector.add(propertyStreamSelector812.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_propertyStreamSelector.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_accessAggExpr11085);
                    expression813=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression813.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class aggregationFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.aggregationFilterExpr_return retval = new EsperEPL2GrammarParser.aggregationFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA814=null;
        EsperEPL2GrammarParser.expression_return expression815 = null;
        CommonTree COMMA814_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            COMMA814=(Token)match(input,COMMA,FOLLOW_COMMA_in_aggregationFilterExpr11104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA814);
            pushFollow(FOLLOW_expression_in_aggregationFilterExpr11106);
            expression815=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression815.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGG_FILTER_EXPR, "AGG_FILTER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty816 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction817 = null;
        try {
            int alt308=2;
            int LA308_0 = input.LA(1);
            if ( (LA308_0==IDENT) ) {
                int LA308_1 = input.LA(2);
                if ( (LA308_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case FOR:
                    case WHILE:
                    case USING:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case LBRACK:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case LCURLY:
                    case STAR:
                    case QUESTION:
                    case PLUS:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt308=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA308_312 = input.LA(4);
                        if ( (LA308_312==RPAREN) ) {
                            int LA308_727 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 727, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA308_312>=IN_SET && LA308_312<=REGEXP)||(LA308_312>=OR_EXPR && LA308_312<=NOT_EXPR)||LA308_312==IS||(LA308_312>=ASC && LA308_312<=DESC)||(LA308_312>=TIMEPERIOD_SEC && LA308_312<=TIMEPERIOD_SECONDS)||(LA308_312>=COMMA && LA308_312<=EQUALS)||LA308_312==STAR||(LA308_312>=LT && LA308_312<=GT)||(LA308_312>=BOR && LA308_312<=PLUS)||(LA308_312>=BAND && LA308_312<=MOD)) ) {
                            alt308=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 312, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA308_313 = input.LA(4);
                        if ( ((LA308_313>=IN_SET && LA308_313<=REGEXP)||(LA308_313>=OR_EXPR && LA308_313<=NOT_EXPR)||LA308_313==IS||(LA308_313>=ASC && LA308_313<=DESC)||(LA308_313>=TIMEPERIOD_SEC && LA308_313<=TIMEPERIOD_SECONDS)||(LA308_313>=COMMA && LA308_313<=EQUALS)||LA308_313==STAR||(LA308_313>=LT && LA308_313<=GT)||(LA308_313>=BOR && LA308_313<=PLUS)||(LA308_313>=BAND && LA308_313<=MOD)) ) {
                            alt308=2;
                        }
                        else if ( (LA308_313==RPAREN) ) {
                            int LA308_783 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 783, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 313, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 308, 57, input);
                        throw nvae;
                    }
                }
                else if ( (LA308_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==DOT) ) {
                    int LA308_59 = input.LA(3);
                    if ( (LA308_59==IDENT) ) {
                        int LA308_379 = input.LA(4);
                        if ( (LA308_379==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==LPAREN) ) {
                            int LA308_791 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 791, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA308_379==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_379==DOT) ) {
                            int LA308_849 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 849, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 379, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA308_59==TICKED_STRING_LITERAL) ) {
                        int LA308_380 = input.LA(4);
                        if ( (LA308_380==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==LPAREN) ) {
                            int LA308_852 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 852, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA308_380==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_380==DOT) ) {
                            int LA308_910 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 910, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 380, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA308_59==MAX) ) {
                        int LA308_381 = input.LA(4);
                        if ( (LA308_381==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==LPAREN) ) {
                            int LA308_913 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 913, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA308_381==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_381==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 381, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA308_59==MIN) ) {
                        int LA308_382 = input.LA(4);
                        if ( (LA308_382==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==LPAREN) ) {
                            int LA308_974 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 974, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA308_382==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_382==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 382, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA308_59==BETWEEN||LA308_59==WHERE||LA308_59==SET||LA308_59==AFTER) ) {
                        alt308=2;
                    }
                    else if ( (LA308_59==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==FOR) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_59==USING) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 308, 59, input);
                        throw nvae;
                    }
                }
                else if ( (LA308_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 308, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA308_0==TICKED_STRING_LITERAL) ) {
                int LA308_2 = input.LA(2);
                if ( (LA308_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case FOR:
                    case WHILE:
                    case USING:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case LBRACK:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case LCURLY:
                    case STAR:
                    case QUESTION:
                    case PLUS:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt308=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA308_446 = input.LA(4);
                        if ( (LA308_446==RPAREN) ) {
                            int LA308_1033 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 1033, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA308_446>=IN_SET && LA308_446<=REGEXP)||(LA308_446>=OR_EXPR && LA308_446<=NOT_EXPR)||LA308_446==IS||(LA308_446>=ASC && LA308_446<=DESC)||(LA308_446>=TIMEPERIOD_SEC && LA308_446<=TIMEPERIOD_SECONDS)||(LA308_446>=COMMA && LA308_446<=EQUALS)||LA308_446==STAR||(LA308_446>=LT && LA308_446<=GT)||(LA308_446>=BOR && LA308_446<=PLUS)||(LA308_446>=BAND && LA308_446<=MOD)) ) {
                            alt308=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 446, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA308_447 = input.LA(4);
                        if ( ((LA308_447>=IN_SET && LA308_447<=REGEXP)||(LA308_447>=OR_EXPR && LA308_447<=NOT_EXPR)||LA308_447==IS||(LA308_447>=ASC && LA308_447<=DESC)||(LA308_447>=TIMEPERIOD_SEC && LA308_447<=TIMEPERIOD_SECONDS)||(LA308_447>=COMMA && LA308_447<=EQUALS)||LA308_447==STAR||(LA308_447>=LT && LA308_447<=GT)||(LA308_447>=BOR && LA308_447<=PLUS)||(LA308_447>=BAND && LA308_447<=MOD)) ) {
                            alt308=2;
                        }
                        else if ( (LA308_447==RPAREN) ) {
                            int LA308_1089 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 1089, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 447, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 308, 118, input);
                        throw nvae;
                    }
                }
                else if ( (LA308_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==DOT) ) {
                    int LA308_120 = input.LA(3);
                    if ( (LA308_120==IDENT) ) {
                        int LA308_513 = input.LA(4);
                        if ( (LA308_513==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==LPAREN) ) {
                            int LA308_1097 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 1097, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA308_513==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_513==DOT) ) {
                            int LA308_1155 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 1155, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 513, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA308_120==TICKED_STRING_LITERAL) ) {
                        int LA308_514 = input.LA(4);
                        if ( (LA308_514==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==LPAREN) ) {
                            int LA308_1158 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 1158, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA308_514==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_514==DOT) ) {
                            int LA308_1216 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 1216, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 514, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA308_120==MAX) ) {
                        int LA308_515 = input.LA(4);
                        if ( (LA308_515==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==LPAREN) ) {
                            int LA308_1219 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 1219, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA308_515==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_515==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 515, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA308_120==MIN) ) {
                        int LA308_516 = input.LA(4);
                        if ( (LA308_516==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==LPAREN) ) {
                            int LA308_1280 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 1280, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA308_516==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else if ( (LA308_516==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt308=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 516, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA308_120==BETWEEN||LA308_120==WHERE||LA308_120==SET||LA308_120==AFTER) ) {
                        alt308=2;
                    }
                    else if ( (LA308_120==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==FOR) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else if ( (LA308_120==USING) && (synpred5_EsperEPL2Grammar())) {
                        alt308=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 308, 120, input);
                        throw nvae;
                    }
                }
                else if ( (LA308_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 308, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA308_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==MAX) ) {
                int LA308_9 = input.LA(2);
                if ( (LA308_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case FOR:
                    case WHILE:
                    case USING:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case LBRACK:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case LCURLY:
                    case STAR:
                    case QUESTION:
                    case PLUS:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt308=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA308_580 = input.LA(4);
                        if ( (LA308_580==RPAREN) ) {
                            int LA308_1339 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 1339, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA308_580>=IN_SET && LA308_580<=REGEXP)||(LA308_580>=OR_EXPR && LA308_580<=NOT_EXPR)||LA308_580==IS||(LA308_580>=ASC && LA308_580<=DESC)||(LA308_580>=TIMEPERIOD_SEC && LA308_580<=TIMEPERIOD_SECONDS)||(LA308_580>=COMMA && LA308_580<=EQUALS)||LA308_580==STAR||(LA308_580>=LT && LA308_580<=GT)||(LA308_580>=BOR && LA308_580<=PLUS)||(LA308_580>=BAND && LA308_580<=MOD)) ) {
                            alt308=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 580, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA308_581 = input.LA(4);
                        if ( ((LA308_581>=IN_SET && LA308_581<=REGEXP)||(LA308_581>=OR_EXPR && LA308_581<=NOT_EXPR)||LA308_581==IS||(LA308_581>=ASC && LA308_581<=DESC)||(LA308_581>=TIMEPERIOD_SEC && LA308_581<=TIMEPERIOD_SECONDS)||(LA308_581>=COMMA && LA308_581<=EQUALS)||LA308_581==STAR||(LA308_581>=LT && LA308_581<=GT)||(LA308_581>=BOR && LA308_581<=PLUS)||(LA308_581>=BAND && LA308_581<=MOD)) ) {
                            alt308=2;
                        }
                        else if ( (LA308_581==RPAREN) ) {
                            int LA308_1395 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 1395, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 581, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 308, 179, input);
                        throw nvae;
                    }
                }
                else if ( (LA308_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 308, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA308_0==MIN) ) {
                int LA308_10 = input.LA(2);
                if ( (LA308_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case FOR:
                    case WHILE:
                    case USING:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case LBRACK:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case LCURLY:
                    case STAR:
                    case QUESTION:
                    case PLUS:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt308=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA308_660 = input.LA(4);
                        if ( (LA308_660==RPAREN) ) {
                            int LA308_1401 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 1401, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA308_660>=IN_SET && LA308_660<=REGEXP)||(LA308_660>=OR_EXPR && LA308_660<=NOT_EXPR)||LA308_660==IS||(LA308_660>=ASC && LA308_660<=DESC)||(LA308_660>=TIMEPERIOD_SEC && LA308_660<=TIMEPERIOD_SECONDS)||(LA308_660>=COMMA && LA308_660<=EQUALS)||LA308_660==STAR||(LA308_660>=LT && LA308_660<=GT)||(LA308_660>=BOR && LA308_660<=PLUS)||(LA308_660>=BAND && LA308_660<=MOD)) ) {
                            alt308=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 660, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA308_661 = input.LA(4);
                        if ( ((LA308_661>=IN_SET && LA308_661<=REGEXP)||(LA308_661>=OR_EXPR && LA308_661<=NOT_EXPR)||LA308_661==IS||(LA308_661>=ASC && LA308_661<=DESC)||(LA308_661>=TIMEPERIOD_SEC && LA308_661<=TIMEPERIOD_SECONDS)||(LA308_661>=COMMA && LA308_661<=EQUALS)||LA308_661==STAR||(LA308_661>=LT && LA308_661<=GT)||(LA308_661>=BOR && LA308_661<=PLUS)||(LA308_661>=BAND && LA308_661<=MOD)) ) {
                            alt308=2;
                        }
                        else if ( (LA308_661==RPAREN) ) {
                            int LA308_1457 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt308=1;
                            }
                            else if ( (true) ) {
                                alt308=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 308, 1457, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 661, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 308, 240, input);
                        throw nvae;
                    }
                }
                else if ( (LA308_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else if ( (LA308_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt308=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 308, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA308_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==FOR) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==USING) && (synpred5_EsperEPL2Grammar())) {
                alt308=1;
            }
            else if ( (LA308_0==BETWEEN||LA308_0==WHERE||LA308_0==SET||LA308_0==AFTER) ) {
                alt308=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 308, 0, input);
                throw nvae;
            }
            switch (alt308) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction11134);
                    eventProperty816=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty816.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction11139);
                    libFunction817=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction817.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT819=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass818 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass820 = null;
        CommonTree DOT819_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction11151);
            libFunctionWithClass818=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass818.getTree());
            loop309:
            do {
                int alt309=2;
                int LA309_0 = input.LA(1);
                if ( (LA309_0==DOT) ) {
                    alt309=1;
                }
                switch (alt309) {
            	case 1 :
            	    {
            	    DOT819=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction11154); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT819);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction11156);
            	    libFunctionNoClass820=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass820.getTree());
            	    }
            	    break;
            	default :
            	    break loop309;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token DOT822=null;
        Token RPAREN825=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy821 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent823 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs824 = null;
        CommonTree l_tree=null;
        CommonTree DOT822_tree=null;
        CommonTree RPAREN825_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt310=2;
            int LA310_0 = input.LA(1);
            if ( (LA310_0==IDENT) ) {
                int LA310_1 = input.LA(2);
                if ( (LA310_1==DOT) ) {
                    alt310=1;
                }
            }
            else if ( (LA310_0==TICKED_STRING_LITERAL) ) {
                int LA310_2 = input.LA(2);
                if ( (LA310_2==DOT) ) {
                    alt310=1;
                }
            }
            switch (alt310) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass11189);
                    classIdentifierNonGreedy821=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy821.getTree());
                    DOT822=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass11191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT822);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass11195);
            funcIdent823=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent823.getTree());
            l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass11199); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(l);
            int alt311=2;
            int LA311_0 = input.LA(1);
            if ( (LA311_0==WINDOW||LA311_0==BETWEEN||LA311_0==ESCAPE||(LA311_0>=NOT_EXPR && LA311_0<=EVERY_EXPR)||LA311_0==WHERE||(LA311_0>=SUM && LA311_0<=COUNT)||LA311_0==CASE||LA311_0==OUTER||(LA311_0>=JOIN && LA311_0<=FULL)||(LA311_0>=DISTINCT && LA311_0<=ALL)||(LA311_0>=EVENTS && LA311_0<=LAST)||(LA311_0>=UNIDIRECTIONAL && LA311_0<=CURRENT_TIMESTAMP)||(LA311_0>=SNAPSHOT && LA311_0<=INDEX)||(LA311_0>=BOOLEAN_TRUE && LA311_0<=VALUE_NULL)||(LA311_0>=DEFINE && LA311_0<=MATCHED)||LA311_0==NEWKW||LA311_0==CONTEXT||LA311_0==NUM_DOUBLE||LA311_0==LBRACK||(LA311_0>=IDENT && LA311_0<=LPAREN)||LA311_0==LCURLY||LA311_0==STAR||LA311_0==QUESTION||(LA311_0>=PLUS && LA311_0<=QUOTED_STRING_LITERAL)||LA311_0==MINUS||LA311_0==NUM_INT||(LA311_0>=TICKED_STRING_LITERAL && LA311_0<=NUM_FLOAT)) ) {
                alt311=1;
            }
            switch (alt311) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass11202);
                    libFunctionArgs824=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs824.getTree());
                    }
                    break;
            }
            RPAREN825=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass11206); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN825);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token RPAREN828=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent826 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs827 = null;
        CommonTree l_tree=null;
        CommonTree RPAREN828_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass11239);
            funcIdent826=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent826.getTree());
            int alt313=2;
            int LA313_0 = input.LA(1);
            if ( (LA313_0==LPAREN) ) {
                alt313=1;
            }
            switch (alt313) {
                case 1 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass11244); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    int alt312=2;
                    int LA312_0 = input.LA(1);
                    if ( (LA312_0==WINDOW||LA312_0==BETWEEN||LA312_0==ESCAPE||(LA312_0>=NOT_EXPR && LA312_0<=EVERY_EXPR)||LA312_0==WHERE||(LA312_0>=SUM && LA312_0<=COUNT)||LA312_0==CASE||LA312_0==OUTER||(LA312_0>=JOIN && LA312_0<=FULL)||(LA312_0>=DISTINCT && LA312_0<=ALL)||(LA312_0>=EVENTS && LA312_0<=LAST)||(LA312_0>=UNIDIRECTIONAL && LA312_0<=CURRENT_TIMESTAMP)||(LA312_0>=SNAPSHOT && LA312_0<=INDEX)||(LA312_0>=BOOLEAN_TRUE && LA312_0<=VALUE_NULL)||(LA312_0>=DEFINE && LA312_0<=MATCHED)||LA312_0==NEWKW||LA312_0==CONTEXT||LA312_0==NUM_DOUBLE||LA312_0==LBRACK||(LA312_0>=IDENT && LA312_0<=LPAREN)||LA312_0==LCURLY||LA312_0==STAR||LA312_0==QUESTION||(LA312_0>=PLUS && LA312_0<=QUOTED_STRING_LITERAL)||LA312_0==MINUS||LA312_0==NUM_INT||(LA312_0>=TICKED_STRING_LITERAL && LA312_0<=NUM_FLOAT)) ) {
                        alt312=1;
                    }
                    switch (alt312) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass11247);
                            libFunctionArgs827=libFunctionArgs();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs827.getTree());
                            }
                            break;
                    }
                    RPAREN828=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass11251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN828);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        Token w=null;
        Token s=null;
        Token after=null;
        Token between=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent829 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree w_tree=null;
        CommonTree s_tree=null;
        CommonTree after_tree=null;
        CommonTree between_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        try {
            int alt314=7;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt314=1;
                }
                break;
            case MAX:
                {
                alt314=2;
                }
                break;
            case MIN:
                {
                alt314=3;
                }
                break;
            case WHERE:
                {
                alt314=4;
                }
                break;
            case SET:
                {
                alt314=5;
                }
                break;
            case AFTER:
                {
                alt314=6;
                }
                break;
            case BETWEEN:
                {
                alt314=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 314, 0, input);
                throw nvae;
            }
            switch (alt314) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent11283);
                    escapableIdent829=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent829.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent11290); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent11302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_funcIdent11314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, w));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,SET,FOLLOW_SET_in_funcIdent11326); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    {
                    after=(Token)match(input,AFTER,FOLLOW_AFTER_in_funcIdent11338); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(after);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, after));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    {
                    between=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_funcIdent11349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BETWEEN.add(between);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, between));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL830=null;
        Token DISTINCT831=null;
        Token COMMA833=null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem832 = null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem834 = null;
        CommonTree ALL830_tree=null;
        CommonTree DISTINCT831_tree=null;
        CommonTree COMMA833_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt315=3;
            int LA315_0 = input.LA(1);
            if ( (LA315_0==ALL) ) {
                alt315=1;
            }
            else if ( (LA315_0==DISTINCT) ) {
                alt315=2;
            }
            switch (alt315) {
                case 1 :
                    {
                    ALL830=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs11366); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT831=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs11371); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT831_tree = (CommonTree)adaptor.create(DISTINCT831);
                    adaptor.addChild(root_0, DISTINCT831_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs11375);
            libFunctionArgItem832=libFunctionArgItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem832.getTree());
            loop316:
            do {
                int alt316=2;
                int LA316_0 = input.LA(1);
                if ( (LA316_0==COMMA) ) {
                    alt316=1;
                }
                switch (alt316) {
            	case 1 :
            	    {
            	    COMMA833=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs11378); if (state.failed) return retval;
            	    pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs11381);
            	    libFunctionArgItem834=libFunctionArgItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem834.getTree());
            	    }
            	    break;
            	default :
            	    break loop316;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgItem_return retval = new EsperEPL2GrammarParser.libFunctionArgItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl835 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime836 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt317=2;
            int LA317_0 = input.LA(1);
            if ( (LA317_0==IDENT) ) {
                int LA317_1 = input.LA(2);
                if ( (LA317_1==GOES) ) {
                    alt317=1;
                }
            }
            else if ( (LA317_0==LPAREN) ) {
                int LA317_2 = input.LA(2);
                if ( (LA317_2==IDENT) ) {
                    int LA317_149 = input.LA(3);
                    if ( (LA317_149==RPAREN) ) {
                        int LA317_234 = input.LA(4);
                        if ( (LA317_234==GOES) ) {
                            alt317=1;
                        }
                    }
                    else if ( (LA317_149==COMMA) ) {
                        alt317=1;
                    }
                }
            }
            switch (alt317) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_libFunctionArgItem11395);
                    expressionLambdaDecl835=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionLambdaDecl835.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionWithTime_in_libFunctionArgItem11398);
            expressionWithTime836=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime836.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR838=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr837 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr839 = null;
        CommonTree AND_EXPR838_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList11409);
            concatenationExpr837=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr837.getTree());
            AND_EXPR838=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList11411); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList11414);
            concatenationExpr839=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr839.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression840 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression11442);
            followedByExpression840=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression840.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression841 = null;
        EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat842 = null;
        RewriteRuleSubtreeStream stream_followedByRepeat=new RewriteRuleSubtreeStream(adaptor,"rule followedByRepeat");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
         boolean fb = false; 
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression11461);
            orExpression841=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression841.getTree());
            loop318:
            do {
                int alt318=2;
                int LA318_0 = input.LA(1);
                if ( (LA318_0==FOLLOWED_BY||LA318_0==FOLLOWMAX_BEGIN) ) {
                    alt318=1;
                }
                switch (alt318) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_followedByRepeat_in_followedByExpression11464);
            	    followedByRepeat842=followedByRepeat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_followedByRepeat.add(followedByRepeat842.getTree());
            	    if ( state.backtracking==0 ) {
            	       fb = true; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop318;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (fb == true) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_2);
                adaptor.addChild(root_2, stream_orExpression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_followedByRepeat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_followedByRepeat.hasNext() ) {
                    adaptor.addChild(root_1, stream_followedByRepeat.nextTree());
                }
                stream_followedByRepeat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByRepeat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat() throws RecognitionException {
        EsperEPL2GrammarParser.followedByRepeat_return retval = new EsperEPL2GrammarParser.followedByRepeat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token g=null;
        Token FOLLOWMAX_END844=null;
        EsperEPL2GrammarParser.expression_return expression843 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression845 = null;
        CommonTree f_tree=null;
        CommonTree g_tree=null;
        CommonTree FOLLOWMAX_END844_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleTokenStream stream_FOLLOWMAX_END=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_END");
        RewriteRuleTokenStream stream_FOLLOWMAX_BEGIN=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_BEGIN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            int alt319=2;
            int LA319_0 = input.LA(1);
            if ( (LA319_0==FOLLOWED_BY) ) {
                alt319=1;
            }
            else if ( (LA319_0==FOLLOWMAX_BEGIN) ) {
                alt319=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 319, 0, input);
                throw nvae;
            }
            switch (alt319) {
                case 1 :
                    {
                    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByRepeat11517); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
                    }
                    break;
                case 2 :
                    {
                    {
                    g=(Token)match(input,FOLLOWMAX_BEGIN,FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat11524); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_BEGIN.add(g);
                    pushFollow(FOLLOW_expression_in_followedByRepeat11526);
                    expression843=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression843.getTree());
                    FOLLOWMAX_END844=(Token)match(input,FOLLOWMAX_END,FOLLOW_FOLLOWMAX_END_in_followedByRepeat11528); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_END.add(FOLLOWMAX_END844);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_orExpression_in_followedByRepeat11532);
            orExpression845=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression845.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_orExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression846 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression847 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression11561);
            andExpression846=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression846.getTree());
            loop320:
            do {
                int alt320=2;
                int LA320_0 = input.LA(1);
                if ( (LA320_0==OR_EXPR) ) {
                    alt320=1;
                }
                switch (alt320) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression11566); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression11568);
            	    andExpression847=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression847.getTree());
            	    }
            	    break;
            	default :
            	    break loop320;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression848 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression849 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression11600);
            matchUntilExpression848=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression848.getTree());
            loop321:
            do {
                int alt321=2;
                int LA321_0 = input.LA(1);
                if ( (LA321_0==AND_EXPR) ) {
                    alt321=1;
                }
                switch (alt321) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression11605); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression11607);
            	    matchUntilExpression849=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression849.getTree());
            	    }
            	    break;
            	default :
            	    break loop321;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression850 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression851 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt322=2;
            int LA322_0 = input.LA(1);
            if ( (LA322_0==LBRACK) ) {
                alt322=1;
            }
            switch (alt322) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression11642);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression11646);
            qualifyExpression850=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression850.getTree());
            int alt323=2;
            int LA323_0 = input.LA(1);
            if ( (LA323_0==UNTIL) ) {
                alt323=1;
            }
            switch (alt323) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression11651); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression11653);
                    qualifyExpression851=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression851.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList852 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix853 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt326=2;
            int LA326_0 = input.LA(1);
            if ( ((LA326_0>=NOT_EXPR && LA326_0<=EVERY_DISTINCT_EXPR)) ) {
                alt326=1;
            }
            switch (alt326) {
                case 1 :
                    {
                    int alt324=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt324=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt324=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt324=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 324, 0, input);
                        throw nvae;
                    }
                    switch (alt324) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression11718); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression11724); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression11730); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression11732);
                            distinctExpressionList852=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList852.getTree());
                            }
                            break;
                    }
                    int alt325=2;
                    int LA325_0 = input.LA(1);
                    if ( (LA325_0==LBRACK) ) {
                        alt325=1;
                    }
                    switch (alt325) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression11738);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression11747);
            guardPostFix853=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix853.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN854=null;
        Token COMMA856=null;
        Token RPAREN858=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom855 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom857 = null;
        CommonTree LPAREN854_tree=null;
        CommonTree COMMA856_tree=null;
        CommonTree RPAREN858_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN854=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList11862); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN854);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList11864);
            distinctExpressionAtom855=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom855.getTree());
            loop327:
            do {
                int alt327=2;
                int LA327_0 = input.LA(1);
                if ( (LA327_0==COMMA) ) {
                    alt327=1;
                }
                switch (alt327) {
            	case 1 :
            	    {
            	    COMMA856=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList11867); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA856);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList11869);
            	    distinctExpressionAtom857=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom857.getTree());
            	    }
            	    break;
            	default :
            	    break loop327;
                }
            } while (true);
            RPAREN858=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList11873); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN858);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime859 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_distinctExpressionAtom11896);
            expressionWithTime859=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime859.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN862=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression860 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression861 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression863 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression864 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN862_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt328=2;
            int LA328_0 = input.LA(1);
            if ( (LA328_0==IDENT||LA328_0==TICKED_STRING_LITERAL) ) {
                alt328=1;
            }
            else if ( (LA328_0==LPAREN) ) {
                alt328=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 328, 0, input);
                throw nvae;
            }
            switch (alt328) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix11911);
                    atomicExpression860=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression860.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix11917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix11919);
                    patternExpression861=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression861.getTree());
                    RPAREN862=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix11921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN862);
                    }
                    break;
            }
            int alt329=3;
            int LA329_0 = input.LA(1);
            if ( (LA329_0==WHERE) ) {
                alt329=1;
            }
            else if ( (LA329_0==WHILE) ) {
                alt329=2;
            }
            switch (alt329) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix11928); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix11930);
                    guardWhereExpression863=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression863.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix11938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix11940);
                    guardWhileExpression864=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression864.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression865 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression866 = null;
        try {
            int alt330=2;
            int LA330_0 = input.LA(1);
            if ( (LA330_0==IDENT) ) {
                int LA330_1 = input.LA(2);
                if ( (LA330_1==COLON) ) {
                    alt330=1;
                }
                else if ( (LA330_1==EOF||(LA330_1>=OR_EXPR && LA330_1<=AND_EXPR)||LA330_1==WHERE||LA330_1==UNTIL||LA330_1==WHILE||(LA330_1>=LBRACK && LA330_1<=RBRACK)||(LA330_1>=LPAREN && LA330_1<=RPAREN)||LA330_1==ATCHAR||(LA330_1>=EQUALS && LA330_1<=DOT)||LA330_1==FOLLOWED_BY||LA330_1==FOLLOWMAX_BEGIN) ) {
                    alt330=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA330_0==TICKED_STRING_LITERAL) ) {
                alt330=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 330, 0, input);
                throw nvae;
            }
            switch (alt330) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression12002);
                    observerExpression865=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression865.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression12006);
                    patternFilterExpression866=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression866.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON867=null;
        Token LPAREN868=null;
        Token RPAREN870=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList869 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON867_tree=null;
        CommonTree LPAREN868_tree=null;
        CommonTree RPAREN870_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression12021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON867=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression12023); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON867);
            int alt331=2;
            int LA331_0 = input.LA(1);
            if ( (LA331_0==IDENT) ) {
                alt331=1;
            }
            else if ( (LA331_0==AT) ) {
                alt331=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 331, 0, input);
                throw nvae;
            }
            switch (alt331) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression12028); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression12034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN868=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression12037); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN868);
            int alt332=2;
            int LA332_0 = input.LA(1);
            if ( (LA332_0==WINDOW||LA332_0==BETWEEN||LA332_0==ESCAPE||(LA332_0>=NOT_EXPR && LA332_0<=EVERY_EXPR)||LA332_0==WHERE||(LA332_0>=SUM && LA332_0<=COUNT)||LA332_0==CASE||LA332_0==OUTER||(LA332_0>=JOIN && LA332_0<=FULL)||(LA332_0>=EVENTS && LA332_0<=LAST)||(LA332_0>=UNIDIRECTIONAL && LA332_0<=CURRENT_TIMESTAMP)||(LA332_0>=SNAPSHOT && LA332_0<=INDEX)||(LA332_0>=BOOLEAN_TRUE && LA332_0<=VALUE_NULL)||(LA332_0>=DEFINE && LA332_0<=MATCHED)||LA332_0==NEWKW||LA332_0==CONTEXT||LA332_0==NUM_DOUBLE||LA332_0==LBRACK||(LA332_0>=IDENT && LA332_0<=LPAREN)||LA332_0==LCURLY||LA332_0==STAR||LA332_0==QUESTION||(LA332_0>=PLUS && LA332_0<=QUOTED_STRING_LITERAL)||LA332_0==MINUS||LA332_0==NUM_INT||(LA332_0>=TICKED_STRING_LITERAL && LA332_0<=NUM_FLOAT)) ) {
                alt332=1;
            }
            switch (alt332) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression12039);
                    expressionWithTimeList869=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList869.getTree());
                    }
                    break;
            }
            RPAREN870=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression12042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN870);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT871=null;
        Token COLON872=null;
        Token IDENT873=null;
        Token LPAREN874=null;
        Token RPAREN876=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList875 = null;
        CommonTree IDENT871_tree=null;
        CommonTree COLON872_tree=null;
        CommonTree IDENT873_tree=null;
        CommonTree LPAREN874_tree=null;
        CommonTree RPAREN876_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT871=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression12091); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT871_tree = (CommonTree)adaptor.create(IDENT871);
            adaptor.addChild(root_0, IDENT871_tree);
            }
            COLON872=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression12093); if (state.failed) return retval;
            IDENT873=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression12096); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT873_tree = (CommonTree)adaptor.create(IDENT873);
            adaptor.addChild(root_0, IDENT873_tree);
            }
            LPAREN874=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression12098); if (state.failed) return retval;
            int alt333=2;
            int LA333_0 = input.LA(1);
            if ( (LA333_0==WINDOW||LA333_0==BETWEEN||LA333_0==ESCAPE||(LA333_0>=NOT_EXPR && LA333_0<=EVERY_EXPR)||LA333_0==WHERE||(LA333_0>=SUM && LA333_0<=COUNT)||LA333_0==CASE||LA333_0==OUTER||(LA333_0>=JOIN && LA333_0<=FULL)||(LA333_0>=EVENTS && LA333_0<=LAST)||(LA333_0>=UNIDIRECTIONAL && LA333_0<=CURRENT_TIMESTAMP)||(LA333_0>=SNAPSHOT && LA333_0<=INDEX)||(LA333_0>=BOOLEAN_TRUE && LA333_0<=VALUE_NULL)||(LA333_0>=DEFINE && LA333_0<=MATCHED)||LA333_0==NEWKW||LA333_0==CONTEXT||LA333_0==NUM_DOUBLE||LA333_0==LBRACK||(LA333_0>=IDENT && LA333_0<=LPAREN)||LA333_0==LCURLY||LA333_0==STAR||LA333_0==QUESTION||(LA333_0>=PLUS && LA333_0<=QUOTED_STRING_LITERAL)||LA333_0==MINUS||LA333_0==NUM_INT||(LA333_0>=TICKED_STRING_LITERAL && LA333_0<=NUM_FLOAT)) ) {
                alt333=1;
            }
            switch (alt333) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression12102);
                    expressionWithTimeList875=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList875.getTree());
                    }
                    break;
            }
            RPAREN876=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression12106); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN877=null;
        Token RPAREN879=null;
        EsperEPL2GrammarParser.expression_return expression878 = null;
        CommonTree LPAREN877_tree=null;
        CommonTree RPAREN879_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN877=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression12119); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression12122);
            expression878=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression878.getTree());
            RPAREN879=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression12124); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK880=null;
        Token RBRACK884=null;
        EsperEPL2GrammarParser.expression_return expression881 = null;
        EsperEPL2GrammarParser.expression_return expression882 = null;
        EsperEPL2GrammarParser.expression_return expression883 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK880_tree=null;
        CommonTree RBRACK884_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK880=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange12145); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK880);
            int alt336=2;
            int LA336_0 = input.LA(1);
            if ( (LA336_0==WINDOW||LA336_0==BETWEEN||LA336_0==ESCAPE||(LA336_0>=NOT_EXPR && LA336_0<=EVERY_EXPR)||LA336_0==WHERE||(LA336_0>=SUM && LA336_0<=COUNT)||LA336_0==CASE||LA336_0==OUTER||(LA336_0>=JOIN && LA336_0<=FULL)||(LA336_0>=EVENTS && LA336_0<=LAST)||(LA336_0>=UNIDIRECTIONAL && LA336_0<=CURRENT_TIMESTAMP)||(LA336_0>=SNAPSHOT && LA336_0<=INDEX)||(LA336_0>=BOOLEAN_TRUE && LA336_0<=VALUE_NULL)||(LA336_0>=DEFINE && LA336_0<=MATCHED)||LA336_0==NEWKW||LA336_0==CONTEXT||LA336_0==NUM_DOUBLE||(LA336_0>=IDENT && LA336_0<=LPAREN)||LA336_0==LCURLY||LA336_0==QUESTION||(LA336_0>=PLUS && LA336_0<=QUOTED_STRING_LITERAL)||LA336_0==MINUS||LA336_0==NUM_INT||(LA336_0>=TICKED_STRING_LITERAL && LA336_0<=NUM_FLOAT)) ) {
                alt336=1;
            }
            else if ( (LA336_0==COLON) ) {
                alt336=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);
                throw nvae;
            }
            switch (alt336) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange12152);
                    expression881=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression881.getTree());
                    int alt335=2;
                    int LA335_0 = input.LA(1);
                    if ( (LA335_0==COLON) ) {
                        alt335=1;
                    }
                    switch (alt335) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange12157); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt334=2;
                            int LA334_0 = input.LA(1);
                            if ( (LA334_0==WINDOW||LA334_0==BETWEEN||LA334_0==ESCAPE||(LA334_0>=NOT_EXPR && LA334_0<=EVERY_EXPR)||LA334_0==WHERE||(LA334_0>=SUM && LA334_0<=COUNT)||LA334_0==CASE||LA334_0==OUTER||(LA334_0>=JOIN && LA334_0<=FULL)||(LA334_0>=EVENTS && LA334_0<=LAST)||(LA334_0>=UNIDIRECTIONAL && LA334_0<=CURRENT_TIMESTAMP)||(LA334_0>=SNAPSHOT && LA334_0<=INDEX)||(LA334_0>=BOOLEAN_TRUE && LA334_0<=VALUE_NULL)||(LA334_0>=DEFINE && LA334_0<=MATCHED)||LA334_0==NEWKW||LA334_0==CONTEXT||LA334_0==NUM_DOUBLE||(LA334_0>=IDENT && LA334_0<=LPAREN)||LA334_0==LCURLY||LA334_0==QUESTION||(LA334_0>=PLUS && LA334_0<=QUOTED_STRING_LITERAL)||LA334_0==MINUS||LA334_0==NUM_INT||(LA334_0>=TICKED_STRING_LITERAL && LA334_0<=NUM_FLOAT)) ) {
                                alt334=1;
                            }
                            switch (alt334) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange12160);
                                    expression882=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression882.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange12180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange12182);
                    expression883=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression883.getTree());
                    }
                    break;
            }
            RBRACK884=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange12193); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK884);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS885=null;
        Token LPAREN887=null;
        Token RPAREN889=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier886 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList888 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression890 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS885_tree=null;
        CommonTree LPAREN887_tree=null;
        CommonTree RPAREN889_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt337=2;
            int LA337_0 = input.LA(1);
            if ( (LA337_0==IDENT) ) {
                int LA337_1 = input.LA(2);
                if ( (LA337_1==EQUALS) ) {
                    alt337=1;
                }
            }
            switch (alt337) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression12280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS885=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression12282); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS885);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression12291);
            classIdentifier886=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier886.getTree());
            int alt339=2;
            int LA339_0 = input.LA(1);
            if ( (LA339_0==LPAREN) ) {
                alt339=1;
            }
            switch (alt339) {
                case 1 :
                    {
                    LPAREN887=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression12302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN887);
                    int alt338=2;
                    int LA338_0 = input.LA(1);
                    if ( (LA338_0==WINDOW||LA338_0==BETWEEN||LA338_0==ESCAPE||(LA338_0>=NOT_EXPR && LA338_0<=EVERY_EXPR)||LA338_0==WHERE||(LA338_0>=SUM && LA338_0<=COUNT)||LA338_0==CASE||LA338_0==OUTER||(LA338_0>=JOIN && LA338_0<=FULL)||(LA338_0>=EVENTS && LA338_0<=LAST)||(LA338_0>=UNIDIRECTIONAL && LA338_0<=CURRENT_TIMESTAMP)||(LA338_0>=SNAPSHOT && LA338_0<=INDEX)||(LA338_0>=BOOLEAN_TRUE && LA338_0<=VALUE_NULL)||(LA338_0>=DEFINE && LA338_0<=MATCHED)||LA338_0==NEWKW||LA338_0==CONTEXT||LA338_0==NUM_DOUBLE||(LA338_0>=IDENT && LA338_0<=LPAREN)||LA338_0==LCURLY||LA338_0==QUESTION||(LA338_0>=PLUS && LA338_0<=QUOTED_STRING_LITERAL)||LA338_0==MINUS||LA338_0==NUM_INT||(LA338_0>=TICKED_STRING_LITERAL && LA338_0<=NUM_FLOAT)) ) {
                        alt338=1;
                    }
                    switch (alt338) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression12304);
                            expressionList888=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList888.getTree());
                            }
                            break;
                    }
                    RPAREN889=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression12307); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN889);
                    }
                    break;
            }
            int alt340=2;
            int LA340_0 = input.LA(1);
            if ( (LA340_0==LBRACK) ) {
                alt340=1;
            }
            switch (alt340) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression12319);
                    propertyExpression890=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression890.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic891 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic892 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression12364);
            propertyExpressionAtomic891=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic891.getTree());
            loop341:
            do {
                int alt341=2;
                int LA341_0 = input.LA(1);
                if ( (LA341_0==LBRACK) ) {
                    alt341=1;
                }
                switch (alt341) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression12367);
            	    propertyExpressionAtomic892=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic892.getTree());
            	    }
            	    break;
            	default :
            	    break loop341;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK893=null;
        Token AS897=null;
        Token IDENT898=null;
        Token WHERE899=null;
        Token RBRACK901=null;
        EsperEPL2GrammarParser.propertyExpressionSelect_return propertyExpressionSelect894 = null;
        EsperEPL2GrammarParser.expression_return expression895 = null;
        EsperEPL2GrammarParser.propertyExpressionAnnotation_return propertyExpressionAnnotation896 = null;
        EsperEPL2GrammarParser.expression_return expression900 = null;
        CommonTree LBRACK893_tree=null;
        CommonTree AS897_tree=null;
        CommonTree IDENT898_tree=null;
        CommonTree WHERE899_tree=null;
        CommonTree RBRACK901_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyExpressionAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAnnotation");
        RewriteRuleSubtreeStream stream_propertyExpressionSelect=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionSelect");
        try {
            {
            LBRACK893=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic12397); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK893);
            int alt342=2;
            int LA342_0 = input.LA(1);
            if ( (LA342_0==SELECT) ) {
                alt342=1;
            }
            switch (alt342) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpressionSelect_in_propertyExpressionAtomic12399);
                    propertyExpressionSelect894=propertyExpressionSelect();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpressionSelect.add(propertyExpressionSelect894.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_propertyExpressionAtomic12402);
            expression895=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression895.getTree());
            int alt343=2;
            int LA343_0 = input.LA(1);
            if ( (LA343_0==ATCHAR) ) {
                alt343=1;
            }
            switch (alt343) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpressionAnnotation_in_propertyExpressionAtomic12404);
                    propertyExpressionAnnotation896=propertyExpressionAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpressionAnnotation.add(propertyExpressionAnnotation896.getTree());
                    }
                    break;
            }
            int alt344=2;
            int LA344_0 = input.LA(1);
            if ( (LA344_0==AS) ) {
                alt344=1;
            }
            switch (alt344) {
                case 1 :
                    {
                    AS897=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic12408); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS897);
                    IDENT898=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic12410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT898);
                    }
                    break;
            }
            int alt345=2;
            int LA345_0 = input.LA(1);
            if ( (LA345_0==WHERE) ) {
                alt345=1;
            }
            switch (alt345) {
                case 1 :
                    {
                    WHERE899=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic12415); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE899);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic12417);
                    expression900=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression900.getTree());
                    }
                    break;
            }
            RBRACK901=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic12421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK901);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertyExpressionSelect.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionSelect.nextTree());
                }
                stream_propertyExpressionSelect.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_propertyExpressionAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAnnotation.nextTree());
                }
                stream_propertyExpressionAnnotation.reset();
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionSelect_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionSelect_return propertyExpressionSelect() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionSelect_return retval = new EsperEPL2GrammarParser.propertyExpressionSelect_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT902=null;
        Token FROM904=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList903 = null;
        CommonTree SELECT902_tree=null;
        CommonTree FROM904_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        try {
            {
            SELECT902=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionSelect12479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT902);
            pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionSelect12481);
            propertySelectionList903=propertySelectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList903.getTree());
            FROM904=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionSelect12483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM904);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_SELECT.nextNode(), root_1);
                adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAnnotation_return propertyExpressionAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAnnotation_return retval = new EsperEPL2GrammarParser.propertyExpressionAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token v=null;
        Token ATCHAR905=null;
        Token LPAREN906=null;
        Token RPAREN907=null;
        CommonTree n_tree=null;
        CommonTree v_tree=null;
        CommonTree ATCHAR905_tree=null;
        CommonTree LPAREN906_tree=null;
        CommonTree RPAREN907_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        try {
            {
            ATCHAR905=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_propertyExpressionAnnotation12506); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR905);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAnnotation12510); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            {
            LPAREN906=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_propertyExpressionAnnotation12513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN906);
            v=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAnnotation12517); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(v);
            RPAREN907=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_propertyExpressionAnnotation12519); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN907);
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_v=new RewriteRuleTokenStream(adaptor,"token v",v);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_v.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA909=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement908 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement910 = null;
        CommonTree COMMA909_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList12549);
            propertySelectionListElement908=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement908.getTree());
            loop346:
            do {
                int alt346=2;
                int LA346_0 = input.LA(1);
                if ( (LA346_0==COMMA) ) {
                    alt346=1;
                }
                switch (alt346) {
            	case 1 :
            	    {
            	    COMMA909=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList12552); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList12555);
            	    propertySelectionListElement910=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement910.getTree());
            	    }
            	    break;
            	default :
            	    break loop346;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS913=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector911 = null;
        EsperEPL2GrammarParser.expression_return expression912 = null;
        CommonTree s_tree=null;
        CommonTree AS913_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt348=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt348=1;
                }
                break;
            case IDENT:
                {
                int LA348_2 = input.LA(2);
                if ( (LA348_2==DOT) ) {
                    int LA348_77 = input.LA(3);
                    if ( (LA348_77==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt348=2;
                    }
                    else if ( (LA348_77==WINDOW||LA348_77==BETWEEN||LA348_77==ESCAPE||LA348_77==EVERY_EXPR||LA348_77==WHERE||(LA348_77>=SUM && LA348_77<=COUNT)||LA348_77==OUTER||(LA348_77>=JOIN && LA348_77<=FULL)||(LA348_77>=EVENTS && LA348_77<=LAST)||(LA348_77>=UNIDIRECTIONAL && LA348_77<=PREVIOUSTAIL)||LA348_77==PRIOR||(LA348_77>=WEEKDAY && LA348_77<=CAST)||(LA348_77>=SNAPSHOT && LA348_77<=INDEX)||(LA348_77>=DEFINE && LA348_77<=MATCHED)||LA348_77==CONTEXT||LA348_77==IDENT||LA348_77==TICKED_STRING_LITERAL) ) {
                        alt348=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 348, 77, input);
                        throw nvae;
                    }
                }
                else if ( ((LA348_2>=IN_SET && LA348_2<=REGEXP)||(LA348_2>=OR_EXPR && LA348_2<=NOT_EXPR)||LA348_2==AS||LA348_2==FROM||LA348_2==IS||LA348_2==LBRACK||LA348_2==LPAREN||(LA348_2>=COMMA && LA348_2<=EQUALS)||LA348_2==STAR||(LA348_2>=LT && LA348_2<=PLUS)||(LA348_2>=BAND && LA348_2<=MOD)||LA348_2==ESCAPECHAR) ) {
                    alt348=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case QUESTION:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt348=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 0, input);
                throw nvae;
            }
            switch (alt348) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement12581); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement12597);
                    propertyStreamSelector911=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector911.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement12602);
                    expression912=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression912.getTree());
                    int alt347=2;
                    int LA347_0 = input.LA(1);
                    if ( (LA347_0==AS) ) {
                        alt347=1;
                    }
                    switch (alt347) {
                        case 1 :
                            {
                            AS913=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement12605); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS913);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement12609);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT914=null;
        Token STAR915=null;
        Token AS916=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT914_tree=null;
        CommonTree STAR915_tree=null;
        CommonTree AS916_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector12653); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT914=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector12655); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT914);
            STAR915=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector12657); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR915);
            int alt349=2;
            int LA349_0 = input.LA(1);
            if ( (LA349_0==AS) ) {
                alt349=1;
            }
            switch (alt349) {
                case 1 :
                    {
                    AS916=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector12660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS916);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector12664); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS917=null;
        Token LPAREN919=null;
        Token RPAREN921=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier918 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList920 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression922 = null;
        EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation923 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS917_tree=null;
        CommonTree LPAREN919_tree=null;
        CommonTree RPAREN921_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        RewriteRuleSubtreeStream stream_patternFilterAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule patternFilterAnnotation");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt350=2;
            int LA350_0 = input.LA(1);
            if ( (LA350_0==IDENT) ) {
                int LA350_1 = input.LA(2);
                if ( (LA350_1==EQUALS) ) {
                    alt350=1;
                }
            }
            switch (alt350) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression12711); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS917=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression12713); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS917);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression12722);
            classIdentifier918=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier918.getTree());
            int alt352=2;
            int LA352_0 = input.LA(1);
            if ( (LA352_0==LPAREN) ) {
                alt352=1;
            }
            switch (alt352) {
                case 1 :
                    {
                    LPAREN919=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression12733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN919);
                    int alt351=2;
                    int LA351_0 = input.LA(1);
                    if ( (LA351_0==WINDOW||LA351_0==BETWEEN||LA351_0==ESCAPE||(LA351_0>=NOT_EXPR && LA351_0<=EVERY_EXPR)||LA351_0==WHERE||(LA351_0>=SUM && LA351_0<=COUNT)||LA351_0==CASE||LA351_0==OUTER||(LA351_0>=JOIN && LA351_0<=FULL)||(LA351_0>=EVENTS && LA351_0<=LAST)||(LA351_0>=UNIDIRECTIONAL && LA351_0<=CURRENT_TIMESTAMP)||(LA351_0>=SNAPSHOT && LA351_0<=INDEX)||(LA351_0>=BOOLEAN_TRUE && LA351_0<=VALUE_NULL)||(LA351_0>=DEFINE && LA351_0<=MATCHED)||LA351_0==NEWKW||LA351_0==CONTEXT||LA351_0==NUM_DOUBLE||(LA351_0>=IDENT && LA351_0<=LPAREN)||LA351_0==LCURLY||LA351_0==QUESTION||(LA351_0>=PLUS && LA351_0<=QUOTED_STRING_LITERAL)||LA351_0==MINUS||LA351_0==NUM_INT||(LA351_0>=TICKED_STRING_LITERAL && LA351_0<=NUM_FLOAT)) ) {
                        alt351=1;
                    }
                    switch (alt351) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression12735);
                            expressionList920=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList920.getTree());
                            }
                            break;
                    }
                    RPAREN921=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression12738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN921);
                    }
                    break;
            }
            int alt353=2;
            int LA353_0 = input.LA(1);
            if ( (LA353_0==LBRACK) ) {
                alt353=1;
            }
            switch (alt353) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression12750);
                    propertyExpression922=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression922.getTree());
                    }
                    break;
            }
            int alt354=2;
            int LA354_0 = input.LA(1);
            if ( (LA354_0==ATCHAR) ) {
                alt354=1;
            }
            switch (alt354) {
                case 1 :
                    {
                    pushFollow(FOLLOW_patternFilterAnnotation_in_patternFilterExpression12761);
                    patternFilterAnnotation923=patternFilterAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternFilterAnnotation.add(patternFilterAnnotation923.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_patternFilterAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternFilterAnnotation.nextTree());
                }
                stream_patternFilterAnnotation.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterAnnotation_return retval = new EsperEPL2GrammarParser.patternFilterAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR924=null;
        Token LPAREN925=null;
        Token RPAREN927=null;
        EsperEPL2GrammarParser.number_return number926 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR924_tree=null;
        CommonTree LPAREN925_tree=null;
        CommonTree RPAREN927_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            ATCHAR924=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_patternFilterAnnotation12813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR924);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterAnnotation12817); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt355=2;
            int LA355_0 = input.LA(1);
            if ( (LA355_0==LPAREN) ) {
                alt355=1;
            }
            switch (alt355) {
                case 1 :
                    {
                    LPAREN925=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterAnnotation12820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN925);
                    pushFollow(FOLLOW_number_in_patternFilterAnnotation12822);
                    number926=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number926.getTree());
                    RPAREN927=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterAnnotation12824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN927);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT928=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT928_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier12860);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop356:
            do {
                int alt356=2;
                int LA356_0 = input.LA(1);
                if ( (LA356_0==DOT) ) {
                    int LA356_26 = input.LA(2);
                    if ( (LA356_26==IDENT) ) {
                        int LA356_53 = input.LA(3);
                        if ( (LA356_53==EOF||LA356_53==CREATE||(LA356_53>=OR_EXPR && LA356_53<=AS)||LA356_53==SELECT||LA356_53==END||(LA356_53>=INNER && LA356_53<=ON)||(LA356_53>=GROUP && LA356_53<=HAVING)||LA356_53==OUTPUT||LA356_53==INSERT||LA356_53==ORDER||(LA356_53>=UNIDIRECTIONAL && LA356_53<=RETAININTERSECTION)||LA356_53==DELETE||LA356_53==SET||LA356_53==UNTIL||LA356_53==ROW_LIMIT_EXPR||(LA356_53>=UPDATE && LA356_53<=MATCH_RECOGNIZE)||(LA356_53>=FOR && LA356_53<=WHILE)||LA356_53==MERGE||LA356_53==EXPRESSIONDECL||LA356_53==CONTEXT||LA356_53==TERMINATED||(LA356_53>=LBRACK && LA356_53<=RPAREN)||(LA356_53>=LCURLY && LA356_53<=RCURLY)||(LA356_53>=ATCHAR && LA356_53<=COMMA)||LA356_53==DOT||(LA356_53>=FOLLOWED_BY && LA356_53<=GT)||LA356_53==FOLLOWMAX_BEGIN||LA356_53==TICKED_STRING_LITERAL) ) {
                            alt356=1;
                        }
                    }
                    else if ( (LA356_26==TICKED_STRING_LITERAL) ) {
                        alt356=1;
                    }
                }
                switch (alt356) {
            	case 1 :
            	    {
            	    DOT928=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier12879); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT928);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier12883);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop356;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT929=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT929_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy12928);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop357:
            do {
                int alt357=2;
                int LA357_0 = input.LA(1);
                if ( (LA357_0==IDENT||LA357_0==TICKED_STRING_LITERAL) ) {
                    alt357=2;
                }
                else if ( (LA357_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA357_4 = input.LA(3);
                        if ( (LA357_4==IDENT||LA357_4==DOT||LA357_4==TICKED_STRING_LITERAL) ) {
                            alt357=1;
                        }
                        else if ( (LA357_4==LPAREN) ) {
                            alt357=2;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA357_5 = input.LA(3);
                        if ( (LA357_5==IDENT||LA357_5==DOT||LA357_5==TICKED_STRING_LITERAL) ) {
                            alt357=1;
                        }
                        else if ( (LA357_5==LPAREN) ) {
                            alt357=2;
                        }
                        }
                        break;
                    case BETWEEN:
                    case WHERE:
                    case MAX:
                    case MIN:
                    case SET:
                    case AFTER:
                        {
                        alt357=2;
                        }
                        break;
                    }
                }
                switch (alt357) {
            	case 1 :
            	    {
            	    DOT929=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy12963); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT929);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy12967);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop357;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA931=null;
        EsperEPL2GrammarParser.expression_return expression930 = null;
        EsperEPL2GrammarParser.expression_return expression932 = null;
        CommonTree COMMA931_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList13009);
            expression930=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression930.getTree());
            loop358:
            do {
                int alt358=2;
                int LA358_0 = input.LA(1);
                if ( (LA358_0==COMMA) ) {
                    alt358=1;
                }
                switch (alt358) {
            	case 1 :
            	    {
            	    COMMA931=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList13012); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList13015);
            	    expression932=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression932.getTree());
            	    }
            	    break;
            	default :
            	    break loop358;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA934=null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast933 = null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast935 = null;
        CommonTree COMMA934_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList13043);
            expressionWithTimeInclLast933=expressionWithTimeInclLast();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast933.getTree());
            loop359:
            do {
                int alt359=2;
                int LA359_0 = input.LA(1);
                if ( (LA359_0==COMMA) ) {
                    alt359=1;
                }
                switch (alt359) {
            	case 1 :
            	    {
            	    COMMA934=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList13046); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList13049);
            	    expressionWithTimeInclLast935=expressionWithTimeInclLast();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast935.getTree());
            	    }
            	    break;
            	default :
            	    break loop359;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand936 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod937 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable938 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand939 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand940 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator941 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator942 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList943 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar944 = null;
        try {
            int alt360=9;
            int LA360_0 = input.LA(1);
            if ( (LA360_0==LW) ) {
                int LA360_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt360=1;
                }
                else if ( (synpred9_EsperEPL2Grammar()) ) {
                    alt360=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA360_0==MINUS) ) {
                int LA360_2 = input.LA(2);
                if ( (LA360_2==NUM_INT) ) {
                    int LA360_115 = input.LA(3);
                    if ( (LA360_115==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==TIMEPERIOD_SECONDS) ) {
                        int LA360_483 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 483, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_115==TIMEPERIOD_SECOND) ) {
                        int LA360_484 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 484, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_115==TIMEPERIOD_SEC) ) {
                        int LA360_485 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 485, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_115==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_115==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_115==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 115, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_2==NUM_LONG) ) {
                    int LA360_116 = input.LA(3);
                    if ( (LA360_116==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==TIMEPERIOD_SECONDS) ) {
                        int LA360_530 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 530, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_116==TIMEPERIOD_SECOND) ) {
                        int LA360_531 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 531, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_116==TIMEPERIOD_SEC) ) {
                        int LA360_532 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 532, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_116==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_116==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_116==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 116, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_2==NUM_FLOAT) ) {
                    int LA360_117 = input.LA(3);
                    if ( (LA360_117==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==TIMEPERIOD_SECONDS) ) {
                        int LA360_578 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 578, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_117==TIMEPERIOD_SECOND) ) {
                        int LA360_579 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 579, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_117==TIMEPERIOD_SEC) ) {
                        int LA360_580 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 580, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_117==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_117==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_117==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 117, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_2==NUM_DOUBLE) ) {
                    int LA360_118 = input.LA(3);
                    if ( (LA360_118==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==TIMEPERIOD_SECONDS) ) {
                        int LA360_630 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 630, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_118==TIMEPERIOD_SECOND) ) {
                        int LA360_631 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 631, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_118==TIMEPERIOD_SEC) ) {
                        int LA360_632 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 632, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_118==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_118==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_118==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 118, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_2==IDENT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==AT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==COUNT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==SUM) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==AVG) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==MAX) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==FIRST) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==LAST) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==WHILE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==MERGE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==SQL) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==LW) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==CAST) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==INDEX) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==LEFT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==OUTER) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==FULL) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==JOIN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==FOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_2==USING) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA360_0==PLUS) ) {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    int LA360_169 = input.LA(3);
                    if ( (LA360_169==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==TIMEPERIOD_SECONDS) ) {
                        int LA360_671 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 671, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_169==TIMEPERIOD_SECOND) ) {
                        int LA360_672 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 672, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_169==TIMEPERIOD_SEC) ) {
                        int LA360_673 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 673, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_169==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_169==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_169==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 169, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    int LA360_170 = input.LA(3);
                    if ( (LA360_170==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==TIMEPERIOD_SECONDS) ) {
                        int LA360_718 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 718, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_170==TIMEPERIOD_SECOND) ) {
                        int LA360_719 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 719, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_170==TIMEPERIOD_SEC) ) {
                        int LA360_720 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 720, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_170==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_170==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_170==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 170, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    int LA360_171 = input.LA(3);
                    if ( (LA360_171==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==TIMEPERIOD_SECONDS) ) {
                        int LA360_766 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 766, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_171==TIMEPERIOD_SECOND) ) {
                        int LA360_767 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 767, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_171==TIMEPERIOD_SEC) ) {
                        int LA360_768 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 768, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_171==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_171==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_171==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 171, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    int LA360_172 = input.LA(3);
                    if ( (LA360_172==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==TIMEPERIOD_SECONDS) ) {
                        int LA360_818 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 818, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_172==TIMEPERIOD_SECOND) ) {
                        int LA360_819 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 819, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_172==TIMEPERIOD_SEC) ) {
                        int LA360_820 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt360=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt360=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 360, 820, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA360_172==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt360=3;
                    }
                    else if ( (LA360_172==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else if ( (LA360_172==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt360=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 172, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA360_0==NUM_INT) ) {
                int LA360_4 = input.LA(2);
                if ( (LA360_4==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==TIMEPERIOD_SECONDS) ) {
                    int LA360_175 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 175, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_4==TIMEPERIOD_SECOND) ) {
                    int LA360_176 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 176, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_4==TIMEPERIOD_SEC) ) {
                    int LA360_177 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 177, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_4==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt360=7;
                }
                else if ( (LA360_4==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt360=4;
                }
                else if ( (LA360_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_4==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_4==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt360=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA360_0==NUM_LONG) ) {
                int LA360_5 = input.LA(2);
                if ( (LA360_5==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt360=6;
                }
                else if ( (LA360_5==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==TIMEPERIOD_SECONDS) ) {
                    int LA360_226 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 226, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_5==TIMEPERIOD_SECOND) ) {
                    int LA360_227 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 227, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_5==TIMEPERIOD_SEC) ) {
                    int LA360_228 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 228, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_5==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt360=4;
                }
                else if ( (LA360_5==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt360=7;
                }
                else if ( (LA360_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_5==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA360_0==NUM_FLOAT) ) {
                int LA360_6 = input.LA(2);
                if ( (LA360_6==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt360=6;
                }
                else if ( (LA360_6==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt360=4;
                }
                else if ( (LA360_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==TIMEPERIOD_SECONDS) ) {
                    int LA360_278 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 278, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_6==TIMEPERIOD_SECOND) ) {
                    int LA360_279 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 279, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_6==TIMEPERIOD_SEC) ) {
                    int LA360_280 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 280, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_6==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt360=7;
                }
                else if ( (LA360_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_6==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA360_0==NUM_DOUBLE) ) {
                int LA360_7 = input.LA(2);
                if ( (LA360_7==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt360=4;
                }
                else if ( (LA360_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt360=6;
                }
                else if ( (LA360_7==TIMEPERIOD_SECONDS) ) {
                    int LA360_333 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 333, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_7==TIMEPERIOD_SECOND) ) {
                    int LA360_334 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 334, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_7==TIMEPERIOD_SEC) ) {
                    int LA360_335 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 335, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_7==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt360=7;
                }
                else if ( (LA360_7==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_7==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA360_0==IDENT) ) {
                int LA360_8 = input.LA(2);
                if ( (LA360_8==DOT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==TIMEPERIOD_SECONDS) ) {
                    int LA360_380 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 380, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_8==TIMEPERIOD_SECOND) ) {
                    int LA360_381 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 381, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_8==TIMEPERIOD_SEC) ) {
                    int LA360_382 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 382, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_8==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt360=4;
                }
                else if ( (LA360_8==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt360=6;
                }
                else if ( (LA360_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_8==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==LBRACK) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==QUESTION) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt360=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA360_0==QUESTION) ) {
                int LA360_9 = input.LA(2);
                if ( (LA360_9==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt360=6;
                }
                else if ( (LA360_9==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==TIMEPERIOD_SECONDS) ) {
                    int LA360_455 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 455, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_9==TIMEPERIOD_SECOND) ) {
                    int LA360_456 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 456, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_9==TIMEPERIOD_SEC) ) {
                    int LA360_457 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt360=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt360=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 457, input);
                        throw nvae;
                    }
                }
                else if ( (LA360_9==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt360=3;
                }
                else if ( (LA360_9==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt360=4;
                }
                else if ( (LA360_9==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt360=7;
                }
                else if ( (LA360_9==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else if ( (LA360_9==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt360=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA360_0==CASE) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==AT) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==COUNT) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==SUM) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==AVG) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==MAX) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==MIN) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==FIRST) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==LAST) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==WHILE) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==MERGE) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==SQL) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==CAST) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==INDEX) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==LEFT) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==OUTER) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==FULL) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==JOIN) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==FOR) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==USING) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==WHERE) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==SET) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==AFTER) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==PREVIOUSCOUNT) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==PREVIOUSWINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==NEWKW) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt360=3;
            }
            else if ( (LA360_0==STAR) ) {
                int LA360_76 = input.LA(2);
                if ( (LA360_76==DIV) && (synpred11_EsperEPL2Grammar())) {
                    alt360=5;
                }
                else if ( (LA360_76==RPAREN||LA360_76==COMMA) ) {
                    alt360=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 76, input);
                    throw nvae;
                }
            }
            else if ( (LA360_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {
                alt360=8;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 360, 0, input);
                throw nvae;
            }
            switch (alt360) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime13078);
                    lastWeekdayOperand936=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand936.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime13089);
                    timePeriod937=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod937.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime13100);
                    expressionQualifyable938=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable938.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime13111);
                    rangeOperand939=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand939.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime13123);
                    frequencyOperand940=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand940.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime13134);
                    lastOperator941=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator941.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime13146);
                    weekDayOperator942=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator942.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime13158);
                    numericParameterList943=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList943.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime13163);
                    numberSetStar944=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar944.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeInclLast_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return retval = new EsperEPL2GrammarParser.expressionWithTimeInclLast_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand945 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime946 = null;
        try {
            int alt361=2;
            int LA361_0 = input.LA(1);
            if ( (LA361_0==LAST) ) {
                int LA361_1 = input.LA(2);
                if ( (synpred15_EsperEPL2Grammar()) ) {
                    alt361=1;
                }
                else if ( (true) ) {
                    alt361=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 361, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA361_0==WINDOW||LA361_0==BETWEEN||LA361_0==ESCAPE||(LA361_0>=NOT_EXPR && LA361_0<=EVERY_EXPR)||LA361_0==WHERE||(LA361_0>=SUM && LA361_0<=COUNT)||LA361_0==CASE||LA361_0==OUTER||(LA361_0>=JOIN && LA361_0<=FULL)||(LA361_0>=EVENTS && LA361_0<=FIRST)||(LA361_0>=UNIDIRECTIONAL && LA361_0<=CURRENT_TIMESTAMP)||(LA361_0>=SNAPSHOT && LA361_0<=INDEX)||(LA361_0>=BOOLEAN_TRUE && LA361_0<=VALUE_NULL)||(LA361_0>=DEFINE && LA361_0<=MATCHED)||LA361_0==NEWKW||LA361_0==CONTEXT||LA361_0==NUM_DOUBLE||LA361_0==LBRACK||(LA361_0>=IDENT && LA361_0<=LPAREN)||LA361_0==LCURLY||LA361_0==STAR||LA361_0==QUESTION||(LA361_0>=PLUS && LA361_0<=QUOTED_STRING_LITERAL)||LA361_0==MINUS||LA361_0==NUM_INT||(LA361_0>=TICKED_STRING_LITERAL && LA361_0<=NUM_FLOAT)) ) {
                alt361=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 361, 0, input);
                throw nvae;
            }
            switch (alt361) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTimeInclLast13183);
                    lastOperand945=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand945.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeInclLast13188);
                    expressionWithTime946=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime946.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression947 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable13199);
            expression947=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression947.getTree());
            int alt362=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt362=1;
                    }
                    break;
                case DESC:
                    {
                    alt362=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt362=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt362=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt362=5;
                    }
                    break;
            }
            switch (alt362) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable13204); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable13208); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable13212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable13216); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable13220); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR948=null;
        CommonTree STAR948_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR948=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar13277); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR948);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW949=null;
        CommonTree LW949_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW949=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand13297); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW949_tree = (CommonTree)adaptor.create(LW949);
            root_0 = (CommonTree)adaptor.becomeRoot(LW949_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST950=null;
        CommonTree LAST950_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST950=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand13310); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST950_tree = (CommonTree)adaptor.create(LAST950);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST950_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR951=null;
        Token DIV952=null;
        EsperEPL2GrammarParser.number_return number953 = null;
        EsperEPL2GrammarParser.substitution_return substitution954 = null;
        CommonTree i_tree=null;
        CommonTree STAR951_tree=null;
        CommonTree DIV952_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR951=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand13322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR951);
            DIV952=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand13324); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV952);
            int alt363=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt363=1;
                }
                break;
            case IDENT:
                {
                alt363=2;
                }
                break;
            case QUESTION:
                {
                alt363=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 363, 0, input);
                throw nvae;
            }
            switch (alt363) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand13327);
                    number953=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number953.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand13331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand13333);
                    substitution954=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution954.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON957=null;
        EsperEPL2GrammarParser.number_return number955 = null;
        EsperEPL2GrammarParser.substitution_return substitution956 = null;
        EsperEPL2GrammarParser.number_return number958 = null;
        EsperEPL2GrammarParser.substitution_return substitution959 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON957_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt364=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt364=1;
                }
                break;
            case IDENT:
                {
                alt364=2;
                }
                break;
            case QUESTION:
                {
                alt364=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 364, 0, input);
                throw nvae;
            }
            switch (alt364) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand13382);
                    number955=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number955.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand13386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand13388);
                    substitution956=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution956.getTree());
                    }
                    break;
            }
            COLON957=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand13391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON957);
            int alt365=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt365=1;
                }
                break;
            case IDENT:
                {
                alt365=2;
                }
                break;
            case QUESTION:
                {
                alt365=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 365, 0, input);
                throw nvae;
            }
            switch (alt365) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand13394);
                    number958=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number958.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand13398); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand13400);
                    substitution959=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution959.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST962=null;
        EsperEPL2GrammarParser.number_return number960 = null;
        EsperEPL2GrammarParser.substitution_return substitution961 = null;
        CommonTree i_tree=null;
        CommonTree LAST962_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt366=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt366=1;
                }
                break;
            case IDENT:
                {
                alt366=2;
                }
                break;
            case QUESTION:
                {
                alt366=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 366, 0, input);
                throw nvae;
            }
            switch (alt366) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator13514);
                    number960=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number960.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator13518); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator13520);
                    substitution961=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution961.getTree());
                    }
                    break;
            }
            LAST962=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator13523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST962);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY965=null;
        EsperEPL2GrammarParser.number_return number963 = null;
        EsperEPL2GrammarParser.substitution_return substitution964 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY965_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt367=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt367=1;
                }
                break;
            case IDENT:
                {
                alt367=2;
                }
                break;
            case QUESTION:
                {
                alt367=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 367, 0, input);
                throw nvae;
            }
            switch (alt367) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator13571);
                    number963=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number963.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator13575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator13577);
                    substitution964=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution964.getTree());
                    }
                    break;
            }
            WEEKDAY965=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator13580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY965);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK966=null;
        Token COMMA968=null;
        Token RBRACK970=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter967 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter969 = null;
        CommonTree LBRACK966_tree=null;
        CommonTree COMMA968_tree=null;
        CommonTree RBRACK970_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK966=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList13627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK966);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList13629);
            numericListParameter967=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter967.getTree());
            loop368:
            do {
                int alt368=2;
                int LA368_0 = input.LA(1);
                if ( (LA368_0==COMMA) ) {
                    alt368=1;
                }
                switch (alt368) {
            	case 1 :
            	    {
            	    COMMA968=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList13632); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA968);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList13634);
            	    numericListParameter969=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter969.getTree());
            	    }
            	    break;
            	default :
            	    break loop368;
                }
            } while (true);
            RBRACK970=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList13638); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK970);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand971 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand972 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant973 = null;
        try {
            int alt369=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA369_1 = input.LA(2);
                if ( (LA369_1==COLON) ) {
                    alt369=1;
                }
                else if ( (LA369_1==RBRACK||LA369_1==COMMA) ) {
                    alt369=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA369_2 = input.LA(2);
                if ( (LA369_2==COLON) ) {
                    alt369=1;
                }
                else if ( (LA369_2==RBRACK||LA369_2==COMMA) ) {
                    alt369=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA369_3 = input.LA(2);
                if ( (LA369_3==COLON) ) {
                    alt369=1;
                }
                else if ( (LA369_3==RBRACK||LA369_3==COMMA) ) {
                    alt369=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA369_4 = input.LA(2);
                if ( (LA369_4==COLON) ) {
                    alt369=1;
                }
                else if ( (LA369_4==RBRACK||LA369_4==COMMA) ) {
                    alt369=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt369=1;
                }
                break;
            case STAR:
                {
                alt369=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt369=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 369, 0, input);
                throw nvae;
            }
            switch (alt369) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter13660);
                    rangeOperand971=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand971.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter13666);
                    frequencyOperand972=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand972.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter13671);
                    numberconstant973=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant973.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT975=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic974 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic976 = null;
        CommonTree DOT975_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty13687);
            eventPropertyAtomic974=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic974.getTree());
            loop370:
            do {
                int alt370=2;
                int LA370_0 = input.LA(1);
                if ( (LA370_0==DOT) ) {
                    alt370=1;
                }
                switch (alt370) {
            	case 1 :
            	    {
            	    DOT975=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty13690); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT975);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty13692);
            	    eventPropertyAtomic976=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic976.getTree());
            	    }
            	    break;
            	default :
            	    break loop370;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK978=null;
        Token RPAREN979=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent977 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK978_tree=null;
        CommonTree RPAREN979_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic13718);
            eventPropertyIdent977=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent977.getTree());
            int alt374=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt374=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt374=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt374=3;
                    }
                    break;
            }
            switch (alt374) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic13727); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic13731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK978=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic13733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK978);
                    int alt371=2;
                    int LA371_0 = input.LA(1);
                    if ( (LA371_0==QUESTION) ) {
                        alt371=1;
                    }
                    switch (alt371) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13738); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic13752); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt372=2;
                    int LA372_0 = input.LA(1);
                    if ( (LA372_0==STRING_LITERAL) ) {
                        alt372=1;
                    }
                    else if ( (LA372_0==QUOTED_STRING_LITERAL) ) {
                        alt372=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 372, 0, input);
                        throw nvae;
                    }
                    switch (alt372) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic13757); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic13763); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN979=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic13766); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN979);
                    int alt373=2;
                    int LA373_0 = input.LA(1);
                    if ( (LA373_0==QUESTION) ) {
                        alt373=1;
                    }
                    switch (alt373) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13771); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13785); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR980=null;
        Token DOT981=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR980_tree=null;
        CommonTree DOT981_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent13908);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop376:
            do {
                int alt376=2;
                int LA376_0 = input.LA(1);
                if ( (LA376_0==ESCAPECHAR) ) {
                    alt376=1;
                }
                switch (alt376) {
            	case 1 :
            	    {
            	    ESCAPECHAR980=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent13920); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR980);
            	    DOT981=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent13922); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT981);
            	    int alt375=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case USING:
            	        case MERGE:
            	        case MATCHED:
            	        case CONTEXT:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt375=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA375_5 = input.LA(2);
            	            if ( (LA375_5==EOF||(LA375_5>=IN_SET && LA375_5<=NOT_EXPR)||(LA375_5>=WHERE && LA375_5<=AS)||(LA375_5>=ELSE && LA375_5<=FROM)||(LA375_5>=INNER && LA375_5<=FULL)||LA375_5==IS||(LA375_5>=GROUP && LA375_5<=HAVING)||LA375_5==ALL||LA375_5==OUTPUT||LA375_5==INSERT||(LA375_5>=ORDER && LA375_5<=DESC)||LA375_5==PATTERN||(LA375_5>=TIMEPERIOD_SEC && LA375_5<=TIMEPERIOD_SECONDS)||LA375_5==ROW_LIMIT_EXPR||(LA375_5>=MATCH_RECOGNIZE && LA375_5<=MEASURES)||(LA375_5>=AFTER && LA375_5<=FOR)||(LA375_5>=LBRACK && LA375_5<=RBRACK)||(LA375_5>=LPAREN && LA375_5<=COLON)||LA375_5==RCURLY||(LA375_5>=ATCHAR && LA375_5<=STAR)||(LA375_5>=LT && LA375_5<=PLUS)||(LA375_5>=BAND && LA375_5<=MOD)||(LA375_5>=FOLLOWMAX_END && LA375_5<=ESCAPECHAR)) ) {
            	                alt375=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA375_25 = input.LA(2);
            	            if ( (LA375_25==LPAREN) ) {
            	                int LA375_180 = input.LA(3);
            	                if ( ((LA375_180>=STRING_LITERAL && LA375_180<=QUOTED_STRING_LITERAL)) ) {
            	                    alt375=1;
            	                }
            	            }
            	            else if ( (LA375_25==EOF||(LA375_25>=IN_SET && LA375_25<=NOT_EXPR)||(LA375_25>=WHERE && LA375_25<=AS)||(LA375_25>=ELSE && LA375_25<=FROM)||(LA375_25>=INNER && LA375_25<=FULL)||LA375_25==IS||(LA375_25>=GROUP && LA375_25<=HAVING)||LA375_25==ALL||LA375_25==OUTPUT||LA375_25==INSERT||(LA375_25>=ORDER && LA375_25<=DESC)||LA375_25==PATTERN||(LA375_25>=TIMEPERIOD_SEC && LA375_25<=TIMEPERIOD_SECONDS)||LA375_25==ROW_LIMIT_EXPR||(LA375_25>=MATCH_RECOGNIZE && LA375_25<=MEASURES)||(LA375_25>=AFTER && LA375_25<=FOR)||(LA375_25>=LBRACK && LA375_25<=RBRACK)||(LA375_25>=RPAREN && LA375_25<=COLON)||LA375_25==RCURLY||(LA375_25>=ATCHAR && LA375_25<=STAR)||(LA375_25>=LT && LA375_25<=PLUS)||(LA375_25>=BAND && LA375_25<=MOD)||(LA375_25>=FOLLOWMAX_END && LA375_25<=ESCAPECHAR)) ) {
            	                alt375=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA375_40 = input.LA(2);
            	            if ( (LA375_40==EOF||(LA375_40>=IN_SET && LA375_40<=NOT_EXPR)||(LA375_40>=WHERE && LA375_40<=AS)||(LA375_40>=ELSE && LA375_40<=FROM)||(LA375_40>=INNER && LA375_40<=FULL)||LA375_40==IS||(LA375_40>=GROUP && LA375_40<=HAVING)||LA375_40==ALL||LA375_40==OUTPUT||LA375_40==INSERT||(LA375_40>=ORDER && LA375_40<=DESC)||LA375_40==PATTERN||(LA375_40>=TIMEPERIOD_SEC && LA375_40<=TIMEPERIOD_SECONDS)||LA375_40==ROW_LIMIT_EXPR||(LA375_40>=MATCH_RECOGNIZE && LA375_40<=MEASURES)||(LA375_40>=AFTER && LA375_40<=FOR)||(LA375_40>=LBRACK && LA375_40<=RBRACK)||(LA375_40>=LPAREN && LA375_40<=COLON)||LA375_40==RCURLY||(LA375_40>=ATCHAR && LA375_40<=STAR)||(LA375_40>=LT && LA375_40<=PLUS)||(LA375_40>=BAND && LA375_40<=MOD)||(LA375_40>=FOLLOWMAX_END && LA375_40<=ESCAPECHAR)) ) {
            	                alt375=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA375_41 = input.LA(2);
            	            if ( (LA375_41==EOF||(LA375_41>=IN_SET && LA375_41<=NOT_EXPR)||(LA375_41>=WHERE && LA375_41<=AS)||(LA375_41>=ELSE && LA375_41<=FROM)||(LA375_41>=INNER && LA375_41<=FULL)||LA375_41==IS||(LA375_41>=GROUP && LA375_41<=HAVING)||LA375_41==ALL||LA375_41==OUTPUT||LA375_41==INSERT||(LA375_41>=ORDER && LA375_41<=DESC)||LA375_41==PATTERN||(LA375_41>=TIMEPERIOD_SEC && LA375_41<=TIMEPERIOD_SECONDS)||LA375_41==ROW_LIMIT_EXPR||(LA375_41>=MATCH_RECOGNIZE && LA375_41<=MEASURES)||(LA375_41>=AFTER && LA375_41<=FOR)||(LA375_41>=LBRACK && LA375_41<=RBRACK)||(LA375_41>=LPAREN && LA375_41<=COLON)||LA375_41==RCURLY||(LA375_41>=ATCHAR && LA375_41<=STAR)||(LA375_41>=LT && LA375_41<=PLUS)||(LA375_41>=BAND && LA375_41<=MOD)||(LA375_41>=FOLLOWMAX_END && LA375_41<=ESCAPECHAR)) ) {
            	                alt375=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA375_43 = input.LA(2);
            	            if ( (LA375_43==EOF||(LA375_43>=IN_SET && LA375_43<=NOT_EXPR)||(LA375_43>=WHERE && LA375_43<=AS)||(LA375_43>=ELSE && LA375_43<=FROM)||(LA375_43>=INNER && LA375_43<=FULL)||LA375_43==IS||(LA375_43>=GROUP && LA375_43<=HAVING)||LA375_43==ALL||LA375_43==OUTPUT||LA375_43==INSERT||(LA375_43>=ORDER && LA375_43<=DESC)||LA375_43==PATTERN||(LA375_43>=TIMEPERIOD_SEC && LA375_43<=TIMEPERIOD_SECONDS)||LA375_43==ROW_LIMIT_EXPR||(LA375_43>=MATCH_RECOGNIZE && LA375_43<=MEASURES)||(LA375_43>=AFTER && LA375_43<=FOR)||(LA375_43>=LBRACK && LA375_43<=RBRACK)||(LA375_43>=LPAREN && LA375_43<=COLON)||LA375_43==RCURLY||(LA375_43>=ATCHAR && LA375_43<=STAR)||(LA375_43>=LT && LA375_43<=PLUS)||(LA375_43>=BAND && LA375_43<=MOD)||(LA375_43>=FOLLOWMAX_END && LA375_43<=ESCAPECHAR)) ) {
            	                alt375=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA375_44 = input.LA(2);
            	            if ( (LA375_44==PATTERN) ) {
            	                int LA375_453 = input.LA(3);
            	                if ( (LA375_453==LPAREN) ) {
            	                    alt375=1;
            	                }
            	            }
            	            else if ( (LA375_44==EOF||(LA375_44>=IN_SET && LA375_44<=NOT_EXPR)||(LA375_44>=WHERE && LA375_44<=AS)||(LA375_44>=ELSE && LA375_44<=FROM)||(LA375_44>=INNER && LA375_44<=FULL)||LA375_44==IS||(LA375_44>=GROUP && LA375_44<=HAVING)||LA375_44==ALL||LA375_44==OUTPUT||LA375_44==INSERT||(LA375_44>=ORDER && LA375_44<=DESC)||(LA375_44>=TIMEPERIOD_SEC && LA375_44<=TIMEPERIOD_SECONDS)||LA375_44==ROW_LIMIT_EXPR||(LA375_44>=MATCH_RECOGNIZE && LA375_44<=MEASURES)||(LA375_44>=AFTER && LA375_44<=FOR)||(LA375_44>=LBRACK && LA375_44<=RBRACK)||(LA375_44>=LPAREN && LA375_44<=COLON)||LA375_44==RCURLY||(LA375_44>=ATCHAR && LA375_44<=STAR)||(LA375_44>=LT && LA375_44<=PLUS)||(LA375_44>=BAND && LA375_44<=MOD)||(LA375_44>=FOLLOWMAX_END && LA375_44<=ESCAPECHAR)) ) {
            	                alt375=1;
            	            }
            	            }
            	            break;
            	        case FOR:
            	            {
            	            int LA375_49 = input.LA(2);
            	            if ( (LA375_49==EOF||(LA375_49>=IN_SET && LA375_49<=NOT_EXPR)||(LA375_49>=WHERE && LA375_49<=AS)||(LA375_49>=ELSE && LA375_49<=FROM)||(LA375_49>=INNER && LA375_49<=FULL)||LA375_49==IS||(LA375_49>=GROUP && LA375_49<=HAVING)||LA375_49==ALL||LA375_49==OUTPUT||LA375_49==INSERT||(LA375_49>=ORDER && LA375_49<=DESC)||LA375_49==PATTERN||(LA375_49>=TIMEPERIOD_SEC && LA375_49<=TIMEPERIOD_SECONDS)||LA375_49==ROW_LIMIT_EXPR||(LA375_49>=MATCH_RECOGNIZE && LA375_49<=MEASURES)||(LA375_49>=AFTER && LA375_49<=FOR)||(LA375_49>=LBRACK && LA375_49<=RBRACK)||(LA375_49>=LPAREN && LA375_49<=COLON)||LA375_49==RCURLY||(LA375_49>=ATCHAR && LA375_49<=STAR)||(LA375_49>=LT && LA375_49<=PLUS)||(LA375_49>=BAND && LA375_49<=MOD)||(LA375_49>=FOLLOWMAX_END && LA375_49<=ESCAPECHAR)) ) {
            	                alt375=1;
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt375) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent13926);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop376;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT982=null;
        Token COUNT983=null;
        Token ESCAPE984=null;
        Token EVERY_EXPR985=null;
        Token SUM986=null;
        Token AVG987=null;
        Token MAX988=null;
        Token MIN989=null;
        Token COALESCE990=null;
        Token MEDIAN991=null;
        Token STDDEV992=null;
        Token AVEDEV993=null;
        Token EVENTS994=null;
        Token FIRST995=null;
        Token LAST996=null;
        Token WHILE997=null;
        Token MERGE998=null;
        Token MATCHED999=null;
        Token UNIDIRECTIONAL1000=null;
        Token RETAINUNION1001=null;
        Token RETAININTERSECTION1002=null;
        Token UNTIL1003=null;
        Token PATTERN1004=null;
        Token SQL1005=null;
        Token METADATASQL1006=null;
        Token PREVIOUS1007=null;
        Token PREVIOUSTAIL1008=null;
        Token PRIOR1009=null;
        Token WEEKDAY1010=null;
        Token LW1011=null;
        Token INSTANCEOF1012=null;
        Token TYPEOF1013=null;
        Token CAST1014=null;
        Token SNAPSHOT1015=null;
        Token VARIABLE1016=null;
        Token INDEX1017=null;
        Token WINDOW1018=null;
        Token LEFT1019=null;
        Token RIGHT1020=null;
        Token OUTER1021=null;
        Token FULL1022=null;
        Token JOIN1023=null;
        Token DEFINE1024=null;
        Token PARTITION1025=null;
        Token MATCHES1026=null;
        Token CONTEXT1027=null;
        Token FOR1028=null;
        Token USING1029=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT982_tree=null;
        CommonTree COUNT983_tree=null;
        CommonTree ESCAPE984_tree=null;
        CommonTree EVERY_EXPR985_tree=null;
        CommonTree SUM986_tree=null;
        CommonTree AVG987_tree=null;
        CommonTree MAX988_tree=null;
        CommonTree MIN989_tree=null;
        CommonTree COALESCE990_tree=null;
        CommonTree MEDIAN991_tree=null;
        CommonTree STDDEV992_tree=null;
        CommonTree AVEDEV993_tree=null;
        CommonTree EVENTS994_tree=null;
        CommonTree FIRST995_tree=null;
        CommonTree LAST996_tree=null;
        CommonTree WHILE997_tree=null;
        CommonTree MERGE998_tree=null;
        CommonTree MATCHED999_tree=null;
        CommonTree UNIDIRECTIONAL1000_tree=null;
        CommonTree RETAINUNION1001_tree=null;
        CommonTree RETAININTERSECTION1002_tree=null;
        CommonTree UNTIL1003_tree=null;
        CommonTree PATTERN1004_tree=null;
        CommonTree SQL1005_tree=null;
        CommonTree METADATASQL1006_tree=null;
        CommonTree PREVIOUS1007_tree=null;
        CommonTree PREVIOUSTAIL1008_tree=null;
        CommonTree PRIOR1009_tree=null;
        CommonTree WEEKDAY1010_tree=null;
        CommonTree LW1011_tree=null;
        CommonTree INSTANCEOF1012_tree=null;
        CommonTree TYPEOF1013_tree=null;
        CommonTree CAST1014_tree=null;
        CommonTree SNAPSHOT1015_tree=null;
        CommonTree VARIABLE1016_tree=null;
        CommonTree INDEX1017_tree=null;
        CommonTree WINDOW1018_tree=null;
        CommonTree LEFT1019_tree=null;
        CommonTree RIGHT1020_tree=null;
        CommonTree OUTER1021_tree=null;
        CommonTree FULL1022_tree=null;
        CommonTree JOIN1023_tree=null;
        CommonTree DEFINE1024_tree=null;
        CommonTree PARTITION1025_tree=null;
        CommonTree MATCHES1026_tree=null;
        CommonTree CONTEXT1027_tree=null;
        CommonTree FOR1028_tree=null;
        CommonTree USING1029_tree=null;
        try {
            int alt377=50;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt377=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt377=2;
                }
                break;
            case AT:
                {
                alt377=3;
                }
                break;
            case COUNT:
                {
                alt377=4;
                }
                break;
            case ESCAPE:
                {
                alt377=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt377=6;
                }
                break;
            case SUM:
                {
                alt377=7;
                }
                break;
            case AVG:
                {
                alt377=8;
                }
                break;
            case MAX:
                {
                alt377=9;
                }
                break;
            case MIN:
                {
                alt377=10;
                }
                break;
            case COALESCE:
                {
                alt377=11;
                }
                break;
            case MEDIAN:
                {
                alt377=12;
                }
                break;
            case STDDEV:
                {
                alt377=13;
                }
                break;
            case AVEDEV:
                {
                alt377=14;
                }
                break;
            case EVENTS:
                {
                alt377=15;
                }
                break;
            case FIRST:
                {
                alt377=16;
                }
                break;
            case LAST:
                {
                alt377=17;
                }
                break;
            case WHILE:
                {
                alt377=18;
                }
                break;
            case MERGE:
                {
                alt377=19;
                }
                break;
            case MATCHED:
                {
                alt377=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt377=21;
                }
                break;
            case RETAINUNION:
                {
                alt377=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt377=23;
                }
                break;
            case UNTIL:
                {
                alt377=24;
                }
                break;
            case PATTERN:
                {
                alt377=25;
                }
                break;
            case SQL:
                {
                alt377=26;
                }
                break;
            case METADATASQL:
                {
                alt377=27;
                }
                break;
            case PREVIOUS:
                {
                alt377=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt377=29;
                }
                break;
            case PRIOR:
                {
                alt377=30;
                }
                break;
            case WEEKDAY:
                {
                alt377=31;
                }
                break;
            case LW:
                {
                alt377=32;
                }
                break;
            case INSTANCEOF:
                {
                alt377=33;
                }
                break;
            case TYPEOF:
                {
                alt377=34;
                }
                break;
            case CAST:
                {
                alt377=35;
                }
                break;
            case SNAPSHOT:
                {
                alt377=36;
                }
                break;
            case VARIABLE:
                {
                alt377=37;
                }
                break;
            case INDEX:
                {
                alt377=38;
                }
                break;
            case WINDOW:
                {
                alt377=39;
                }
                break;
            case LEFT:
                {
                alt377=40;
                }
                break;
            case RIGHT:
                {
                alt377=41;
                }
                break;
            case OUTER:
                {
                alt377=42;
                }
                break;
            case FULL:
                {
                alt377=43;
                }
                break;
            case JOIN:
                {
                alt377=44;
                }
                break;
            case DEFINE:
                {
                alt377=45;
                }
                break;
            case PARTITION:
                {
                alt377=46;
                }
                break;
            case MATCHES:
                {
                alt377=47;
                }
                break;
            case CONTEXT:
                {
                alt377=48;
                }
                break;
            case FOR:
                {
                alt377=49;
                }
                break;
            case USING:
                {
                alt377=50;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 377, 0, input);
                throw nvae;
            }
            switch (alt377) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent13965); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent13974); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i2.getText(); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT982=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent13981); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT982_tree = (CommonTree)adaptor.create(AT982);
                    adaptor.addChild(root_0, AT982_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT983=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent13988); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT983_tree = (CommonTree)adaptor.create(COUNT983);
                    adaptor.addChild(root_0, COUNT983_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE984=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent13995); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE984_tree = (CommonTree)adaptor.create(ESCAPE984);
                    adaptor.addChild(root_0, ESCAPE984_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR985=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent14006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR985_tree = (CommonTree)adaptor.create(EVERY_EXPR985);
                    adaptor.addChild(root_0, EVERY_EXPR985_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM986=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent14013); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM986_tree = (CommonTree)adaptor.create(SUM986);
                    adaptor.addChild(root_0, SUM986_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG987=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent14020); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG987_tree = (CommonTree)adaptor.create(AVG987);
                    adaptor.addChild(root_0, AVG987_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX988=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent14027); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX988_tree = (CommonTree)adaptor.create(MAX988);
                    adaptor.addChild(root_0, MAX988_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN989=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent14034); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN989_tree = (CommonTree)adaptor.create(MIN989);
                    adaptor.addChild(root_0, MIN989_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE990=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent14041); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE990_tree = (CommonTree)adaptor.create(COALESCE990);
                    adaptor.addChild(root_0, COALESCE990_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN991=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent14048); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN991_tree = (CommonTree)adaptor.create(MEDIAN991);
                    adaptor.addChild(root_0, MEDIAN991_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV992=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent14055); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV992_tree = (CommonTree)adaptor.create(STDDEV992);
                    adaptor.addChild(root_0, STDDEV992_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV993=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent14062); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV993_tree = (CommonTree)adaptor.create(AVEDEV993);
                    adaptor.addChild(root_0, AVEDEV993_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS994=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent14069); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS994_tree = (CommonTree)adaptor.create(EVENTS994);
                    adaptor.addChild(root_0, EVENTS994_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST995=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent14076); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST995_tree = (CommonTree)adaptor.create(FIRST995);
                    adaptor.addChild(root_0, FIRST995_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST996=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent14083); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST996_tree = (CommonTree)adaptor.create(LAST996);
                    adaptor.addChild(root_0, LAST996_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE997=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent14090); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE997_tree = (CommonTree)adaptor.create(WHILE997);
                    adaptor.addChild(root_0, WHILE997_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE998=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent14097); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE998_tree = (CommonTree)adaptor.create(MERGE998);
                    adaptor.addChild(root_0, MERGE998_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED999=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent14104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED999_tree = (CommonTree)adaptor.create(MATCHED999);
                    adaptor.addChild(root_0, MATCHED999_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL1000=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent14111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL1000_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL1000);
                    adaptor.addChild(root_0, UNIDIRECTIONAL1000_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION1001=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent14118); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION1001_tree = (CommonTree)adaptor.create(RETAINUNION1001);
                    adaptor.addChild(root_0, RETAINUNION1001_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION1002=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent14125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION1002_tree = (CommonTree)adaptor.create(RETAININTERSECTION1002);
                    adaptor.addChild(root_0, RETAININTERSECTION1002_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL1003=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent14132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL1003_tree = (CommonTree)adaptor.create(UNTIL1003);
                    adaptor.addChild(root_0, UNTIL1003_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN1004=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent14139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN1004_tree = (CommonTree)adaptor.create(PATTERN1004);
                    adaptor.addChild(root_0, PATTERN1004_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL1005=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent14146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL1005_tree = (CommonTree)adaptor.create(SQL1005);
                    adaptor.addChild(root_0, SQL1005_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL1006=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent14153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL1006_tree = (CommonTree)adaptor.create(METADATASQL1006);
                    adaptor.addChild(root_0, METADATASQL1006_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS1007=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent14160); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS1007_tree = (CommonTree)adaptor.create(PREVIOUS1007);
                    adaptor.addChild(root_0, PREVIOUS1007_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL1008=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent14167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL1008_tree = (CommonTree)adaptor.create(PREVIOUSTAIL1008);
                    adaptor.addChild(root_0, PREVIOUSTAIL1008_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR1009=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent14174); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR1009_tree = (CommonTree)adaptor.create(PRIOR1009);
                    adaptor.addChild(root_0, PRIOR1009_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY1010=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent14181); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY1010_tree = (CommonTree)adaptor.create(WEEKDAY1010);
                    adaptor.addChild(root_0, WEEKDAY1010_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW1011=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent14188); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW1011_tree = (CommonTree)adaptor.create(LW1011);
                    adaptor.addChild(root_0, LW1011_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF1012=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent14195); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF1012_tree = (CommonTree)adaptor.create(INSTANCEOF1012);
                    adaptor.addChild(root_0, INSTANCEOF1012_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF1013=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent14202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF1013_tree = (CommonTree)adaptor.create(TYPEOF1013);
                    adaptor.addChild(root_0, TYPEOF1013_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST1014=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent14209); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST1014_tree = (CommonTree)adaptor.create(CAST1014);
                    adaptor.addChild(root_0, CAST1014_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT1015=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent14216); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT1015_tree = (CommonTree)adaptor.create(SNAPSHOT1015);
                    adaptor.addChild(root_0, SNAPSHOT1015_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE1016=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent14223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE1016_tree = (CommonTree)adaptor.create(VARIABLE1016);
                    adaptor.addChild(root_0, VARIABLE1016_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX1017=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent14232); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX1017_tree = (CommonTree)adaptor.create(INDEX1017);
                    adaptor.addChild(root_0, INDEX1017_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW1018=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent14241); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW1018_tree = (CommonTree)adaptor.create(WINDOW1018);
                    adaptor.addChild(root_0, WINDOW1018_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT1019=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent14248); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT1019_tree = (CommonTree)adaptor.create(LEFT1019);
                    adaptor.addChild(root_0, LEFT1019_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT1020=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent14255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT1020_tree = (CommonTree)adaptor.create(RIGHT1020);
                    adaptor.addChild(root_0, RIGHT1020_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER1021=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent14262); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER1021_tree = (CommonTree)adaptor.create(OUTER1021);
                    adaptor.addChild(root_0, OUTER1021_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL1022=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent14269); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL1022_tree = (CommonTree)adaptor.create(FULL1022);
                    adaptor.addChild(root_0, FULL1022_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN1023=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent14276); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN1023_tree = (CommonTree)adaptor.create(JOIN1023);
                    adaptor.addChild(root_0, JOIN1023_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE1024=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent14283); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE1024_tree = (CommonTree)adaptor.create(DEFINE1024);
                    adaptor.addChild(root_0, DEFINE1024_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION1025=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent14290); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION1025_tree = (CommonTree)adaptor.create(PARTITION1025);
                    adaptor.addChild(root_0, PARTITION1025_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES1026=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent14297); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES1026_tree = (CommonTree)adaptor.create(MATCHES1026);
                    adaptor.addChild(root_0, MATCHES1026_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
                case 48 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CONTEXT1027=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_keywordAllowedIdent14304); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONTEXT1027_tree = (CommonTree)adaptor.create(CONTEXT1027);
                    adaptor.addChild(root_0, CONTEXT1027_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "context"; 
                    }
                    }
                    break;
                case 49 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FOR1028=(Token)match(input,FOR,FOLLOW_FOR_in_keywordAllowedIdent14311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOR1028_tree = (CommonTree)adaptor.create(FOR1028);
                    adaptor.addChild(root_0, FOR1028_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "for"; 
                    }
                    }
                    break;
                case 50 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    USING1029=(Token)match(input,USING,FOLLOW_USING_in_keywordAllowedIdent14318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING1029_tree = (CommonTree)adaptor.create(USING1029);
                    adaptor.addChild(root_0, USING1029_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "using"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt378=2;
            int LA378_0 = input.LA(1);
            if ( (LA378_0==IDENT) ) {
                alt378=1;
            }
            else if ( (LA378_0==TICKED_STRING_LITERAL) ) {
                alt378=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 378, 0, input);
                throw nvae;
            }
            switch (alt378) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr14339); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr14348); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT1030=null;
        CommonTree t_tree=null;
        CommonTree IDENT1030_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt379=2;
            int LA379_0 = input.LA(1);
            if ( (LA379_0==IDENT) ) {
                alt379=1;
            }
            else if ( (LA379_0==TICKED_STRING_LITERAL) ) {
                alt379=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 379, 0, input);
                throw nvae;
            }
            switch (alt379) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT1030=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent14362); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT1030_tree = (CommonTree)adaptor.create(IDENT1030);
                    adaptor.addChild(root_0, IDENT1030_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent14370); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.yearPart_return yearPart1031 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart1032 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart1033 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1034 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1035 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1036 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1037 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1038 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart1039 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart1040 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1041 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1042 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1043 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1044 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1045 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart1046 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1047 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1048 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1049 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1050 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1051 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1052 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1053 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1054 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1055 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1056 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1057 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1058 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1059 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1060 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1061 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1062 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1063 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1064 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1065 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1066 = null;
        RewriteRuleSubtreeStream stream_yearPart=new RewriteRuleSubtreeStream(adaptor,"rule yearPart");
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        RewriteRuleSubtreeStream stream_weekPart=new RewriteRuleSubtreeStream(adaptor,"rule weekPart");
        RewriteRuleSubtreeStream stream_monthPart=new RewriteRuleSubtreeStream(adaptor,"rule monthPart");
        try {
            {
            int alt408=8;
            switch ( input.LA(1) ) {
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt408=7;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt408=2;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt408=4;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt408=5;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt408=3;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt408=6;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt408=1;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt408=8;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 408, 9, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt408=7;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt408=4;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt408=5;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt408=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt408=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt408=3;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt408=6;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt408=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 408, 10, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt408=4;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt408=5;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt408=7;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt408=1;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt408=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt408=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt408=3;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt408=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 408, 11, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt408=3;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt408=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt408=4;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt408=5;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt408=7;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt408=1;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt408=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt408=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 408, 12, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 408, 1, input);
                    throw nvae;
                }
                }
                break;
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt408=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt408=7;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt408=5;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt408=4;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt408=3;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt408=6;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt408=1;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt408=8;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 408, 13, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt408=7;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt408=5;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt408=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt408=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt408=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt408=3;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt408=6;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt408=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 408, 14, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt408=5;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt408=4;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt408=7;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt408=1;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt408=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt408=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt408=3;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt408=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 408, 15, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt408=3;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt408=6;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt408=5;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt408=4;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt408=7;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt408=1;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt408=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt408=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 408, 16, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 408, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt408=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt408=2;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt408=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt408=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt408=6;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt408=3;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt408=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt408=8;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 408, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt408=7;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt408=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt408=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt408=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt408=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt408=6;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt408=3;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt408=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 408, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt408=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt408=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt408=7;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt408=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt408=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt408=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt408=6;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt408=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 408, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt408=6;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt408=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt408=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt408=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt408=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt408=8;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt408=1;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt408=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 408, 6, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt408=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt408=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt408=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt408=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt408=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt408=7;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt408=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt408=8;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 408, 7, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt408=8;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt408=6;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt408=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt408=2;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt408=1;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt408=4;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt408=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt408=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 408, 8, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 408, 0, input);
                throw nvae;
            }
            switch (alt408) {
                case 1 :
                    {
                    pushFollow(FOLLOW_yearPart_in_timePeriod14395);
                    yearPart1031=yearPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yearPart.add(yearPart1031.getTree());
                    int alt380=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA380_26 = input.LA(3);
                                    if ( ((LA380_26>=TIMEPERIOD_MONTH && LA380_26<=TIMEPERIOD_MONTHS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA380_27 = input.LA(3);
                                    if ( ((LA380_27>=TIMEPERIOD_MONTH && LA380_27<=TIMEPERIOD_MONTHS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA380_28 = input.LA(3);
                                    if ( ((LA380_28>=TIMEPERIOD_MONTH && LA380_28<=TIMEPERIOD_MONTHS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA380_29 = input.LA(3);
                                    if ( ((LA380_29>=TIMEPERIOD_MONTH && LA380_29<=TIMEPERIOD_MONTHS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA380_30 = input.LA(3);
                                    if ( ((LA380_30>=TIMEPERIOD_MONTH && LA380_30<=TIMEPERIOD_MONTHS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA380_31 = input.LA(3);
                                    if ( ((LA380_31>=TIMEPERIOD_MONTH && LA380_31<=TIMEPERIOD_MONTHS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA380_32 = input.LA(3);
                                    if ( ((LA380_32>=TIMEPERIOD_MONTH && LA380_32<=TIMEPERIOD_MONTHS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA380_33 = input.LA(3);
                                    if ( ((LA380_33>=TIMEPERIOD_MONTH && LA380_33<=TIMEPERIOD_MONTHS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA380_3 = input.LA(2);
                            if ( ((LA380_3>=TIMEPERIOD_MONTH && LA380_3<=TIMEPERIOD_MONTHS)) ) {
                                alt380=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA380_4 = input.LA(2);
                            if ( ((LA380_4>=TIMEPERIOD_MONTH && LA380_4<=TIMEPERIOD_MONTHS)) ) {
                                alt380=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA380_5 = input.LA(2);
                            if ( ((LA380_5>=TIMEPERIOD_MONTH && LA380_5<=TIMEPERIOD_MONTHS)) ) {
                                alt380=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA380_6 = input.LA(2);
                            if ( ((LA380_6>=TIMEPERIOD_MONTH && LA380_6<=TIMEPERIOD_MONTHS)) ) {
                                alt380=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA380_7 = input.LA(2);
                            if ( ((LA380_7>=TIMEPERIOD_MONTH && LA380_7<=TIMEPERIOD_MONTHS)) ) {
                                alt380=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA380_8 = input.LA(2);
                            if ( ((LA380_8>=TIMEPERIOD_MONTH && LA380_8<=TIMEPERIOD_MONTHS)) ) {
                                alt380=1;
                            }
                            }
                            break;
                    }
                    switch (alt380) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_monthPart_in_timePeriod14397);
                            monthPart1032=monthPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_monthPart.add(monthPart1032.getTree());
                            }
                            break;
                    }
                    int alt381=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA381_26 = input.LA(3);
                                    if ( ((LA381_26>=TIMEPERIOD_WEEK && LA381_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA381_27 = input.LA(3);
                                    if ( ((LA381_27>=TIMEPERIOD_WEEK && LA381_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA381_28 = input.LA(3);
                                    if ( ((LA381_28>=TIMEPERIOD_WEEK && LA381_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA381_29 = input.LA(3);
                                    if ( ((LA381_29>=TIMEPERIOD_WEEK && LA381_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA381_30 = input.LA(3);
                                    if ( ((LA381_30>=TIMEPERIOD_WEEK && LA381_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA381_31 = input.LA(3);
                                    if ( ((LA381_31>=TIMEPERIOD_WEEK && LA381_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA381_32 = input.LA(3);
                                    if ( ((LA381_32>=TIMEPERIOD_WEEK && LA381_32<=TIMEPERIOD_WEEKS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA381_33 = input.LA(3);
                                    if ( ((LA381_33>=TIMEPERIOD_WEEK && LA381_33<=TIMEPERIOD_WEEKS)) ) {
                                        alt381=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA381_3 = input.LA(2);
                            if ( ((LA381_3>=TIMEPERIOD_WEEK && LA381_3<=TIMEPERIOD_WEEKS)) ) {
                                alt381=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA381_4 = input.LA(2);
                            if ( ((LA381_4>=TIMEPERIOD_WEEK && LA381_4<=TIMEPERIOD_WEEKS)) ) {
                                alt381=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA381_5 = input.LA(2);
                            if ( ((LA381_5>=TIMEPERIOD_WEEK && LA381_5<=TIMEPERIOD_WEEKS)) ) {
                                alt381=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA381_6 = input.LA(2);
                            if ( ((LA381_6>=TIMEPERIOD_WEEK && LA381_6<=TIMEPERIOD_WEEKS)) ) {
                                alt381=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA381_7 = input.LA(2);
                            if ( ((LA381_7>=TIMEPERIOD_WEEK && LA381_7<=TIMEPERIOD_WEEKS)) ) {
                                alt381=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA381_8 = input.LA(2);
                            if ( ((LA381_8>=TIMEPERIOD_WEEK && LA381_8<=TIMEPERIOD_WEEKS)) ) {
                                alt381=1;
                            }
                            }
                            break;
                    }
                    switch (alt381) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod14400);
                            weekPart1033=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart1033.getTree());
                            }
                            break;
                    }
                    int alt382=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA382_26 = input.LA(3);
                                    if ( ((LA382_26>=TIMEPERIOD_DAY && LA382_26<=TIMEPERIOD_DAYS)) ) {
                                        alt382=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA382_27 = input.LA(3);
                                    if ( ((LA382_27>=TIMEPERIOD_DAY && LA382_27<=TIMEPERIOD_DAYS)) ) {
                                        alt382=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA382_28 = input.LA(3);
                                    if ( ((LA382_28>=TIMEPERIOD_DAY && LA382_28<=TIMEPERIOD_DAYS)) ) {
                                        alt382=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA382_29 = input.LA(3);
                                    if ( ((LA382_29>=TIMEPERIOD_DAY && LA382_29<=TIMEPERIOD_DAYS)) ) {
                                        alt382=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA382_30 = input.LA(3);
                                    if ( ((LA382_30>=TIMEPERIOD_DAY && LA382_30<=TIMEPERIOD_DAYS)) ) {
                                        alt382=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA382_31 = input.LA(3);
                                    if ( ((LA382_31>=TIMEPERIOD_DAY && LA382_31<=TIMEPERIOD_DAYS)) ) {
                                        alt382=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA382_32 = input.LA(3);
                                    if ( ((LA382_32>=TIMEPERIOD_DAY && LA382_32<=TIMEPERIOD_DAYS)) ) {
                                        alt382=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA382_33 = input.LA(3);
                                    if ( ((LA382_33>=TIMEPERIOD_DAY && LA382_33<=TIMEPERIOD_DAYS)) ) {
                                        alt382=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA382_3 = input.LA(2);
                            if ( ((LA382_3>=TIMEPERIOD_DAY && LA382_3<=TIMEPERIOD_DAYS)) ) {
                                alt382=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA382_4 = input.LA(2);
                            if ( ((LA382_4>=TIMEPERIOD_DAY && LA382_4<=TIMEPERIOD_DAYS)) ) {
                                alt382=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA382_5 = input.LA(2);
                            if ( ((LA382_5>=TIMEPERIOD_DAY && LA382_5<=TIMEPERIOD_DAYS)) ) {
                                alt382=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA382_6 = input.LA(2);
                            if ( ((LA382_6>=TIMEPERIOD_DAY && LA382_6<=TIMEPERIOD_DAYS)) ) {
                                alt382=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA382_7 = input.LA(2);
                            if ( ((LA382_7>=TIMEPERIOD_DAY && LA382_7<=TIMEPERIOD_DAYS)) ) {
                                alt382=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA382_8 = input.LA(2);
                            if ( ((LA382_8>=TIMEPERIOD_DAY && LA382_8<=TIMEPERIOD_DAYS)) ) {
                                alt382=1;
                            }
                            }
                            break;
                    }
                    switch (alt382) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod14403);
                            dayPart1034=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart1034.getTree());
                            }
                            break;
                    }
                    int alt383=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA383_26 = input.LA(3);
                                    if ( ((LA383_26>=TIMEPERIOD_HOUR && LA383_26<=TIMEPERIOD_HOURS)) ) {
                                        alt383=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA383_27 = input.LA(3);
                                    if ( ((LA383_27>=TIMEPERIOD_HOUR && LA383_27<=TIMEPERIOD_HOURS)) ) {
                                        alt383=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA383_28 = input.LA(3);
                                    if ( ((LA383_28>=TIMEPERIOD_HOUR && LA383_28<=TIMEPERIOD_HOURS)) ) {
                                        alt383=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA383_29 = input.LA(3);
                                    if ( ((LA383_29>=TIMEPERIOD_HOUR && LA383_29<=TIMEPERIOD_HOURS)) ) {
                                        alt383=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA383_30 = input.LA(3);
                                    if ( ((LA383_30>=TIMEPERIOD_HOUR && LA383_30<=TIMEPERIOD_HOURS)) ) {
                                        alt383=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA383_31 = input.LA(3);
                                    if ( ((LA383_31>=TIMEPERIOD_HOUR && LA383_31<=TIMEPERIOD_HOURS)) ) {
                                        alt383=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA383_32 = input.LA(3);
                                    if ( ((LA383_32>=TIMEPERIOD_HOUR && LA383_32<=TIMEPERIOD_HOURS)) ) {
                                        alt383=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA383_33 = input.LA(3);
                                    if ( ((LA383_33>=TIMEPERIOD_HOUR && LA383_33<=TIMEPERIOD_HOURS)) ) {
                                        alt383=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA383_3 = input.LA(2);
                            if ( ((LA383_3>=TIMEPERIOD_HOUR && LA383_3<=TIMEPERIOD_HOURS)) ) {
                                alt383=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA383_4 = input.LA(2);
                            if ( ((LA383_4>=TIMEPERIOD_HOUR && LA383_4<=TIMEPERIOD_HOURS)) ) {
                                alt383=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA383_5 = input.LA(2);
                            if ( ((LA383_5>=TIMEPERIOD_HOUR && LA383_5<=TIMEPERIOD_HOURS)) ) {
                                alt383=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA383_6 = input.LA(2);
                            if ( ((LA383_6>=TIMEPERIOD_HOUR && LA383_6<=TIMEPERIOD_HOURS)) ) {
                                alt383=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA383_7 = input.LA(2);
                            if ( ((LA383_7>=TIMEPERIOD_HOUR && LA383_7<=TIMEPERIOD_HOURS)) ) {
                                alt383=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA383_8 = input.LA(2);
                            if ( ((LA383_8>=TIMEPERIOD_HOUR && LA383_8<=TIMEPERIOD_HOURS)) ) {
                                alt383=1;
                            }
                            }
                            break;
                    }
                    switch (alt383) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14406);
                            hourPart1035=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1035.getTree());
                            }
                            break;
                    }
                    int alt384=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA384_26 = input.LA(3);
                                    if ( (LA384_26==MIN||(LA384_26>=TIMEPERIOD_MINUTE && LA384_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt384=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA384_27 = input.LA(3);
                                    if ( (LA384_27==MIN||(LA384_27>=TIMEPERIOD_MINUTE && LA384_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt384=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA384_28 = input.LA(3);
                                    if ( (LA384_28==MIN||(LA384_28>=TIMEPERIOD_MINUTE && LA384_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt384=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA384_29 = input.LA(3);
                                    if ( (LA384_29==MIN||(LA384_29>=TIMEPERIOD_MINUTE && LA384_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt384=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA384_30 = input.LA(3);
                                    if ( (LA384_30==MIN||(LA384_30>=TIMEPERIOD_MINUTE && LA384_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt384=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA384_31 = input.LA(3);
                                    if ( (LA384_31==MIN||(LA384_31>=TIMEPERIOD_MINUTE && LA384_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt384=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA384_32 = input.LA(3);
                                    if ( (LA384_32==MIN||(LA384_32>=TIMEPERIOD_MINUTE && LA384_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt384=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA384_33 = input.LA(3);
                                    if ( (LA384_33==MIN||(LA384_33>=TIMEPERIOD_MINUTE && LA384_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt384=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA384_3 = input.LA(2);
                            if ( (LA384_3==MIN||(LA384_3>=TIMEPERIOD_MINUTE && LA384_3<=TIMEPERIOD_MINUTES)) ) {
                                alt384=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA384_4 = input.LA(2);
                            if ( (LA384_4==MIN||(LA384_4>=TIMEPERIOD_MINUTE && LA384_4<=TIMEPERIOD_MINUTES)) ) {
                                alt384=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA384_5 = input.LA(2);
                            if ( (LA384_5==MIN||(LA384_5>=TIMEPERIOD_MINUTE && LA384_5<=TIMEPERIOD_MINUTES)) ) {
                                alt384=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA384_6 = input.LA(2);
                            if ( (LA384_6==MIN||(LA384_6>=TIMEPERIOD_MINUTE && LA384_6<=TIMEPERIOD_MINUTES)) ) {
                                alt384=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA384_7 = input.LA(2);
                            if ( (LA384_7==MIN||(LA384_7>=TIMEPERIOD_MINUTE && LA384_7<=TIMEPERIOD_MINUTES)) ) {
                                alt384=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA384_8 = input.LA(2);
                            if ( (LA384_8==MIN||(LA384_8>=TIMEPERIOD_MINUTE && LA384_8<=TIMEPERIOD_MINUTES)) ) {
                                alt384=1;
                            }
                            }
                            break;
                    }
                    switch (alt384) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14409);
                            minutePart1036=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1036.getTree());
                            }
                            break;
                    }
                    int alt385=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA385_26 = input.LA(3);
                                    if ( ((LA385_26>=TIMEPERIOD_SEC && LA385_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt385=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA385_27 = input.LA(3);
                                    if ( ((LA385_27>=TIMEPERIOD_SEC && LA385_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt385=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA385_28 = input.LA(3);
                                    if ( ((LA385_28>=TIMEPERIOD_SEC && LA385_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt385=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA385_29 = input.LA(3);
                                    if ( ((LA385_29>=TIMEPERIOD_SEC && LA385_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt385=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA385_30 = input.LA(3);
                                    if ( ((LA385_30>=TIMEPERIOD_SEC && LA385_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt385=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA385_31 = input.LA(3);
                                    if ( ((LA385_31>=TIMEPERIOD_SEC && LA385_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt385=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA385_32 = input.LA(3);
                                    if ( ((LA385_32>=TIMEPERIOD_SEC && LA385_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt385=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA385_33 = input.LA(3);
                                    if ( ((LA385_33>=TIMEPERIOD_SEC && LA385_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt385=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA385_3 = input.LA(2);
                            if ( ((LA385_3>=TIMEPERIOD_SEC && LA385_3<=TIMEPERIOD_SECONDS)) ) {
                                alt385=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA385_4 = input.LA(2);
                            if ( ((LA385_4>=TIMEPERIOD_SEC && LA385_4<=TIMEPERIOD_SECONDS)) ) {
                                alt385=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA385_5 = input.LA(2);
                            if ( ((LA385_5>=TIMEPERIOD_SEC && LA385_5<=TIMEPERIOD_SECONDS)) ) {
                                alt385=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA385_6 = input.LA(2);
                            if ( ((LA385_6>=TIMEPERIOD_SEC && LA385_6<=TIMEPERIOD_SECONDS)) ) {
                                alt385=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA385_7 = input.LA(2);
                            if ( ((LA385_7>=TIMEPERIOD_SEC && LA385_7<=TIMEPERIOD_SECONDS)) ) {
                                alt385=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA385_8 = input.LA(2);
                            if ( ((LA385_8>=TIMEPERIOD_SEC && LA385_8<=TIMEPERIOD_SECONDS)) ) {
                                alt385=1;
                            }
                            }
                            break;
                    }
                    switch (alt385) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14412);
                            secondPart1037=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1037.getTree());
                            }
                            break;
                    }
                    int alt386=2;
                    int LA386_0 = input.LA(1);
                    if ( (LA386_0==NUM_DOUBLE||LA386_0==IDENT||LA386_0==QUESTION||LA386_0==PLUS||LA386_0==MINUS||LA386_0==NUM_INT||(LA386_0>=NUM_LONG && LA386_0<=NUM_FLOAT)) ) {
                        alt386=1;
                    }
                    switch (alt386) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14415);
                            millisecondPart1038=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1038.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_monthPart_in_timePeriod14421);
                    monthPart1039=monthPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monthPart.add(monthPart1039.getTree());
                    int alt387=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA387_26 = input.LA(3);
                                    if ( ((LA387_26>=TIMEPERIOD_WEEK && LA387_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA387_27 = input.LA(3);
                                    if ( ((LA387_27>=TIMEPERIOD_WEEK && LA387_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA387_28 = input.LA(3);
                                    if ( ((LA387_28>=TIMEPERIOD_WEEK && LA387_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA387_29 = input.LA(3);
                                    if ( ((LA387_29>=TIMEPERIOD_WEEK && LA387_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA387_30 = input.LA(3);
                                    if ( ((LA387_30>=TIMEPERIOD_WEEK && LA387_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA387_31 = input.LA(3);
                                    if ( ((LA387_31>=TIMEPERIOD_WEEK && LA387_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA387_32 = input.LA(3);
                                    if ( ((LA387_32>=TIMEPERIOD_WEEK && LA387_32<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA387_33 = input.LA(3);
                                    if ( ((LA387_33>=TIMEPERIOD_WEEK && LA387_33<=TIMEPERIOD_WEEKS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA387_3 = input.LA(2);
                            if ( ((LA387_3>=TIMEPERIOD_WEEK && LA387_3<=TIMEPERIOD_WEEKS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA387_4 = input.LA(2);
                            if ( ((LA387_4>=TIMEPERIOD_WEEK && LA387_4<=TIMEPERIOD_WEEKS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA387_5 = input.LA(2);
                            if ( ((LA387_5>=TIMEPERIOD_WEEK && LA387_5<=TIMEPERIOD_WEEKS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA387_6 = input.LA(2);
                            if ( ((LA387_6>=TIMEPERIOD_WEEK && LA387_6<=TIMEPERIOD_WEEKS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA387_7 = input.LA(2);
                            if ( ((LA387_7>=TIMEPERIOD_WEEK && LA387_7<=TIMEPERIOD_WEEKS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA387_8 = input.LA(2);
                            if ( ((LA387_8>=TIMEPERIOD_WEEK && LA387_8<=TIMEPERIOD_WEEKS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                    }
                    switch (alt387) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod14423);
                            weekPart1040=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart1040.getTree());
                            }
                            break;
                    }
                    int alt388=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA388_26 = input.LA(3);
                                    if ( ((LA388_26>=TIMEPERIOD_DAY && LA388_26<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA388_27 = input.LA(3);
                                    if ( ((LA388_27>=TIMEPERIOD_DAY && LA388_27<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA388_28 = input.LA(3);
                                    if ( ((LA388_28>=TIMEPERIOD_DAY && LA388_28<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA388_29 = input.LA(3);
                                    if ( ((LA388_29>=TIMEPERIOD_DAY && LA388_29<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA388_30 = input.LA(3);
                                    if ( ((LA388_30>=TIMEPERIOD_DAY && LA388_30<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA388_31 = input.LA(3);
                                    if ( ((LA388_31>=TIMEPERIOD_DAY && LA388_31<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA388_32 = input.LA(3);
                                    if ( ((LA388_32>=TIMEPERIOD_DAY && LA388_32<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA388_33 = input.LA(3);
                                    if ( ((LA388_33>=TIMEPERIOD_DAY && LA388_33<=TIMEPERIOD_DAYS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA388_3 = input.LA(2);
                            if ( ((LA388_3>=TIMEPERIOD_DAY && LA388_3<=TIMEPERIOD_DAYS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA388_4 = input.LA(2);
                            if ( ((LA388_4>=TIMEPERIOD_DAY && LA388_4<=TIMEPERIOD_DAYS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA388_5 = input.LA(2);
                            if ( ((LA388_5>=TIMEPERIOD_DAY && LA388_5<=TIMEPERIOD_DAYS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA388_6 = input.LA(2);
                            if ( ((LA388_6>=TIMEPERIOD_DAY && LA388_6<=TIMEPERIOD_DAYS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA388_7 = input.LA(2);
                            if ( ((LA388_7>=TIMEPERIOD_DAY && LA388_7<=TIMEPERIOD_DAYS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA388_8 = input.LA(2);
                            if ( ((LA388_8>=TIMEPERIOD_DAY && LA388_8<=TIMEPERIOD_DAYS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                    }
                    switch (alt388) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod14426);
                            dayPart1041=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart1041.getTree());
                            }
                            break;
                    }
                    int alt389=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA389_26 = input.LA(3);
                                    if ( ((LA389_26>=TIMEPERIOD_HOUR && LA389_26<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA389_27 = input.LA(3);
                                    if ( ((LA389_27>=TIMEPERIOD_HOUR && LA389_27<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA389_28 = input.LA(3);
                                    if ( ((LA389_28>=TIMEPERIOD_HOUR && LA389_28<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA389_29 = input.LA(3);
                                    if ( ((LA389_29>=TIMEPERIOD_HOUR && LA389_29<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA389_30 = input.LA(3);
                                    if ( ((LA389_30>=TIMEPERIOD_HOUR && LA389_30<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA389_31 = input.LA(3);
                                    if ( ((LA389_31>=TIMEPERIOD_HOUR && LA389_31<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA389_32 = input.LA(3);
                                    if ( ((LA389_32>=TIMEPERIOD_HOUR && LA389_32<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA389_33 = input.LA(3);
                                    if ( ((LA389_33>=TIMEPERIOD_HOUR && LA389_33<=TIMEPERIOD_HOURS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA389_3 = input.LA(2);
                            if ( ((LA389_3>=TIMEPERIOD_HOUR && LA389_3<=TIMEPERIOD_HOURS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA389_4 = input.LA(2);
                            if ( ((LA389_4>=TIMEPERIOD_HOUR && LA389_4<=TIMEPERIOD_HOURS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA389_5 = input.LA(2);
                            if ( ((LA389_5>=TIMEPERIOD_HOUR && LA389_5<=TIMEPERIOD_HOURS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA389_6 = input.LA(2);
                            if ( ((LA389_6>=TIMEPERIOD_HOUR && LA389_6<=TIMEPERIOD_HOURS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA389_7 = input.LA(2);
                            if ( ((LA389_7>=TIMEPERIOD_HOUR && LA389_7<=TIMEPERIOD_HOURS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA389_8 = input.LA(2);
                            if ( ((LA389_8>=TIMEPERIOD_HOUR && LA389_8<=TIMEPERIOD_HOURS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                    }
                    switch (alt389) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14429);
                            hourPart1042=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1042.getTree());
                            }
                            break;
                    }
                    int alt390=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA390_26 = input.LA(3);
                                    if ( (LA390_26==MIN||(LA390_26>=TIMEPERIOD_MINUTE && LA390_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA390_27 = input.LA(3);
                                    if ( (LA390_27==MIN||(LA390_27>=TIMEPERIOD_MINUTE && LA390_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA390_28 = input.LA(3);
                                    if ( (LA390_28==MIN||(LA390_28>=TIMEPERIOD_MINUTE && LA390_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA390_29 = input.LA(3);
                                    if ( (LA390_29==MIN||(LA390_29>=TIMEPERIOD_MINUTE && LA390_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA390_30 = input.LA(3);
                                    if ( (LA390_30==MIN||(LA390_30>=TIMEPERIOD_MINUTE && LA390_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA390_31 = input.LA(3);
                                    if ( (LA390_31==MIN||(LA390_31>=TIMEPERIOD_MINUTE && LA390_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA390_32 = input.LA(3);
                                    if ( (LA390_32==MIN||(LA390_32>=TIMEPERIOD_MINUTE && LA390_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA390_33 = input.LA(3);
                                    if ( (LA390_33==MIN||(LA390_33>=TIMEPERIOD_MINUTE && LA390_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA390_3 = input.LA(2);
                            if ( (LA390_3==MIN||(LA390_3>=TIMEPERIOD_MINUTE && LA390_3<=TIMEPERIOD_MINUTES)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA390_4 = input.LA(2);
                            if ( (LA390_4==MIN||(LA390_4>=TIMEPERIOD_MINUTE && LA390_4<=TIMEPERIOD_MINUTES)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA390_5 = input.LA(2);
                            if ( (LA390_5==MIN||(LA390_5>=TIMEPERIOD_MINUTE && LA390_5<=TIMEPERIOD_MINUTES)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA390_6 = input.LA(2);
                            if ( (LA390_6==MIN||(LA390_6>=TIMEPERIOD_MINUTE && LA390_6<=TIMEPERIOD_MINUTES)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA390_7 = input.LA(2);
                            if ( (LA390_7==MIN||(LA390_7>=TIMEPERIOD_MINUTE && LA390_7<=TIMEPERIOD_MINUTES)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA390_8 = input.LA(2);
                            if ( (LA390_8==MIN||(LA390_8>=TIMEPERIOD_MINUTE && LA390_8<=TIMEPERIOD_MINUTES)) ) {
                                alt390=1;
                            }
                            }
                            break;
                    }
                    switch (alt390) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14432);
                            minutePart1043=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1043.getTree());
                            }
                            break;
                    }
                    int alt391=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA391_26 = input.LA(3);
                                    if ( ((LA391_26>=TIMEPERIOD_SEC && LA391_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA391_27 = input.LA(3);
                                    if ( ((LA391_27>=TIMEPERIOD_SEC && LA391_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA391_28 = input.LA(3);
                                    if ( ((LA391_28>=TIMEPERIOD_SEC && LA391_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA391_29 = input.LA(3);
                                    if ( ((LA391_29>=TIMEPERIOD_SEC && LA391_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA391_30 = input.LA(3);
                                    if ( ((LA391_30>=TIMEPERIOD_SEC && LA391_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA391_31 = input.LA(3);
                                    if ( ((LA391_31>=TIMEPERIOD_SEC && LA391_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA391_32 = input.LA(3);
                                    if ( ((LA391_32>=TIMEPERIOD_SEC && LA391_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA391_33 = input.LA(3);
                                    if ( ((LA391_33>=TIMEPERIOD_SEC && LA391_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA391_3 = input.LA(2);
                            if ( ((LA391_3>=TIMEPERIOD_SEC && LA391_3<=TIMEPERIOD_SECONDS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA391_4 = input.LA(2);
                            if ( ((LA391_4>=TIMEPERIOD_SEC && LA391_4<=TIMEPERIOD_SECONDS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA391_5 = input.LA(2);
                            if ( ((LA391_5>=TIMEPERIOD_SEC && LA391_5<=TIMEPERIOD_SECONDS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA391_6 = input.LA(2);
                            if ( ((LA391_6>=TIMEPERIOD_SEC && LA391_6<=TIMEPERIOD_SECONDS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA391_7 = input.LA(2);
                            if ( ((LA391_7>=TIMEPERIOD_SEC && LA391_7<=TIMEPERIOD_SECONDS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA391_8 = input.LA(2);
                            if ( ((LA391_8>=TIMEPERIOD_SEC && LA391_8<=TIMEPERIOD_SECONDS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                    }
                    switch (alt391) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14435);
                            secondPart1044=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1044.getTree());
                            }
                            break;
                    }
                    int alt392=2;
                    int LA392_0 = input.LA(1);
                    if ( (LA392_0==NUM_DOUBLE||LA392_0==IDENT||LA392_0==QUESTION||LA392_0==PLUS||LA392_0==MINUS||LA392_0==NUM_INT||(LA392_0>=NUM_LONG && LA392_0<=NUM_FLOAT)) ) {
                        alt392=1;
                    }
                    switch (alt392) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14438);
                            millisecondPart1045=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1045.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_weekPart_in_timePeriod14444);
                    weekPart1046=weekPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_weekPart.add(weekPart1046.getTree());
                    int alt393=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA393_26 = input.LA(3);
                                    if ( ((LA393_26>=TIMEPERIOD_DAY && LA393_26<=TIMEPERIOD_DAYS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA393_27 = input.LA(3);
                                    if ( ((LA393_27>=TIMEPERIOD_DAY && LA393_27<=TIMEPERIOD_DAYS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA393_28 = input.LA(3);
                                    if ( ((LA393_28>=TIMEPERIOD_DAY && LA393_28<=TIMEPERIOD_DAYS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA393_29 = input.LA(3);
                                    if ( ((LA393_29>=TIMEPERIOD_DAY && LA393_29<=TIMEPERIOD_DAYS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA393_30 = input.LA(3);
                                    if ( ((LA393_30>=TIMEPERIOD_DAY && LA393_30<=TIMEPERIOD_DAYS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA393_31 = input.LA(3);
                                    if ( ((LA393_31>=TIMEPERIOD_DAY && LA393_31<=TIMEPERIOD_DAYS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA393_32 = input.LA(3);
                                    if ( ((LA393_32>=TIMEPERIOD_DAY && LA393_32<=TIMEPERIOD_DAYS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA393_33 = input.LA(3);
                                    if ( ((LA393_33>=TIMEPERIOD_DAY && LA393_33<=TIMEPERIOD_DAYS)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA393_3 = input.LA(2);
                            if ( ((LA393_3>=TIMEPERIOD_DAY && LA393_3<=TIMEPERIOD_DAYS)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA393_4 = input.LA(2);
                            if ( ((LA393_4>=TIMEPERIOD_DAY && LA393_4<=TIMEPERIOD_DAYS)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA393_5 = input.LA(2);
                            if ( ((LA393_5>=TIMEPERIOD_DAY && LA393_5<=TIMEPERIOD_DAYS)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA393_6 = input.LA(2);
                            if ( ((LA393_6>=TIMEPERIOD_DAY && LA393_6<=TIMEPERIOD_DAYS)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA393_7 = input.LA(2);
                            if ( ((LA393_7>=TIMEPERIOD_DAY && LA393_7<=TIMEPERIOD_DAYS)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA393_8 = input.LA(2);
                            if ( ((LA393_8>=TIMEPERIOD_DAY && LA393_8<=TIMEPERIOD_DAYS)) ) {
                                alt393=1;
                            }
                            }
                            break;
                    }
                    switch (alt393) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod14446);
                            dayPart1047=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart1047.getTree());
                            }
                            break;
                    }
                    int alt394=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA394_26 = input.LA(3);
                                    if ( ((LA394_26>=TIMEPERIOD_HOUR && LA394_26<=TIMEPERIOD_HOURS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA394_27 = input.LA(3);
                                    if ( ((LA394_27>=TIMEPERIOD_HOUR && LA394_27<=TIMEPERIOD_HOURS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA394_28 = input.LA(3);
                                    if ( ((LA394_28>=TIMEPERIOD_HOUR && LA394_28<=TIMEPERIOD_HOURS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA394_29 = input.LA(3);
                                    if ( ((LA394_29>=TIMEPERIOD_HOUR && LA394_29<=TIMEPERIOD_HOURS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA394_30 = input.LA(3);
                                    if ( ((LA394_30>=TIMEPERIOD_HOUR && LA394_30<=TIMEPERIOD_HOURS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA394_31 = input.LA(3);
                                    if ( ((LA394_31>=TIMEPERIOD_HOUR && LA394_31<=TIMEPERIOD_HOURS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA394_32 = input.LA(3);
                                    if ( ((LA394_32>=TIMEPERIOD_HOUR && LA394_32<=TIMEPERIOD_HOURS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA394_33 = input.LA(3);
                                    if ( ((LA394_33>=TIMEPERIOD_HOUR && LA394_33<=TIMEPERIOD_HOURS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA394_3 = input.LA(2);
                            if ( ((LA394_3>=TIMEPERIOD_HOUR && LA394_3<=TIMEPERIOD_HOURS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA394_4 = input.LA(2);
                            if ( ((LA394_4>=TIMEPERIOD_HOUR && LA394_4<=TIMEPERIOD_HOURS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA394_5 = input.LA(2);
                            if ( ((LA394_5>=TIMEPERIOD_HOUR && LA394_5<=TIMEPERIOD_HOURS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA394_6 = input.LA(2);
                            if ( ((LA394_6>=TIMEPERIOD_HOUR && LA394_6<=TIMEPERIOD_HOURS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA394_7 = input.LA(2);
                            if ( ((LA394_7>=TIMEPERIOD_HOUR && LA394_7<=TIMEPERIOD_HOURS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA394_8 = input.LA(2);
                            if ( ((LA394_8>=TIMEPERIOD_HOUR && LA394_8<=TIMEPERIOD_HOURS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                    }
                    switch (alt394) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14449);
                            hourPart1048=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1048.getTree());
                            }
                            break;
                    }
                    int alt395=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA395_26 = input.LA(3);
                                    if ( (LA395_26==MIN||(LA395_26>=TIMEPERIOD_MINUTE && LA395_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA395_27 = input.LA(3);
                                    if ( (LA395_27==MIN||(LA395_27>=TIMEPERIOD_MINUTE && LA395_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA395_28 = input.LA(3);
                                    if ( (LA395_28==MIN||(LA395_28>=TIMEPERIOD_MINUTE && LA395_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA395_29 = input.LA(3);
                                    if ( (LA395_29==MIN||(LA395_29>=TIMEPERIOD_MINUTE && LA395_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA395_30 = input.LA(3);
                                    if ( (LA395_30==MIN||(LA395_30>=TIMEPERIOD_MINUTE && LA395_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA395_31 = input.LA(3);
                                    if ( (LA395_31==MIN||(LA395_31>=TIMEPERIOD_MINUTE && LA395_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA395_32 = input.LA(3);
                                    if ( (LA395_32==MIN||(LA395_32>=TIMEPERIOD_MINUTE && LA395_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA395_33 = input.LA(3);
                                    if ( (LA395_33==MIN||(LA395_33>=TIMEPERIOD_MINUTE && LA395_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA395_3 = input.LA(2);
                            if ( (LA395_3==MIN||(LA395_3>=TIMEPERIOD_MINUTE && LA395_3<=TIMEPERIOD_MINUTES)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA395_4 = input.LA(2);
                            if ( (LA395_4==MIN||(LA395_4>=TIMEPERIOD_MINUTE && LA395_4<=TIMEPERIOD_MINUTES)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA395_5 = input.LA(2);
                            if ( (LA395_5==MIN||(LA395_5>=TIMEPERIOD_MINUTE && LA395_5<=TIMEPERIOD_MINUTES)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA395_6 = input.LA(2);
                            if ( (LA395_6==MIN||(LA395_6>=TIMEPERIOD_MINUTE && LA395_6<=TIMEPERIOD_MINUTES)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA395_7 = input.LA(2);
                            if ( (LA395_7==MIN||(LA395_7>=TIMEPERIOD_MINUTE && LA395_7<=TIMEPERIOD_MINUTES)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA395_8 = input.LA(2);
                            if ( (LA395_8==MIN||(LA395_8>=TIMEPERIOD_MINUTE && LA395_8<=TIMEPERIOD_MINUTES)) ) {
                                alt395=1;
                            }
                            }
                            break;
                    }
                    switch (alt395) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14452);
                            minutePart1049=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1049.getTree());
                            }
                            break;
                    }
                    int alt396=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA396_26 = input.LA(3);
                                    if ( ((LA396_26>=TIMEPERIOD_SEC && LA396_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA396_27 = input.LA(3);
                                    if ( ((LA396_27>=TIMEPERIOD_SEC && LA396_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA396_28 = input.LA(3);
                                    if ( ((LA396_28>=TIMEPERIOD_SEC && LA396_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA396_29 = input.LA(3);
                                    if ( ((LA396_29>=TIMEPERIOD_SEC && LA396_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA396_30 = input.LA(3);
                                    if ( ((LA396_30>=TIMEPERIOD_SEC && LA396_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA396_31 = input.LA(3);
                                    if ( ((LA396_31>=TIMEPERIOD_SEC && LA396_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA396_32 = input.LA(3);
                                    if ( ((LA396_32>=TIMEPERIOD_SEC && LA396_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA396_33 = input.LA(3);
                                    if ( ((LA396_33>=TIMEPERIOD_SEC && LA396_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA396_3 = input.LA(2);
                            if ( ((LA396_3>=TIMEPERIOD_SEC && LA396_3<=TIMEPERIOD_SECONDS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA396_4 = input.LA(2);
                            if ( ((LA396_4>=TIMEPERIOD_SEC && LA396_4<=TIMEPERIOD_SECONDS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA396_5 = input.LA(2);
                            if ( ((LA396_5>=TIMEPERIOD_SEC && LA396_5<=TIMEPERIOD_SECONDS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA396_6 = input.LA(2);
                            if ( ((LA396_6>=TIMEPERIOD_SEC && LA396_6<=TIMEPERIOD_SECONDS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA396_7 = input.LA(2);
                            if ( ((LA396_7>=TIMEPERIOD_SEC && LA396_7<=TIMEPERIOD_SECONDS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA396_8 = input.LA(2);
                            if ( ((LA396_8>=TIMEPERIOD_SEC && LA396_8<=TIMEPERIOD_SECONDS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                    }
                    switch (alt396) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14455);
                            secondPart1050=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1050.getTree());
                            }
                            break;
                    }
                    int alt397=2;
                    int LA397_0 = input.LA(1);
                    if ( (LA397_0==NUM_DOUBLE||LA397_0==IDENT||LA397_0==QUESTION||LA397_0==PLUS||LA397_0==MINUS||LA397_0==NUM_INT||(LA397_0>=NUM_LONG && LA397_0<=NUM_FLOAT)) ) {
                        alt397=1;
                    }
                    switch (alt397) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14458);
                            millisecondPart1051=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1051.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod14464);
                    dayPart1052=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart1052.getTree());
                    int alt398=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA398_26 = input.LA(3);
                                    if ( ((LA398_26>=TIMEPERIOD_HOUR && LA398_26<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA398_27 = input.LA(3);
                                    if ( ((LA398_27>=TIMEPERIOD_HOUR && LA398_27<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA398_28 = input.LA(3);
                                    if ( ((LA398_28>=TIMEPERIOD_HOUR && LA398_28<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA398_29 = input.LA(3);
                                    if ( ((LA398_29>=TIMEPERIOD_HOUR && LA398_29<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA398_30 = input.LA(3);
                                    if ( ((LA398_30>=TIMEPERIOD_HOUR && LA398_30<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA398_31 = input.LA(3);
                                    if ( ((LA398_31>=TIMEPERIOD_HOUR && LA398_31<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA398_32 = input.LA(3);
                                    if ( ((LA398_32>=TIMEPERIOD_HOUR && LA398_32<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA398_33 = input.LA(3);
                                    if ( ((LA398_33>=TIMEPERIOD_HOUR && LA398_33<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA398_3 = input.LA(2);
                            if ( ((LA398_3>=TIMEPERIOD_HOUR && LA398_3<=TIMEPERIOD_HOURS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA398_4 = input.LA(2);
                            if ( ((LA398_4>=TIMEPERIOD_HOUR && LA398_4<=TIMEPERIOD_HOURS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA398_5 = input.LA(2);
                            if ( ((LA398_5>=TIMEPERIOD_HOUR && LA398_5<=TIMEPERIOD_HOURS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA398_6 = input.LA(2);
                            if ( ((LA398_6>=TIMEPERIOD_HOUR && LA398_6<=TIMEPERIOD_HOURS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA398_7 = input.LA(2);
                            if ( ((LA398_7>=TIMEPERIOD_HOUR && LA398_7<=TIMEPERIOD_HOURS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA398_8 = input.LA(2);
                            if ( ((LA398_8>=TIMEPERIOD_HOUR && LA398_8<=TIMEPERIOD_HOURS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                    }
                    switch (alt398) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14466);
                            hourPart1053=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1053.getTree());
                            }
                            break;
                    }
                    int alt399=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA399_26 = input.LA(3);
                                    if ( (LA399_26==MIN||(LA399_26>=TIMEPERIOD_MINUTE && LA399_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA399_27 = input.LA(3);
                                    if ( (LA399_27==MIN||(LA399_27>=TIMEPERIOD_MINUTE && LA399_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA399_28 = input.LA(3);
                                    if ( (LA399_28==MIN||(LA399_28>=TIMEPERIOD_MINUTE && LA399_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA399_29 = input.LA(3);
                                    if ( (LA399_29==MIN||(LA399_29>=TIMEPERIOD_MINUTE && LA399_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA399_30 = input.LA(3);
                                    if ( (LA399_30==MIN||(LA399_30>=TIMEPERIOD_MINUTE && LA399_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA399_31 = input.LA(3);
                                    if ( (LA399_31==MIN||(LA399_31>=TIMEPERIOD_MINUTE && LA399_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA399_32 = input.LA(3);
                                    if ( (LA399_32==MIN||(LA399_32>=TIMEPERIOD_MINUTE && LA399_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA399_33 = input.LA(3);
                                    if ( (LA399_33==MIN||(LA399_33>=TIMEPERIOD_MINUTE && LA399_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA399_3 = input.LA(2);
                            if ( (LA399_3==MIN||(LA399_3>=TIMEPERIOD_MINUTE && LA399_3<=TIMEPERIOD_MINUTES)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA399_4 = input.LA(2);
                            if ( (LA399_4==MIN||(LA399_4>=TIMEPERIOD_MINUTE && LA399_4<=TIMEPERIOD_MINUTES)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA399_5 = input.LA(2);
                            if ( (LA399_5==MIN||(LA399_5>=TIMEPERIOD_MINUTE && LA399_5<=TIMEPERIOD_MINUTES)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA399_6 = input.LA(2);
                            if ( (LA399_6==MIN||(LA399_6>=TIMEPERIOD_MINUTE && LA399_6<=TIMEPERIOD_MINUTES)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA399_7 = input.LA(2);
                            if ( (LA399_7==MIN||(LA399_7>=TIMEPERIOD_MINUTE && LA399_7<=TIMEPERIOD_MINUTES)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA399_8 = input.LA(2);
                            if ( (LA399_8==MIN||(LA399_8>=TIMEPERIOD_MINUTE && LA399_8<=TIMEPERIOD_MINUTES)) ) {
                                alt399=1;
                            }
                            }
                            break;
                    }
                    switch (alt399) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14469);
                            minutePart1054=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1054.getTree());
                            }
                            break;
                    }
                    int alt400=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA400_26 = input.LA(3);
                                    if ( ((LA400_26>=TIMEPERIOD_SEC && LA400_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA400_27 = input.LA(3);
                                    if ( ((LA400_27>=TIMEPERIOD_SEC && LA400_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA400_28 = input.LA(3);
                                    if ( ((LA400_28>=TIMEPERIOD_SEC && LA400_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA400_29 = input.LA(3);
                                    if ( ((LA400_29>=TIMEPERIOD_SEC && LA400_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA400_30 = input.LA(3);
                                    if ( ((LA400_30>=TIMEPERIOD_SEC && LA400_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA400_31 = input.LA(3);
                                    if ( ((LA400_31>=TIMEPERIOD_SEC && LA400_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA400_32 = input.LA(3);
                                    if ( ((LA400_32>=TIMEPERIOD_SEC && LA400_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA400_33 = input.LA(3);
                                    if ( ((LA400_33>=TIMEPERIOD_SEC && LA400_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA400_3 = input.LA(2);
                            if ( ((LA400_3>=TIMEPERIOD_SEC && LA400_3<=TIMEPERIOD_SECONDS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA400_4 = input.LA(2);
                            if ( ((LA400_4>=TIMEPERIOD_SEC && LA400_4<=TIMEPERIOD_SECONDS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA400_5 = input.LA(2);
                            if ( ((LA400_5>=TIMEPERIOD_SEC && LA400_5<=TIMEPERIOD_SECONDS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA400_6 = input.LA(2);
                            if ( ((LA400_6>=TIMEPERIOD_SEC && LA400_6<=TIMEPERIOD_SECONDS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA400_7 = input.LA(2);
                            if ( ((LA400_7>=TIMEPERIOD_SEC && LA400_7<=TIMEPERIOD_SECONDS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA400_8 = input.LA(2);
                            if ( ((LA400_8>=TIMEPERIOD_SEC && LA400_8<=TIMEPERIOD_SECONDS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                    }
                    switch (alt400) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14472);
                            secondPart1055=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1055.getTree());
                            }
                            break;
                    }
                    int alt401=2;
                    int LA401_0 = input.LA(1);
                    if ( (LA401_0==NUM_DOUBLE||LA401_0==IDENT||LA401_0==QUESTION||LA401_0==PLUS||LA401_0==MINUS||LA401_0==NUM_INT||(LA401_0>=NUM_LONG && LA401_0<=NUM_FLOAT)) ) {
                        alt401=1;
                    }
                    switch (alt401) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14475);
                            millisecondPart1056=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1056.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod14481);
                    hourPart1057=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart1057.getTree());
                    int alt402=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA402_26 = input.LA(3);
                                    if ( (LA402_26==MIN||(LA402_26>=TIMEPERIOD_MINUTE && LA402_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA402_27 = input.LA(3);
                                    if ( (LA402_27==MIN||(LA402_27>=TIMEPERIOD_MINUTE && LA402_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA402_28 = input.LA(3);
                                    if ( (LA402_28==MIN||(LA402_28>=TIMEPERIOD_MINUTE && LA402_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA402_29 = input.LA(3);
                                    if ( (LA402_29==MIN||(LA402_29>=TIMEPERIOD_MINUTE && LA402_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA402_30 = input.LA(3);
                                    if ( (LA402_30==MIN||(LA402_30>=TIMEPERIOD_MINUTE && LA402_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA402_31 = input.LA(3);
                                    if ( (LA402_31==MIN||(LA402_31>=TIMEPERIOD_MINUTE && LA402_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA402_32 = input.LA(3);
                                    if ( (LA402_32==MIN||(LA402_32>=TIMEPERIOD_MINUTE && LA402_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA402_33 = input.LA(3);
                                    if ( (LA402_33==MIN||(LA402_33>=TIMEPERIOD_MINUTE && LA402_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA402_3 = input.LA(2);
                            if ( (LA402_3==MIN||(LA402_3>=TIMEPERIOD_MINUTE && LA402_3<=TIMEPERIOD_MINUTES)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA402_4 = input.LA(2);
                            if ( (LA402_4==MIN||(LA402_4>=TIMEPERIOD_MINUTE && LA402_4<=TIMEPERIOD_MINUTES)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA402_5 = input.LA(2);
                            if ( (LA402_5==MIN||(LA402_5>=TIMEPERIOD_MINUTE && LA402_5<=TIMEPERIOD_MINUTES)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA402_6 = input.LA(2);
                            if ( (LA402_6==MIN||(LA402_6>=TIMEPERIOD_MINUTE && LA402_6<=TIMEPERIOD_MINUTES)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA402_7 = input.LA(2);
                            if ( (LA402_7==MIN||(LA402_7>=TIMEPERIOD_MINUTE && LA402_7<=TIMEPERIOD_MINUTES)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA402_8 = input.LA(2);
                            if ( (LA402_8==MIN||(LA402_8>=TIMEPERIOD_MINUTE && LA402_8<=TIMEPERIOD_MINUTES)) ) {
                                alt402=1;
                            }
                            }
                            break;
                    }
                    switch (alt402) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14483);
                            minutePart1058=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1058.getTree());
                            }
                            break;
                    }
                    int alt403=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA403_26 = input.LA(3);
                                    if ( ((LA403_26>=TIMEPERIOD_SEC && LA403_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA403_27 = input.LA(3);
                                    if ( ((LA403_27>=TIMEPERIOD_SEC && LA403_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA403_28 = input.LA(3);
                                    if ( ((LA403_28>=TIMEPERIOD_SEC && LA403_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA403_29 = input.LA(3);
                                    if ( ((LA403_29>=TIMEPERIOD_SEC && LA403_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA403_30 = input.LA(3);
                                    if ( ((LA403_30>=TIMEPERIOD_SEC && LA403_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA403_31 = input.LA(3);
                                    if ( ((LA403_31>=TIMEPERIOD_SEC && LA403_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA403_32 = input.LA(3);
                                    if ( ((LA403_32>=TIMEPERIOD_SEC && LA403_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA403_33 = input.LA(3);
                                    if ( ((LA403_33>=TIMEPERIOD_SEC && LA403_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA403_3 = input.LA(2);
                            if ( ((LA403_3>=TIMEPERIOD_SEC && LA403_3<=TIMEPERIOD_SECONDS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA403_4 = input.LA(2);
                            if ( ((LA403_4>=TIMEPERIOD_SEC && LA403_4<=TIMEPERIOD_SECONDS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA403_5 = input.LA(2);
                            if ( ((LA403_5>=TIMEPERIOD_SEC && LA403_5<=TIMEPERIOD_SECONDS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA403_6 = input.LA(2);
                            if ( ((LA403_6>=TIMEPERIOD_SEC && LA403_6<=TIMEPERIOD_SECONDS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA403_7 = input.LA(2);
                            if ( ((LA403_7>=TIMEPERIOD_SEC && LA403_7<=TIMEPERIOD_SECONDS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA403_8 = input.LA(2);
                            if ( ((LA403_8>=TIMEPERIOD_SEC && LA403_8<=TIMEPERIOD_SECONDS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                    }
                    switch (alt403) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14486);
                            secondPart1059=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1059.getTree());
                            }
                            break;
                    }
                    int alt404=2;
                    int LA404_0 = input.LA(1);
                    if ( (LA404_0==NUM_DOUBLE||LA404_0==IDENT||LA404_0==QUESTION||LA404_0==PLUS||LA404_0==MINUS||LA404_0==NUM_INT||(LA404_0>=NUM_LONG && LA404_0<=NUM_FLOAT)) ) {
                        alt404=1;
                    }
                    switch (alt404) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14489);
                            millisecondPart1060=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1060.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod14495);
                    minutePart1061=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart1061.getTree());
                    int alt405=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA405_26 = input.LA(3);
                                    if ( ((LA405_26>=TIMEPERIOD_SEC && LA405_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA405_27 = input.LA(3);
                                    if ( ((LA405_27>=TIMEPERIOD_SEC && LA405_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA405_28 = input.LA(3);
                                    if ( ((LA405_28>=TIMEPERIOD_SEC && LA405_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA405_29 = input.LA(3);
                                    if ( ((LA405_29>=TIMEPERIOD_SEC && LA405_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA405_30 = input.LA(3);
                                    if ( ((LA405_30>=TIMEPERIOD_SEC && LA405_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA405_31 = input.LA(3);
                                    if ( ((LA405_31>=TIMEPERIOD_SEC && LA405_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA405_32 = input.LA(3);
                                    if ( ((LA405_32>=TIMEPERIOD_SEC && LA405_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA405_33 = input.LA(3);
                                    if ( ((LA405_33>=TIMEPERIOD_SEC && LA405_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA405_3 = input.LA(2);
                            if ( ((LA405_3>=TIMEPERIOD_SEC && LA405_3<=TIMEPERIOD_SECONDS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA405_4 = input.LA(2);
                            if ( ((LA405_4>=TIMEPERIOD_SEC && LA405_4<=TIMEPERIOD_SECONDS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA405_5 = input.LA(2);
                            if ( ((LA405_5>=TIMEPERIOD_SEC && LA405_5<=TIMEPERIOD_SECONDS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA405_6 = input.LA(2);
                            if ( ((LA405_6>=TIMEPERIOD_SEC && LA405_6<=TIMEPERIOD_SECONDS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA405_7 = input.LA(2);
                            if ( ((LA405_7>=TIMEPERIOD_SEC && LA405_7<=TIMEPERIOD_SECONDS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA405_8 = input.LA(2);
                            if ( ((LA405_8>=TIMEPERIOD_SEC && LA405_8<=TIMEPERIOD_SECONDS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                    }
                    switch (alt405) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14497);
                            secondPart1062=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1062.getTree());
                            }
                            break;
                    }
                    int alt406=2;
                    int LA406_0 = input.LA(1);
                    if ( (LA406_0==NUM_DOUBLE||LA406_0==IDENT||LA406_0==QUESTION||LA406_0==PLUS||LA406_0==MINUS||LA406_0==NUM_INT||(LA406_0>=NUM_LONG && LA406_0<=NUM_FLOAT)) ) {
                        alt406=1;
                    }
                    switch (alt406) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14500);
                            millisecondPart1063=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1063.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod14506);
                    secondPart1064=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart1064.getTree());
                    int alt407=2;
                    int LA407_0 = input.LA(1);
                    if ( (LA407_0==NUM_DOUBLE||LA407_0==IDENT||LA407_0==QUESTION||LA407_0==PLUS||LA407_0==MINUS||LA407_0==NUM_INT||(LA407_0>=NUM_LONG && LA407_0<=NUM_FLOAT)) ) {
                        alt407=1;
                    }
                    switch (alt407) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14508);
                            millisecondPart1065=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1065.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod14514);
                    millisecondPart1066=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1066.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_yearPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_yearPart.nextTree());
                }
                stream_yearPart.reset();
                if ( stream_monthPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_monthPart.nextTree());
                }
                stream_monthPart.reset();
                if ( stream_weekPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_weekPart.nextTree());
                }
                stream_weekPart.reset();
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class yearPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.yearPart_return yearPart() throws RecognitionException {
        EsperEPL2GrammarParser.yearPart_return retval = new EsperEPL2GrammarParser.yearPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_YEARS1069=null;
        Token TIMEPERIOD_YEAR1070=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1067 = null;
        EsperEPL2GrammarParser.substitution_return substitution1068 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_YEARS1069_tree=null;
        CommonTree TIMEPERIOD_YEAR1070_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEARS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEARS");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEAR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEAR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt409=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt409=1;
                }
                break;
            case IDENT:
                {
                alt409=2;
                }
                break;
            case QUESTION:
                {
                alt409=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 409, 0, input);
                throw nvae;
            }
            switch (alt409) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_yearPart14561);
                    numberconstant1067=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1067.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_yearPart14565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_yearPart14567);
                    substitution1068=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1068.getTree());
                    }
                    break;
            }
            int alt410=2;
            int LA410_0 = input.LA(1);
            if ( (LA410_0==TIMEPERIOD_YEARS) ) {
                alt410=1;
            }
            else if ( (LA410_0==TIMEPERIOD_YEAR) ) {
                alt410=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 410, 0, input);
                throw nvae;
            }
            switch (alt410) {
                case 1 :
                    {
                    TIMEPERIOD_YEARS1069=(Token)match(input,TIMEPERIOD_YEARS,FOLLOW_TIMEPERIOD_YEARS_in_yearPart14571); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEARS.add(TIMEPERIOD_YEARS1069);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_YEAR1070=(Token)match(input,TIMEPERIOD_YEAR,FOLLOW_TIMEPERIOD_YEAR_in_yearPart14575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEAR.add(TIMEPERIOD_YEAR1070);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class monthPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.monthPart_return monthPart() throws RecognitionException {
        EsperEPL2GrammarParser.monthPart_return retval = new EsperEPL2GrammarParser.monthPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MONTHS1073=null;
        Token TIMEPERIOD_MONTH1074=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1071 = null;
        EsperEPL2GrammarParser.substitution_return substitution1072 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MONTHS1073_tree=null;
        CommonTree TIMEPERIOD_MONTH1074_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTH=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTH");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTHS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTHS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt411=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt411=1;
                }
                break;
            case IDENT:
                {
                alt411=2;
                }
                break;
            case QUESTION:
                {
                alt411=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 411, 0, input);
                throw nvae;
            }
            switch (alt411) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_monthPart14623);
                    numberconstant1071=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1071.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_monthPart14627); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_monthPart14629);
                    substitution1072=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1072.getTree());
                    }
                    break;
            }
            int alt412=2;
            int LA412_0 = input.LA(1);
            if ( (LA412_0==TIMEPERIOD_MONTHS) ) {
                alt412=1;
            }
            else if ( (LA412_0==TIMEPERIOD_MONTH) ) {
                alt412=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 412, 0, input);
                throw nvae;
            }
            switch (alt412) {
                case 1 :
                    {
                    TIMEPERIOD_MONTHS1073=(Token)match(input,TIMEPERIOD_MONTHS,FOLLOW_TIMEPERIOD_MONTHS_in_monthPart14633); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTHS.add(TIMEPERIOD_MONTHS1073);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MONTH1074=(Token)match(input,TIMEPERIOD_MONTH,FOLLOW_TIMEPERIOD_MONTH_in_monthPart14637); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTH.add(TIMEPERIOD_MONTH1074);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekPart_return weekPart() throws RecognitionException {
        EsperEPL2GrammarParser.weekPart_return retval = new EsperEPL2GrammarParser.weekPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_WEEKS1077=null;
        Token TIMEPERIOD_WEEK1078=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1075 = null;
        EsperEPL2GrammarParser.substitution_return substitution1076 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_WEEKS1077_tree=null;
        CommonTree TIMEPERIOD_WEEK1078_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEK=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEK");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEKS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEKS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt413=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt413=1;
                }
                break;
            case IDENT:
                {
                alt413=2;
                }
                break;
            case QUESTION:
                {
                alt413=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 413, 0, input);
                throw nvae;
            }
            switch (alt413) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_weekPart14685);
                    numberconstant1075=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1075.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekPart14689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekPart14691);
                    substitution1076=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1076.getTree());
                    }
                    break;
            }
            int alt414=2;
            int LA414_0 = input.LA(1);
            if ( (LA414_0==TIMEPERIOD_WEEKS) ) {
                alt414=1;
            }
            else if ( (LA414_0==TIMEPERIOD_WEEK) ) {
                alt414=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 414, 0, input);
                throw nvae;
            }
            switch (alt414) {
                case 1 :
                    {
                    TIMEPERIOD_WEEKS1077=(Token)match(input,TIMEPERIOD_WEEKS,FOLLOW_TIMEPERIOD_WEEKS_in_weekPart14695); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEKS.add(TIMEPERIOD_WEEKS1077);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_WEEK1078=(Token)match(input,TIMEPERIOD_WEEK,FOLLOW_TIMEPERIOD_WEEK_in_weekPart14699); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEK.add(TIMEPERIOD_WEEK1078);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS1081=null;
        Token TIMEPERIOD_DAY1082=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1079 = null;
        EsperEPL2GrammarParser.substitution_return substitution1080 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS1081_tree=null;
        CommonTree TIMEPERIOD_DAY1082_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt415=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt415=1;
                }
                break;
            case IDENT:
                {
                alt415=2;
                }
                break;
            case QUESTION:
                {
                alt415=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 415, 0, input);
                throw nvae;
            }
            switch (alt415) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_dayPart14747);
                    numberconstant1079=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1079.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart14751); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart14753);
                    substitution1080=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1080.getTree());
                    }
                    break;
            }
            int alt416=2;
            int LA416_0 = input.LA(1);
            if ( (LA416_0==TIMEPERIOD_DAYS) ) {
                alt416=1;
            }
            else if ( (LA416_0==TIMEPERIOD_DAY) ) {
                alt416=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 416, 0, input);
                throw nvae;
            }
            switch (alt416) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS1081=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart14757); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS1081);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY1082=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart14761); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY1082);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS1085=null;
        Token TIMEPERIOD_HOUR1086=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1083 = null;
        EsperEPL2GrammarParser.substitution_return substitution1084 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS1085_tree=null;
        CommonTree TIMEPERIOD_HOUR1086_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt417=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt417=1;
                }
                break;
            case IDENT:
                {
                alt417=2;
                }
                break;
            case QUESTION:
                {
                alt417=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 417, 0, input);
                throw nvae;
            }
            switch (alt417) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_hourPart14810);
                    numberconstant1083=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1083.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart14814); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart14816);
                    substitution1084=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1084.getTree());
                    }
                    break;
            }
            int alt418=2;
            int LA418_0 = input.LA(1);
            if ( (LA418_0==TIMEPERIOD_HOURS) ) {
                alt418=1;
            }
            else if ( (LA418_0==TIMEPERIOD_HOUR) ) {
                alt418=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 418, 0, input);
                throw nvae;
            }
            switch (alt418) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS1085=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart14820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS1085);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR1086=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart14824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR1086);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES1089=null;
        Token TIMEPERIOD_MINUTE1090=null;
        Token MIN1091=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1087 = null;
        EsperEPL2GrammarParser.substitution_return substitution1088 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES1089_tree=null;
        CommonTree TIMEPERIOD_MINUTE1090_tree=null;
        CommonTree MIN1091_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt419=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt419=1;
                }
                break;
            case IDENT:
                {
                alt419=2;
                }
                break;
            case QUESTION:
                {
                alt419=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 419, 0, input);
                throw nvae;
            }
            switch (alt419) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_minutePart14873);
                    numberconstant1087=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1087.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart14877); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart14879);
                    substitution1088=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1088.getTree());
                    }
                    break;
            }
            int alt420=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt420=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt420=2;
                }
                break;
            case MIN:
                {
                alt420=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 420, 0, input);
                throw nvae;
            }
            switch (alt420) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES1089=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart14883); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES1089);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE1090=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart14887); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE1090);
                    }
                    break;
                case 3 :
                    {
                    MIN1091=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart14891); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN1091);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS1094=null;
        Token TIMEPERIOD_SECOND1095=null;
        Token TIMEPERIOD_SEC1096=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1092 = null;
        EsperEPL2GrammarParser.substitution_return substitution1093 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS1094_tree=null;
        CommonTree TIMEPERIOD_SECOND1095_tree=null;
        CommonTree TIMEPERIOD_SEC1096_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt421=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt421=1;
                }
                break;
            case IDENT:
                {
                alt421=2;
                }
                break;
            case QUESTION:
                {
                alt421=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 421, 0, input);
                throw nvae;
            }
            switch (alt421) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_secondPart14941);
                    numberconstant1092=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1092.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart14945); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart14947);
                    substitution1093=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1093.getTree());
                    }
                    break;
            }
            int alt422=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt422=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt422=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt422=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 422, 0, input);
                throw nvae;
            }
            switch (alt422) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS1094=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart14951); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS1094);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND1095=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart14955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND1095);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC1096=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart14959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC1096);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS1099=null;
        Token TIMEPERIOD_MILLISECOND1100=null;
        Token TIMEPERIOD_MILLISEC1101=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1097 = null;
        EsperEPL2GrammarParser.substitution_return substitution1098 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS1099_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND1100_tree=null;
        CommonTree TIMEPERIOD_MILLISEC1101_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt423=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt423=1;
                }
                break;
            case IDENT:
                {
                alt423=2;
                }
                break;
            case QUESTION:
                {
                alt423=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 423, 0, input);
                throw nvae;
            }
            switch (alt423) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_millisecondPart15009);
                    numberconstant1097=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1097.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart15013); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart15015);
                    substitution1098=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1098.getTree());
                    }
                    break;
            }
            int alt424=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt424=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt424=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt424=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 424, 0, input);
                throw nvae;
            }
            switch (alt424) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS1099=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart15019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS1099);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND1100=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart15023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND1100);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC1101=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart15027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC1101);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt425=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt425=1;
                }
                break;
            case NUM_LONG:
                {
                alt425=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt425=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt425=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 425, 0, input);
                throw nvae;
            }
            switch (alt425) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number15082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number15099); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number15116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number15133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution15154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1102 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant1103 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt426=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt426=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt426=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt426=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt426=4;
                }
                break;
            case VALUE_NULL:
                {
                alt426=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 426, 0, input);
                throw nvae;
            }
            switch (alt426) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant15173);
                    numberconstant1102=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant1102.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant15180);
                    stringconstant1103=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant1103.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant15193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant15213); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant15233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number1104 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt427=3;
            int LA427_0 = input.LA(1);
            if ( (LA427_0==MINUS) ) {
                alt427=1;
            }
            else if ( (LA427_0==PLUS) ) {
                alt427=2;
            }
            switch (alt427) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant15255); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant15261); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant15265);
            number1104=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number1104.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number1104!=null?((CommonTree)number1104.tree):null).getType(), "-" + (number1104!=null?input.toString(number1104.start,number1104.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt428=2;
            int LA428_0 = input.LA(1);
            if ( (LA428_0==STRING_LITERAL) ) {
                alt428=1;
            }
            else if ( (LA428_0==QUOTED_STRING_LITERAL) ) {
                alt428=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 428, 0, input);
                throw nvae;
            }
            switch (alt428) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant15294); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant15310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonvalue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonvalue_return jsonvalue() throws RecognitionException {
        EsperEPL2GrammarParser.jsonvalue_return retval = new EsperEPL2GrammarParser.jsonvalue_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.constant_return constant1105 = null;
        EsperEPL2GrammarParser.jsonobject_return jsonobject1106 = null;
        EsperEPL2GrammarParser.jsonarray_return jsonarray1107 = null;
        try {
            int alt429=3;
            switch ( input.LA(1) ) {
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt429=1;
                }
                break;
            case LCURLY:
                {
                alt429=2;
                }
                break;
            case LBRACK:
                {
                alt429=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 429, 0, input);
                throw nvae;
            }
            switch (alt429) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_jsonvalue15331);
                    constant1105=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant1105.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_jsonobject_in_jsonvalue15336);
                    jsonobject1106=jsonobject();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonobject1106.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_jsonarray_in_jsonvalue15341);
                    jsonarray1107=jsonarray();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonarray1107.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonobject_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonobject_return jsonobject() throws RecognitionException {
        EsperEPL2GrammarParser.jsonobject_return retval = new EsperEPL2GrammarParser.jsonobject_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY1108=null;
        Token RCURLY1110=null;
        EsperEPL2GrammarParser.jsonmembers_return jsonmembers1109 = null;
        CommonTree LCURLY1108_tree=null;
        CommonTree RCURLY1110_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_jsonmembers=new RewriteRuleSubtreeStream(adaptor,"rule jsonmembers");
        try {
            {
            LCURLY1108=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_jsonobject15352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY1108);
            pushFollow(FOLLOW_jsonmembers_in_jsonobject15354);
            jsonmembers1109=jsonmembers();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jsonmembers.add(jsonmembers1109.getTree());
            RCURLY1110=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_jsonobject15356); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY1110);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JSON_OBJECT, "JSON_OBJECT"), root_1);
                adaptor.addChild(root_1, stream_jsonmembers.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonarray_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonarray_return jsonarray() throws RecognitionException {
        EsperEPL2GrammarParser.jsonarray_return retval = new EsperEPL2GrammarParser.jsonarray_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK1111=null;
        Token RBRACK1113=null;
        EsperEPL2GrammarParser.jsonelements_return jsonelements1112 = null;
        CommonTree LBRACK1111_tree=null;
        CommonTree RBRACK1113_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_jsonelements=new RewriteRuleSubtreeStream(adaptor,"rule jsonelements");
        try {
            {
            LBRACK1111=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_jsonarray15388); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK1111);
            int alt430=2;
            int LA430_0 = input.LA(1);
            if ( ((LA430_0>=BOOLEAN_TRUE && LA430_0<=VALUE_NULL)||LA430_0==NUM_DOUBLE||LA430_0==LBRACK||LA430_0==LCURLY||(LA430_0>=PLUS && LA430_0<=QUOTED_STRING_LITERAL)||LA430_0==MINUS||LA430_0==NUM_INT||(LA430_0>=NUM_LONG && LA430_0<=NUM_FLOAT)) ) {
                alt430=1;
            }
            switch (alt430) {
                case 1 :
                    {
                    pushFollow(FOLLOW_jsonelements_in_jsonarray15390);
                    jsonelements1112=jsonelements();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_jsonelements.add(jsonelements1112.getTree());
                    }
                    break;
            }
            RBRACK1113=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_jsonarray15393); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK1113);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JSON_ARRAY, "JSON_ARRAY"), root_1);
                if ( stream_jsonelements.hasNext() ) {
                    adaptor.addChild(root_1, stream_jsonelements.nextTree());
                }
                stream_jsonelements.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonelements_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonelements_return jsonelements() throws RecognitionException {
        EsperEPL2GrammarParser.jsonelements_return retval = new EsperEPL2GrammarParser.jsonelements_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA1115=null;
        Token COMMA1117=null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue1114 = null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue1116 = null;
        CommonTree COMMA1115_tree=null;
        CommonTree COMMA1117_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_jsonvalue_in_jsonelements15416);
            jsonvalue1114=jsonvalue();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonvalue1114.getTree());
            loop431:
            do {
                int alt431=2;
                int LA431_0 = input.LA(1);
                if ( (LA431_0==COMMA) ) {
                    int LA431_1 = input.LA(2);
                    if ( ((LA431_1>=BOOLEAN_TRUE && LA431_1<=VALUE_NULL)||LA431_1==NUM_DOUBLE||LA431_1==LBRACK||LA431_1==LCURLY||(LA431_1>=PLUS && LA431_1<=QUOTED_STRING_LITERAL)||LA431_1==MINUS||LA431_1==NUM_INT||(LA431_1>=NUM_LONG && LA431_1<=NUM_FLOAT)) ) {
                        alt431=1;
                    }
                }
                switch (alt431) {
            	case 1 :
            	    {
            	    COMMA1115=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonelements15419); if (state.failed) return retval;
            	    pushFollow(FOLLOW_jsonvalue_in_jsonelements15422);
            	    jsonvalue1116=jsonvalue();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonvalue1116.getTree());
            	    }
            	    break;
            	default :
            	    break loop431;
                }
            } while (true);
            int alt432=2;
            int LA432_0 = input.LA(1);
            if ( (LA432_0==COMMA) ) {
                alt432=1;
            }
            switch (alt432) {
                case 1 :
                    {
                    COMMA1117=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonelements15427); if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonmembers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonmembers_return jsonmembers() throws RecognitionException {
        EsperEPL2GrammarParser.jsonmembers_return retval = new EsperEPL2GrammarParser.jsonmembers_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA1119=null;
        Token COMMA1121=null;
        EsperEPL2GrammarParser.jsonpair_return jsonpair1118 = null;
        EsperEPL2GrammarParser.jsonpair_return jsonpair1120 = null;
        CommonTree COMMA1119_tree=null;
        CommonTree COMMA1121_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_jsonpair_in_jsonmembers15443);
            jsonpair1118=jsonpair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonpair1118.getTree());
            loop433:
            do {
                int alt433=2;
                int LA433_0 = input.LA(1);
                if ( (LA433_0==COMMA) ) {
                    int LA433_1 = input.LA(2);
                    if ( (LA433_1==WINDOW||LA433_1==ESCAPE||LA433_1==EVERY_EXPR||(LA433_1>=SUM && LA433_1<=COUNT)||LA433_1==OUTER||(LA433_1>=JOIN && LA433_1<=FULL)||(LA433_1>=EVENTS && LA433_1<=LAST)||(LA433_1>=UNIDIRECTIONAL && LA433_1<=PREVIOUSTAIL)||LA433_1==PRIOR||(LA433_1>=WEEKDAY && LA433_1<=CAST)||LA433_1==SNAPSHOT||(LA433_1>=VARIABLE && LA433_1<=INDEX)||(LA433_1>=DEFINE && LA433_1<=MATCHES)||(LA433_1>=FOR && LA433_1<=MATCHED)||LA433_1==CONTEXT||LA433_1==IDENT||(LA433_1>=STRING_LITERAL && LA433_1<=QUOTED_STRING_LITERAL)||LA433_1==TICKED_STRING_LITERAL) ) {
                        alt433=1;
                    }
                }
                switch (alt433) {
            	case 1 :
            	    {
            	    COMMA1119=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonmembers15446); if (state.failed) return retval;
            	    pushFollow(FOLLOW_jsonpair_in_jsonmembers15449);
            	    jsonpair1120=jsonpair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonpair1120.getTree());
            	    }
            	    break;
            	default :
            	    break loop433;
                }
            } while (true);
            int alt434=2;
            int LA434_0 = input.LA(1);
            if ( (LA434_0==COMMA) ) {
                alt434=1;
            }
            switch (alt434) {
                case 1 :
                    {
                    COMMA1121=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonmembers15454); if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonpair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonpair_return jsonpair() throws RecognitionException {
        EsperEPL2GrammarParser.jsonpair_return retval = new EsperEPL2GrammarParser.jsonpair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COLON1124=null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant1122 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent1123 = null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue1125 = null;
        CommonTree COLON1124_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_jsonvalue=new RewriteRuleSubtreeStream(adaptor,"rule jsonvalue");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            int alt435=2;
            int LA435_0 = input.LA(1);
            if ( ((LA435_0>=STRING_LITERAL && LA435_0<=QUOTED_STRING_LITERAL)) ) {
                alt435=1;
            }
            else if ( (LA435_0==WINDOW||LA435_0==ESCAPE||LA435_0==EVERY_EXPR||(LA435_0>=SUM && LA435_0<=COUNT)||LA435_0==OUTER||(LA435_0>=JOIN && LA435_0<=FULL)||(LA435_0>=EVENTS && LA435_0<=LAST)||(LA435_0>=UNIDIRECTIONAL && LA435_0<=PREVIOUSTAIL)||LA435_0==PRIOR||(LA435_0>=WEEKDAY && LA435_0<=CAST)||LA435_0==SNAPSHOT||(LA435_0>=VARIABLE && LA435_0<=INDEX)||(LA435_0>=DEFINE && LA435_0<=MATCHES)||(LA435_0>=FOR && LA435_0<=MATCHED)||LA435_0==CONTEXT||LA435_0==IDENT||LA435_0==TICKED_STRING_LITERAL) ) {
                alt435=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 435, 0, input);
                throw nvae;
            }
            switch (alt435) {
                case 1 :
                    {
                    pushFollow(FOLLOW_stringconstant_in_jsonpair15471);
                    stringconstant1122=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant1122.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_keywordAllowedIdent_in_jsonpair15475);
                    keywordAllowedIdent1123=keywordAllowedIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(keywordAllowedIdent1123.getTree());
                    }
                    break;
            }
            COLON1124=(Token)match(input,COLON,FOLLOW_COLON_in_jsonpair15478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON1124);
            pushFollow(FOLLOW_jsonvalue_in_jsonpair15480);
            jsonvalue1125=jsonvalue();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jsonvalue.add(jsonvalue1125.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JSON_FIELD, "JSON_FIELD"), root_1);
                if ( stream_stringconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                }
                stream_stringconstant.reset();
                if ( stream_keywordAllowedIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_keywordAllowedIdent.nextTree());
                }
                stream_keywordAllowedIdent.reset();
                adaptor.addChild(root_1, stream_jsonvalue.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar6250);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar7649);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar9682);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar11067);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar11129);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar12592);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar13073);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar13084);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar13095);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar13106);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar13118);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar13129);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar13140);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar13153);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar13178);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA254 dfa254 = new DFA254(this);
    static final String DFA254_eotS =
        "\u0c55\uffff";
    static final String DFA254_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0c20\uffff";
    static final String DFA254_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\21\uffff\1\u0145\u0085\uffff"+
        "\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff"+
        "\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff"+
        "\1\5\74\uffff\1\u0156\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74"+
        "\uffff\1\5\74\uffff\1\5\11\uffff\2\6\114\uffff\2\6\113\uffff\2\6"+
        "\102\uffff\2\6\122\uffff\2\6\113\uffff\2\6\113\uffff\2\6\113\uffff"+
        "\2\6\113\uffff\2\6\102\uffff\2\6\120\uffff\2\6\105\uffff\2\6\120"+
        "\uffff\2\6\111\uffff\2\6\113\uffff\2\6\u0089\uffff\1\0\5\uffff\1"+
        "\0\55\uffff\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1\0\141\uffff"+
        "\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1\0\55\uffff\1\0\5\uffff"+
        "\1\0\55\uffff\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1\0\55\uffff"+
        "\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff\1\0\115\uffff\1\0\30\uffff"+
        "\1\0\141\uffff\1\0\5\uffff\1\0\30\uffff";
    static final String DFA254_maxS =
        "\2\u0168\13\uffff\1\u0168\3\uffff\1\u0165\2\uffff\2\u0165\2\uffff"+
        "\4\u0165\1\uffff\2\u0165\12\uffff\3\u0165\2\uffff\3\u0165\3\uffff"+
        "\1\u0165\21\uffff\1\u0145\u0085\uffff\1\u0168\74\uffff\1\u0168\74"+
        "\uffff\1\u0168\74\uffff\1\u0168\74\uffff\1\u0168\74\uffff\1\u0168"+
        "\74\uffff\1\u0168\74\uffff\1\u0168\74\uffff\1\u0168\74\uffff\1\u0168"+
        "\74\uffff\1\u0168\74\uffff\1\u0162\74\uffff\1\u0168\74\uffff\1\u0168"+
        "\74\uffff\1\u0168\74\uffff\1\u0168\74\uffff\1\u0166\11\uffff\2\u0161"+
        "\114\uffff\2\u0161\113\uffff\2\u0161\102\uffff\2\u0161\122\uffff"+
        "\2\u0161\113\uffff\2\u0161\113\uffff\2\u0161\113\uffff\2\u0161\113"+
        "\uffff\2\u0161\102\uffff\2\u0161\120\uffff\2\u0161\105\uffff\2\u0161"+
        "\120\uffff\2\u0161\111\uffff\2\u0161\113\uffff\2\u0161\u0089\uffff"+
        "\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\141\uffff\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1\0\55\uffff"+
        "\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\55\uffff\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff\1\0\115\uffff"+
        "\1\0\30\uffff\1\0\141\uffff\1\0\5\uffff\1\0\30\uffff";
    static final String DFA254_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\65\uffff\2\6\1\uffff\1\6"+
        "\1\7\1\12\1\1\65\uffff\1\10\1\4\u041b\uffff\11\6\2\uffff\114\6\2"+
        "\uffff\113\6\2\uffff\102\6\2\uffff\122\6\2\uffff\113\6\2\uffff\113"+
        "\6\2\uffff\113\6\2\uffff\113\6\2\uffff\102\6\2\uffff\120\6\2\uffff"+
        "\103\6\4\uffff\120\6\2\uffff\111\6\2\uffff\113\6\2\uffff\102\6\1"+
        "\11\106\6\1\uffff\5\6\1\uffff\55\6\1\uffff\5\6\1\uffff\31\6\1\uffff"+
        "\31\6\1\uffff\62\6\1\uffff\31\6\1\uffff\24\6\1\uffff\5\6\1\uffff"+
        "\31\6\1\uffff\31\6\1\uffff\55\6\1\uffff\5\6\1\uffff\55\6\1\uffff"+
        "\5\6\1\uffff\31\6\1\uffff\31\6\1\uffff\55\6\1\uffff\5\6\1\uffff"+
        "\55\6\1\uffff\5\6\1\uffff\62\6\2\uffff\31\6\1\uffff\30\6\1\uffff"+
        "\62\6\2\uffff\55\6\1\uffff\5\6\1\uffff\30\6";
    static final String DFA254_specialS =
        "\1\0\u00cb\uffff\1\1\74\uffff\1\2\74\uffff\1\3\74\uffff\1\4\74"+
        "\uffff\1\5\74\uffff\1\6\74\uffff\1\7\74\uffff\1\10\74\uffff\1\11"+
        "\74\uffff\1\12\74\uffff\1\13\74\uffff\1\14\74\uffff\1\15\74\uffff"+
        "\1\16\74\uffff\1\17\74\uffff\1\20\74\uffff\1\21\11\uffff\1\22\1"+
        "\23\114\uffff\1\24\1\25\113\uffff\1\26\1\27\102\uffff\1\30\1\31"+
        "\122\uffff\1\32\1\33\113\uffff\1\34\1\35\113\uffff\1\36\1\37\113"+
        "\uffff\1\40\1\41\113\uffff\1\42\1\43\102\uffff\1\44\1\45\120\uffff"+
        "\1\46\1\47\105\uffff\1\50\1\51\120\uffff\1\52\1\53\111\uffff\1\54"+
        "\1\55\113\uffff\1\56\1\57\u0089\uffff\1\60\5\uffff\1\61\55\uffff"+
        "\1\62\5\uffff\1\63\31\uffff\1\64\31\uffff\1\65\141\uffff\1\66\5"+
        "\uffff\1\67\31\uffff\1\70\31\uffff\1\71\55\uffff\1\72\5\uffff\1"+
        "\73\55\uffff\1\74\5\uffff\1\75\31\uffff\1\76\31\uffff\1\77\55\uffff"+
        "\1\100\5\uffff\1\101\55\uffff\1\102\5\uffff\1\103\115\uffff\1\104"+
        "\30\uffff\1\105\141\uffff\1\106\5\uffff\1\107\30\uffff}>";
    static final short[] DFA254_eot = DFA.unpackEncodedString(DFA254_eotS);
    static final short[] DFA254_eof = DFA.unpackEncodedString(DFA254_eofS);
    static final char[] DFA254_min = DFA.unpackEncodedStringToUnsignedChars(DFA254_minS);
    static final char[] DFA254_max = DFA.unpackEncodedStringToUnsignedChars(DFA254_maxS);
    static final short[] DFA254_accept = DFA.unpackEncodedString(DFA254_acceptS);
    static final short[] DFA254_special = DFA.unpackEncodedString(DFA254_specialS);
    static final short[][] DFA254_transition;
    static {
        int numStates = EsperEPL2GrammarParser_DFAS.DFA254_transitionS.length;
        DFA254_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA254_transition[i] = DFA.unpackEncodedString(EsperEPL2GrammarParser_DFAS.DFA254_transitionS[i]);
        }
    }
    class DFA254 extends DFA {
        public DFA254(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 254;
            this.eot = DFA254_eot;
            this.eof = DFA254_eof;
            this.min = DFA254_min;
            this.max = DFA254_max;
            this.accept = DFA254_accept;
            this.special = DFA254_special;
            this.transition = DFA254_transition;
        }
        public String getDescription() {
            return "1518:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR subSelectExpression ( libFunctionNoClass )+ ) -> subSelectExpression | existsSubSelectExpression | NEWKW LCURLY newAssign ( COMMA newAssign )* RCURLY -> ^( NEWKW ( newAssign )* ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 254, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA254_0 = input.LA(1);
                        int index254_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_0==MINUS) ) {s = 1;}
                        else if ( ((LA254_0>=BOOLEAN_TRUE && LA254_0<=VALUE_NULL)||LA254_0==NUM_DOUBLE||(LA254_0>=PLUS && LA254_0<=QUOTED_STRING_LITERAL)||LA254_0==NUM_INT||(LA254_0>=NUM_LONG && LA254_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA254_0==QUESTION) ) {s = 12;}
                        else if ( (LA254_0==LPAREN) ) {s = 13;}
                        else if ( (LA254_0==BETWEEN||LA254_0==ESCAPE||LA254_0==EVERY_EXPR||LA254_0==WHERE||(LA254_0>=MAX && LA254_0<=MIN)||LA254_0==OUTER||(LA254_0>=JOIN && LA254_0<=FULL)||LA254_0==EVENTS||(LA254_0>=UNIDIRECTIONAL && LA254_0<=METADATASQL)||(LA254_0>=WEEKDAY && LA254_0<=LW)||(LA254_0>=SNAPSHOT && LA254_0<=INDEX)||(LA254_0>=DEFINE && LA254_0<=MATCHED)||LA254_0==CONTEXT||LA254_0==IDENT||LA254_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA254_0==COUNT) ) {s = 17;}
                        else if ( (LA254_0==SUM) ) {s = 20;}
                        else if ( (LA254_0==AVG) ) {s = 21;}
                        else if ( (LA254_0==COALESCE) ) {s = 24;}
                        else if ( (LA254_0==MEDIAN) ) {s = 25;}
                        else if ( (LA254_0==STDDEV) ) {s = 26;}
                        else if ( (LA254_0==AVEDEV) ) {s = 27;}
                        else if ( (LA254_0==FIRST) ) {s = 29;}
                        else if ( (LA254_0==LAST) ) {s = 30;}
                        else if ( (LA254_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA254_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA254_0==PRIOR) ) {s = 43;}
                        else if ( (LA254_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA254_0==TYPEOF) ) {s = 47;}
                        else if ( (LA254_0==CAST) ) {s = 48;}
                        else if ( (LA254_0==WINDOW) ) {s = 52;}
                        else if ( (LA254_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 68;}
                        else if ( (LA254_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 69;}
                        else if ( (LA254_0==EXISTS) ) {s = 70;}
                        else if ( (LA254_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 71;}
                        else if ( (LA254_0==LCURLY) ) {s = 72;}
                        else if ( (LA254_0==NEWKW) ) {s = 73;}
                        input.seek(index254_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA254_204 = input.LA(1);
                        int index254_204 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_204==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA254_204==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA254_204==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA254_204==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA254_204==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA254_204==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA254_204==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA254_204==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA254_204==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA254_204==STRING_LITERAL) ) {s = 1190;}
                        else if ( (LA254_204==QUOTED_STRING_LITERAL) ) {s = 1191;}
                        else if ( (LA254_204==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA254_204==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA254_204==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA254_204==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA254_204==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA254_204==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA254_204==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA254_204==AT) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA254_204==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA254_204==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA254_204==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA254_204==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA254_204==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA254_204==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA254_204==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA254_204==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA254_204==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA254_204==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA254_204==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA254_204==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA254_204==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA254_204==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA254_204==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA254_204==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA254_204==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA254_204==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA254_204==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA254_204==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA254_204==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA254_204==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA254_204==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA254_204==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA254_204==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA254_204==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA254_204==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA254_204==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA254_204==LW) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA254_204==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA254_204==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA254_204==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA254_204==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA254_204==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA254_204==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA254_204==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA254_204==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA254_204==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA254_204==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA254_204==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA254_204==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA254_204==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA254_204==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA254_204==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA254_204==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA254_204==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA254_204==USING) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA254_204==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA254_204==SET) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA254_204==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA254_204==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA254_204==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA254_204==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA254_204==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA254_204==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA254_204==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA254_204==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA254_204==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA254_204==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        input.seek(index254_204);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA254_265 = input.LA(1);
                        int index254_265 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_265==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA254_265==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA254_265==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA254_265==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA254_265==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA254_265==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA254_265==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA254_265==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA254_265==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA254_265==STRING_LITERAL) ) {s = 1268;}
                        else if ( (LA254_265==QUOTED_STRING_LITERAL) ) {s = 1269;}
                        else if ( (LA254_265==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA254_265==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA254_265==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA254_265==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA254_265==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA254_265==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA254_265==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA254_265==AT) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA254_265==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA254_265==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA254_265==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA254_265==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA254_265==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA254_265==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA254_265==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA254_265==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA254_265==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA254_265==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA254_265==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA254_265==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA254_265==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA254_265==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA254_265==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA254_265==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA254_265==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA254_265==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA254_265==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA254_265==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA254_265==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA254_265==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA254_265==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA254_265==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA254_265==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA254_265==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA254_265==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA254_265==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA254_265==LW) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA254_265==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA254_265==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA254_265==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA254_265==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA254_265==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA254_265==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA254_265==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA254_265==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA254_265==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA254_265==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA254_265==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA254_265==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA254_265==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA254_265==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA254_265==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA254_265==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA254_265==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA254_265==USING) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA254_265==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA254_265==SET) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA254_265==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA254_265==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA254_265==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA254_265==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA254_265==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA254_265==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA254_265==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA254_265==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA254_265==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        input.seek(index254_265);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA254_326 = input.LA(1);
                        int index254_326 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_326==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA254_326==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA254_326==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA254_326==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA254_326==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA254_326==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA254_326==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA254_326==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA254_326==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA254_326==STRING_LITERAL) ) {s = 1345;}
                        else if ( (LA254_326==QUOTED_STRING_LITERAL) ) {s = 1346;}
                        else if ( (LA254_326==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA254_326==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA254_326==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA254_326==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA254_326==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA254_326==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA254_326==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA254_326==AT) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA254_326==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA254_326==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA254_326==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA254_326==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA254_326==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA254_326==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA254_326==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA254_326==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA254_326==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA254_326==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA254_326==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA254_326==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA254_326==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA254_326==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA254_326==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA254_326==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA254_326==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA254_326==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA254_326==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA254_326==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA254_326==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA254_326==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA254_326==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA254_326==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA254_326==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA254_326==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA254_326==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA254_326==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA254_326==LW) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA254_326==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA254_326==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA254_326==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA254_326==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA254_326==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA254_326==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA254_326==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA254_326==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA254_326==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA254_326==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA254_326==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA254_326==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA254_326==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA254_326==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA254_326==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA254_326==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA254_326==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA254_326==USING) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA254_326==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA254_326==SET) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA254_326==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA254_326==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA254_326==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA254_326==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA254_326==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA254_326==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA254_326==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA254_326==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA254_326==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        input.seek(index254_326);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA254_387 = input.LA(1);
                        int index254_387 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_387==STRING_LITERAL) ) {s = 1413;}
                        else if ( (LA254_387==QUOTED_STRING_LITERAL) ) {s = 1414;}
                        else if ( (LA254_387==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA254_387==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA254_387==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA254_387==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA254_387==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA254_387==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA254_387==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA254_387==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA254_387==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA254_387==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA254_387==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA254_387==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA254_387==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA254_387==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA254_387==AT) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA254_387==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA254_387==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA254_387==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA254_387==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA254_387==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA254_387==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA254_387==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA254_387==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA254_387==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA254_387==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA254_387==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA254_387==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA254_387==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA254_387==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA254_387==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA254_387==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA254_387==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA254_387==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA254_387==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA254_387==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA254_387==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA254_387==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA254_387==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA254_387==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA254_387==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA254_387==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA254_387==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA254_387==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA254_387==LW) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA254_387==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA254_387==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA254_387==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA254_387==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA254_387==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA254_387==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA254_387==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA254_387==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA254_387==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA254_387==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA254_387==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA254_387==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA254_387==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA254_387==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA254_387==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA254_387==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA254_387==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA254_387==USING) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA254_387==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA254_387==SET) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA254_387==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA254_387==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA254_387==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA254_387==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA254_387==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA254_387==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA254_387==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA254_387==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA254_387==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        input.seek(index254_387);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA254_448 = input.LA(1);
                        int index254_448 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_448==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA254_448==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA254_448==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA254_448==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA254_448==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA254_448==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA254_448==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA254_448==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA254_448==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA254_448==STRING_LITERAL) ) {s = 1497;}
                        else if ( (LA254_448==QUOTED_STRING_LITERAL) ) {s = 1498;}
                        else if ( (LA254_448==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA254_448==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA254_448==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA254_448==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA254_448==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA254_448==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA254_448==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA254_448==AT) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA254_448==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA254_448==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA254_448==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA254_448==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA254_448==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA254_448==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA254_448==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA254_448==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA254_448==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA254_448==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA254_448==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA254_448==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA254_448==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA254_448==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA254_448==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA254_448==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA254_448==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA254_448==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA254_448==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA254_448==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA254_448==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA254_448==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA254_448==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA254_448==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA254_448==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA254_448==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA254_448==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA254_448==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA254_448==LW) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA254_448==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA254_448==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA254_448==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA254_448==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA254_448==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA254_448==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA254_448==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA254_448==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA254_448==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA254_448==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA254_448==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA254_448==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA254_448==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA254_448==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA254_448==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA254_448==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA254_448==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA254_448==USING) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA254_448==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA254_448==SET) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA254_448==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA254_448==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA254_448==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA254_448==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA254_448==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA254_448==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA254_448==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA254_448==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA254_448==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        input.seek(index254_448);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA254_509 = input.LA(1);
                        int index254_509 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_509==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA254_509==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA254_509==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA254_509==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA254_509==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA254_509==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA254_509==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA254_509==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA254_509==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA254_509==STRING_LITERAL) ) {s = 1574;}
                        else if ( (LA254_509==QUOTED_STRING_LITERAL) ) {s = 1575;}
                        else if ( (LA254_509==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA254_509==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA254_509==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA254_509==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA254_509==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA254_509==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA254_509==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA254_509==AT) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA254_509==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA254_509==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA254_509==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA254_509==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA254_509==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA254_509==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA254_509==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA254_509==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA254_509==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA254_509==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA254_509==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA254_509==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA254_509==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA254_509==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA254_509==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA254_509==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA254_509==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA254_509==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA254_509==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA254_509==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA254_509==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA254_509==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA254_509==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA254_509==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA254_509==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA254_509==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA254_509==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA254_509==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        else if ( (LA254_509==LW) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA254_509==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA254_509==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA254_509==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA254_509==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA254_509==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA254_509==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA254_509==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA254_509==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA254_509==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA254_509==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA254_509==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA254_509==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA254_509==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA254_509==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA254_509==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA254_509==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA254_509==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA254_509==USING) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA254_509==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA254_509==SET) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA254_509==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA254_509==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA254_509==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA254_509==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA254_509==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA254_509==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA254_509==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA254_509==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA254_509==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        input.seek(index254_509);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA254_570 = input.LA(1);
                        int index254_570 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_570==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA254_570==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA254_570==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA254_570==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA254_570==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA254_570==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA254_570==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA254_570==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA254_570==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA254_570==STRING_LITERAL) ) {s = 1651;}
                        else if ( (LA254_570==QUOTED_STRING_LITERAL) ) {s = 1652;}
                        else if ( (LA254_570==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA254_570==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA254_570==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA254_570==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA254_570==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA254_570==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA254_570==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA254_570==AT) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA254_570==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA254_570==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA254_570==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA254_570==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA254_570==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA254_570==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA254_570==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA254_570==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA254_570==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA254_570==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA254_570==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA254_570==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA254_570==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA254_570==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA254_570==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA254_570==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA254_570==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA254_570==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA254_570==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA254_570==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA254_570==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA254_570==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA254_570==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA254_570==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA254_570==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA254_570==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA254_570==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA254_570==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA254_570==LW) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA254_570==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA254_570==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA254_570==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA254_570==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA254_570==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA254_570==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA254_570==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA254_570==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA254_570==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA254_570==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA254_570==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA254_570==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA254_570==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA254_570==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA254_570==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA254_570==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA254_570==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA254_570==USING) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA254_570==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA254_570==SET) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA254_570==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA254_570==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA254_570==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA254_570==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA254_570==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA254_570==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA254_570==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA254_570==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA254_570==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        input.seek(index254_570);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA254_631 = input.LA(1);
                        int index254_631 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_631==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA254_631==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA254_631==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA254_631==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA254_631==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA254_631==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA254_631==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA254_631==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA254_631==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA254_631==STRING_LITERAL) ) {s = 1728;}
                        else if ( (LA254_631==QUOTED_STRING_LITERAL) ) {s = 1729;}
                        else if ( (LA254_631==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA254_631==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA254_631==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA254_631==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA254_631==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA254_631==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA254_631==AT) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA254_631==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA254_631==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA254_631==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA254_631==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA254_631==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA254_631==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA254_631==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA254_631==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA254_631==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA254_631==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA254_631==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA254_631==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA254_631==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA254_631==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA254_631==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA254_631==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA254_631==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA254_631==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA254_631==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA254_631==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA254_631==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA254_631==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA254_631==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA254_631==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA254_631==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA254_631==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA254_631==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA254_631==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA254_631==LW) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA254_631==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA254_631==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA254_631==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA254_631==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA254_631==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA254_631==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA254_631==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA254_631==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA254_631==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA254_631==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA254_631==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA254_631==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA254_631==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA254_631==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA254_631==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA254_631==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA254_631==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA254_631==USING) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA254_631==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA254_631==SET) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA254_631==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA254_631==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA254_631==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA254_631==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA254_631==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA254_631==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA254_631==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA254_631==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA254_631==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA254_631==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        input.seek(index254_631);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA254_692 = input.LA(1);
                        int index254_692 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_692==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA254_692==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA254_692==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA254_692==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA254_692==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA254_692==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA254_692==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA254_692==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA254_692==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA254_692==STRING_LITERAL) ) {s = 1805;}
                        else if ( (LA254_692==QUOTED_STRING_LITERAL) ) {s = 1806;}
                        else if ( (LA254_692==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA254_692==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA254_692==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA254_692==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA254_692==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA254_692==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA254_692==AT) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA254_692==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA254_692==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA254_692==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA254_692==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA254_692==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA254_692==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA254_692==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA254_692==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA254_692==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA254_692==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA254_692==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA254_692==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA254_692==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA254_692==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA254_692==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA254_692==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA254_692==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA254_692==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA254_692==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA254_692==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA254_692==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA254_692==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA254_692==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA254_692==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA254_692==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA254_692==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA254_692==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA254_692==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA254_692==LW) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA254_692==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA254_692==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA254_692==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA254_692==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA254_692==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA254_692==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA254_692==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA254_692==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA254_692==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA254_692==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA254_692==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA254_692==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA254_692==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA254_692==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA254_692==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA254_692==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA254_692==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA254_692==USING) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA254_692==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA254_692==SET) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA254_692==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA254_692==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA254_692==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA254_692==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA254_692==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA254_692==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA254_692==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA254_692==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA254_692==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA254_692==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        input.seek(index254_692);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA254_753 = input.LA(1);
                        int index254_753 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_753==STRING_LITERAL) ) {s = 1873;}
                        else if ( (LA254_753==QUOTED_STRING_LITERAL) ) {s = 1874;}
                        else if ( (LA254_753==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA254_753==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA254_753==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA254_753==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA254_753==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA254_753==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA254_753==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA254_753==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA254_753==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA254_753==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA254_753==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA254_753==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA254_753==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA254_753==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA254_753==AT) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA254_753==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA254_753==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA254_753==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA254_753==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA254_753==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA254_753==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA254_753==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA254_753==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA254_753==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA254_753==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA254_753==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA254_753==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA254_753==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA254_753==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA254_753==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA254_753==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA254_753==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA254_753==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA254_753==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA254_753==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA254_753==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA254_753==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA254_753==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA254_753==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA254_753==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA254_753==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA254_753==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA254_753==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA254_753==LW) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA254_753==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA254_753==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA254_753==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA254_753==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA254_753==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA254_753==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA254_753==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA254_753==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA254_753==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA254_753==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA254_753==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA254_753==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA254_753==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA254_753==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA254_753==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA254_753==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA254_753==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA254_753==USING) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA254_753==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA254_753==SET) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA254_753==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA254_753==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA254_753==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA254_753==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA254_753==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA254_753==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA254_753==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA254_753==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA254_753==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        input.seek(index254_753);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA254_814 = input.LA(1);
                        int index254_814 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_814==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA254_814==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA254_814==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA254_814==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA254_814==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA254_814==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA254_814==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA254_814==STRING_LITERAL) ) {s = 1955;}
                        else if ( (LA254_814==QUOTED_STRING_LITERAL) ) {s = 1956;}
                        else if ( (LA254_814==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA254_814==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA254_814==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA254_814==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA254_814==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA254_814==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA254_814==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA254_814==AT) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA254_814==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA254_814==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA254_814==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA254_814==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA254_814==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA254_814==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA254_814==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA254_814==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA254_814==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA254_814==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA254_814==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA254_814==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA254_814==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA254_814==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA254_814==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA254_814==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA254_814==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA254_814==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA254_814==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA254_814==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA254_814==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA254_814==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA254_814==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA254_814==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA254_814==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA254_814==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA254_814==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA254_814==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA254_814==LW) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA254_814==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA254_814==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA254_814==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA254_814==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA254_814==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA254_814==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA254_814==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA254_814==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA254_814==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA254_814==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA254_814==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA254_814==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA254_814==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA254_814==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA254_814==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA254_814==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA254_814==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA254_814==USING) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA254_814==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA254_814==SET) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA254_814==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA254_814==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA254_814==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA254_814==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA254_814==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA254_814==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA254_814==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA254_814==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA254_814==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        input.seek(index254_814);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA254_875 = input.LA(1);
                        int index254_875 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_875==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( ((LA254_875>=STRING_LITERAL && LA254_875<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index254_875);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA254_936 = input.LA(1);
                        int index254_936 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_936==STRING_LITERAL) ) {s = 2026;}
                        else if ( (LA254_936==QUOTED_STRING_LITERAL) ) {s = 2027;}
                        else if ( (LA254_936==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA254_936==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA254_936==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA254_936==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA254_936==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA254_936==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA254_936==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA254_936==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        else if ( (LA254_936==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( (LA254_936==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA254_936==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA254_936==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA254_936==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA254_936==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA254_936==AT) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA254_936==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA254_936==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA254_936==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA254_936==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA254_936==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA254_936==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA254_936==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA254_936==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA254_936==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA254_936==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA254_936==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA254_936==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA254_936==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA254_936==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA254_936==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        else if ( (LA254_936==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA254_936==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA254_936==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA254_936==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA254_936==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA254_936==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA254_936==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA254_936==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA254_936==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA254_936==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA254_936==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA254_936==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA254_936==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA254_936==LW) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA254_936==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA254_936==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA254_936==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA254_936==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA254_936==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA254_936==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA254_936==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA254_936==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA254_936==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA254_936==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA254_936==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        else if ( (LA254_936==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA254_936==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA254_936==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA254_936==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA254_936==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA254_936==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA254_936==USING) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA254_936==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA254_936==SET) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA254_936==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA254_936==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA254_936==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA254_936==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA254_936==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA254_936==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA254_936==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA254_936==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA254_936==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        input.seek(index254_936);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA254_997 = input.LA(1);
                        int index254_997 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_997==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA254_997==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2102;}
                        else if ( (LA254_997==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA254_997==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA254_997==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA254_997==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA254_997==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA254_997==STRING_LITERAL) ) {s = 2108;}
                        else if ( (LA254_997==QUOTED_STRING_LITERAL) ) {s = 2109;}
                        else if ( (LA254_997==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA254_997==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA254_997==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA254_997==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA254_997==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA254_997==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA254_997==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA254_997==AT) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA254_997==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA254_997==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA254_997==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA254_997==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA254_997==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA254_997==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA254_997==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA254_997==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA254_997==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA254_997==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        else if ( (LA254_997==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA254_997==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA254_997==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA254_997==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA254_997==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA254_997==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA254_997==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA254_997==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA254_997==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA254_997==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA254_997==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA254_997==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA254_997==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA254_997==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA254_997==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA254_997==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA254_997==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA254_997==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA254_997==LW) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA254_997==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA254_997==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA254_997==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA254_997==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA254_997==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA254_997==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2152;}
                        else if ( (LA254_997==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA254_997==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA254_997==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA254_997==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA254_997==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA254_997==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA254_997==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA254_997==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA254_997==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA254_997==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA254_997==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA254_997==USING) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA254_997==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA254_997==SET) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA254_997==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA254_997==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA254_997==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        else if ( (LA254_997==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA254_997==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA254_997==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA254_997==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA254_997==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA254_997==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        input.seek(index254_997);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA254_1058 = input.LA(1);
                        int index254_1058 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1058==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA254_1058==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA254_1058==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA254_1058==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA254_1058==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA254_1058==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA254_1058==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA254_1058==STRING_LITERAL) ) {s = 2183;}
                        else if ( (LA254_1058==QUOTED_STRING_LITERAL) ) {s = 2184;}
                        else if ( (LA254_1058==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA254_1058==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA254_1058==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA254_1058==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA254_1058==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA254_1058==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA254_1058==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA254_1058==AT) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA254_1058==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA254_1058==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA254_1058==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA254_1058==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA254_1058==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA254_1058==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA254_1058==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA254_1058==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA254_1058==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA254_1058==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2202;}
                        else if ( (LA254_1058==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA254_1058==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA254_1058==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA254_1058==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA254_1058==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        else if ( (LA254_1058==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA254_1058==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA254_1058==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA254_1058==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA254_1058==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA254_1058==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA254_1058==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA254_1058==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA254_1058==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA254_1058==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        else if ( (LA254_1058==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2218;}
                        else if ( (LA254_1058==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA254_1058==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA254_1058==LW) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA254_1058==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA254_1058==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA254_1058==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA254_1058==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA254_1058==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA254_1058==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA254_1058==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA254_1058==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA254_1058==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA254_1058==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA254_1058==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA254_1058==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA254_1058==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA254_1058==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA254_1058==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA254_1058==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA254_1058==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA254_1058==USING) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA254_1058==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA254_1058==SET) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA254_1058==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA254_1058==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA254_1058==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA254_1058==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA254_1058==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA254_1058==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA254_1058==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA254_1058==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA254_1058==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        input.seek(index254_1058);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA254_1119 = input.LA(1);
                        int index254_1119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1119==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA254_1119==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA254_1119==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA254_1119==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA254_1119==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA254_1119==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA254_1119==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA254_1119==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA254_1119==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        else if ( (LA254_1119==STRING_LITERAL) ) {s = 2260;}
                        else if ( (LA254_1119==QUOTED_STRING_LITERAL) ) {s = 2261;}
                        else if ( (LA254_1119==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA254_1119==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA254_1119==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA254_1119==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA254_1119==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA254_1119==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        else if ( (LA254_1119==AT) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA254_1119==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA254_1119==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA254_1119==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA254_1119==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA254_1119==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA254_1119==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA254_1119==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA254_1119==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA254_1119==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA254_1119==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA254_1119==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2279;}
                        else if ( (LA254_1119==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA254_1119==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA254_1119==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA254_1119==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA254_1119==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        else if ( (LA254_1119==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA254_1119==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA254_1119==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA254_1119==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA254_1119==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA254_1119==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA254_1119==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA254_1119==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2292;}
                        else if ( (LA254_1119==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2293;}
                        else if ( (LA254_1119==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA254_1119==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA254_1119==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA254_1119==LW) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA254_1119==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA254_1119==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA254_1119==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA254_1119==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA254_1119==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA254_1119==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA254_1119==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2304;}
                        else if ( (LA254_1119==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA254_1119==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA254_1119==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA254_1119==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA254_1119==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        else if ( (LA254_1119==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA254_1119==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA254_1119==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA254_1119==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA254_1119==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA254_1119==USING) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA254_1119==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA254_1119==SET) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA254_1119==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA254_1119==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA254_1119==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA254_1119==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA254_1119==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA254_1119==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA254_1119==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA254_1119==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA254_1119==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA254_1119==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        input.seek(index254_1119);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA254_1180 = input.LA(1);
                        int index254_1180 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1180==SELECT) ) {s = 2328;}
                        else if ( (LA254_1180==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA254_1180==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA254_1180==AT) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA254_1180==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA254_1180==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA254_1180==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        else if ( (LA254_1180==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA254_1180==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA254_1180==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA254_1180==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA254_1180==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA254_1180==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA254_1180==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA254_1180==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA254_1180==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA254_1180==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA254_1180==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2345;}
                        else if ( (LA254_1180==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA254_1180==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA254_1180==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA254_1180==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA254_1180==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA254_1180==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA254_1180==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA254_1180==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA254_1180==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2354;}
                        else if ( (LA254_1180==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA254_1180==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA254_1180==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA254_1180==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA254_1180==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        else if ( (LA254_1180==LW) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA254_1180==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA254_1180==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA254_1180==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA254_1180==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA254_1180==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA254_1180==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA254_1180==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA254_1180==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA254_1180==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA254_1180==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA254_1180==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA254_1180==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA254_1180==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA254_1180==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA254_1180==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA254_1180==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA254_1180==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA254_1180==USING) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        input.seek(index254_1180);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA254_1190 = input.LA(1);
                        int index254_1190 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1190==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2379;}
                        else if ( (LA254_1190==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA254_1190==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA254_1190==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA254_1190==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA254_1190==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        else if ( (LA254_1190==LT) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA254_1190==GT) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA254_1190==LE) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA254_1190==GE) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA254_1190==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA254_1190==IS) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA254_1190==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA254_1190==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA254_1190==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        else if ( (LA254_1190==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA254_1190==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA254_1190==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA254_1190==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA254_1190==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA254_1190==RPAREN) ) {s = 2399;}
                        else if ( (LA254_1190==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA254_1190==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA254_1190==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA254_1190==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA254_1190==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        input.seek(index254_1190);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA254_1191 = input.LA(1);
                        int index254_1191 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1191==RPAREN) ) {s = 2405;}
                        else if ( (LA254_1191==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA254_1191==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA254_1191==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA254_1191==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA254_1191==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA254_1191==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA254_1191==LT) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA254_1191==GT) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA254_1191==LE) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA254_1191==GE) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA254_1191==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA254_1191==IS) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA254_1191==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA254_1191==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA254_1191==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA254_1191==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA254_1191==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA254_1191==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA254_1191==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA254_1191==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA254_1191==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA254_1191==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA254_1191==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        else if ( (LA254_1191==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA254_1191==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        input.seek(index254_1191);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA254_1268 = input.LA(1);
                        int index254_1268 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1268==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA254_1268==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA254_1268==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA254_1268==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA254_1268==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA254_1268==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA254_1268==LT) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA254_1268==GT) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA254_1268==LE) && (synpred3_EsperEPL2Grammar())) {s = 2439;}
                        else if ( (LA254_1268==GE) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA254_1268==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA254_1268==IS) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA254_1268==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA254_1268==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        else if ( (LA254_1268==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA254_1268==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA254_1268==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA254_1268==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA254_1268==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA254_1268==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA254_1268==RPAREN) ) {s = 2451;}
                        else if ( (LA254_1268==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA254_1268==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA254_1268==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA254_1268==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA254_1268==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        input.seek(index254_1268);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA254_1269 = input.LA(1);
                        int index254_1269 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1269==RPAREN) ) {s = 2457;}
                        else if ( (LA254_1269==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA254_1269==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA254_1269==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA254_1269==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        else if ( (LA254_1269==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA254_1269==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA254_1269==LT) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA254_1269==GT) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA254_1269==LE) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA254_1269==GE) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA254_1269==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA254_1269==IS) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA254_1269==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        else if ( (LA254_1269==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA254_1269==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA254_1269==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA254_1269==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA254_1269==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA254_1269==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA254_1269==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA254_1269==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA254_1269==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA254_1269==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA254_1269==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA254_1269==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        input.seek(index254_1269);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA254_1345 = input.LA(1);
                        int index254_1345 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1345==RPAREN) ) {s = 2483;}
                        else if ( (LA254_1345==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA254_1345==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA254_1345==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA254_1345==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        else if ( (LA254_1345==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA254_1345==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA254_1345==LT) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA254_1345==GT) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA254_1345==LE) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA254_1345==GE) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA254_1345==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        else if ( (LA254_1345==IS) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA254_1345==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA254_1345==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA254_1345==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA254_1345==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA254_1345==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA254_1345==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA254_1345==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA254_1345==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA254_1345==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA254_1345==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA254_1345==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA254_1345==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA254_1345==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        input.seek(index254_1345);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA254_1346 = input.LA(1);
                        int index254_1346 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1346==RPAREN) ) {s = 2509;}
                        else if ( (LA254_1346==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA254_1346==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA254_1346==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA254_1346==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA254_1346==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA254_1346==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA254_1346==LT) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA254_1346==GT) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA254_1346==LE) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA254_1346==GE) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA254_1346==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA254_1346==IS) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA254_1346==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA254_1346==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA254_1346==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA254_1346==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA254_1346==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA254_1346==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA254_1346==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA254_1346==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA254_1346==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA254_1346==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA254_1346==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA254_1346==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA254_1346==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        input.seek(index254_1346);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA254_1413 = input.LA(1);
                        int index254_1413 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1413==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA254_1413==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA254_1413==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA254_1413==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA254_1413==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA254_1413==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA254_1413==LT) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA254_1413==GT) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA254_1413==LE) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA254_1413==GE) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA254_1413==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA254_1413==IS) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA254_1413==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA254_1413==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA254_1413==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA254_1413==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA254_1413==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA254_1413==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA254_1413==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA254_1413==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA254_1413==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA254_1413==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA254_1413==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA254_1413==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA254_1413==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA254_1413==RPAREN) ) {s = 14;}
                        input.seek(index254_1413);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA254_1414 = input.LA(1);
                        int index254_1414 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1414==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA254_1414==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA254_1414==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA254_1414==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA254_1414==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA254_1414==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA254_1414==LT) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA254_1414==GT) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA254_1414==LE) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA254_1414==GE) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA254_1414==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA254_1414==IS) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA254_1414==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA254_1414==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        else if ( (LA254_1414==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA254_1414==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA254_1414==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA254_1414==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA254_1414==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA254_1414==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA254_1414==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA254_1414==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA254_1414==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA254_1414==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA254_1414==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA254_1414==RPAREN) ) {s = 14;}
                        input.seek(index254_1414);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA254_1497 = input.LA(1);
                        int index254_1497 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1497==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA254_1497==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA254_1497==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA254_1497==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA254_1497==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA254_1497==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA254_1497==LT) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA254_1497==GT) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA254_1497==LE) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        else if ( (LA254_1497==GE) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA254_1497==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA254_1497==IS) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA254_1497==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA254_1497==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA254_1497==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA254_1497==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA254_1497==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA254_1497==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA254_1497==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA254_1497==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA254_1497==RPAREN) ) {s = 2607;}
                        else if ( (LA254_1497==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA254_1497==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA254_1497==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA254_1497==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA254_1497==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        input.seek(index254_1497);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA254_1498 = input.LA(1);
                        int index254_1498 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1498==RPAREN) ) {s = 2613;}
                        else if ( (LA254_1498==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA254_1498==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA254_1498==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA254_1498==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA254_1498==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA254_1498==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA254_1498==LT) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA254_1498==GT) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        else if ( (LA254_1498==LE) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA254_1498==GE) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA254_1498==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA254_1498==IS) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA254_1498==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        else if ( (LA254_1498==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA254_1498==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA254_1498==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA254_1498==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA254_1498==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA254_1498==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA254_1498==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA254_1498==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA254_1498==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA254_1498==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA254_1498==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA254_1498==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        input.seek(index254_1498);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA254_1574 = input.LA(1);
                        int index254_1574 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1574==RPAREN) ) {s = 2639;}
                        else if ( (LA254_1574==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA254_1574==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA254_1574==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA254_1574==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA254_1574==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA254_1574==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA254_1574==LT) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA254_1574==GT) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        else if ( (LA254_1574==LE) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA254_1574==GE) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA254_1574==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA254_1574==IS) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA254_1574==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA254_1574==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA254_1574==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA254_1574==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA254_1574==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA254_1574==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA254_1574==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA254_1574==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA254_1574==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA254_1574==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA254_1574==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA254_1574==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA254_1574==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        input.seek(index254_1574);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA254_1575 = input.LA(1);
                        int index254_1575 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1575==RPAREN) ) {s = 2665;}
                        else if ( (LA254_1575==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA254_1575==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA254_1575==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA254_1575==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA254_1575==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA254_1575==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA254_1575==LT) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA254_1575==GT) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        else if ( (LA254_1575==LE) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA254_1575==GE) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA254_1575==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA254_1575==IS) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA254_1575==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        else if ( (LA254_1575==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA254_1575==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA254_1575==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA254_1575==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA254_1575==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA254_1575==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA254_1575==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA254_1575==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA254_1575==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA254_1575==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA254_1575==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA254_1575==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        input.seek(index254_1575);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA254_1651 = input.LA(1);
                        int index254_1651 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1651==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA254_1651==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA254_1651==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA254_1651==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA254_1651==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA254_1651==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA254_1651==LT) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA254_1651==GT) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA254_1651==LE) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        else if ( (LA254_1651==GE) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA254_1651==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA254_1651==IS) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA254_1651==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA254_1651==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA254_1651==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA254_1651==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA254_1651==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA254_1651==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA254_1651==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA254_1651==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA254_1651==RPAREN) ) {s = 2711;}
                        else if ( (LA254_1651==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA254_1651==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA254_1651==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA254_1651==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA254_1651==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        input.seek(index254_1651);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA254_1652 = input.LA(1);
                        int index254_1652 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1652==RPAREN) ) {s = 2717;}
                        else if ( (LA254_1652==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA254_1652==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA254_1652==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA254_1652==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA254_1652==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA254_1652==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        else if ( (LA254_1652==LT) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA254_1652==GT) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        else if ( (LA254_1652==LE) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA254_1652==GE) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA254_1652==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA254_1652==IS) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA254_1652==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        else if ( (LA254_1652==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA254_1652==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA254_1652==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA254_1652==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA254_1652==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA254_1652==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA254_1652==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA254_1652==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA254_1652==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA254_1652==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA254_1652==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA254_1652==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        input.seek(index254_1652);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA254_1728 = input.LA(1);
                        int index254_1728 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1728==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA254_1728==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA254_1728==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA254_1728==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA254_1728==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA254_1728==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA254_1728==LT) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA254_1728==GT) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA254_1728==LE) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        else if ( (LA254_1728==GE) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA254_1728==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA254_1728==IS) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA254_1728==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA254_1728==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA254_1728==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA254_1728==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA254_1728==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA254_1728==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA254_1728==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA254_1728==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA254_1728==RPAREN) ) {s = 2763;}
                        else if ( (LA254_1728==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA254_1728==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA254_1728==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA254_1728==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA254_1728==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        input.seek(index254_1728);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA254_1729 = input.LA(1);
                        int index254_1729 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1729==RPAREN) ) {s = 2769;}
                        else if ( (LA254_1729==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA254_1729==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA254_1729==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA254_1729==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA254_1729==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA254_1729==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        else if ( (LA254_1729==LT) && (synpred3_EsperEPL2Grammar())) {s = 2776;}
                        else if ( (LA254_1729==GT) && (synpred3_EsperEPL2Grammar())) {s = 2777;}
                        else if ( (LA254_1729==LE) && (synpred3_EsperEPL2Grammar())) {s = 2778;}
                        else if ( (LA254_1729==GE) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA254_1729==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2780;}
                        else if ( (LA254_1729==IS) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA254_1729==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        else if ( (LA254_1729==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2783;}
                        else if ( (LA254_1729==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA254_1729==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        else if ( (LA254_1729==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2786;}
                        else if ( (LA254_1729==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2787;}
                        else if ( (LA254_1729==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2788;}
                        else if ( (LA254_1729==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2789;}
                        else if ( (LA254_1729==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA254_1729==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        else if ( (LA254_1729==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2792;}
                        else if ( (LA254_1729==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA254_1729==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        input.seek(index254_1729);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA254_1805 = input.LA(1);
                        int index254_1805 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1805==RPAREN) ) {s = 2795;}
                        else if ( (LA254_1805==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA254_1805==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA254_1805==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA254_1805==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA254_1805==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA254_1805==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        else if ( (LA254_1805==LT) && (synpred3_EsperEPL2Grammar())) {s = 2802;}
                        else if ( (LA254_1805==GT) && (synpred3_EsperEPL2Grammar())) {s = 2803;}
                        else if ( (LA254_1805==LE) && (synpred3_EsperEPL2Grammar())) {s = 2804;}
                        else if ( (LA254_1805==GE) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA254_1805==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2806;}
                        else if ( (LA254_1805==IS) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA254_1805==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        else if ( (LA254_1805==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2809;}
                        else if ( (LA254_1805==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA254_1805==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        else if ( (LA254_1805==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2812;}
                        else if ( (LA254_1805==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2813;}
                        else if ( (LA254_1805==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA254_1805==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA254_1805==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA254_1805==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        else if ( (LA254_1805==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2818;}
                        else if ( (LA254_1805==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA254_1805==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        input.seek(index254_1805);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA254_1806 = input.LA(1);
                        int index254_1806 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1806==RPAREN) ) {s = 2821;}
                        else if ( (LA254_1806==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA254_1806==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA254_1806==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA254_1806==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA254_1806==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA254_1806==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        else if ( (LA254_1806==LT) && (synpred3_EsperEPL2Grammar())) {s = 2828;}
                        else if ( (LA254_1806==GT) && (synpred3_EsperEPL2Grammar())) {s = 2829;}
                        else if ( (LA254_1806==LE) && (synpred3_EsperEPL2Grammar())) {s = 2830;}
                        else if ( (LA254_1806==GE) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA254_1806==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2832;}
                        else if ( (LA254_1806==IS) && (synpred3_EsperEPL2Grammar())) {s = 2833;}
                        else if ( (LA254_1806==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        else if ( (LA254_1806==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2835;}
                        else if ( (LA254_1806==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA254_1806==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        else if ( (LA254_1806==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2838;}
                        else if ( (LA254_1806==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2839;}
                        else if ( (LA254_1806==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA254_1806==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA254_1806==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA254_1806==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        else if ( (LA254_1806==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2844;}
                        else if ( (LA254_1806==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2845;}
                        else if ( (LA254_1806==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        input.seek(index254_1806);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA254_1873 = input.LA(1);
                        int index254_1873 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1873==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA254_1873==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA254_1873==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2849;}
                        else if ( (LA254_1873==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA254_1873==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA254_1873==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA254_1873==LT) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        else if ( (LA254_1873==GT) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        else if ( (LA254_1873==LE) && (synpred3_EsperEPL2Grammar())) {s = 2855;}
                        else if ( (LA254_1873==GE) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA254_1873==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA254_1873==IS) && (synpred3_EsperEPL2Grammar())) {s = 2858;}
                        else if ( (LA254_1873==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA254_1873==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        else if ( (LA254_1873==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2861;}
                        else if ( (LA254_1873==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA254_1873==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        else if ( (LA254_1873==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2864;}
                        else if ( (LA254_1873==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2865;}
                        else if ( (LA254_1873==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2866;}
                        else if ( (LA254_1873==RPAREN) ) {s = 2867;}
                        else if ( (LA254_1873==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA254_1873==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        else if ( (LA254_1873==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2870;}
                        else if ( (LA254_1873==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        else if ( (LA254_1873==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        input.seek(index254_1873);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA254_1874 = input.LA(1);
                        int index254_1874 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1874==RPAREN) ) {s = 2873;}
                        else if ( (LA254_1874==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2874;}
                        else if ( (LA254_1874==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA254_1874==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA254_1874==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA254_1874==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA254_1874==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        else if ( (LA254_1874==LT) && (synpred3_EsperEPL2Grammar())) {s = 2880;}
                        else if ( (LA254_1874==GT) && (synpred3_EsperEPL2Grammar())) {s = 2881;}
                        else if ( (LA254_1874==LE) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA254_1874==GE) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA254_1874==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2884;}
                        else if ( (LA254_1874==IS) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA254_1874==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        else if ( (LA254_1874==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2887;}
                        else if ( (LA254_1874==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA254_1874==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        else if ( (LA254_1874==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2890;}
                        else if ( (LA254_1874==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2891;}
                        else if ( (LA254_1874==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA254_1874==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA254_1874==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA254_1874==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        else if ( (LA254_1874==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2896;}
                        else if ( (LA254_1874==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2897;}
                        else if ( (LA254_1874==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        input.seek(index254_1874);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA254_1955 = input.LA(1);
                        int index254_1955 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1955==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA254_1955==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2900;}
                        else if ( (LA254_1955==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA254_1955==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA254_1955==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA254_1955==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA254_1955==LT) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        else if ( (LA254_1955==GT) && (synpred3_EsperEPL2Grammar())) {s = 2906;}
                        else if ( (LA254_1955==LE) && (synpred3_EsperEPL2Grammar())) {s = 2907;}
                        else if ( (LA254_1955==GE) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA254_1955==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA254_1955==IS) && (synpred3_EsperEPL2Grammar())) {s = 2910;}
                        else if ( (LA254_1955==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA254_1955==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        else if ( (LA254_1955==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2913;}
                        else if ( (LA254_1955==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA254_1955==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        else if ( (LA254_1955==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2916;}
                        else if ( (LA254_1955==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        else if ( (LA254_1955==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA254_1955==RPAREN) ) {s = 2919;}
                        else if ( (LA254_1955==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        else if ( (LA254_1955==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2921;}
                        else if ( (LA254_1955==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2922;}
                        else if ( (LA254_1955==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2923;}
                        else if ( (LA254_1955==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2924;}
                        input.seek(index254_1955);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA254_1956 = input.LA(1);
                        int index254_1956 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_1956==RPAREN) ) {s = 2925;}
                        else if ( (LA254_1956==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2926;}
                        else if ( (LA254_1956==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA254_1956==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA254_1956==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA254_1956==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA254_1956==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        else if ( (LA254_1956==LT) && (synpred3_EsperEPL2Grammar())) {s = 2932;}
                        else if ( (LA254_1956==GT) && (synpred3_EsperEPL2Grammar())) {s = 2933;}
                        else if ( (LA254_1956==LE) && (synpred3_EsperEPL2Grammar())) {s = 2934;}
                        else if ( (LA254_1956==GE) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA254_1956==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2936;}
                        else if ( (LA254_1956==IS) && (synpred3_EsperEPL2Grammar())) {s = 2937;}
                        else if ( (LA254_1956==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        else if ( (LA254_1956==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA254_1956==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA254_1956==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        else if ( (LA254_1956==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2942;}
                        else if ( (LA254_1956==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2943;}
                        else if ( (LA254_1956==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA254_1956==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        else if ( (LA254_1956==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA254_1956==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA254_1956==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2948;}
                        else if ( (LA254_1956==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2949;}
                        else if ( (LA254_1956==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        input.seek(index254_1956);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA254_2026 = input.LA(1);
                        int index254_2026 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_2026==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA254_2026==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA254_2026==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2953;}
                        else if ( (LA254_2026==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA254_2026==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA254_2026==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA254_2026==LT) && (synpred3_EsperEPL2Grammar())) {s = 2957;}
                        else if ( (LA254_2026==GT) && (synpred3_EsperEPL2Grammar())) {s = 2958;}
                        else if ( (LA254_2026==LE) && (synpred3_EsperEPL2Grammar())) {s = 2959;}
                        else if ( (LA254_2026==GE) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA254_2026==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA254_2026==IS) && (synpred3_EsperEPL2Grammar())) {s = 2962;}
                        else if ( (LA254_2026==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2963;}
                        else if ( (LA254_2026==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2964;}
                        else if ( (LA254_2026==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2965;}
                        else if ( (LA254_2026==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA254_2026==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        else if ( (LA254_2026==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2968;}
                        else if ( (LA254_2026==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2969;}
                        else if ( (LA254_2026==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2970;}
                        else if ( (LA254_2026==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2971;}
                        else if ( (LA254_2026==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2972;}
                        else if ( (LA254_2026==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2973;}
                        else if ( (LA254_2026==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2974;}
                        else if ( (LA254_2026==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2975;}
                        else if ( (LA254_2026==RPAREN) ) {s = 14;}
                        input.seek(index254_2026);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA254_2027 = input.LA(1);
                        int index254_2027 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_2027==RPAREN) ) {s = 14;}
                        else if ( (LA254_2027==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2978;}
                        else if ( (LA254_2027==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2979;}
                        else if ( (LA254_2027==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2980;}
                        else if ( (LA254_2027==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2981;}
                        else if ( (LA254_2027==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2982;}
                        else if ( (LA254_2027==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2983;}
                        else if ( (LA254_2027==LT) && (synpred3_EsperEPL2Grammar())) {s = 2984;}
                        else if ( (LA254_2027==GT) && (synpred3_EsperEPL2Grammar())) {s = 2985;}
                        else if ( (LA254_2027==LE) && (synpred3_EsperEPL2Grammar())) {s = 2986;}
                        else if ( (LA254_2027==GE) && (synpred3_EsperEPL2Grammar())) {s = 2987;}
                        else if ( (LA254_2027==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2988;}
                        else if ( (LA254_2027==IS) && (synpred3_EsperEPL2Grammar())) {s = 2989;}
                        else if ( (LA254_2027==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2990;}
                        else if ( (LA254_2027==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2991;}
                        else if ( (LA254_2027==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2992;}
                        else if ( (LA254_2027==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2993;}
                        else if ( (LA254_2027==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2994;}
                        else if ( (LA254_2027==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2995;}
                        else if ( (LA254_2027==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2996;}
                        else if ( (LA254_2027==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2997;}
                        else if ( (LA254_2027==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2998;}
                        else if ( (LA254_2027==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2999;}
                        else if ( (LA254_2027==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3000;}
                        else if ( (LA254_2027==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3001;}
                        else if ( (LA254_2027==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3002;}
                        input.seek(index254_2027);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA254_2108 = input.LA(1);
                        int index254_2108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_2108==RPAREN) ) {s = 3003;}
                        else if ( (LA254_2108==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3004;}
                        else if ( (LA254_2108==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3005;}
                        else if ( (LA254_2108==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3006;}
                        else if ( (LA254_2108==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3007;}
                        else if ( (LA254_2108==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3008;}
                        else if ( (LA254_2108==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3009;}
                        else if ( (LA254_2108==LT) && (synpred3_EsperEPL2Grammar())) {s = 3010;}
                        else if ( (LA254_2108==GT) && (synpred3_EsperEPL2Grammar())) {s = 3011;}
                        else if ( (LA254_2108==LE) && (synpred3_EsperEPL2Grammar())) {s = 3012;}
                        else if ( (LA254_2108==GE) && (synpred3_EsperEPL2Grammar())) {s = 3013;}
                        else if ( (LA254_2108==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3014;}
                        else if ( (LA254_2108==IS) && (synpred3_EsperEPL2Grammar())) {s = 3015;}
                        else if ( (LA254_2108==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3016;}
                        else if ( (LA254_2108==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3017;}
                        else if ( (LA254_2108==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3018;}
                        else if ( (LA254_2108==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3019;}
                        else if ( (LA254_2108==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3020;}
                        else if ( (LA254_2108==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3021;}
                        else if ( (LA254_2108==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3022;}
                        else if ( (LA254_2108==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3023;}
                        else if ( (LA254_2108==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3024;}
                        else if ( (LA254_2108==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3025;}
                        else if ( (LA254_2108==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3026;}
                        else if ( (LA254_2108==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3027;}
                        input.seek(index254_2108);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA254_2109 = input.LA(1);
                        int index254_2109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_2109==RPAREN) ) {s = 3028;}
                        else if ( (LA254_2109==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3029;}
                        else if ( (LA254_2109==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3030;}
                        else if ( (LA254_2109==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3031;}
                        else if ( (LA254_2109==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3032;}
                        else if ( (LA254_2109==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3033;}
                        else if ( (LA254_2109==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3034;}
                        else if ( (LA254_2109==LT) && (synpred3_EsperEPL2Grammar())) {s = 3035;}
                        else if ( (LA254_2109==GT) && (synpred3_EsperEPL2Grammar())) {s = 3036;}
                        else if ( (LA254_2109==LE) && (synpred3_EsperEPL2Grammar())) {s = 3037;}
                        else if ( (LA254_2109==GE) && (synpred3_EsperEPL2Grammar())) {s = 3038;}
                        else if ( (LA254_2109==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3039;}
                        else if ( (LA254_2109==IS) && (synpred3_EsperEPL2Grammar())) {s = 3040;}
                        else if ( (LA254_2109==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3041;}
                        else if ( (LA254_2109==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3042;}
                        else if ( (LA254_2109==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3043;}
                        else if ( (LA254_2109==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3044;}
                        else if ( (LA254_2109==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3045;}
                        else if ( (LA254_2109==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3046;}
                        else if ( (LA254_2109==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3047;}
                        else if ( (LA254_2109==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3048;}
                        else if ( (LA254_2109==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3049;}
                        else if ( (LA254_2109==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3050;}
                        else if ( (LA254_2109==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3051;}
                        else if ( (LA254_2109==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3052;}
                        input.seek(index254_2109);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA254_2183 = input.LA(1);
                        int index254_2183 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_2183==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3053;}
                        else if ( (LA254_2183==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3054;}
                        else if ( (LA254_2183==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3055;}
                        else if ( (LA254_2183==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3056;}
                        else if ( (LA254_2183==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3057;}
                        else if ( (LA254_2183==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3058;}
                        else if ( (LA254_2183==LT) && (synpred3_EsperEPL2Grammar())) {s = 3059;}
                        else if ( (LA254_2183==GT) && (synpred3_EsperEPL2Grammar())) {s = 3060;}
                        else if ( (LA254_2183==LE) && (synpred3_EsperEPL2Grammar())) {s = 3061;}
                        else if ( (LA254_2183==GE) && (synpred3_EsperEPL2Grammar())) {s = 3062;}
                        else if ( (LA254_2183==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3063;}
                        else if ( (LA254_2183==IS) && (synpred3_EsperEPL2Grammar())) {s = 3064;}
                        else if ( (LA254_2183==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3065;}
                        else if ( (LA254_2183==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3066;}
                        else if ( (LA254_2183==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3067;}
                        else if ( (LA254_2183==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3068;}
                        else if ( (LA254_2183==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3069;}
                        else if ( (LA254_2183==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3070;}
                        else if ( (LA254_2183==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3071;}
                        else if ( (LA254_2183==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3072;}
                        else if ( (LA254_2183==AS) && (synpred3_EsperEPL2Grammar())) {s = 3073;}
                        else if ( (LA254_2183==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3074;}
                        else if ( (LA254_2183==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3075;}
                        else if ( (LA254_2183==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3076;}
                        else if ( (LA254_2183==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3077;}
                        else if ( (LA254_2183==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3078;}
                        else if ( (LA254_2183==RPAREN) ) {s = 14;}
                        input.seek(index254_2183);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA254_2184 = input.LA(1);
                        int index254_2184 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_2184==RPAREN) ) {s = 14;}
                        else if ( (LA254_2184==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3081;}
                        else if ( (LA254_2184==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3082;}
                        else if ( (LA254_2184==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3083;}
                        else if ( (LA254_2184==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3084;}
                        else if ( (LA254_2184==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3085;}
                        else if ( (LA254_2184==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3086;}
                        else if ( (LA254_2184==LT) && (synpred3_EsperEPL2Grammar())) {s = 3087;}
                        else if ( (LA254_2184==GT) && (synpred3_EsperEPL2Grammar())) {s = 3088;}
                        else if ( (LA254_2184==LE) && (synpred3_EsperEPL2Grammar())) {s = 3089;}
                        else if ( (LA254_2184==GE) && (synpred3_EsperEPL2Grammar())) {s = 3090;}
                        else if ( (LA254_2184==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3091;}
                        else if ( (LA254_2184==IS) && (synpred3_EsperEPL2Grammar())) {s = 3092;}
                        else if ( (LA254_2184==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3093;}
                        else if ( (LA254_2184==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3094;}
                        else if ( (LA254_2184==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3095;}
                        else if ( (LA254_2184==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3096;}
                        else if ( (LA254_2184==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3097;}
                        else if ( (LA254_2184==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3098;}
                        else if ( (LA254_2184==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3099;}
                        else if ( (LA254_2184==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3100;}
                        else if ( (LA254_2184==AS) && (synpred3_EsperEPL2Grammar())) {s = 3101;}
                        else if ( (LA254_2184==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3102;}
                        else if ( (LA254_2184==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3103;}
                        else if ( (LA254_2184==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3104;}
                        else if ( (LA254_2184==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3105;}
                        else if ( (LA254_2184==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3106;}
                        input.seek(index254_2184);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA254_2260 = input.LA(1);
                        int index254_2260 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_2260==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3107;}
                        else if ( (LA254_2260==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3108;}
                        else if ( (LA254_2260==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3109;}
                        else if ( (LA254_2260==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3110;}
                        else if ( (LA254_2260==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3111;}
                        else if ( (LA254_2260==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3112;}
                        else if ( (LA254_2260==LT) && (synpred3_EsperEPL2Grammar())) {s = 3113;}
                        else if ( (LA254_2260==GT) && (synpred3_EsperEPL2Grammar())) {s = 3114;}
                        else if ( (LA254_2260==LE) && (synpred3_EsperEPL2Grammar())) {s = 3115;}
                        else if ( (LA254_2260==GE) && (synpred3_EsperEPL2Grammar())) {s = 3116;}
                        else if ( (LA254_2260==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3117;}
                        else if ( (LA254_2260==IS) && (synpred3_EsperEPL2Grammar())) {s = 3118;}
                        else if ( (LA254_2260==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3119;}
                        else if ( (LA254_2260==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3120;}
                        else if ( (LA254_2260==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3121;}
                        else if ( (LA254_2260==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3122;}
                        else if ( (LA254_2260==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3123;}
                        else if ( (LA254_2260==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3124;}
                        else if ( (LA254_2260==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3125;}
                        else if ( (LA254_2260==RPAREN) ) {s = 3126;}
                        else if ( (LA254_2260==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3127;}
                        else if ( (LA254_2260==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3128;}
                        else if ( (LA254_2260==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3129;}
                        else if ( (LA254_2260==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3130;}
                        else if ( (LA254_2260==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3131;}
                        input.seek(index254_2260);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA254_2261 = input.LA(1);
                        int index254_2261 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_2261==RPAREN) ) {s = 3132;}
                        else if ( (LA254_2261==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3133;}
                        else if ( (LA254_2261==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3134;}
                        else if ( (LA254_2261==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3135;}
                        else if ( (LA254_2261==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3136;}
                        else if ( (LA254_2261==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3137;}
                        else if ( (LA254_2261==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3138;}
                        else if ( (LA254_2261==LT) && (synpred3_EsperEPL2Grammar())) {s = 3139;}
                        else if ( (LA254_2261==GT) && (synpred3_EsperEPL2Grammar())) {s = 3140;}
                        else if ( (LA254_2261==LE) && (synpred3_EsperEPL2Grammar())) {s = 3141;}
                        else if ( (LA254_2261==GE) && (synpred3_EsperEPL2Grammar())) {s = 3142;}
                        else if ( (LA254_2261==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3143;}
                        else if ( (LA254_2261==IS) && (synpred3_EsperEPL2Grammar())) {s = 3144;}
                        else if ( (LA254_2261==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3145;}
                        else if ( (LA254_2261==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3146;}
                        else if ( (LA254_2261==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3147;}
                        else if ( (LA254_2261==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3148;}
                        else if ( (LA254_2261==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3149;}
                        else if ( (LA254_2261==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3150;}
                        else if ( (LA254_2261==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3151;}
                        else if ( (LA254_2261==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3152;}
                        else if ( (LA254_2261==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3153;}
                        else if ( (LA254_2261==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3154;}
                        else if ( (LA254_2261==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3155;}
                        else if ( (LA254_2261==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3156;}
                        input.seek(index254_2261);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA254_2399 = input.LA(1);
                        int index254_2399 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2399);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA254_2405 = input.LA(1);
                        int index254_2405 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2405);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA254_2451 = input.LA(1);
                        int index254_2451 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2451);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA254_2457 = input.LA(1);
                        int index254_2457 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2457);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA254_2483 = input.LA(1);
                        int index254_2483 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2483);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA254_2509 = input.LA(1);
                        int index254_2509 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2509);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA254_2607 = input.LA(1);
                        int index254_2607 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2607);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA254_2613 = input.LA(1);
                        int index254_2613 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2613);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA254_2639 = input.LA(1);
                        int index254_2639 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2639);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA254_2665 = input.LA(1);
                        int index254_2665 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2665);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA254_2711 = input.LA(1);
                        int index254_2711 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2711);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA254_2717 = input.LA(1);
                        int index254_2717 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2717);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA254_2763 = input.LA(1);
                        int index254_2763 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2763);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA254_2769 = input.LA(1);
                        int index254_2769 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2769);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA254_2795 = input.LA(1);
                        int index254_2795 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2795);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA254_2821 = input.LA(1);
                        int index254_2821 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2821);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA254_2867 = input.LA(1);
                        int index254_2867 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2867);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA254_2873 = input.LA(1);
                        int index254_2873 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2873);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA254_2919 = input.LA(1);
                        int index254_2919 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2919);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA254_2925 = input.LA(1);
                        int index254_2925 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_2925);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA254_3003 = input.LA(1);
                        int index254_3003 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_3003);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA254_3028 = input.LA(1);
                        int index254_3028 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_3028);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA254_3126 = input.LA(1);
                        int index254_3126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_3126);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA254_3132 = input.LA(1);
                        int index254_3132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3156;}
                        input.seek(index254_3132);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1971 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000834L});
    public static final BitSet FOLLOW_expressionDecl_in_startPatternExpressionRule1975 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000834L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1981 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule2000 = new BitSet(new long[]{0x004002000800E010L,0x4800800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000834L});
    public static final BitSet FOLLOW_expressionDecl_in_startEPLExpressionRule2004 = new BitSet(new long[]{0x004002000800E010L,0x4800800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000834L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule2010 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule2014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule2043 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule2047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jsonvalue_in_startJsonValueRule2060 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startJsonValueRule2064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPRESSIONDECL_in_expressionDecl2083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000014L});
    public static final BitSet FOLLOW_classIdentifier_in_expressionDecl2085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000014L});
    public static final BitSet FOLLOW_LBRACK_in_expressionDecl2091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RBRACK_in_expressionDecl2093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_expressionDialect_in_expressionDecl2097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_expressionDecl2102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000124L});
    public static final BitSet FOLLOW_LPAREN_in_expressionDecl2105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000050L});
    public static final BitSet FOLLOW_columnList_in_expressionDecl2107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_expressionDecl2110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000124L});
    public static final BitSet FOLLOW_expressionDef_in_expressionDecl2114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_expressionDialect2157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_expressionDialect2159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_expressionDef2181 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_expressionDef2183 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_expressionDef2186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RCURLY_in_expressionDef2188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_expressionDef2204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_stringconstant_in_expressionDef2206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RBRACK_in_expressionDef2208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_expressionLambdaDecl2231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_expressionLambdaDecl2236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_columnList_in_expressionLambdaDecl2238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_expressionLambdaDecl2240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_GOES_in_expressionLambdaDecl2244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_annotationNoEnum2279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum2281 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum2285 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480E00950L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum2289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum2293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum2298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_annotationEnum2339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum2341 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum2345 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E00950L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum2349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum2353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum2358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2399 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum2402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2405 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2426 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum2429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2432 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum2455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum2457 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480E00900L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum2496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum2498 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E00910L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum2500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum2531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2630 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480E01B00L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001200L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2636 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480E00900L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001200L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2678 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E01B10L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001200L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2684 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E00910L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001200L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_contextExpr_in_eplExpression2729 = new BitSet(new long[]{0x0040020008000010L,0x4000800000000000L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2736 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2741 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2746 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2751 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2756 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createContextExpr_in_eplExpression2761 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2766 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2771 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createDataflow_in_eplExpression2776 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTEXT_in_contextExpr2792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_contextExpr2796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2820 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2823 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2829 = new BitSet(new long[]{0xB83841E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2832 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2836 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2839 = new BitSet(new long[]{0x0104300000010002L,0x0001200000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2843 = new BitSet(new long[]{0x0104300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2849 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2852 = new BitSet(new long[]{0x0104300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2859 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2862 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2865 = new BitSet(new long[]{0x0104200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2872 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2875 = new BitSet(new long[]{0x0104000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2882 = new BitSet(new long[]{0x0130800080005000L,0x0020200000440000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2885 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2892 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2895 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2898 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480200010L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2925 = new BitSet(new long[]{0x0040000008000000L,0x02008000000A0000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2934 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2937 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onMergeExpr_in_onExpr2955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr3000 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr3004 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr3008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr3012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr3018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr3049 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr3051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr3053 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_AS_in_updateExpr3056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr3060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr3066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_updateExpr3072 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr3074 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr3077 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr3079 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr3087 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr3089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_onMergeExpr3124 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_INTO_in_onMergeExpr3126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr3131 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_AS_in_onMergeExpr3134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr3138 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr3144 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_WHERE_in_onMergeExpr3151 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_whereClause_in_onMergeExpr3153 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_mergeItem_in_onMergeExpr3161 = new BitSet(new long[]{0x0000000080030002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_mergeMatched_in_mergeItem3195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeUnmatched_in_mergeItem3199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched3212 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched3214 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeMatched3217 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_mergeMatched3219 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeMatchedItem_in_mergeMatched3223 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeMatchedItem3249 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatchedItem3264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_mergeMatchedItem3266 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem3268 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatchedItem3271 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem3273 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem3279 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem3281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_mergeMatchedItem3293 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem3296 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem3298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeMatchedItem3309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched3366 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched3368 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched3370 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeUnmatched3373 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_mergeUnmatched3375 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3379 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatchedItem3406 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeUnmatchedItem3409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_mergeInsert3424 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_INTO_in_mergeInsert3427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_mergeInsert3429 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_mergeInsert3434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_columnList_in_mergeInsert3436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_mergeInsert3438 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeInsert3442 = new BitSet(new long[]{0xB83841E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_selectionList_in_mergeInsert3444 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeInsert3447 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_whereClause_in_mergeInsert3449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr3495 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr3497 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr3503 = new BitSet(new long[]{0xB83841E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr3505 = new BitSet(new long[]{0xB83841E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr3508 = new BitSet(new long[]{0x0100300400010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr3512 = new BitSet(new long[]{0x0100300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr3518 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr3520 = new BitSet(new long[]{0x0100300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr3529 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3531 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr3533 = new BitSet(new long[]{0x0100200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr3540 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr3542 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr3549 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3551 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr3553 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480200010L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr3562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr3622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3629 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr3632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr3648 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3650 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr3653 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3655 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr3662 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr3664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr3715 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr3717 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr3721 = new BitSet(new long[]{0xB83841E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr3723 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr3728 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr3730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert3761 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3814 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3818 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3823 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3865 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3867 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3870 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3872 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3899 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3930 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3971 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3977 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004030L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3982 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004030L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3987 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004030L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3996 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000030L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr4000 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000030L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr4004 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000030L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr4019 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr4034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr4036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr4038 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr4055 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr4058 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr4060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter4147 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E08010L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter4150 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter4152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter4157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr4170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr4172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr4176 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr4178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr4182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr4184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_createIndexColumnList_in_createIndexExpr4186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr4188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList4217 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_createIndexColumnList4220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList4222 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn4249 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn4251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr4276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr4280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr4283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr4285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr4289 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr4292 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr4294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList4340 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList4343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList4345 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement4376 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement4381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement4383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4426 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList4429 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E08010L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4431 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement4460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement4472 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement4500 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr4531 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4535 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_createSchemaDef_in_createSchemaExpr4538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaDef4563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaDef4567 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000008030L});
    public static final BitSet FOLLOW_AS_in_createSchemaDef4569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000008030L});
    public static final BitSet FOLLOW_variantList_in_createSchemaDef4582 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaDef4593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000050L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaDef4595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaDef4598 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_createSchemaQual_in_createSchemaDef4607 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_CREATE_in_createDataflow4643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DATAFLOW_in_createDataflow4645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createDataflow4649 = new BitSet(new long[]{0x0000000008020010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000810L});
    public static final BitSet FOLLOW_AS_in_createDataflow4651 = new BitSet(new long[]{0x0000000008020010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000810L});
    public static final BitSet FOLLOW_gopList_in_createDataflow4654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gop_in_gopList4678 = new BitSet(new long[]{0x0000000008020012L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000810L});
    public static final BitSet FOLLOW_gop_in_gopList4680 = new BitSet(new long[]{0x0000000008020012L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000810L});
    public static final BitSet FOLLOW_annotationEnum_in_gop4693 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000810L});
    public static final BitSet FOLLOW_IDENT_in_gop4699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010120L});
    public static final BitSet FOLLOW_SELECT_in_gop4705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010120L});
    public static final BitSet FOLLOW_gopParams_in_gop4708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010100L});
    public static final BitSet FOLLOW_gopOut_in_gop4711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LCURLY_in_gop4714 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001210L});
    public static final BitSet FOLLOW_gopDetail_in_gop4716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001200L});
    public static final BitSet FOLLOW_COMMA_in_gop4719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RCURLY_in_gop4722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSchemaExpr_in_gop4755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_gop4757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_gopParams4771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000030L});
    public static final BitSet FOLLOW_gopParamsItemList_in_gopParams4773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_gopParams4775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gopParamsItem_in_gopParamsItemList4797 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_gopParamsItemList4800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000030L});
    public static final BitSet FOLLOW_gopParamsItem_in_gopParamsItemList4803 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_classIdentifier_in_gopParamsItem4822 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_gopParamsItemMany_in_gopParamsItem4826 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_gopParamsItemAs_in_gopParamsItem4829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_gopParamsItemMany4859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_gopParamsItemMany4862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_gopParamsItemMany4865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_gopParamsItemMany4868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_gopParamsItemMany4871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_gopParamsItemAs4883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_gopParamsItemAs4887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_gopOut4909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_gopOutItem_in_gopOut4911 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_gopOut4914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_gopOutItem_in_gopOut4916 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_classIdentifier_in_gopOutItem4942 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_gopOutTypeList_in_gopOutItem4944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_gopOutTypeList4971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000080010L});
    public static final BitSet FOLLOW_gopOutTypeParam_in_gopOutTypeList4974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041000L});
    public static final BitSet FOLLOW_COMMA_in_gopOutTypeList4977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000080010L});
    public static final BitSet FOLLOW_gopOutTypeParam_in_gopOutTypeList4980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041000L});
    public static final BitSet FOLLOW_GT_in_gopOutTypeList4984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gopOutTypeItem_in_gopOutTypeParam4998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_gopOutTypeParam5004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_gopOutTypeItem5031 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_gopOutTypeList_in_gopOutTypeItem5033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gopConfig_in_gopDetail5045 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_gopDetail5048 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_gopConfig_in_gopDetail5050 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SELECT_in_gopConfig5074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002080L});
    public static final BitSet FOLLOW_COLON_in_gopConfig5077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_EQUALS_in_gopConfig5079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_gopConfig5082 = new BitSet(new long[]{0x0040000008000000L});
    public static final BitSet FOLLOW_selectExpr_in_gopConfig5084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_gopConfig5086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_gopConfig5103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002080L});
    public static final BitSet FOLLOW_COLON_in_gopConfig5106 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80134L});
    public static final BitSet FOLLOW_EQUALS_in_gopConfig5108 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80134L});
    public static final BitSet FOLLOW_expression_in_gopConfig5112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jsonobject_in_gopConfig5116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jsonarray_in_gopConfig5120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamFilterExpression5153 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_streamFilterExpression5156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_viewExpression_in_streamFilterExpression5158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_streamFilterExpression5161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_viewExpression_in_streamFilterExpression5163 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_CREATE_in_createContextExpr5179 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_CONTEXT_in_createContextExpr5181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createContextExpr5185 = new BitSet(new long[]{0x0000100000420000L,0xE008000000000000L});
    public static final BitSet FOLLOW_AS_in_createContextExpr5187 = new BitSet(new long[]{0x0000100000420000L,0xE008000000000000L});
    public static final BitSet FOLLOW_createContextDetail_in_createContextExpr5190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createContextChoice_in_createContextDetail5214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_contextContextNested_in_createContextDetail5219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_createContextDetail5221 = new BitSet(new long[]{0x0000100000420000L,0xE008000000000000L});
    public static final BitSet FOLLOW_contextContextNested_in_createContextDetail5223 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_createContextDetail5226 = new BitSet(new long[]{0x0000100000420000L,0xE008000000000000L});
    public static final BitSet FOLLOW_contextContextNested_in_createContextDetail5228 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CONTEXT_in_contextContextNested5254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_contextContextNested5258 = new BitSet(new long[]{0x0000100000420000L,0xA008000000000000L});
    public static final BitSet FOLLOW_AS_in_contextContextNested5260 = new BitSet(new long[]{0x0000100000400000L,0xA008000000000000L});
    public static final BitSet FOLLOW_createContextChoice_in_contextContextNested5263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_START_in_createContextChoice5288 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000030L});
    public static final BitSet FOLLOW_createContextRangePoint_in_createContextChoice5290 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_createContextChoice5292 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000030L});
    public static final BitSet FOLLOW_createContextRangePoint_in_createContextChoice5294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INITIATED_in_createContextChoice5311 = new BitSet(new long[]{0x0000080000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000030L});
    public static final BitSet FOLLOW_BY_in_createContextChoice5314 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000030L});
    public static final BitSet FOLLOW_createContextRangePoint_in_createContextChoice5318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_createContextChoice5320 = new BitSet(new long[]{0x0000080000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000030L});
    public static final BitSet FOLLOW_BY_in_createContextChoice5323 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000030L});
    public static final BitSet FOLLOW_createContextRangePoint_in_createContextChoice5327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_createContextChoice5344 = new BitSet(new long[]{0x803809E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_BY_in_createContextChoice5347 = new BitSet(new long[]{0x803809E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_createContextPartitionItem_in_createContextChoice5351 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_createContextChoice5354 = new BitSet(new long[]{0x803809E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_createContextPartitionItem_in_createContextChoice5356 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_createContextGroupItem_in_createContextChoice5375 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_createContextChoice5378 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_createContextGroupItem_in_createContextChoice5380 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_FROM_in_createContextChoice5384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextChoice5386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_createContextChoice5404 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_BY_in_createContextChoice5407 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_createContextCoalesceItem_in_createContextChoice5411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001010L});
    public static final BitSet FOLLOW_COMMA_in_createContextChoice5414 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_createContextCoalesceItem_in_createContextChoice5416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001010L});
    public static final BitSet FOLLOW_IDENT_in_createContextChoice5422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480200000L});
    public static final BitSet FOLLOW_number_in_createContextChoice5424 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createContextChoice5429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createContextFilter_in_createContextRangePoint5463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_createContextRangePoint5470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ATCHAR_in_createContextRangePoint5473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createContextRangePoint5477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_createContextRangePoint5496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_createContextRangePoint5501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_timePeriod_in_createContextRangePoint5503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextFilter5523 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_AS_in_createContextFilter5526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createContextFilter5531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createContextPartitionItem5558 = new BitSet(new long[]{0x0000000400001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_createContextPartitionItem5562 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_COMMA_in_createContextPartitionItem5564 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_eventProperty_in_createContextPartitionItem5567 = new BitSet(new long[]{0x0000000400001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_FROM_in_createContextPartitionItem5571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextPartitionItem5573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_createContextCoalesceItem5599 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createContextCoalesceItem5601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextCoalesceItem5603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_createContextGroupItem5627 = new BitSet(new long[]{0x803809E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_BY_in_createContextGroupItem5629 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_createContextGroupItem5632 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createContextGroupItem5634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_createContextGroupItem5638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaQual5668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_columnList_in_createSchemaQual5670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList5696 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_variantList5699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000008010L});
    public static final BitSet FOLLOW_variantListElement_in_variantList5701 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement5728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement5734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr5759 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr5765 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr5769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_insertIntoExpr5771 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr5774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr5776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr5778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList5811 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_columnList5814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_columnList5816 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause5854 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause5857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause5861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin5875 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin5878 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList5892 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList5895 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin5938 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin5942 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin5946 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin5949 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin5970 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin5984 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin5986 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin5988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent6066 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent6069 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent6072 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent6075 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair6090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair6092 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair6095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause6117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause6153 = new BitSet(new long[]{0xB83841E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause6159 = new BitSet(new long[]{0xB83841E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause6165 = new BitSet(new long[]{0xB83841E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause6171 = new BitSet(new long[]{0xB83841E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_selectionList_in_selectClause6174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList6205 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList6208 = new BitSet(new long[]{0xB83841E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList6211 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement6237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement6255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement6260 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement6263 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement6267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector6323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector6325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector6327 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector6330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector6334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression6364 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004010L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression6368 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004010L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression6372 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004010L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression6376 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004010L});
    public static final BitSet FOLLOW_DOT_in_streamExpression6383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression6385 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004010L});
    public static final BitSet FOLLOW_DOT_in_streamExpression6388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression6390 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004010L});
    public static final BitSet FOLLOW_AS_in_streamExpression6397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression6401 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression6407 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression6414 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression6421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression6425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr6481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_forExpr6485 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr6488 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80170L});
    public static final BitSet FOLLOW_expressionList_in_forExpr6490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr6493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog6529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog6543 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog6549 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog6556 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog6561 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog6567 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog6573 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog6579 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog6585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog6592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy6629 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy6631 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy6633 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy6636 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy6638 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures6667 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures6669 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures6672 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures6674 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem6699 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem6702 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem6707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection6738 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection6741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern6756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern6758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern6760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern6762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip6784 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6788 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6792 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6796 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6800 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval6840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval6842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration6868 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration6873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration6875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat6908 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary6933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary6939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested6951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested6953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested6955 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000288000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested6960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested6966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested6972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom7011 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000288000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom7017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom7023 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom7029 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom7035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine7079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine7081 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine7084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine7086 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem7113 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem7115 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem7117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression7142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression7144 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000034L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression7146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression7148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression7181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression7183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression7187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression7189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression7194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression7200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression7204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression7209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression7215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression7220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression7271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression7273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression7275 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression7278 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80170L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression7280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression7283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression7336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_viewExpression7338 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression7343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_MERGE_in_viewExpression7347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression7350 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88174L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression7352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression7355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr7415 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr7418 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr7420 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr7455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr7458 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr7460 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement7485 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement7490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement7494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause7532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit7570 = new BitSet(new long[]{0x0030800080005002L,0x0000000000440000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit7585 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit7589 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit7593 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit7597 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit7628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit7654 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_number_in_outputLimit7665 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit7671 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit7677 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AT_in_outputLimit7708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit7710 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit7727 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_outputLimit7729 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit7732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit7734 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit7754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_outputLimit7756 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outputLimit7759 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_outputLimit7761 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit7766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit7768 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_outputLimitAndTerm_in_outputLimit7801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outputLimitAndTerm7975 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_WHEN_in_outputLimitAndTerm7977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_outputLimitAndTerm7979 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outputLimitAndTerm7982 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_outputLimitAndTerm7984 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimitAndTerm7989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimitAndTerm7991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter8021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter8024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter8028 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter8030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit8076 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit8082 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit8089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480200010L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit8095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480200010L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit8101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit8107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet8159 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88134L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet8161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet8163 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88134L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet8165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet8167 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88134L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet8169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet8171 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88134L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet8173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet8175 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88134L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet8177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet8180 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88134L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet8182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet8186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause8216 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_whenClause8219 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause8221 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_whenClause8224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause8237 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_elseClause8240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression8253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression8267 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression8270 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression8273 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression8276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression8287 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_caseExpression8289 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression8291 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression8294 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression8297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression8321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression8332 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression8337 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression8339 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression8371 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression8376 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression8378 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression8410 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000003100000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression8415 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression8418 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression8421 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression8425 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000003100000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression8440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression8446 = new BitSet(new long[]{0x803801E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression8449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression8462 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000C002000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression8475 = new BitSet(new long[]{0x803B81E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression8493 = new BitSet(new long[]{0x803B81E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression8507 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression8509 = new BitSet(new long[]{0x803B81E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression8523 = new BitSet(new long[]{0x803B81E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression8537 = new BitSet(new long[]{0x803B81E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression8567 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000C002000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression8584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression8590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression8596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression8602 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80170L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression8604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression8607 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000C002000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression8612 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000C002000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression8772 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000030060000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression8804 = new BitSet(new long[]{0x803B81E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression8808 = new BitSet(new long[]{0x803B81E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression8812 = new BitSet(new long[]{0x803B81E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression8816 = new BitSet(new long[]{0x803B81E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression8840 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000030060000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression8857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression8863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression8869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression8875 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80170L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression8877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression8880 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000030060000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression8885 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000030060000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression8981 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression9008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000024L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression9020 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression9026 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression9029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000010C8L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression9051 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression9054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000048L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression9080 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression9082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001048L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression9108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression9114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression9237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression9239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression9285 = new BitSet(new long[]{0x803801E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression9287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression9337 = new BitSet(new long[]{0x803801E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression9339 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression9342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression9344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression9396 = new BitSet(new long[]{0x803801E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression9398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery9460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr9485 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr9491 = new BitSet(new long[]{0x803801E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr9493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr9497 = new BitSet(new long[]{0x803801E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr9499 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression9540 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080200000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression9545 = new BitSet(new long[]{0x803801E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression9548 = new BitSet(new long[]{0x803801E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression9552 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080200000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression9566 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000300008000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression9571 = new BitSet(new long[]{0x803801E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression9574 = new BitSet(new long[]{0x803801E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression9577 = new BitSet(new long[]{0x803801E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression9581 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000300008000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression9596 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression9598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression9611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression9616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression9621 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_unaryExpression9623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression9625 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression9630 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression9632 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression9637 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression9639 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression9676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression9688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression9694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression9699 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression9704 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression9706 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression9711 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression9713 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression9750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWKW_in_unaryExpression9755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LCURLY_in_unaryExpression9757 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_newAssign_in_unaryExpression9759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001200L});
    public static final BitSet FOLLOW_COMMA_in_unaryExpression9762 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_newAssign_in_unaryExpression9764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001200L});
    public static final BitSet FOLLOW_RCURLY_in_unaryExpression9768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_newAssign9790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_EQUALS_in_newAssign9793 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_newAssign9795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression9823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression9845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression9867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression9869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr9902 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr9908 = new BitSet(new long[]{0xB83841E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr9911 = new BitSet(new long[]{0xB83841E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr9914 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr9921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr9924 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr9932 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr9935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr9944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr9968 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004010L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr9973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr9975 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004010L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr9978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr9980 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004010L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr9987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr9991 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr9997 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr10004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr10008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression10048 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80330L});
    public static final BitSet FOLLOW_expression_in_arrayExpression10051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001200L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression10054 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_arrayExpression10056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001200L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression10063 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_arrayExpression10068 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_arrayExpression10070 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_arrayExpression10075 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_arrayExpression10077 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc10126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10129 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc10133 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc10138 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc10144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc10153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10156 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc10160 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc10165 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc10171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc10180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10183 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc10195 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc10200 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc10215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc10226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc10235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10238 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc10242 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc10247 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc10253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc10262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10265 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc10269 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc10274 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc10280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc10289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10292 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc10296 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc10301 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc10307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc10316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc10321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc10326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc10331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10334 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc10339 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc10345 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc10358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10360 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc10365 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10376 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10378 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10383 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10385 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc10432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10434 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc10439 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10450 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10452 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10457 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10459 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc10506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10509 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc10520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10522 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10526 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10531 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10533 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10538 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10540 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc10585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc10591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc10593 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc10596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc10608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10611 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc10616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc10619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc10622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc10625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_builtinFunc10635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10638 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc10649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10651 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_builtinFunc10653 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc10656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_AS_in_builtinFunc10660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc10663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10665 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10670 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10672 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10677 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10679 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc10724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10727 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc10730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc10738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004020L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10743 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10750 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10757 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10759 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation10803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation10805 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88170L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation10808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation10811 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_firstAggregation10813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation10819 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation10824 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation10826 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation10831 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation10833 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation10888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation10890 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88170L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation10893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation10896 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_lastAggregation10898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation10904 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation10909 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation10911 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation10916 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation10918 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation10974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation10976 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88170L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation10978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation10981 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation10986 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation10988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation10993 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation10995 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr11052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr11072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr11085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_aggregationFilterExpr11104 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_aggregationFilterExpr11106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction11134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction11139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction11151 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_libFunction11154 = new BitSet(new long[]{0x803809E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction11156 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass11189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass11191 = new BitSet(new long[]{0x803801E807FD44A0L,0x47FC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass11195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass11199 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88174L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass11202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass11206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass11239 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass11244 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88174L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass11247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass11251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent11283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent11290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent11302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_funcIdent11314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_funcIdent11326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_funcIdent11338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_funcIdent11349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs11366 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88134L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs11371 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88134L});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs11375 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs11378 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88134L});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs11381 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_libFunctionArgItem11395 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88134L});
    public static final BitSet FOLLOW_expressionWithTime_in_libFunctionArgItem11398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList11409 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList11411 = new BitSet(new long[]{0x803801E807FD44A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList11414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression11442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression11461 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800010000L});
    public static final BitSet FOLLOW_followedByRepeat_in_followedByExpression11464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800010000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByRepeat11517 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000034L});
    public static final BitSet FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat11524 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_followedByRepeat11526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_FOLLOWMAX_END_in_followedByRepeat11528 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000034L});
    public static final BitSet FOLLOW_orExpression_in_followedByRepeat11532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_orExpression11561 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression11566 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000034L});
    public static final BitSet FOLLOW_andExpression_in_orExpression11568 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression11600 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression11605 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000034L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression11607 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression11642 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000034L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression11646 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression11651 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000034L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression11653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression11718 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000034L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression11724 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000034L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression11730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression11732 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000034L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression11738 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000034L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression11747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList11862 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88134L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList11864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList11867 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88134L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList11869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList11873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_distinctExpressionAtom11896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix11911 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix11917 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000034L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix11919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix11921 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix11928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix11930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix11938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix11940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression12002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression12006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression12021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_observerExpression12023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression12028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_AT_in_observerExpression12034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression12037 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88174L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression12039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression12042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression12091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression12093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression12096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression12098 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88174L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression12102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression12106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression12119 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression12122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression12124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange12145 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E801B0L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange12152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000088L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange12157 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80138L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange12160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange12180 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange12182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange12193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression12280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression12282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression12291 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000024L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression12302 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80170L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression12304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression12307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression12319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression12364 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression12367 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic12397 = new BitSet(new long[]{0x803801E81FFD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_propertyExpressionSelect_in_propertyExpressionAtomic12399 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic12402 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_propertyExpressionAnnotation_in_propertyExpressionAtomic12404 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic12408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic12410 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic12415 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic12417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic12421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionSelect12479 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionSelect12481 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionSelect12483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_propertyExpressionAnnotation12506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAnnotation12510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_propertyExpressionAnnotation12513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAnnotation12517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_propertyExpressionAnnotation12519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList12549 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList12552 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88130L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList12555 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement12581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement12597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement12602 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement12605 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement12609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector12653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector12655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector12657 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector12660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector12664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression12711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression12713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression12722 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000824L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression12733 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80170L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression12735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression12738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000804L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression12750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_patternFilterAnnotation_in_patternFilterExpression12761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_patternFilterAnnotation12813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterAnnotation12817 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterAnnotation12820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480200000L});
    public static final BitSet FOLLOW_number_in_patternFilterAnnotation12822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterAnnotation12824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier12860 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier12879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier12883 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy12928 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy12963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy12967 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_expression_in_expressionList13009 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList13012 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80130L});
    public static final BitSet FOLLOW_expression_in_expressionList13015 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList13043 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList13046 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E88134L});
    public static final BitSet FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList13049 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime13078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime13089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime13100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime13111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime13123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime13134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime13146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime13158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime13163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTimeInclLast13183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeInclLast13188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable13199 = new BitSet(new long[]{0x0600000000000002L,0x0000007000000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable13204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable13208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable13212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable13216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable13220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar13277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand13297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand13310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand13322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand13324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_number_in_frequencyOperand13327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand13331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand13333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand13382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand13386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand13388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand13391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_number_in_rangeOperand13394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand13398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand13400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator13514 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator13518 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator13520 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator13523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator13571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator13575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator13577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator13580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList13627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480288010L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList13629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001008L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList13632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480288010L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList13634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001008L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList13638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter13660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter13666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter13671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty13687 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty13690 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000010L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty13692 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic13718 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080024L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic13727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic13731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic13733 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic13738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic13752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic13757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic13763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic13766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic13771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic13785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent13908 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent13920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent13922 = new BitSet(new long[]{0x803801E807FC4422L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000006000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent13926 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent13965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent13974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent13981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent13988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent13995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent14006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent14013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent14020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent14027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent14034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent14041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent14048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent14055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent14062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent14069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent14076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent14083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent14090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent14097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent14104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent14111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent14118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent14125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent14132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent14139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent14146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent14153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent14160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent14167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent14174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent14181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent14188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent14195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_keywordAllowedIdent14202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent14209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent14216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent14223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent14232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent14241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent14248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent14255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent14262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent14269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent14276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent14283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent14290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent14297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTEXT_in_keywordAllowedIdent14304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_keywordAllowedIdent14311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_keywordAllowedIdent14318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr14339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr14348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent14362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent14370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yearPart_in_timePeriod14395 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod14397 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod14400 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod14403 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod14406 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod14409 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod14412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod14415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod14421 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod14423 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod14426 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod14429 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod14432 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod14435 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod14438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod14444 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod14446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod14449 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod14452 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod14455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod14458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod14464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod14466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod14469 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod14472 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod14475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod14481 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod14483 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod14486 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod14489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod14495 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod14497 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod14500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod14506 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480280010L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod14508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod14514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_yearPart14561 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_yearPart14565 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_yearPart14567 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEARS_in_yearPart14571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEAR_in_yearPart14575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_monthPart14623 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_IDENT_in_monthPart14627 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_substitution_in_monthPart14629 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTHS_in_monthPart14633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTH_in_monthPart14637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_weekPart14685 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_IDENT_in_weekPart14689 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_substitution_in_weekPart14691 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEKS_in_weekPart14695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEK_in_weekPart14699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_dayPart14747 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart14751 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_substitution_in_dayPart14753 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart14757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart14761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_hourPart14810 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart14814 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart14816 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart14820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart14824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_minutePart14873 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart14877 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart14879 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart14883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart14887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart14891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_secondPart14941 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart14945 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart14947 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart14951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart14955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart14959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_millisecondPart15009 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart15013 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart15015 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart15019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart15023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart15027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number15082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number15099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number15116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number15133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution15154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant15173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant15180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant15193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant15213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant15233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant15255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480200000L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant15261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000018480200000L});
    public static final BitSet FOLLOW_number_in_numberconstant15265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant15294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant15310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_jsonvalue15331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jsonobject_in_jsonvalue15336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jsonarray_in_jsonvalue15341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_jsonobject15352 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000C00010L});
    public static final BitSet FOLLOW_jsonmembers_in_jsonobject15354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RCURLY_in_jsonobject15356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_jsonarray15388 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E8013CL});
    public static final BitSet FOLLOW_jsonelements_in_jsonarray15390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RBRACK_in_jsonarray15393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jsonvalue_in_jsonelements15416 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_jsonelements15419 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80134L});
    public static final BitSet FOLLOW_jsonvalue_in_jsonelements15422 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_jsonelements15427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jsonpair_in_jsonmembers15443 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_jsonmembers15446 = new BitSet(new long[]{0x803801E807FC4420L,0x47DC000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000C00010L});
    public static final BitSet FOLLOW_jsonpair_in_jsonmembers15449 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_jsonmembers15454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_jsonpair15471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_jsonpair15475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_jsonpair15478 = new BitSet(new long[]{0x803801E817FD64A0L,0x57FC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x000001C480E80134L});
    public static final BitSet FOLLOW_jsonvalue_in_jsonpair15480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar6250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar7649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar9682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar11067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar11129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar12592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar13073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar13084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar13095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar13106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar13118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar13129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar13140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar13153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar13178 = new BitSet(new long[]{0x0000000000000002L});
}
