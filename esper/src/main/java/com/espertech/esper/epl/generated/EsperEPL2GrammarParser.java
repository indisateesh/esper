  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", "TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "EXPRESSIONDECL", "NEWKW", "START", "CONTEXT", "INITIATED", "TERMINATED", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "FOLLOWED_BY_ITEM", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_IS_EXPR", "EVAL_ISNOT_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "TERM_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "INDEXCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "YEAR_PART", "MONTH_PART", "WEEK_PART", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "ACCESS_AGG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_VAR", "VARIANT_LIST", "MERGE_UNM", "MERGE_MAT", "MERGE_UPD", "MERGE_INS", "MERGE_DEL", "NEW_ITEM", "AGG_FILTER_EXPR", "CREATE_CTX", "CREATE_CTX_FIXED", "CREATE_CTX_PART", "CREATE_CTX_COAL", "CREATE_CTX_CAT", "CREATE_CTX_INIT", "CREATE_CTX_CATITEM", "CREATE_CTX_NESTED", "PARTITIONITEM", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "LBRACK", "RBRACK", "IDENT", "LPAREN", "RPAREN", "COLON", "LCURLY", "RCURLY", "GOES", "COMMA", "EQUALS", "DOT", "STAR", "BOR", "PLUS", "QUESTION", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "NUM_INT", "FOLLOWED_BY", "FOLLOWMAX_BEGIN", "FOLLOWMAX_END", "ATCHAR", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=192;
    public static final int FLOAT_SUFFIX=375;
    public static final int STAR=319;
    public static final int DOT_EXPR=202;
    public static final int NUMERIC_PARAM_LIST=130;
    public static final int MOD=336;
    public static final int ISTREAM=60;
    public static final int LIB_FUNC_CHAIN=201;
    public static final int OUTERJOIN_EXPR=174;
    public static final int CREATE_COL_TYPE_LIST=255;
    public static final int BSR=358;
    public static final int MERGE_INS=274;
    public static final int MONTH_PART=207;
    public static final int LIB_FUNCTION=200;
    public static final int EOF=-1;
    public static final int TIMEPERIOD_MILLISECONDS=105;
    public static final int FULL_OUTERJOIN_EXPR=178;
    public static final int CREATE_CTX_NESTED=285;
    public static final int CREATE_CTX_FIXED=279;
    public static final int MATCHREC_PATTERN_CONCAT=298;
    public static final int INC=351;
    public static final int LNOT=347;
    public static final int RPAREN=311;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=323;
    public static final int BSR_ASSIGN=359;
    public static final int CAST_EXPR=234;
    public static final int MATCHES=116;
    public static final int USING=120;
    public static final int STREAM_EXPR=173;
    public static final int TIMEPERIOD_SECONDS=102;
    public static final int NOT_EQUAL=328;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=139;
    public static final int LAST_AGGREG=262;
    public static final int GOES=315;
    public static final int REGEXP=9;
    public static final int MATCHED=122;
    public static final int INITIATED=127;
    public static final int FOLLOWED_BY_EXPR=133;
    public static final int NEWKW=124;
    public static final int FOLLOWED_BY=338;
    public static final int HOUR_PART=210;
    public static final int RBRACK=308;
    public static final int MATCHREC_PATTERN_NESTED=300;
    public static final int MATCH_UNTIL_RANGE_CLOSED=253;
    public static final int GE=332;
    public static final int METHOD_JOIN_EXPR=249;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int CREATE_CTX_PART=280;
    public static final int EVENT_FILTER_EXPR=138;
    public static final int CREATE_CTX_COAL=281;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=137;
    public static final int MINUS_ASSIGN=352;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=149;
    public static final int NUM_DOUBLE=294;
    public static final int INSERTINTO_STREAM_NAME=222;
    public static final int LCURLY=313;
    public static final int UNARY_MINUS=203;
    public static final int TIMEPERIOD_MILLISEC=103;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=220;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=147;
    public static final int WS=367;
    public static final int SUBSELECT_GROUP_EXPR=226;
    public static final int ON_SELECT_INSERT_EXPR=244;
    public static final int YEAR_PART=206;
    public static final int FOLLOWED_BY_ITEM=134;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=342;
    public static final int EXPRCOL=197;
    public static final int SL_COMMENT=368;
    public static final int NULL_TYPE=293;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=251;
    public static final int GT=330;
    public static final int BNOT=348;
    public static final int WHERE_EXPR=158;
    public static final int EVAL_IS_EXPR=165;
    public static final int END=33;
    public static final int LAND=365;
    public static final int INNERJOIN_EXPR=175;
    public static final int TERM_LIMIT_EXPR=195;
    public static final int NOT_REGEXP=217;
    public static final int MATCH_UNTIL_EXPR=250;
    public static final int EVENT_PROP_EXPR=182;
    public static final int LBRACK=307;
    public static final int MERGE_UPD=273;
    public static final int VIEW_EXPR=155;
    public static final int ANNOTATION=258;
    public static final int LONG_TYPE=288;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=140;
    public static final int MATCHREC_PATTERN=296;
    public static final int ON_MERGE_EXPR=243;
    public static final int ATCHAR=341;
    public static final int TIMEPERIOD_SEC=100;
    public static final int TICKED_STRING_LITERAL=343;
    public static final int ON_SELECT_EXPR=241;
    public static final int MINUTE_PART=211;
    public static final int PATTERN_NOT_EXPR=136;
    public static final int SQL_NE=327;
    public static final int SUM=18;
    public static final int HexDigit=373;
    public static final int UPDATE_EXPR=265;
    public static final int LPAREN=310;
    public static final int IN_SUBSELECT_EXPR=228;
    public static final int AT=86;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=106;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=302;
    public static final int NOT_IN_RANGE=224;
    public static final int TIMEPERIOD_MONTH=90;
    public static final int OFFSET=110;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int SECOND_PART=212;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=112;
    public static final int PARTITIONITEM=286;
    public static final int IDENT=309;
    public static final int DATABASE_JOIN_EXPR=157;
    public static final int BXOR=326;
    public static final int PLUS=321;
    public static final int CASE2=29;
    public static final int MERGE_MAT=272;
    public static final int TIMEPERIOD_DAY=94;
    public static final int CREATE_SCHEMA_EXPR=267;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=185;
    public static final int CREATE_INDEX_EXPR=235;
    public static final int TIMEPERIOD_MILLISECOND=104;
    public static final int ACCESS_AGG=264;
    public static final int CREATE_CTX_CATITEM=284;
    public static final int EVAL_NOTEQUALS_EXPR=164;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=252;
    public static final int CREATE_VARIABLE_EXPR=248;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=303;
    public static final int BY=43;
    public static final int RIGHT_OUTERJOIN_EXPR=177;
    public static final int NUMBERSETSTAR=257;
    public static final int LAST_OPERATOR=231;
    public static final int PATTERN_FILTER_EXPR=135;
    public static final int MERGE=121;
    public static final int FOLLOWMAX_END=340;
    public static final int MERGE_UNM=271;
    public static final int EVAL_AND_EXPR=161;
    public static final int LEFT_OUTERJOIN_EXPR=176;
    public static final int EPL_EXPR=295;
    public static final int GROUP_BY_EXPR=179;
    public static final int SET=83;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=183;
    public static final int MINUS=334;
    public static final int SEMI=366;
    public static final int INDEXCOL=198;
    public static final int STAR_ASSIGN=354;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=270;
    public static final int FIRST_AGGREG=261;
    public static final int COLON=312;
    public static final int EVAL_EQUALS_GROUP_EXPR=167;
    public static final int BAND_ASSIGN=364;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=193;
    public static final int NOT_IN_SET=214;
    public static final int VALUE_NULL=108;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=186;
    public static final int SL=360;
    public static final int NOT_IN_SUBSELECT_EXPR=229;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=153;
    public static final int SR=356;
    public static final int RCURLY=314;
    public static final int PLUS_ASSIGN=350;
    public static final int EXISTS_SUBSELECT_EXPR=227;
    public static final int DAY_PART=209;
    public static final int START=125;
    public static final int EVENT_FILTER_IN=148;
    public static final int DIV=335;
    public static final int WEEK_PART=208;
    public static final int EXPRESSIONDECL=123;
    public static final int OBJECT_PARAM_ORDERED_EXPR=132;
    public static final int OctalEscape=372;
    public static final int MILLISECOND_PART=213;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=109;
    public static final int SELECTION_EXPR=170;
    public static final int LOR=333;
    public static final int CAST=79;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=221;
    public static final int EXPONENT=374;
    public static final int LT=329;
    public static final int PATTERN_INCL_EXPR=156;
    public static final int CREATE_CTX=278;
    public static final int WHILE=119;
    public static final int ORDER_BY_EXPR=180;
    public static final int BOOL_TYPE=292;
    public static final int NEW_ITEM=276;
    public static final int MOD_ASSIGN=355;
    public static final int ANNOTATION_ARRAY=259;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=230;
    public static final int EQUALS=317;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int TERMINATED=128;
    public static final int DIV_ASSIGN=349;
    public static final int WINDOW_AGGREG=263;
    public static final int SL_ASSIGN=361;
    public static final int TIMEPERIOD_WEEKS=93;
    public static final int PATTERN=66;
    public static final int CREATE_CTX_INIT=283;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=301;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=242;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=205;
    public static final int CREATE_COL_TYPE=256;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=107;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=168;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int EVAL_ISNOT_EXPR=166;
    public static final int FLOAT_TYPE=289;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=101;
    public static final int EVENT_FILTER_BETWEEN=150;
    public static final int ANNOTATION_VALUE=260;
    public static final int SUBSELECT_EXPR=225;
    public static final int CONCAT=199;
    public static final int NUMERIC_PARAM_RANGE=129;
    public static final int CLASS_IDENT=152;
    public static final int MATCHREC_PATTERN_ALTER=299;
    public static final int ON_EXPR=238;
    public static final int CREATE_WINDOW_EXPR=236;
    public static final int PROPERTY_SELECTION_STREAM=142;
    public static final int ON_DELETE_EXPR=240;
    public static final int NUM_LONG=344;
    public static final int ON=41;
    public static final int TIME_PERIOD=204;
    public static final int DOUBLE_TYPE=290;
    public static final int DELETE=81;
    public static final int INT_TYPE=287;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=160;
    public static final int ORDER_ELEMENT_EXPR=181;
    public static final int TIMEPERIOD_HOURS=97;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=233;
    public static final int UNTIL=85;
    public static final int STRING_TYPE=291;
    public static final int NUM_INT=337;
    public static final int MATCHREC_DEFINE_ITEM=304;
    public static final int ON_SET_EXPR=247;
    public static final int STDDEV=24;
    public static final int NUM_FLOAT=345;
    public static final int ON_EXPR_FROM=246;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=370;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=141;
    public static final int WEEKDAY_OPERATOR=232;
    public static final int DEC=353;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=362;
    public static final int NUMERIC_PARAM_FREQUENCY=131;
    public static final int AFTER_LIMIT_EXPR=191;
    public static final int SNAPSHOT=82;
    public static final int ORDER=56;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=188;
    public static final int EVENT_FILTER_PARAM=145;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=111;
    public static final int FOR=118;
    public static final int ON_STREAM=239;
    public static final int DEFINE=114;
    public static final int TIMEPERIOD_YEARS=89;
    public static final int TIMEPERIOD_DAYS=95;
    public static final int CONTEXT=126;
    public static final int EVENT_FILTER_RANGE=146;
    public static final int ML_COMMENT=369;
    public static final int INDEX=87;
    public static final int CREATE_CTX_CAT=282;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=187;
    public static final int BOR_ASSIGN=363;
    public static final int COMMA=316;
    public static final int WHEN_LIMIT_EXPR=194;
    public static final int IS=42;
    public static final int PARTITION=115;
    public static final int TIMEPERIOD_LIMIT_EXPR=190;
    public static final int SOME=49;
    public static final int EQUAL=346;
    public static final int BOR=320;
    public static final int MATCHREC_MEASURE_ITEM=306;
    public static final int ALL=47;
    public static final int TIMEPERIOD_HOUR=96;
    public static final int CREATE_SCHEMA_EXPR_VAR=269;
    public static final int EVENT_FILTER_NOT_BETWEEN=151;
    public static final int IN_RANGE=223;
    public static final int DOT=318;
    public static final int MATCHREC_MEASURES=305;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int TIMEPERIOD_WEEK=92;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=143;
    public static final int INSERTINTO_EXPR=196;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=159;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=254;
    public static final int MERGE_DEL=275;
    public static final int EVAL_EQUALS_EXPR=163;
    public static final int TIMEPERIOD_MINUTES=99;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=216;
    public static final int EVENT_LIMIT_EXPR=189;
    public static final int NOT_BETWEEN=215;
    public static final int TIMEPERIOD_MINUTE=98;
    public static final int EVAL_OR_EXPR=162;
    public static final int ON_SELECT_INSERT_OUTPUT=245;
    public static final int AGG_FILTER_EXPR=277;
    public static final int MEASURES=113;
    public static final int AFTER=117;
    public static final int BAND=325;
    public static final int MATCHREC_PATTERN_ATOM=297;
    public static final int QUOTED_STRING_LITERAL=324;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=322;
    public static final int OBSERVER_EXPR=154;
    public static final int CREATE_SCHEMA_EXPR_QUAL=268;
    public static final int EVENT_FILTER_IDENT=144;
    public static final int EVENT_PROP_MAPPED=184;
    public static final int UnicodeEscape=371;
    public static final int TIMEPERIOD_YEAR=88;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=218;
    public static final int FOLLOWMAX_BEGIN=339;
    public static final int TIMEPERIOD_MONTHS=91;
    public static final int SELECTION_ELEMENT_EXPR=171;
    public static final int CREATE_WINDOW_SELECT_EXPR=237;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=266;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=172;
    public static final int SR_ASSIGN=357;
    public static final int LE=331;
    public static final int DBFROM_CLAUSE=219;
    public static final int EVAL_IDENT=169;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      private static java.util.Set<Integer> afterScriptTokens = new java.util.HashSet<Integer>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public synchronized static Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public synchronized static Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_YEAR, "'year'");
    	parserTokenParaphases.put(TIMEPERIOD_YEARS, "'years'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTH, "'month'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTHS, "'months'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEK, "'week'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEKS, "'weeks'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserTokenParaphases.put(CONTEXT, "'context'");
    	parserTokenParaphases.put(START, "'start'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(INITIATED, "'initiated'");
    	parserTokenParaphases.put(TERMINATED, "'terminated'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      public synchronized static java.util.Set<Integer> getAfterScriptTokens() {
        if (afterScriptTokens.size() == 0) {
    	afterScriptTokens.add(CREATE);
    	afterScriptTokens.add(EXPRESSIONDECL);
    	afterScriptTokens.add(SELECT);
    	afterScriptTokens.add(INSERT);
    	afterScriptTokens.add(ON);
    	afterScriptTokens.add(DELETE);
    	afterScriptTokens.add(UPDATE);
    	afterScriptTokens.add(ATCHAR);
        }
        return afterScriptTokens;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF4=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl2 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression3 = null;
        CommonTree EOF4_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=3;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==ATCHAR) ) {
                    alt1=1;
                }
                else if ( (LA1_0==EXPRESSIONDECL) ) {
                    alt1=2;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1862);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startPatternExpressionRule1866);
            	    expressionDecl2=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionDecl2.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1872);
            patternExpression3=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression3.getTree());
            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1876); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum5 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl6 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression7 = null;
        CommonTree EOF8_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_expressionDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionDecl");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==ATCHAR) ) {
                    alt2=1;
                }
                else if ( (LA2_0==EXPRESSIONDECL) ) {
                    alt2=2;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1891);
            	    annotationEnum5=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum5.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startEPLExpressionRule1895);
            	    expressionDecl6=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expressionDecl.add(expressionDecl6.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1901);
            eplExpression7=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1905); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF8);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                while ( stream_expressionDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDecl.nextTree());
                }
                stream_expressionDecl.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF10=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty9 = null;
        CommonTree EOF10_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1934);
            eventProperty9=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty9.getTree());
            EOF10=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1938); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDecl_return expressionDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDecl_return retval = new EsperEPL2GrammarParser.expressionDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token array=null;
        Token name=null;
        Token EXPRESSIONDECL11=null;
        Token RBRACK13=null;
        Token LPAREN15=null;
        Token RPAREN17=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier12 = null;
        EsperEPL2GrammarParser.expressionDialect_return expressionDialect14 = null;
        EsperEPL2GrammarParser.columnList_return columnList16 = null;
        EsperEPL2GrammarParser.expressionDef_return expressionDef18 = null;
        CommonTree array_tree=null;
        CommonTree name_tree=null;
        CommonTree EXPRESSIONDECL11_tree=null;
        CommonTree RBRACK13_tree=null;
        CommonTree LPAREN15_tree=null;
        CommonTree RPAREN17_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_EXPRESSIONDECL=new RewriteRuleTokenStream(adaptor,"token EXPRESSIONDECL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionDef=new RewriteRuleSubtreeStream(adaptor,"rule expressionDef");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_expressionDialect=new RewriteRuleSubtreeStream(adaptor,"rule expressionDialect");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            EXPRESSIONDECL11=(Token)match(input,EXPRESSIONDECL,FOLLOW_EXPRESSIONDECL_in_expressionDecl1957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXPRESSIONDECL.add(EXPRESSIONDECL11);
            int alt3=2;
            int LA3_0 = input.LA(1);
            if ( (LA3_0==IDENT) ) {
                int LA3_1 = input.LA(2);
                if ( (LA3_1==LBRACK) ) {
                    int LA3_7 = input.LA(3);
                    if ( (LA3_7==RBRACK) ) {
                        alt3=1;
                    }
                }
                else if ( (LA3_1==IDENT||LA3_1==DOT) ) {
                    alt3=1;
                }
            }
            else if ( (LA3_0==TICKED_STRING_LITERAL) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifier_in_expressionDecl1959);
                    classIdentifier12=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier12.getTree());
                    }
                    break;
            }
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==LBRACK) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    {
                    array=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_expressionDecl1965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(array);
                    RBRACK13=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_expressionDecl1967); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK13);
                    }
                    break;
            }
            int alt5=2;
            int LA5_0 = input.LA(1);
            if ( (LA5_0==IDENT) ) {
                int LA5_1 = input.LA(2);
                if ( (LA5_1==COLON) ) {
                    alt5=1;
                }
            }
            switch (alt5) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionDialect_in_expressionDecl1971);
                    expressionDialect14=expressionDialect();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionDialect.add(expressionDialect14.getTree());
                    }
                    break;
            }
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDecl1976); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt7=2;
            int LA7_0 = input.LA(1);
            if ( (LA7_0==LPAREN) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    {
                    LPAREN15=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionDecl1979); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN15);
                    int alt6=2;
                    int LA6_0 = input.LA(1);
                    if ( (LA6_0==IDENT) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_columnList_in_expressionDecl1981);
                            columnList16=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList16.getTree());
                            }
                            break;
                    }
                    RPAREN17=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionDecl1984); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN17);
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionDef_in_expressionDecl1988);
            expressionDef18=expressionDef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionDef.add(expressionDef18.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_array=new RewriteRuleTokenStream(adaptor,"token array",array);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EXPRESSIONDECL.nextNode(), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_expressionDef.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_expressionDialect.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDialect.nextTree());
                }
                stream_expressionDialect.reset();
                if ( stream_array.hasNext() ) {
                    adaptor.addChild(root_1, stream_array.nextNode());
                }
                stream_array.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDialect_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDialect_return expressionDialect() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDialect_return retval = new EsperEPL2GrammarParser.expressionDialect_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token COLON19=null;
        CommonTree d_tree=null;
        CommonTree COLON19_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            d=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDialect2031); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(d);
            COLON19=(Token)match(input,COLON,FOLLOW_COLON_in_expressionDialect2033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON19);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_COLON.nextNode(), root_1);
                adaptor.addChild(root_1, stream_d.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDef_return expressionDef() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDef_return retval = new EsperEPL2GrammarParser.expressionDef_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY20=null;
        Token RCURLY23=null;
        Token LBRACK24=null;
        Token RBRACK26=null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl21 = null;
        EsperEPL2GrammarParser.expression_return expression22 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant25 = null;
        CommonTree LCURLY20_tree=null;
        CommonTree RCURLY23_tree=null;
        CommonTree LBRACK24_tree=null;
        CommonTree RBRACK26_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expressionLambdaDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionLambdaDecl");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        try {
            int alt9=2;
            int LA9_0 = input.LA(1);
            if ( (LA9_0==LCURLY) ) {
                alt9=1;
            }
            else if ( (LA9_0==LBRACK) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);
                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    LCURLY20=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_expressionDef2055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY20);
                    int alt8=2;
                    int LA8_0 = input.LA(1);
                    if ( (LA8_0==IDENT) ) {
                        int LA8_1 = input.LA(2);
                        if ( (LA8_1==GOES) ) {
                            alt8=1;
                        }
                    }
                    else if ( (LA8_0==LPAREN) ) {
                        int LA8_2 = input.LA(2);
                        if ( (LA8_2==IDENT) ) {
                            int LA8_120 = input.LA(3);
                            if ( (LA8_120==RPAREN) ) {
                                int LA8_203 = input.LA(4);
                                if ( (LA8_203==GOES) ) {
                                    alt8=1;
                                }
                            }
                            else if ( (LA8_120==COMMA) ) {
                                alt8=1;
                            }
                        }
                    }
                    switch (alt8) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionLambdaDecl_in_expressionDef2057);
                            expressionLambdaDecl21=expressionLambdaDecl();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionLambdaDecl.add(expressionLambdaDecl21.getTree());
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_expressionDef2060);
                    expression22=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression22.getTree());
                    RCURLY23=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_expressionDef2062); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY23);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOES, "GOES"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( stream_expressionLambdaDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionLambdaDecl.nextTree());
                        }
                        stream_expressionLambdaDecl.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    LBRACK24=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_expressionDef2078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK24);
                    pushFollow(FOLLOW_stringconstant_in_expressionDef2080);
                    stringconstant25=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant25.getTree());
                    RBRACK26=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_expressionDef2082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK26);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRESSIONDECL, "EXPRESSIONDECL"), root_1);
                        adaptor.addChild(root_1, stream_stringconstant.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionLambdaDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionLambdaDecl_return retval = new EsperEPL2GrammarParser.expressionLambdaDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LPAREN27=null;
        Token RPAREN29=null;
        Token GOES30=null;
        EsperEPL2GrammarParser.columnList_return columnList28 = null;
        CommonTree i_tree=null;
        CommonTree LPAREN27_tree=null;
        CommonTree RPAREN29_tree=null;
        CommonTree GOES30_tree=null;
        RewriteRuleTokenStream stream_GOES=new RewriteRuleTokenStream(adaptor,"token GOES");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            int alt10=2;
            int LA10_0 = input.LA(1);
            if ( (LA10_0==IDENT) ) {
                alt10=1;
            }
            else if ( (LA10_0==LPAREN) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);
                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionLambdaDecl2105); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    {
                    LPAREN27=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionLambdaDecl2110); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN27);
                    pushFollow(FOLLOW_columnList_in_expressionLambdaDecl2112);
                    columnList28=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList28.getTree());
                    RPAREN29=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionLambdaDecl2114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN29);
                    }
                    }
                    break;
            }
            GOES30=(Token)match(input,GOES,FOLLOW_GOES_in_expressionLambdaDecl2118); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GOES.add(GOES30);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_GOES.nextNode(), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal31=null;
        Token char_literal33=null;
        Token char_literal36=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier32 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum34 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum35 = null;
        CommonTree char_literal31_tree=null;
        CommonTree char_literal33_tree=null;
        CommonTree char_literal36_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal31=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationNoEnum2153); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(char_literal31);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum2155);
            classIdentifier32=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier32.getTree());
            int alt12=2;
            int LA12_0 = input.LA(1);
            if ( (LA12_0==LPAREN) ) {
                int LA12_1 = input.LA(2);
                if ( (LA12_1==IDENT) ) {
                    int LA12_14 = input.LA(3);
                    if ( (LA12_14==EQUALS) ) {
                        int LA12_32 = input.LA(4);
                        if ( ((LA12_32>=BOOLEAN_TRUE && LA12_32<=VALUE_NULL)||LA12_32==NUM_DOUBLE||LA12_32==LCURLY||LA12_32==PLUS||(LA12_32>=STRING_LITERAL && LA12_32<=QUOTED_STRING_LITERAL)||LA12_32==MINUS||LA12_32==NUM_INT||LA12_32==ATCHAR||(LA12_32>=NUM_LONG && LA12_32<=NUM_FLOAT)) ) {
                            alt12=1;
                        }
                    }
                }
                else if ( ((LA12_1>=BOOLEAN_TRUE && LA12_1<=VALUE_NULL)||LA12_1==NUM_DOUBLE||LA12_1==RPAREN||LA12_1==LCURLY||LA12_1==PLUS||(LA12_1>=STRING_LITERAL && LA12_1<=QUOTED_STRING_LITERAL)||LA12_1==MINUS||LA12_1==NUM_INT||LA12_1==ATCHAR||(LA12_1>=NUM_LONG && LA12_1<=NUM_FLOAT)) ) {
                    alt12=1;
                }
            }
            switch (alt12) {
                case 1 :
                    {
                    char_literal33=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum2159); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal33);
                    int alt11=3;
                    int LA11_0 = input.LA(1);
                    if ( (LA11_0==IDENT) ) {
                        alt11=1;
                    }
                    else if ( ((LA11_0>=BOOLEAN_TRUE && LA11_0<=VALUE_NULL)||LA11_0==NUM_DOUBLE||LA11_0==LCURLY||LA11_0==PLUS||(LA11_0>=STRING_LITERAL && LA11_0<=QUOTED_STRING_LITERAL)||LA11_0==MINUS||LA11_0==NUM_INT||LA11_0==ATCHAR||(LA11_0>=NUM_LONG && LA11_0<=NUM_FLOAT)) ) {
                        alt11=2;
                    }
                    switch (alt11) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum2163);
                            elementValuePairsNoEnum34=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum34.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum2167);
                            elementValueNoEnum35=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum35.getTree());
                            }
                            break;
                    }
                    char_literal36=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum2172); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal36);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal37=null;
        Token char_literal39=null;
        Token char_literal42=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier38 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum40 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum41 = null;
        CommonTree char_literal37_tree=null;
        CommonTree char_literal39_tree=null;
        CommonTree char_literal42_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal37=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationEnum2213); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(char_literal37);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum2215);
            classIdentifier38=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier38.getTree());
            int alt14=2;
            int LA14_0 = input.LA(1);
            if ( (LA14_0==LPAREN) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    {
                    char_literal39=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum2219); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal39);
                    int alt13=3;
                    int LA13_0 = input.LA(1);
                    if ( (LA13_0==IDENT) ) {
                        int LA13_1 = input.LA(2);
                        if ( (LA13_1==EQUALS) ) {
                            alt13=1;
                        }
                        else if ( (LA13_1==RPAREN||LA13_1==DOT) ) {
                            alt13=2;
                        }
                    }
                    else if ( ((LA13_0>=BOOLEAN_TRUE && LA13_0<=VALUE_NULL)||LA13_0==NUM_DOUBLE||LA13_0==LCURLY||LA13_0==PLUS||(LA13_0>=STRING_LITERAL && LA13_0<=QUOTED_STRING_LITERAL)||LA13_0==MINUS||LA13_0==NUM_INT||LA13_0==ATCHAR||(LA13_0>=TICKED_STRING_LITERAL && LA13_0<=NUM_FLOAT)) ) {
                        alt13=2;
                    }
                    switch (alt13) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum2223);
                            elementValuePairsEnum40=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum40.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum2227);
                            elementValueEnum41=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum41.getTree());
                            }
                            break;
                    }
                    char_literal42=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum2232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal42);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA44=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum43 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum45 = null;
        CommonTree COMMA44_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2273);
            elementValuePairNoEnum43=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum43.getTree());
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);
                if ( (LA15_0==COMMA) ) {
                    alt15=1;
                }
                switch (alt15) {
            	case 1 :
            	    {
            	    COMMA44=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum2276); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2279);
            	    elementValuePairNoEnum45=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum45.getTree());
            	    }
            	    break;
            	default :
            	    break loop15;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA47=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum46 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum48 = null;
        CommonTree COMMA47_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2300);
            elementValuePairEnum46=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum46.getTree());
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);
                if ( (LA16_0==COMMA) ) {
                    alt16=1;
                }
                switch (alt16) {
            	case 1 :
            	    {
            	    COMMA47=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum2303); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2306);
            	    elementValuePairEnum48=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum48.getTree());
            	    }
            	    break;
            	default :
            	    break loop16;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum50 = null;
        CommonTree i_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum2329); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal49=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum2331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal49);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2333);
            elementValueNoEnum50=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum50.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal51=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum52 = null;
        CommonTree i_tree=null;
        CommonTree char_literal51_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum2370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal51=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum2372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal51);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum2374);
            elementValueEnum52=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum52.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum53 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum54 = null;
        EsperEPL2GrammarParser.constant_return constant55 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt17=3;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt17=1;
                }
                break;
            case LCURLY:
                {
                alt17=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt17=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);
                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2405);
                    annotationEnum53=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum53.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2416);
                    elementValueArrayNoEnum54=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum54.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2429);
                    constant55=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant55.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum56 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum57 = null;
        EsperEPL2GrammarParser.constant_return constant58 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier59 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt18=4;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt18=1;
                }
                break;
            case LCURLY:
                {
                alt18=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt18=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt18=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);
                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2452);
                    annotationEnum56=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum56.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2463);
                    elementValueArrayEnum57=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum57.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2476);
                    constant58=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant58.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2484);
                    classIdentifier59=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier59.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal60=null;
        Token char_literal62=null;
        Token char_literal64=null;
        Token char_literal65=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum61 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum63 = null;
        CommonTree char_literal60_tree=null;
        CommonTree char_literal62_tree=null;
        CommonTree char_literal64_tree=null;
        CommonTree char_literal65_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal60=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2504); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal60);
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( ((LA20_0>=BOOLEAN_TRUE && LA20_0<=VALUE_NULL)||LA20_0==NUM_DOUBLE||LA20_0==LCURLY||LA20_0==PLUS||(LA20_0>=STRING_LITERAL && LA20_0<=QUOTED_STRING_LITERAL)||LA20_0==MINUS||LA20_0==NUM_INT||LA20_0==ATCHAR||(LA20_0>=NUM_LONG && LA20_0<=NUM_FLOAT)) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2507);
                    elementValueNoEnum61=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum61.getTree());
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);
                        if ( (LA19_0==COMMA) ) {
                            int LA19_1 = input.LA(2);
                            if ( ((LA19_1>=BOOLEAN_TRUE && LA19_1<=VALUE_NULL)||LA19_1==NUM_DOUBLE||LA19_1==LCURLY||LA19_1==PLUS||(LA19_1>=STRING_LITERAL && LA19_1<=QUOTED_STRING_LITERAL)||LA19_1==MINUS||LA19_1==NUM_INT||LA19_1==ATCHAR||(LA19_1>=NUM_LONG && LA19_1<=NUM_FLOAT)) ) {
                                alt19=1;
                            }
                        }
                        switch (alt19) {
                    	case 1 :
                    	    {
                    	    char_literal62=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2510); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal62);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2512);
                    	    elementValueNoEnum63=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum63.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop19;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==COMMA) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    char_literal64=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2519); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal64);
                    }
                    break;
            }
            char_literal65=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal65);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal66=null;
        Token char_literal68=null;
        Token char_literal70=null;
        Token char_literal71=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum67 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum69 = null;
        CommonTree char_literal66_tree=null;
        CommonTree char_literal68_tree=null;
        CommonTree char_literal70_tree=null;
        CommonTree char_literal71_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal66=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2552); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal66);
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( ((LA23_0>=BOOLEAN_TRUE && LA23_0<=VALUE_NULL)||LA23_0==NUM_DOUBLE||LA23_0==IDENT||LA23_0==LCURLY||LA23_0==PLUS||(LA23_0>=STRING_LITERAL && LA23_0<=QUOTED_STRING_LITERAL)||LA23_0==MINUS||LA23_0==NUM_INT||LA23_0==ATCHAR||(LA23_0>=TICKED_STRING_LITERAL && LA23_0<=NUM_FLOAT)) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2555);
                    elementValueEnum67=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum67.getTree());
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);
                        if ( (LA22_0==COMMA) ) {
                            int LA22_1 = input.LA(2);
                            if ( ((LA22_1>=BOOLEAN_TRUE && LA22_1<=VALUE_NULL)||LA22_1==NUM_DOUBLE||LA22_1==IDENT||LA22_1==LCURLY||LA22_1==PLUS||(LA22_1>=STRING_LITERAL && LA22_1<=QUOTED_STRING_LITERAL)||LA22_1==MINUS||LA22_1==NUM_INT||LA22_1==ATCHAR||(LA22_1>=TICKED_STRING_LITERAL && LA22_1<=NUM_FLOAT)) ) {
                                alt22=1;
                            }
                        }
                        switch (alt22) {
                    	case 1 :
                    	    {
                    	    char_literal68=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2558); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal68);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2560);
                    	    elementValueEnum69=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum69.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop22;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==COMMA) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    char_literal70=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2567); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal70);
                    }
                    break;
            }
            char_literal71=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal71);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.contextExpr_return contextExpr72 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr73 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr74 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr75 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr76 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr77 = null;
        EsperEPL2GrammarParser.createContextExpr_return createContextExpr78 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr79 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr80 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr81 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==CONTEXT) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    pushFollow(FOLLOW_contextExpr_in_eplExpression2603);
                    contextExpr72=contextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, contextExpr72.getTree());
                    }
                    break;
            }
            int alt26=8;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt26=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt26=2;
                    }
                    break;
                case INDEX:
                    {
                    alt26=3;
                    }
                    break;
                case CONTEXT:
                    {
                    alt26=6;
                    }
                    break;
                case IDENT:
                    {
                    int LA26_9 = input.LA(3);
                    if ( (LA26_9==SCHEMA) ) {
                        alt26=5;
                    }
                    else if ( (LA26_9==VARIABLE) ) {
                        alt26=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 9, input);
                        throw nvae;
                    }
                    }
                    break;
                case VARIABLE:
                    {
                    alt26=4;
                    }
                    break;
                case SCHEMA:
                    {
                    alt26=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt26=7;
                }
                break;
            case UPDATE:
                {
                alt26=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);
                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2610);
                    selectExpr73=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr73.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2615);
                    createWindowExpr74=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr74.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2620);
                    createIndexExpr75=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr75.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2625);
                    createVariableExpr76=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr76.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2630);
                    createSchemaExpr77=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr77.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_createContextExpr_in_eplExpression2635);
                    createContextExpr78=createContextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextExpr78.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2640);
                    onExpr79=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr79.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2645);
                    updateExpr80=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr80.getTree());
                    }
                    break;
            }
            int alt27=2;
            int LA27_0 = input.LA(1);
            if ( (LA27_0==FOR) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2648);
                    forExpr81=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr81.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class contextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.contextExpr_return contextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.contextExpr_return retval = new EsperEPL2GrammarParser.contextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token CONTEXT82=null;
        CommonTree i_tree=null;
        CommonTree CONTEXT82_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        try {
            {
            CONTEXT82=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextExpr2661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT82);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_contextExpr2665); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTEXT.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT83=null;
        Token SELECT85=null;
        Token FROM87=null;
        Token WHERE90=null;
        Token GROUP92=null;
        Token BY93=null;
        Token HAVING95=null;
        Token OUTPUT97=null;
        Token ORDER99=null;
        Token BY100=null;
        Token ROW_LIMIT_EXPR102=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr84 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause86 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause88 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog89 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause91 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr94 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause96 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit98 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr101 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit103 = null;
        CommonTree INSERT83_tree=null;
        CommonTree SELECT85_tree=null;
        CommonTree FROM87_tree=null;
        CommonTree WHERE90_tree=null;
        CommonTree GROUP92_tree=null;
        CommonTree BY93_tree=null;
        CommonTree HAVING95_tree=null;
        CommonTree OUTPUT97_tree=null;
        CommonTree ORDER99_tree=null;
        CommonTree BY100_tree=null;
        CommonTree ROW_LIMIT_EXPR102_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt28=2;
            int LA28_0 = input.LA(1);
            if ( (LA28_0==INSERT) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    {
                    INSERT83=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2689); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2692);
                    insertIntoExpr84=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr84.getTree());
                    }
                    break;
            }
            SELECT85=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2698); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2701);
            selectClause86=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause86.getTree());
            FROM87=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2705); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2708);
            fromClause88=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause88.getTree());
            int alt29=2;
            int LA29_0 = input.LA(1);
            if ( (LA29_0==MATCH_RECOGNIZE) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2712);
                    matchRecog89=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog89.getTree());
                    }
                    break;
            }
            int alt30=2;
            int LA30_0 = input.LA(1);
            if ( (LA30_0==WHERE) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    {
                    WHERE90=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2718); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2721);
                    whereClause91=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause91.getTree());
                    }
                    break;
            }
            int alt31=2;
            int LA31_0 = input.LA(1);
            if ( (LA31_0==GROUP) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    {
                    GROUP92=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2728); if (state.failed) return retval;
                    BY93=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2731); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2734);
                    groupByListExpr94=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr94.getTree());
                    }
                    break;
            }
            int alt32=2;
            int LA32_0 = input.LA(1);
            if ( (LA32_0==HAVING) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    {
                    HAVING95=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2741); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2744);
                    havingClause96=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause96.getTree());
                    }
                    break;
            }
            int alt33=2;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==OUTPUT) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    {
                    OUTPUT97=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2751); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2754);
                    outputLimit98=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit98.getTree());
                    }
                    break;
            }
            int alt34=2;
            int LA34_0 = input.LA(1);
            if ( (LA34_0==ORDER) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    {
                    ORDER99=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2761); if (state.failed) return retval;
                    BY100=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2764); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2767);
                    orderByListExpr101=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr101.getTree());
                    }
                    break;
            }
            int alt35=2;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==ROW_LIMIT_EXPR) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR102=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2774); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2777);
                    rowLimit103=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit103.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON104=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr105 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr106 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr107 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr108 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert109 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr110 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr111 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr112 = null;
        CommonTree ON104_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON104=(Token)match(input,ON,FOLLOW_ON_in_onExpr2792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON104);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2794);
            onStreamExpr105=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr105.getTree());
            int alt39=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt39=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt39=2;
                }
                break;
            case SET:
                {
                alt39=3;
                }
                break;
            case UPDATE:
                {
                alt39=4;
                }
                break;
            case MERGE:
                {
                alt39=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);
                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2799);
                    onDeleteExpr106=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr106.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2803);
                    onSelectExpr107=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr107.getTree());
                    int alt38=2;
                    int LA38_0 = input.LA(1);
                    if ( (LA38_0==INSERT) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            {
                            int cnt36=0;
                            loop36:
                            do {
                                int alt36=2;
                                int LA36_0 = input.LA(1);
                                if ( (LA36_0==INSERT) ) {
                                    alt36=1;
                                }
                                switch (alt36) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2806);
                            	    onSelectInsertExpr108=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr108.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt36 >= 1 ) break loop36;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(36, input);
                                        throw eee;
                                }
                                cnt36++;
                            } while (true);
                            int alt37=2;
                            int LA37_0 = input.LA(1);
                            if ( (LA37_0==OUTPUT) ) {
                                alt37=1;
                            }
                            switch (alt37) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2809);
                                    outputClauseInsert109=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert109.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2816);
                    onSetExpr110=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr110.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2820);
                    onUpdateExpr111=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr111.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2824);
                    onMergeExpr112=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr112.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS115=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression113 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression114 = null;
        CommonTree i_tree=null;
        CommonTree AS115_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==IDENT||LA40_0==TICKED_STRING_LITERAL) ) {
                alt40=1;
            }
            else if ( (LA40_0==PATTERN) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);
                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2869);
                    eventFilterExpression113=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression113.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2873);
                    patternInclusionExpression114=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression114.getTree());
                    }
                    break;
            }
            int alt41=3;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==AS) ) {
                alt41=1;
            }
            else if ( (LA41_0==IDENT) ) {
                alt41=2;
            }
            switch (alt41) {
                case 1 :
                    {
                    AS115=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2877); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS115);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2881); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2887); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE116=null;
        Token ISTREAM117=null;
        Token AS119=null;
        Token SET120=null;
        Token COMMA122=null;
        Token WHERE124=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier118 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment121 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment123 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause125 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE116_tree=null;
        CommonTree ISTREAM117_tree=null;
        CommonTree AS119_tree=null;
        CommonTree SET120_tree=null;
        CommonTree COMMA122_tree=null;
        CommonTree WHERE124_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE116=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2918); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE116);
            ISTREAM117=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2920); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM117);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr2922);
            classIdentifier118=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier118.getTree());
            int alt42=3;
            int LA42_0 = input.LA(1);
            if ( (LA42_0==AS) ) {
                alt42=1;
            }
            else if ( (LA42_0==IDENT) ) {
                alt42=2;
            }
            switch (alt42) {
                case 1 :
                    {
                    AS119=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS119);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2935); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET120=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2941); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET120);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2943);
            onSetAssignment121=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment121.getTree());
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);
                if ( (LA43_0==COMMA) ) {
                    alt43=1;
                }
                switch (alt43) {
            	case 1 :
            	    {
            	    COMMA122=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2946); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA122);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2948);
            	    onSetAssignment123=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment123.getTree());
            	    }
            	    break;
            	default :
            	    break loop43;
                }
            } while (true);
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( (LA44_0==WHERE) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    {
                    WHERE124=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2956); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE124);
                    pushFollow(FOLLOW_whereClause_in_updateExpr2958);
                    whereClause125=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause125.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE126=null;
        Token INTO127=null;
        Token AS128=null;
        Token WHERE129=null;
        EsperEPL2GrammarParser.whereClause_return whereClause130 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem131 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE126_tree=null;
        CommonTree INTO127_tree=null;
        CommonTree AS128_tree=null;
        CommonTree WHERE129_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE126=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr2993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE126);
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( (LA45_0==INTO) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    {
                    INTO127=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr2995); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO127);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3000); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt46=3;
            int LA46_0 = input.LA(1);
            if ( (LA46_0==AS) ) {
                alt46=1;
            }
            else if ( (LA46_0==IDENT) ) {
                alt46=2;
            }
            switch (alt46) {
                case 1 :
                    {
                    AS128=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr3003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS128);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3013); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt47=2;
            int LA47_0 = input.LA(1);
            if ( (LA47_0==WHERE) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    {
                    WHERE129=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr3020); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE129);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr3022);
                    whereClause130=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause130.getTree());
                    }
                    break;
            }
            int cnt48=0;
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);
                if ( (LA48_0==WHEN) ) {
                    alt48=1;
                }
                switch (alt48) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr3030);
            	    mergeItem131=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem131.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt48 >= 1 ) break loop48;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(48, input);
                        throw eee;
                }
                cnt48++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched132 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched133 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( (LA49_0==WHEN) ) {
                int LA49_1 = input.LA(2);
                if ( (LA49_1==MATCHED) ) {
                    alt49=1;
                }
                else if ( (LA49_1==NOT_EXPR) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);
                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem3064);
                    mergeMatched132=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched132.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem3068);
                    mergeUnmatched133=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched133.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN134=null;
        Token MATCHED135=null;
        Token AND_EXPR136=null;
        EsperEPL2GrammarParser.expression_return expression137 = null;
        EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem138 = null;
        CommonTree WHEN134_tree=null;
        CommonTree MATCHED135_tree=null;
        CommonTree AND_EXPR136_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeMatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatchedItem");
        try {
            {
            WHEN134=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched3081); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN134);
            MATCHED135=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched3083); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED135);
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==AND_EXPR) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    AND_EXPR136=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched3086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR136);
                    pushFollow(FOLLOW_expression_in_mergeMatched3088);
                    expression137=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression137.getTree());
                    }
                    break;
            }
            int cnt51=0;
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);
                if ( (LA51_0==THEN) ) {
                    alt51=1;
                }
                switch (alt51) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatchedItem_in_mergeMatched3092);
            	    mergeMatchedItem138=mergeMatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatchedItem.add(mergeMatchedItem138.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt51 >= 1 ) break loop51;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(51, input);
                        throw eee;
                }
                cnt51++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_MAT, "MERGE_MAT"), root_1);
                if ( !(stream_mergeMatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeMatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatchedItem.nextTree());
                }
                stream_mergeMatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatchedItem_return retval = new EsperEPL2GrammarParser.mergeMatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token d=null;
        Token THEN139=null;
        Token SET140=null;
        Token COMMA142=null;
        Token WHERE144=null;
        Token WHERE146=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment141 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment143 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause145 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause147 = null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert148 = null;
        CommonTree u_tree=null;
        CommonTree d_tree=null;
        CommonTree THEN139_tree=null;
        CommonTree SET140_tree=null;
        CommonTree COMMA142_tree=null;
        CommonTree WHERE144_tree=null;
        CommonTree WHERE146_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_mergeInsert=new RewriteRuleSubtreeStream(adaptor,"rule mergeInsert");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            THEN139=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatchedItem3118); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN139);
            int alt55=3;
            switch ( input.LA(1) ) {
            case UPDATE:
                {
                alt55=1;
                }
                break;
            case DELETE:
                {
                alt55=2;
                }
                break;
            case INSERT:
                {
                alt55=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);
                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    {
                    {
                    u=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatchedItem3133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(u);
                    SET140=(Token)match(input,SET,FOLLOW_SET_in_mergeMatchedItem3135); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET140);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3137);
                    onSetAssignment141=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment141.getTree());
                    loop52:
                    do {
                        int alt52=2;
                        int LA52_0 = input.LA(1);
                        if ( (LA52_0==COMMA) ) {
                            alt52=1;
                        }
                        switch (alt52) {
                    	case 1 :
                    	    {
                    	    COMMA142=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatchedItem3140); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA142);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3142);
                    	    onSetAssignment143=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment143.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop52;
                        }
                    } while (true);
                    }
                    int alt53=2;
                    int LA53_0 = input.LA(1);
                    if ( (LA53_0==WHERE) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            {
                            WHERE144=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3148); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE144);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3150);
                            whereClause145=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause145.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatchedItem3162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    int alt54=2;
                    int LA54_0 = input.LA(1);
                    if ( (LA54_0==WHERE) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            {
                            WHERE146=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3165); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE146);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3167);
                            whereClause147=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause147.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_mergeInsert_in_mergeMatchedItem3178);
                    mergeInsert148=mergeInsert();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mergeInsert.add(mergeInsert148.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_DEL, "MERGE_DEL"), root_1);
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_1, (CommonTree)adaptor.create(INT_TYPE, "dummy"));
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (u != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_mergeInsert.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN149=null;
        Token NOT_EXPR150=null;
        Token MATCHED151=null;
        Token AND_EXPR152=null;
        EsperEPL2GrammarParser.expression_return expression153 = null;
        EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem154 = null;
        CommonTree WHEN149_tree=null;
        CommonTree NOT_EXPR150_tree=null;
        CommonTree MATCHED151_tree=null;
        CommonTree AND_EXPR152_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeUnmatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatchedItem");
        try {
            {
            WHEN149=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched3235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN149);
            NOT_EXPR150=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched3237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR150);
            MATCHED151=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched3239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED151);
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==AND_EXPR) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    {
                    AND_EXPR152=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched3242); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR152);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched3244);
                    expression153=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression153.getTree());
                    }
                    break;
            }
            int cnt57=0;
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);
                if ( (LA57_0==THEN) ) {
                    alt57=1;
                }
                switch (alt57) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3248);
            	    mergeUnmatchedItem154=mergeUnmatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatchedItem.add(mergeUnmatchedItem154.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt57 >= 1 ) break loop57;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        throw eee;
                }
                cnt57++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UNM, "MERGE_UNM"), root_1);
                if ( !(stream_mergeUnmatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeUnmatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatchedItem.nextTree());
                }
                stream_mergeUnmatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatchedItem_return retval = new EsperEPL2GrammarParser.mergeUnmatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token THEN155=null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert156 = null;
        CommonTree THEN155_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            THEN155=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatchedItem3275); if (state.failed) return retval;
            pushFollow(FOLLOW_mergeInsert_in_mergeUnmatchedItem3278);
            mergeInsert156=mergeInsert();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeInsert156.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeInsert_return mergeInsert() throws RecognitionException {
        EsperEPL2GrammarParser.mergeInsert_return retval = new EsperEPL2GrammarParser.mergeInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT157=null;
        Token INTO158=null;
        Token LPAREN160=null;
        Token RPAREN162=null;
        Token SELECT163=null;
        Token WHERE165=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier159 = null;
        EsperEPL2GrammarParser.columnList_return columnList161 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList164 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause166 = null;
        CommonTree INSERT157_tree=null;
        CommonTree INTO158_tree=null;
        CommonTree LPAREN160_tree=null;
        CommonTree RPAREN162_tree=null;
        CommonTree SELECT163_tree=null;
        CommonTree WHERE165_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            INSERT157=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeInsert3293); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT157);
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==INTO) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    INTO158=(Token)match(input,INTO,FOLLOW_INTO_in_mergeInsert3296); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO158);
                    pushFollow(FOLLOW_classIdentifier_in_mergeInsert3298);
                    classIdentifier159=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier159.getTree());
                    }
                    break;
            }
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==LPAREN) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    LPAREN160=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeInsert3303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN160);
                    pushFollow(FOLLOW_columnList_in_mergeInsert3305);
                    columnList161=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList161.getTree());
                    RPAREN162=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeInsert3307); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN162);
                    }
                    break;
            }
            SELECT163=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeInsert3311); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT163);
            pushFollow(FOLLOW_selectionList_in_mergeInsert3313);
            selectionList164=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList164.getTree());
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==WHERE) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    WHERE165=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeInsert3316); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE165);
                    pushFollow(FOLLOW_whereClause_in_mergeInsert3318);
                    whereClause166=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause166.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT167=null;
        Token SELECT169=null;
        Token DISTINCT170=null;
        Token WHERE173=null;
        Token GROUP175=null;
        Token BY176=null;
        Token HAVING178=null;
        Token ORDER180=null;
        Token BY181=null;
        Token ROW_LIMIT_EXPR183=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr168 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList171 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom172 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause174 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr177 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause179 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr182 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit184 = null;
        CommonTree INSERT167_tree=null;
        CommonTree SELECT169_tree=null;
        CommonTree DISTINCT170_tree=null;
        CommonTree WHERE173_tree=null;
        CommonTree GROUP175_tree=null;
        CommonTree BY176_tree=null;
        CommonTree HAVING178_tree=null;
        CommonTree ORDER180_tree=null;
        CommonTree BY181_tree=null;
        CommonTree ROW_LIMIT_EXPR183_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==INSERT) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    INSERT167=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr3364); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT167);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr3366);
                    insertIntoExpr168=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr168.getTree());
                    }
                    break;
            }
            SELECT169=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr3372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT169);
            int alt62=2;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==DISTINCT) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    DISTINCT170=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr3374); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT170);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr3377);
            selectionList171=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList171.getTree());
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==FROM) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr3381);
                    onExprFrom172=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom172.getTree());
                    }
                    break;
            }
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==WHERE) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    WHERE173=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr3387); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE173);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr3389);
                    whereClause174=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause174.getTree());
                    }
                    break;
            }
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==GROUP) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    GROUP175=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr3398); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP175);
                    BY176=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3400); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY176);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr3402);
                    groupByListExpr177=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr177.getTree());
                    }
                    break;
            }
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==HAVING) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    HAVING178=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr3409); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING178);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr3411);
                    havingClause179=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause179.getTree());
                    }
                    break;
            }
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==ORDER) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    ORDER180=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr3418); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER180);
                    BY181=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3420); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY181);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr3422);
                    orderByListExpr182=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr182.getTree());
                    }
                    break;
            }
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==ROW_LIMIT_EXPR) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR183=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3429); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR183);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr3431);
                    rowLimit184=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit184.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE185=null;
        Token AS186=null;
        Token SET187=null;
        Token COMMA189=null;
        Token WHERE191=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment188 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment190 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause192 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE185_tree=null;
        CommonTree AS186_tree=null;
        CommonTree SET187_tree=null;
        CommonTree COMMA189_tree=null;
        CommonTree WHERE191_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE185=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr3491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE185);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3498); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt69=3;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==AS) ) {
                alt69=1;
            }
            else if ( (LA69_0==IDENT) ) {
                alt69=2;
            }
            switch (alt69) {
                case 1 :
                    {
                    AS186=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr3501); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS186);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3505); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3511); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET187=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr3517); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET187);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3519);
            onSetAssignment188=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment188.getTree());
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);
                if ( (LA70_0==COMMA) ) {
                    alt70=1;
                }
                switch (alt70) {
            	case 1 :
            	    {
            	    COMMA189=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr3522); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA189);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3524);
            	    onSetAssignment190=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment190.getTree());
            	    }
            	    break;
            	default :
            	    break loop70;
                }
            } while (true);
            int alt71=2;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==WHERE) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    WHERE191=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr3531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE191);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr3533);
                    whereClause192=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause192.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT193=null;
        Token SELECT195=null;
        Token WHERE197=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr194 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList196 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause198 = null;
        CommonTree INSERT193_tree=null;
        CommonTree SELECT195_tree=null;
        CommonTree WHERE197_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT193=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3584); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT193);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3586);
            insertIntoExpr194=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr194.getTree());
            SELECT195=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3590); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT195);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3592);
            selectionList196=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList196.getTree());
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==WHERE) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    WHERE197=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE197);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3599);
                    whereClause198=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause198.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT199=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT199_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT199=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT199);
            int alt73=2;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==FIRST) ) {
                alt73=1;
            }
            else if ( (LA73_0==ALL) ) {
                alt73=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);
                throw nvae;
            }
            switch (alt73) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3635); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3641); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE200=null;
        Token WHERE202=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom201 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause203 = null;
        CommonTree DELETE200_tree=null;
        CommonTree WHERE202_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE200=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3683); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE200);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3687);
            onExprFrom201=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom201.getTree());
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==WHERE) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    WHERE202=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3692); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE202);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3694);
                    whereClause203=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause203.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET204=null;
        Token COMMA206=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment205 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment207 = null;
        CommonTree SET204_tree=null;
        CommonTree COMMA206_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET204=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3734); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET204);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3736);
            onSetAssignment205=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment205.getTree());
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);
                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }
                switch (alt75) {
            	case 1 :
            	    {
            	    COMMA206=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3739); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA206);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3741);
            	    onSetAssignment207=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment207.getTree());
            	    }
            	    break;
            	default :
            	    break loop75;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS209=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty208 = null;
        EsperEPL2GrammarParser.expression_return expression210 = null;
        CommonTree EQUALS209_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3766);
            eventProperty208=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty208.getTree());
            EQUALS209=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3768); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS209);
            pushFollow(FOLLOW_expression_in_onSetAssignment3770);
            expression210=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression210.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM211=null;
        Token AS212=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM211_tree=null;
        CommonTree AS212_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM211=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM211);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt76=3;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==AS) ) {
                alt76=1;
            }
            else if ( (LA76_0==IDENT) ) {
                alt76=2;
            }
            switch (alt76) {
                case 1 :
                    {
                    AS212=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3802); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS212);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3806); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3812); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE213=null;
        Token WINDOW214=null;
        Token DOT215=null;
        Token DOT217=null;
        Token AS219=null;
        Token LPAREN221=null;
        Token RPAREN223=null;
        Token WHERE224=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression216 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression218 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter220 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList222 = null;
        EsperEPL2GrammarParser.expression_return expression225 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE213_tree=null;
        CommonTree WINDOW214_tree=null;
        CommonTree DOT215_tree=null;
        CommonTree DOT217_tree=null;
        CommonTree AS219_tree=null;
        CommonTree LPAREN221_tree=null;
        CommonTree RPAREN223_tree=null;
        CommonTree WHERE224_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE213=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE213);
            WINDOW214=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW214);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3846); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt78=2;
            int LA78_0 = input.LA(1);
            if ( (LA78_0==DOT) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    DOT215=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3849); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT215);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3851);
                    viewExpression216=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression216.getTree());
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);
                        if ( (LA77_0==DOT) ) {
                            alt77=1;
                        }
                        switch (alt77) {
                    	case 1 :
                    	    {
                    	    DOT217=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3854); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT217);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3856);
                    	    viewExpression218=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression218.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop77;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt79=3;
            int LA79_0 = input.LA(1);
            if ( (LA79_0==RETAINUNION) ) {
                alt79=1;
            }
            else if ( (LA79_0==RETAININTERSECTION) ) {
                alt79=2;
            }
            switch (alt79) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3865); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==AS) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    {
                    AS219=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3873); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS219);
                    }
                    break;
            }
            int alt81=2;
            int LA81_0 = input.LA(1);
            if ( (LA81_0==SELECT||LA81_0==IDENT||LA81_0==TICKED_STRING_LITERAL) ) {
                alt81=1;
            }
            else if ( (LA81_0==LPAREN) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);
                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3888);
                    createWindowExprModelAfter220=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter220.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN221=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN221);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3905);
                    createColumnList222=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList222.getTree());
                    RPAREN223=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3907); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN223);
                    }
                    break;
            }
            int alt83=2;
            int LA83_0 = input.LA(1);
            if ( (LA83_0==INSERT) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3924); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt82=2;
                    int LA82_0 = input.LA(1);
                    if ( (LA82_0==WHERE) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            {
                            WHERE224=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3927); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE224);
                            pushFollow(FOLLOW_expression_in_createWindowExpr3929);
                            expression225=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression225.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT226=null;
        Token FROM228=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList227 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier229 = null;
        CommonTree SELECT226_tree=null;
        CommonTree FROM228_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt84=2;
            int LA84_0 = input.LA(1);
            if ( (LA84_0==SELECT) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    {
                    SELECT226=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter4016); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter4019);
                    createSelectionList227=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList227.getTree());
                    FROM228=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter4021); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter4026);
            classIdentifier229=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier229.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE230=null;
        Token INDEX231=null;
        Token ON232=null;
        Token LPAREN233=null;
        Token RPAREN235=null;
        EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList234 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE230_tree=null;
        CommonTree INDEX231_tree=null;
        CommonTree ON232_tree=null;
        CommonTree LPAREN233_tree=null;
        CommonTree RPAREN235_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createIndexColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumnList");
        try {
            {
            CREATE230=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr4039); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE230);
            INDEX231=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr4041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX231);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON232=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr4047); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON232);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4051); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN233=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr4053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN233);
            pushFollow(FOLLOW_createIndexColumnList_in_createIndexExpr4055);
            createIndexColumnList234=createIndexColumnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumnList.add(createIndexColumnList234.getTree());
            RPAREN235=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr4057); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN235);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_createIndexColumnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumnList_return retval = new EsperEPL2GrammarParser.createIndexColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA237=null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn236 = null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn238 = null;
        CommonTree COMMA237_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createIndexColumn=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumn");
        try {
            {
            pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList4086);
            createIndexColumn236=createIndexColumn();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn236.getTree());
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);
                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }
                switch (alt85) {
            	case 1 :
            	    {
            	    COMMA237=(Token)match(input,COMMA,FOLLOW_COMMA_in_createIndexColumnList4089); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA237);
            	    pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList4091);
            	    createIndexColumn238=createIndexColumn();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn238.getTree());
            	    }
            	    break;
            	default :
            	    break loop85;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                if ( !(stream_createIndexColumn.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createIndexColumn.hasNext() ) {
                    adaptor.addChild(root_1, stream_createIndexColumn.nextTree());
                }
                stream_createIndexColumn.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumn_return retval = new EsperEPL2GrammarParser.createIndexColumn_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT239=null;
        Token IDENT240=null;
        CommonTree IDENT239_tree=null;
        CommonTree IDENT240_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            IDENT239=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4118); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT239);
            int alt86=2;
            int LA86_0 = input.LA(1);
            if ( (LA86_0==IDENT) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    {
                    IDENT240=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4120); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT240);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token n=null;
        Token CREATE241=null;
        Token VARIABLE242=null;
        Token EQUALS244=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier243 = null;
        EsperEPL2GrammarParser.expression_return expression245 = null;
        CommonTree c_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE241_tree=null;
        CommonTree VARIABLE242_tree=null;
        CommonTree EQUALS244_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE241=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr4145); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE241);
            int alt87=2;
            int LA87_0 = input.LA(1);
            if ( (LA87_0==IDENT) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    {
                    c=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr4149); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(c);
                    }
                    break;
            }
            VARIABLE242=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr4152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE242);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr4154);
            classIdentifier243=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier243.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr4158); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt88=2;
            int LA88_0 = input.LA(1);
            if ( (LA88_0==EQUALS) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    {
                    EQUALS244=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr4161); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS244);
                    pushFollow(FOLLOW_expression_in_createVariableExpr4163);
                    expression245=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression245.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA247=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement246 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement248 = null;
        CommonTree COMMA247_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList4209);
            createColumnListElement246=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement246.getTree());
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);
                if ( (LA89_0==COMMA) ) {
                    alt89=1;
                }
                switch (alt89) {
            	case 1 :
            	    {
            	    COMMA247=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList4212); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA247);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList4214);
            	    createColumnListElement248=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement248.getTree());
            	    }
            	    break;
            	default :
            	    break loop89;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token b=null;
        Token RBRACK251=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy249 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier250 = null;
        CommonTree b_tree=null;
        CommonTree RBRACK251_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4242);
            classIdentifierNonGreedy249=classIdentifierNonGreedy();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy249.getTree());
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement4245);
            classIdentifier250=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier250.getTree());
            int alt90=2;
            int LA90_0 = input.LA(1);
            if ( (LA90_0==LBRACK) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement4250); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK251=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement4252); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK251);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA253=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement252 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement254 = null;
        CommonTree COMMA253_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4295);
            createSelectionListElement252=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement252.getTree());
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);
                if ( (LA91_0==COMMA) ) {
                    alt91=1;
                }
                switch (alt91) {
            	case 1 :
            	    {
            	    COMMA253=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList4298); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA253);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4300);
            	    createSelectionListElement254=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement254.getTree());
            	    }
            	    break;
            	default :
            	    break loop91;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS256=null;
        Token AS258=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty255 = null;
        EsperEPL2GrammarParser.constant_return constant257 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS256_tree=null;
        CommonTree AS258_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt93=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt93=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case CONTEXT:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt93=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt93=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);
                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement4329); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement4341);
                    eventProperty255=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty255.getTree());
                    int alt92=2;
                    int LA92_0 = input.LA(1);
                    if ( (LA92_0==AS) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            {
                            AS256=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4344); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS256);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4348); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement4369);
                    constant257=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant257.getTree());
                    AS258=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4371); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS258);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4375); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token name=null;
        Token CREATE259=null;
        Token SCHEMA260=null;
        Token AS261=null;
        Token LPAREN263=null;
        Token RPAREN265=null;
        EsperEPL2GrammarParser.variantList_return variantList262 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList264 = null;
        EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual266 = null;
        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree CREATE259_tree=null;
        CommonTree SCHEMA260_tree=null;
        CommonTree AS261_tree=null;
        CommonTree LPAREN263_tree=null;
        CommonTree RPAREN265_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_createSchemaQual=new RewriteRuleSubtreeStream(adaptor,"rule createSchemaQual");
        try {
            {
            CREATE259=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr4400); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE259);
            int alt94=2;
            int LA94_0 = input.LA(1);
            if ( (LA94_0==IDENT) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            SCHEMA260=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr4407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA260);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4411); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt95=2;
            int LA95_0 = input.LA(1);
            if ( (LA95_0==AS) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    {
                    AS261=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr4413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS261);
                    }
                    break;
            }
            int alt97=2;
            int LA97_0 = input.LA(1);
            if ( (LA97_0==IDENT||LA97_0==STAR||LA97_0==TICKED_STRING_LITERAL) ) {
                alt97=1;
            }
            else if ( (LA97_0==LPAREN) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);
                throw nvae;
            }
            switch (alt97) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr4426);
                    variantList262=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList262.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN263=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr4437); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN263);
                    int alt96=2;
                    int LA96_0 = input.LA(1);
                    if ( (LA96_0==IDENT||LA96_0==TICKED_STRING_LITERAL) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr4439);
                            createColumnList264=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList264.getTree());
                            }
                            break;
                    }
                    RPAREN265=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr4442); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN265);
                    }
                    break;
            }
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);
                if ( (LA98_0==IDENT) ) {
                    alt98=1;
                }
                switch (alt98) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_createSchemaQual_in_createSchemaExpr4451);
            	    createSchemaQual266=createSchemaQual();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSchemaQual.add(createSchemaQual266.getTree());
            	    }
            	    break;
            	default :
            	    break loop98;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (keyword != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_VAR, "CREATE_SCHEMA_EXPR_VAR"), root_2);
                adaptor.addChild(root_2, stream_keyword.nextNode());
                adaptor.addChild(root_1, root_2);
                }
                while ( stream_createSchemaQual.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSchemaQual.nextTree());
                }
                stream_createSchemaQual.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                while ( stream_createSchemaQual.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSchemaQual.nextTree());
                }
                stream_createSchemaQual.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextExpr_return createContextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createContextExpr_return retval = new EsperEPL2GrammarParser.createContextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CREATE267=null;
        Token CONTEXT268=null;
        Token AS269=null;
        EsperEPL2GrammarParser.createContextDetail_return createContextDetail270 = null;
        CommonTree name_tree=null;
        CommonTree CREATE267_tree=null;
        CommonTree CONTEXT268_tree=null;
        CommonTree AS269_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        RewriteRuleSubtreeStream stream_createContextDetail=new RewriteRuleSubtreeStream(adaptor,"rule createContextDetail");
        try {
            {
            CREATE267=(Token)match(input,CREATE,FOLLOW_CREATE_in_createContextExpr4513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE267);
            CONTEXT268=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_createContextExpr4515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT268);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextExpr4519); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt99=2;
            int LA99_0 = input.LA(1);
            if ( (LA99_0==AS) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    {
                    AS269=(Token)match(input,AS,FOLLOW_AS_in_createContextExpr4521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS269);
                    }
                    break;
            }
            pushFollow(FOLLOW_createContextDetail_in_createContextExpr4524);
            createContextDetail270=createContextDetail();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createContextDetail.add(createContextDetail270.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX, "CREATE_CTX"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_createContextDetail.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextDetail_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextDetail_return createContextDetail() throws RecognitionException {
        EsperEPL2GrammarParser.createContextDetail_return retval = new EsperEPL2GrammarParser.createContextDetail_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA273=null;
        Token COMMA275=null;
        EsperEPL2GrammarParser.createContextChoice_return createContextChoice271 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested272 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested274 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested276 = null;
        CommonTree COMMA273_tree=null;
        CommonTree COMMA275_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_contextContextNested=new RewriteRuleSubtreeStream(adaptor,"rule contextContextNested");
        try {
            int alt101=2;
            int LA101_0 = input.LA(1);
            if ( (LA101_0==COALESCE||LA101_0==GROUP||LA101_0==PARTITION||LA101_0==START||LA101_0==INITIATED) ) {
                alt101=1;
            }
            else if ( (LA101_0==CONTEXT) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);
                throw nvae;
            }
            switch (alt101) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createContextChoice_in_createContextDetail4548);
                    createContextChoice271=createContextChoice();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextChoice271.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_contextContextNested_in_createContextDetail4553);
                    contextContextNested272=contextContextNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested272.getTree());
                    COMMA273=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail4555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA273);
                    pushFollow(FOLLOW_contextContextNested_in_createContextDetail4557);
                    contextContextNested274=contextContextNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested274.getTree());
                    loop100:
                    do {
                        int alt100=2;
                        int LA100_0 = input.LA(1);
                        if ( (LA100_0==COMMA) ) {
                            alt100=1;
                        }
                        switch (alt100) {
                    	case 1 :
                    	    {
                    	    COMMA275=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail4560); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA275);
                    	    pushFollow(FOLLOW_contextContextNested_in_createContextDetail4562);
                    	    contextContextNested276=contextContextNested();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested276.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop100;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_NESTED, "CREATE_CTX_NESTED"), root_1);
                        if ( !(stream_contextContextNested.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_contextContextNested.hasNext() ) {
                            adaptor.addChild(root_1, stream_contextContextNested.nextTree());
                        }
                        stream_contextContextNested.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class contextContextNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.contextContextNested_return contextContextNested() throws RecognitionException {
        EsperEPL2GrammarParser.contextContextNested_return retval = new EsperEPL2GrammarParser.contextContextNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CONTEXT277=null;
        Token AS278=null;
        EsperEPL2GrammarParser.createContextChoice_return createContextChoice279 = null;
        CommonTree name_tree=null;
        CommonTree CONTEXT277_tree=null;
        CommonTree AS278_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        RewriteRuleSubtreeStream stream_createContextChoice=new RewriteRuleSubtreeStream(adaptor,"rule createContextChoice");
        try {
            {
            CONTEXT277=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextContextNested4588); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT277);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_contextContextNested4592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt102=2;
            int LA102_0 = input.LA(1);
            if ( (LA102_0==AS) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    {
                    AS278=(Token)match(input,AS,FOLLOW_AS_in_contextContextNested4594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS278);
                    }
                    break;
            }
            pushFollow(FOLLOW_createContextChoice_in_contextContextNested4597);
            createContextChoice279=createContextChoice();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createContextChoice.add(createContextChoice279.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX, "CREATE_CTX"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_createContextChoice.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextChoice_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextChoice_return createContextChoice() throws RecognitionException {
        EsperEPL2GrammarParser.createContextChoice_return retval = new EsperEPL2GrammarParser.createContextChoice_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token g=null;
        Token p=null;
        Token START280=null;
        Token END282=null;
        Token INITIATED284=null;
        Token BY285=null;
        Token TERMINATED287=null;
        Token BY288=null;
        Token PARTITION290=null;
        Token BY291=null;
        Token COMMA293=null;
        Token COMMA296=null;
        Token FROM298=null;
        Token COALESCE300=null;
        Token BY301=null;
        Token COMMA303=null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint281 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint283 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint286 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint289 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem292 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem294 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem295 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem297 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression299 = null;
        EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem302 = null;
        EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem304 = null;
        EsperEPL2GrammarParser.number_return number305 = null;
        CommonTree g_tree=null;
        CommonTree p_tree=null;
        CommonTree START280_tree=null;
        CommonTree END282_tree=null;
        CommonTree INITIATED284_tree=null;
        CommonTree BY285_tree=null;
        CommonTree TERMINATED287_tree=null;
        CommonTree BY288_tree=null;
        CommonTree PARTITION290_tree=null;
        CommonTree BY291_tree=null;
        CommonTree COMMA293_tree=null;
        CommonTree COMMA296_tree=null;
        CommonTree FROM298_tree=null;
        CommonTree COALESCE300_tree=null;
        CommonTree BY301_tree=null;
        CommonTree COMMA303_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INITIATED=new RewriteRuleTokenStream(adaptor,"token INITIATED");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_START=new RewriteRuleTokenStream(adaptor,"token START");
        RewriteRuleTokenStream stream_COALESCE=new RewriteRuleTokenStream(adaptor,"token COALESCE");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_createContextRangePoint=new RewriteRuleSubtreeStream(adaptor,"rule createContextRangePoint");
        RewriteRuleSubtreeStream stream_createContextPartitionItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextPartitionItem");
        RewriteRuleSubtreeStream stream_createContextCoalesceItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextCoalesceItem");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_createContextGroupItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextGroupItem");
        try {
            int alt111=5;
            switch ( input.LA(1) ) {
            case START:
                {
                alt111=1;
                }
                break;
            case INITIATED:
                {
                alt111=2;
                }
                break;
            case PARTITION:
                {
                alt111=3;
                }
                break;
            case GROUP:
                {
                alt111=4;
                }
                break;
            case COALESCE:
                {
                alt111=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);
                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    {
                    START280=(Token)match(input,START,FOLLOW_START_in_createContextChoice4622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_START.add(START280);
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice4624);
                    createContextRangePoint281=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint281.getTree());
                    END282=(Token)match(input,END,FOLLOW_END_in_createContextChoice4626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END282);
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice4628);
                    createContextRangePoint283=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint283.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_FIXED, "CREATE_CTX_FIXED"), root_1);
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    INITIATED284=(Token)match(input,INITIATED,FOLLOW_INITIATED_in_createContextChoice4645); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INITIATED.add(INITIATED284);
                    int alt103=2;
                    int LA103_0 = input.LA(1);
                    if ( (LA103_0==BY) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            {
                            BY285=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice4648); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY285);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice4652);
                    createContextRangePoint286=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint286.getTree());
                    TERMINATED287=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_createContextChoice4654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED287);
                    int alt104=2;
                    int LA104_0 = input.LA(1);
                    if ( (LA104_0==BY) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            {
                            BY288=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice4657); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY288);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice4661);
                    createContextRangePoint289=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint289.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_INIT, "CREATE_CTX_INIT"), root_1);
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    PARTITION290=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_createContextChoice4678); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION290);
                    int alt105=2;
                    int LA105_0 = input.LA(1);
                    if ( (LA105_0==BY) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            {
                            BY291=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice4681); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY291);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextPartitionItem_in_createContextChoice4685);
                    createContextPartitionItem292=createContextPartitionItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem292.getTree());
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);
                        if ( (LA106_0==COMMA) ) {
                            int LA106_3 = input.LA(2);
                            if ( (LA106_3==CONTEXT) ) {
                                int LA106_4 = input.LA(3);
                                if ( (LA106_4==AND_EXPR||LA106_4==FROM||LA106_4==LBRACK||LA106_4==LPAREN||LA106_4==COMMA||LA106_4==DOT||LA106_4==QUESTION||LA106_4==ESCAPECHAR) ) {
                                    alt106=1;
                                }
                            }
                            else if ( (LA106_3==WINDOW||LA106_3==ESCAPE||LA106_3==EVERY_EXPR||(LA106_3>=SUM && LA106_3<=COUNT)||LA106_3==OUTER||(LA106_3>=JOIN && LA106_3<=FULL)||(LA106_3>=EVENTS && LA106_3<=LAST)||(LA106_3>=UNIDIRECTIONAL && LA106_3<=PREVIOUSTAIL)||LA106_3==PRIOR||(LA106_3>=WEEKDAY && LA106_3<=CAST)||LA106_3==SNAPSHOT||(LA106_3>=VARIABLE && LA106_3<=INDEX)||(LA106_3>=DEFINE && LA106_3<=MATCHES)||LA106_3==WHILE||(LA106_3>=MERGE && LA106_3<=MATCHED)||LA106_3==IDENT||LA106_3==TICKED_STRING_LITERAL) ) {
                                alt106=1;
                            }
                        }
                        switch (alt106) {
                    	case 1 :
                    	    {
                    	    COMMA293=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice4688); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA293);
                    	    pushFollow(FOLLOW_createContextPartitionItem_in_createContextChoice4690);
                    	    createContextPartitionItem294=createContextPartitionItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem294.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop106;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_PART, "CREATE_CTX_PART"), root_1);
                        if ( !(stream_createContextPartitionItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextPartitionItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextPartitionItem.nextTree());
                        }
                        stream_createContextPartitionItem.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createContextGroupItem_in_createContextChoice4709);
                    createContextGroupItem295=createContextGroupItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem295.getTree());
                    loop107:
                    do {
                        int alt107=2;
                        int LA107_0 = input.LA(1);
                        if ( (LA107_0==COMMA) ) {
                            alt107=1;
                        }
                        switch (alt107) {
                    	case 1 :
                    	    {
                    	    COMMA296=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice4712); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA296);
                    	    pushFollow(FOLLOW_createContextGroupItem_in_createContextChoice4714);
                    	    createContextGroupItem297=createContextGroupItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem297.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop107;
                        }
                    } while (true);
                    FROM298=(Token)match(input,FROM,FOLLOW_FROM_in_createContextChoice4718); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM298);
                    pushFollow(FOLLOW_eventFilterExpression_in_createContextChoice4720);
                    eventFilterExpression299=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression299.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CAT, "CREATE_CTX_CAT"), root_1);
                        if ( !(stream_createContextGroupItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextGroupItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextGroupItem.nextTree());
                        }
                        stream_createContextGroupItem.reset();
                        adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    COALESCE300=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_createContextChoice4738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COALESCE.add(COALESCE300);
                    int alt108=2;
                    int LA108_0 = input.LA(1);
                    if ( (LA108_0==BY) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            {
                            BY301=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice4741); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY301);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextCoalesceItem_in_createContextChoice4745);
                    createContextCoalesceItem302=createContextCoalesceItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextCoalesceItem.add(createContextCoalesceItem302.getTree());
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);
                        if ( (LA109_0==COMMA) ) {
                            alt109=1;
                        }
                        switch (alt109) {
                    	case 1 :
                    	    {
                    	    COMMA303=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice4748); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA303);
                    	    pushFollow(FOLLOW_createContextCoalesceItem_in_createContextChoice4750);
                    	    createContextCoalesceItem304=createContextCoalesceItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextCoalesceItem.add(createContextCoalesceItem304.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop109;
                        }
                    } while (true);
                    g=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice4756); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(g);
                    pushFollow(FOLLOW_number_in_createContextChoice4758);
                    number305=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number305.getTree());
                    int alt110=2;
                    int LA110_0 = input.LA(1);
                    if ( (LA110_0==IDENT) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            {
                            p=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice4763); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(p);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_COAL, "CREATE_CTX_COAL"), root_1);
                        if ( !(stream_createContextCoalesceItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextCoalesceItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextCoalesceItem.nextTree());
                        }
                        stream_createContextCoalesceItem.reset();
                        adaptor.addChild(root_1, stream_g.nextNode());
                        adaptor.addChild(root_1, stream_number.nextTree());
                        if ( stream_p.hasNext() ) {
                            adaptor.addChild(root_1, stream_p.nextNode());
                        }
                        stream_p.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextRangePoint_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint() throws RecognitionException {
        EsperEPL2GrammarParser.createContextRangePoint_return retval = new EsperEPL2GrammarParser.createContextRangePoint_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER309=null;
        EsperEPL2GrammarParser.createContextFilter_return createContextFilter306 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression307 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet308 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod310 = null;
        CommonTree AFTER309_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            int alt112=4;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt112=1;
                }
                break;
            case PATTERN:
                {
                alt112=2;
                }
                break;
            case LPAREN:
                {
                alt112=3;
                }
                break;
            case AFTER:
                {
                alt112=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);
                throw nvae;
            }
            switch (alt112) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createContextFilter_in_createContextRangePoint4797);
                    createContextFilter306=createContextFilter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextFilter306.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternInclusionExpression_in_createContextRangePoint4804);
                    patternInclusionExpression307=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternInclusionExpression307.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_createContextRangePoint4809);
                    crontabLimitParameterSet308=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, crontabLimitParameterSet308.getTree());
                    }
                    break;
                case 4 :
                    {
                    AFTER309=(Token)match(input,AFTER,FOLLOW_AFTER_in_createContextRangePoint4814); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(AFTER309);
                    pushFollow(FOLLOW_timePeriod_in_createContextRangePoint4816);
                    timePeriod310=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod310.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_timePeriod.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextFilter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextFilter_return createContextFilter() throws RecognitionException {
        EsperEPL2GrammarParser.createContextFilter_return retval = new EsperEPL2GrammarParser.createContextFilter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS312=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression311 = null;
        CommonTree i_tree=null;
        CommonTree AS312_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_createContextFilter4836);
            eventFilterExpression311=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression311.getTree());
            int alt114=2;
            int LA114_0 = input.LA(1);
            if ( (LA114_0==AS||LA114_0==IDENT) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    {
                    int alt113=2;
                    int LA113_0 = input.LA(1);
                    if ( (LA113_0==AS) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            {
                            AS312=(Token)match(input,AS,FOLLOW_AS_in_createContextFilter4839); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS312);
                            }
                            break;
                    }
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextFilter4844); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextPartitionItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextPartitionItem_return retval = new EsperEPL2GrammarParser.createContextPartitionItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR314=null;
        Token COMMA315=null;
        Token FROM317=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty313 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty316 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression318 = null;
        CommonTree AND_EXPR314_tree=null;
        CommonTree COMMA315_tree=null;
        CommonTree FROM317_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem4871);
            eventProperty313=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty313.getTree());
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);
                if ( (LA116_0==AND_EXPR||LA116_0==COMMA) ) {
                    alt116=1;
                }
                switch (alt116) {
            	case 1 :
            	    {
            	    int alt115=2;
            	    int LA115_0 = input.LA(1);
            	    if ( (LA115_0==AND_EXPR) ) {
            	        alt115=1;
            	    }
            	    else if ( (LA115_0==COMMA) ) {
            	        alt115=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 115, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt115) {
            	        case 1 :
            	            {
            	            AND_EXPR314=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_createContextPartitionItem4875); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR314);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            COMMA315=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextPartitionItem4877); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_COMMA.add(COMMA315);
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem4880);
            	    eventProperty316=eventProperty();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty316.getTree());
            	    }
            	    break;
            	default :
            	    break loop116;
                }
            } while (true);
            FROM317=(Token)match(input,FROM,FOLLOW_FROM_in_createContextPartitionItem4884); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM317);
            pushFollow(FOLLOW_eventFilterExpression_in_createContextPartitionItem4886);
            eventFilterExpression318=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression318.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_eventProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventProperty.nextTree());
                }
                stream_eventProperty.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextCoalesceItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextCoalesceItem_return retval = new EsperEPL2GrammarParser.createContextCoalesceItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FROM320=null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass319 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression321 = null;
        CommonTree FROM320_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionNoClass_in_createContextCoalesceItem4912);
            libFunctionNoClass319=libFunctionNoClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass319.getTree());
            FROM320=(Token)match(input,FROM,FOLLOW_FROM_in_createContextCoalesceItem4914); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM320);
            pushFollow(FOLLOW_eventFilterExpression_in_createContextCoalesceItem4916);
            eventFilterExpression321=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression321.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COALESCE, "COALESCE"), root_1);
                adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextGroupItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextGroupItem_return retval = new EsperEPL2GrammarParser.createContextGroupItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token GROUP322=null;
        Token BY323=null;
        Token AS325=null;
        EsperEPL2GrammarParser.expression_return expression324 = null;
        CommonTree i_tree=null;
        CommonTree GROUP322_tree=null;
        CommonTree BY323_tree=null;
        CommonTree AS325_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            GROUP322=(Token)match(input,GROUP,FOLLOW_GROUP_in_createContextGroupItem4940); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GROUP.add(GROUP322);
            int alt117=2;
            int LA117_0 = input.LA(1);
            if ( (LA117_0==BY) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    {
                    BY323=(Token)match(input,BY,FOLLOW_BY_in_createContextGroupItem4942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY323);
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_createContextGroupItem4945);
            expression324=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression324.getTree());
            AS325=(Token)match(input,AS,FOLLOW_AS_in_createContextGroupItem4947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS325);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextGroupItem4951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CATITEM, "CREATE_CTX_CATITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaQual_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaQual_return retval = new EsperEPL2GrammarParser.createSchemaQual_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.columnList_return columnList326 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaQual4981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_columnList_in_createSchemaQual4983);
            columnList326=columnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList326.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA328=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement327 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement329 = null;
        CommonTree COMMA328_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList5009);
            variantListElement327=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement327.getTree());
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);
                if ( (LA118_0==COMMA) ) {
                    alt118=1;
                }
                switch (alt118) {
            	case 1 :
            	    {
            	    COMMA328=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList5012); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA328);
            	    pushFollow(FOLLOW_variantListElement_in_variantList5014);
            	    variantListElement329=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement329.getTree());
            	    }
            	    break;
            	default :
            	    break loop118;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR330=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier331 = null;
        CommonTree STAR330_tree=null;
        try {
            int alt119=2;
            int LA119_0 = input.LA(1);
            if ( (LA119_0==STAR) ) {
                alt119=1;
            }
            else if ( (LA119_0==IDENT||LA119_0==TICKED_STRING_LITERAL) ) {
                alt119=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);
                throw nvae;
            }
            switch (alt119) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR330=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement5041); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR330_tree = (CommonTree)adaptor.create(STAR330);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR330_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement5047);
                    classIdentifier331=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier331.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token INTO332=null;
        Token LPAREN334=null;
        Token RPAREN336=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier333 = null;
        EsperEPL2GrammarParser.columnList_return columnList335 = null;
        CommonTree s_tree=null;
        CommonTree INTO332_tree=null;
        CommonTree LPAREN334_tree=null;
        CommonTree RPAREN336_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt120=3;
            int LA120_0 = input.LA(1);
            if ( (LA120_0==ISTREAM) ) {
                alt120=1;
            }
            else if ( (LA120_0==RSTREAM) ) {
                alt120=2;
            }
            switch (alt120) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr5072); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr5078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO332=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr5082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO332);
            pushFollow(FOLLOW_classIdentifier_in_insertIntoExpr5084);
            classIdentifier333=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier333.getTree());
            int alt121=2;
            int LA121_0 = input.LA(1);
            if ( (LA121_0==LPAREN) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    {
                    LPAREN334=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr5087); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN334);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr5089);
                    columnList335=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList335.getTree());
                    RPAREN336=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr5091); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN336);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT337=null;
        Token COMMA338=null;
        Token IDENT339=null;
        CommonTree IDENT337_tree=null;
        CommonTree COMMA338_tree=null;
        CommonTree IDENT339_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT337=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList5124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT337);
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);
                if ( (LA122_0==COMMA) ) {
                    alt122=1;
                }
                switch (alt122) {
            	case 1 :
            	    {
            	    COMMA338=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList5127); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA338);
            	    IDENT339=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList5129); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT339);
            	    }
            	    break;
            	default :
            	    break loop122;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression340 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin341 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList342 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause5167);
            streamExpression340=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression340.getTree());
            int alt123=2;
            int LA123_0 = input.LA(1);
            if ( (LA123_0==EOF||LA123_0==WHERE||(LA123_0>=GROUP && LA123_0<=HAVING)||LA123_0==OUTPUT||LA123_0==ORDER||LA123_0==ROW_LIMIT_EXPR||LA123_0==MATCH_RECOGNIZE||LA123_0==FOR||LA123_0==COMMA) ) {
                alt123=1;
            }
            else if ( ((LA123_0>=INNER && LA123_0<=FULL)) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);
                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause5170);
                    regularJoin341=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin341.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause5174);
                    outerJoinList342=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList342.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA343=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression344 = null;
        CommonTree COMMA343_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);
                if ( (LA124_0==COMMA) ) {
                    alt124=1;
                }
                switch (alt124) {
            	case 1 :
            	    {
            	    COMMA343=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin5188); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin5191);
            	    streamExpression344=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression344.getTree());
            	    }
            	    break;
            	default :
            	    break loop124;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin345 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin346 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList5205);
            outerJoin345=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin345.getTree());
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);
                if ( ((LA125_0>=INNER && LA125_0<=FULL)) ) {
                    alt125=1;
                }
                switch (alt125) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList5208);
            	    outerJoin346=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin346.getTree());
            	    }
            	    break;
            	default :
            	    break loop125;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER347=null;
        Token JOIN348=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression349 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent350 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER347_tree=null;
        CommonTree JOIN348_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt128=2;
            int LA128_0 = input.LA(1);
            if ( ((LA128_0>=JOIN && LA128_0<=FULL)) ) {
                alt128=1;
            }
            else if ( (LA128_0==INNER) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);
                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    {
                    int alt127=2;
                    int LA127_0 = input.LA(1);
                    if ( ((LA127_0>=LEFT && LA127_0<=FULL)) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            {
                            int alt126=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt126=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt126=2;
                                }
                                break;
                            case FULL:
                                {
                                alt126=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 0, input);
                                throw nvae;
                            }
                            switch (alt126) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin5251); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin5255); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin5259); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER347=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin5262); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER347);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin5283); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN348=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin5297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN348);
            pushFollow(FOLLOW_streamExpression_in_outerJoin5299);
            streamExpression349=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression349.getTree());
            int alt129=2;
            int LA129_0 = input.LA(1);
            if ( (LA129_0==ON) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outerJoinIdent_in_outerJoin5301);
                    outerJoinIdent350=outerJoinIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent350.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON351=null;
        Token AND_EXPR353=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair352 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair354 = null;
        CommonTree ON351_tree=null;
        CommonTree AND_EXPR353_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON351=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent5379); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent5382);
            outerJoinIdentPair352=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair352.getTree());
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);
                if ( (LA130_0==AND_EXPR) ) {
                    alt130=1;
                }
                switch (alt130) {
            	case 1 :
            	    {
            	    AND_EXPR353=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent5385); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent5388);
            	    outerJoinIdentPair354=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair354.getTree());
            	    }
            	    break;
            	default :
            	    break loop130;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS356=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty355 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty357 = null;
        CommonTree EQUALS356_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair5403);
            eventProperty355=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty355.getTree());
            EQUALS356=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair5405); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair5408);
            eventProperty357=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty357.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression358 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause5430);
            evalOrExpression358=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression358.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList359 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt131=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt131=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt131=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt131=3;
                    }
                    break;
            }
            switch (alt131) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause5466); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause5472); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause5478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt132=2;
            int LA132_0 = input.LA(1);
            if ( (LA132_0==DISTINCT) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause5484); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause5487);
            selectionList359=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList359.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA361=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement360 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement362 = null;
        CommonTree COMMA361_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList5518);
            selectionListElement360=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement360.getTree());
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);
                if ( (LA133_0==COMMA) ) {
                    alt133=1;
                }
                switch (alt133) {
            	case 1 :
            	    {
            	    COMMA361=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList5521); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList5524);
            	    selectionListElement362=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement362.getTree());
            	    }
            	    break;
            	default :
            	    break loop133;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS365=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector363 = null;
        EsperEPL2GrammarParser.expression_return expression364 = null;
        CommonTree s_tree=null;
        CommonTree AS365_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt135=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt135=1;
                }
                break;
            case IDENT:
                {
                int LA135_2 = input.LA(2);
                if ( (LA135_2==DOT) ) {
                    int LA135_75 = input.LA(3);
                    if ( (LA135_75==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt135=2;
                    }
                    else if ( (LA135_75==WINDOW||LA135_75==BETWEEN||LA135_75==ESCAPE||LA135_75==EVERY_EXPR||LA135_75==WHERE||(LA135_75>=SUM && LA135_75<=COUNT)||LA135_75==OUTER||(LA135_75>=JOIN && LA135_75<=FULL)||(LA135_75>=EVENTS && LA135_75<=LAST)||(LA135_75>=UNIDIRECTIONAL && LA135_75<=PREVIOUSTAIL)||LA135_75==PRIOR||(LA135_75>=WEEKDAY && LA135_75<=CAST)||(LA135_75>=SNAPSHOT && LA135_75<=INDEX)||(LA135_75>=DEFINE && LA135_75<=AFTER)||LA135_75==WHILE||(LA135_75>=MERGE && LA135_75<=MATCHED)||LA135_75==CONTEXT||LA135_75==IDENT||LA135_75==TICKED_STRING_LITERAL) ) {
                        alt135=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 135, 75, input);
                        throw nvae;
                    }
                }
                else if ( (LA135_2==EOF||(LA135_2>=IN_SET && LA135_2<=REGEXP)||(LA135_2>=OR_EXPR && LA135_2<=NOT_EXPR)||(LA135_2>=WHERE && LA135_2<=AS)||(LA135_2>=WHEN && LA135_2<=THEN)||LA135_2==FROM||LA135_2==IS||(LA135_2>=GROUP && LA135_2<=HAVING)||LA135_2==OUTPUT||LA135_2==INSERT||LA135_2==ORDER||LA135_2==ROW_LIMIT_EXPR||LA135_2==FOR||LA135_2==LBRACK||LA135_2==LPAREN||(LA135_2>=COMMA && LA135_2<=EQUALS)||(LA135_2>=STAR && LA135_2<=QUESTION)||(LA135_2>=BAND && LA135_2<=MOD)||LA135_2==ESCAPECHAR) ) {
                    alt135=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt135=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);
                throw nvae;
            }
            switch (alt135) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement5550); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement5568);
                    streamSelector363=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector363.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement5573);
                    expression364=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression364.getTree());
                    int alt134=2;
                    int LA134_0 = input.LA(1);
                    if ( (LA134_0==AS) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            {
                            AS365=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement5576); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS365);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement5580);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT366=null;
        Token STAR367=null;
        Token AS368=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT366_tree=null;
        CommonTree STAR367_tree=null;
        CommonTree AS368_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector5636); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT366=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector5638); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT366);
            STAR367=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector5640); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR367);
            int alt136=2;
            int LA136_0 = input.LA(1);
            if ( (LA136_0==AS) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    {
                    AS368=(Token)match(input,AS,FOLLOW_AS_in_streamSelector5643); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS368);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector5647); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT373=null;
        Token DOT375=null;
        Token AS377=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression369 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression370 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression371 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression372 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression374 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression376 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT373_tree=null;
        CommonTree DOT375_tree=null;
        CommonTree AS377_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt137=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA137_1 = input.LA(2);
                if ( (LA137_1==EOF||(LA137_1>=WHERE && LA137_1<=AS)||(LA137_1>=INNER && LA137_1<=ON)||(LA137_1>=GROUP && LA137_1<=HAVING)||LA137_1==OUTPUT||LA137_1==ORDER||(LA137_1>=UNIDIRECTIONAL && LA137_1<=RETAININTERSECTION)||LA137_1==ROW_LIMIT_EXPR||LA137_1==MATCH_RECOGNIZE||LA137_1==FOR||LA137_1==LBRACK||(LA137_1>=IDENT && LA137_1<=LPAREN)||(LA137_1>=COMMA && LA137_1<=DOT)) ) {
                    alt137=1;
                }
                else if ( (LA137_1==COLON) ) {
                    alt137=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt137=1;
                }
                break;
            case PATTERN:
                {
                alt137=2;
                }
                break;
            case SQL:
                {
                alt137=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);
                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression5678);
                    eventFilterExpression369=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression369.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression5682);
                    patternInclusionExpression370=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression370.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression5686);
                    databaseJoinExpression371=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression371.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression5690);
                    methodJoinExpression372=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression372.getTree());
                    }
                    break;
            }
            int alt139=2;
            int LA139_0 = input.LA(1);
            if ( (LA139_0==DOT) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    {
                    DOT373=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression5697); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT373);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression5699);
                    viewExpression374=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression374.getTree());
                    loop138:
                    do {
                        int alt138=2;
                        int LA138_0 = input.LA(1);
                        if ( (LA138_0==DOT) ) {
                            alt138=1;
                        }
                        switch (alt138) {
                    	case 1 :
                    	    {
                    	    DOT375=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression5702); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT375);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression5704);
                    	    viewExpression376=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression376.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop138;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt140=3;
            int LA140_0 = input.LA(1);
            if ( (LA140_0==AS) ) {
                alt140=1;
            }
            else if ( (LA140_0==IDENT) ) {
                alt140=2;
            }
            switch (alt140) {
                case 1 :
                    {
                    AS377=(Token)match(input,AS,FOLLOW_AS_in_streamExpression5711); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS377);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression5715); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression5721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt141=2;
            int LA141_0 = input.LA(1);
            if ( (LA141_0==UNIDIRECTIONAL) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression5728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt142=3;
            int LA142_0 = input.LA(1);
            if ( (LA142_0==RETAINUNION) ) {
                alt142=1;
            }
            else if ( (LA142_0==RETAININTERSECTION) ) {
                alt142=2;
            }
            switch (alt142) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression5735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression5739); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR378=null;
        Token LPAREN379=null;
        Token RPAREN381=null;
        EsperEPL2GrammarParser.expressionList_return expressionList380 = null;
        CommonTree i_tree=null;
        CommonTree FOR378_tree=null;
        CommonTree LPAREN379_tree=null;
        CommonTree RPAREN381_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR378=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr5795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR378);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr5799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt144=2;
            int LA144_0 = input.LA(1);
            if ( (LA144_0==LPAREN) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    {
                    LPAREN379=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr5802); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN379);
                    int alt143=2;
                    int LA143_0 = input.LA(1);
                    if ( (LA143_0==WINDOW||LA143_0==BETWEEN||LA143_0==ESCAPE||(LA143_0>=NOT_EXPR && LA143_0<=EVERY_EXPR)||LA143_0==WHERE||(LA143_0>=SUM && LA143_0<=COUNT)||LA143_0==CASE||LA143_0==OUTER||(LA143_0>=JOIN && LA143_0<=FULL)||(LA143_0>=EVENTS && LA143_0<=LAST)||(LA143_0>=UNIDIRECTIONAL && LA143_0<=CURRENT_TIMESTAMP)||(LA143_0>=SNAPSHOT && LA143_0<=INDEX)||(LA143_0>=BOOLEAN_TRUE && LA143_0<=VALUE_NULL)||(LA143_0>=DEFINE && LA143_0<=AFTER)||LA143_0==WHILE||(LA143_0>=MERGE && LA143_0<=MATCHED)||LA143_0==NEWKW||LA143_0==CONTEXT||LA143_0==NUM_DOUBLE||(LA143_0>=IDENT && LA143_0<=LPAREN)||LA143_0==LCURLY||(LA143_0>=PLUS && LA143_0<=QUOTED_STRING_LITERAL)||LA143_0==MINUS||LA143_0==NUM_INT||(LA143_0>=TICKED_STRING_LITERAL && LA143_0<=NUM_FLOAT)) ) {
                        alt143=1;
                    }
                    switch (alt143) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr5804);
                            expressionList380=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList380.getTree());
                            }
                            break;
                    }
                    RPAREN381=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr5807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN381);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE382=null;
        Token LPAREN383=null;
        Token RPAREN391=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy384 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures385 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection386 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip387 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern388 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval389 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine390 = null;
        CommonTree MATCH_RECOGNIZE382_tree=null;
        CommonTree LPAREN383_tree=null;
        CommonTree RPAREN391_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE382=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog5843); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE382);
            LPAREN383=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog5857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN383);
            int alt145=2;
            int LA145_0 = input.LA(1);
            if ( (LA145_0==PARTITION) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog5863);
                    matchRecogPartitionBy384=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy384.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog5870);
            matchRecogMeasures385=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures385.getTree());
            int alt146=2;
            int LA146_0 = input.LA(1);
            if ( (LA146_0==ALL) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog5875);
                    matchRecogMatchesSelection386=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection386.getTree());
                    }
                    break;
            }
            int alt147=2;
            int LA147_0 = input.LA(1);
            if ( (LA147_0==AFTER) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5881);
                    matchRecogMatchesAfterSkip387=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip387.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog5887);
            matchRecogPattern388=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern388.getTree());
            int alt148=2;
            int LA148_0 = input.LA(1);
            if ( (LA148_0==IDENT) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog5893);
                    matchRecogMatchesInterval389=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval389.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog5899);
            matchRecogDefine390=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine390.getTree());
            RPAREN391=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog5906); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN391);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION392=null;
        Token BY393=null;
        Token COMMA395=null;
        EsperEPL2GrammarParser.expression_return expression394 = null;
        EsperEPL2GrammarParser.expression_return expression396 = null;
        CommonTree PARTITION392_tree=null;
        CommonTree BY393_tree=null;
        CommonTree COMMA395_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION392=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy5943); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION392);
            BY393=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy5945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY393);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5947);
            expression394=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression394.getTree());
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);
                if ( (LA149_0==COMMA) ) {
                    alt149=1;
                }
                switch (alt149) {
            	case 1 :
            	    {
            	    COMMA395=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy5950); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA395);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5952);
            	    expression396=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression396.getTree());
            	    }
            	    break;
            	default :
            	    break loop149;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES397=null;
        Token COMMA399=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem398 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem400 = null;
        CommonTree MEASURES397_tree=null;
        CommonTree COMMA399_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES397=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures5981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES397);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5983);
            matchRecogMeasureItem398=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem398.getTree());
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);
                if ( (LA150_0==COMMA) ) {
                    alt150=1;
                }
                switch (alt150) {
            	case 1 :
            	    {
            	    COMMA399=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures5986); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA399);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5988);
            	    matchRecogMeasureItem400=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem400.getTree());
            	    }
            	    break;
            	default :
            	    break loop150;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS402=null;
        EsperEPL2GrammarParser.expression_return expression401 = null;
        CommonTree i_tree=null;
        CommonTree AS402_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem6013);
            expression401=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression401.getTree());
            int alt152=2;
            int LA152_0 = input.LA(1);
            if ( (LA152_0==AS) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    {
                    AS402=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem6016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS402);
                    int alt151=2;
                    int LA151_0 = input.LA(1);
                    if ( (LA151_0==IDENT) ) {
                        alt151=1;
                    }
                    switch (alt151) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem6021); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL403=null;
        Token MATCHES404=null;
        CommonTree ALL403_tree=null;
        CommonTree MATCHES404_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL403=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection6052); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL403_tree = (CommonTree)adaptor.create(ALL403);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL403_tree, root_0);
            }
            MATCHES404=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection6055); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN405=null;
        Token LPAREN406=null;
        Token RPAREN408=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration407 = null;
        CommonTree PATTERN405_tree=null;
        CommonTree LPAREN406_tree=null;
        CommonTree RPAREN408_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN405=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern6070); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN405);
            LPAREN406=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern6072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN406);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern6074);
            matchRecogPatternAlteration407=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration407.getTree());
            RPAREN408=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern6076); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN408);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER409=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER409_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER409=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip6098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER409);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6102);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6106);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6110);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6114);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6118);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod410 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval6154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval6156);
            timePeriod410=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod410.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat411 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat412 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration6182);
            matchRecogPatternConcat411=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat411.getTree());
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);
                if ( (LA153_0==BOR) ) {
                    alt153=1;
                }
                switch (alt153) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration6187); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration6189);
            	    matchRecogPatternConcat412=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat412.getTree());
            	    }
            	    break;
            	default :
            	    break loop153;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary413 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt154=0;
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);
                if ( ((LA154_0>=IDENT && LA154_0<=LPAREN)) ) {
                    alt154=1;
                }
                switch (alt154) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat6222);
            	    matchRecogPatternUnary413=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary413.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt154 >= 1 ) break loop154;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(154, input);
                        throw eee;
                }
                cnt154++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested414 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom415 = null;
        try {
            int alt155=2;
            int LA155_0 = input.LA(1);
            if ( (LA155_0==LPAREN) ) {
                alt155=1;
            }
            else if ( (LA155_0==IDENT) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);
                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary6247);
                    matchRecogPatternNested414=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested414.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary6253);
                    matchRecogPatternAtom415=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom415.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN416=null;
        Token RPAREN418=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration417 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN416_tree=null;
        CommonTree RPAREN418_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN416=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested6265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN416);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested6267);
            matchRecogPatternAlteration417=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration417.getTree());
            RPAREN418=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested6269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN418);
            int alt156=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt156=1;
                    }
                    break;
                case PLUS:
                    {
                    alt156=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt156=3;
                    }
                    break;
            }
            switch (alt156) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested6274); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested6280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested6286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom6325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt159=2;
            int LA159_0 = input.LA(1);
            if ( (LA159_0==STAR||(LA159_0>=PLUS && LA159_0<=QUESTION)) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    {
                    int alt157=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt157=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt157=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt157=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 157, 0, input);
                        throw nvae;
                    }
                    switch (alt157) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom6331); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom6337); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom6343); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt158=2;
                    int LA158_0 = input.LA(1);
                    if ( (LA158_0==QUESTION) ) {
                        alt158=1;
                    }
                    switch (alt158) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom6349); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE419=null;
        Token COMMA421=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem420 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem422 = null;
        CommonTree DEFINE419_tree=null;
        CommonTree COMMA421_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE419=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine6393); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE419);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine6395);
            matchRecogDefineItem420=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem420.getTree());
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);
                if ( (LA160_0==COMMA) ) {
                    alt160=1;
                }
                switch (alt160) {
            	case 1 :
            	    {
            	    COMMA421=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine6398); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA421);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine6400);
            	    matchRecogDefineItem422=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem422.getTree());
            	    }
            	    break;
            	default :
            	    break loop160;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS423=null;
        EsperEPL2GrammarParser.expression_return expression424 = null;
        CommonTree i_tree=null;
        CommonTree AS423_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem6427); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS423=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem6429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS423);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem6431);
            expression424=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression424.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN425=null;
        Token LBRACK426=null;
        Token RBRACK428=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression427 = null;
        CommonTree PATTERN425_tree=null;
        CommonTree LBRACK426_tree=null;
        CommonTree RBRACK428_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN425=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression6456); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN425);
            LBRACK426=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression6458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK426);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression6460);
            patternExpression427=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression427.getTree());
            RBRACK428=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression6462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK428);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL429=null;
        Token COLON430=null;
        Token LBRACK431=null;
        Token METADATASQL432=null;
        Token RBRACK433=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL429_tree=null;
        CommonTree COLON430_tree=null;
        CommonTree LBRACK431_tree=null;
        CommonTree METADATASQL432_tree=null;
        CommonTree RBRACK433_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL429=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression6495); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL429);
            COLON430=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression6497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON430);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression6501); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK431=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression6503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK431);
            int alt161=2;
            int LA161_0 = input.LA(1);
            if ( (LA161_0==STRING_LITERAL) ) {
                alt161=1;
            }
            else if ( (LA161_0==QUOTED_STRING_LITERAL) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);
                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression6508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6514); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt163=2;
            int LA163_0 = input.LA(1);
            if ( (LA163_0==METADATASQL) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    {
                    METADATASQL432=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression6518); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL432);
                    int alt162=2;
                    int LA162_0 = input.LA(1);
                    if ( (LA162_0==STRING_LITERAL) ) {
                        alt162=1;
                    }
                    else if ( (LA162_0==QUOTED_STRING_LITERAL) ) {
                        alt162=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 162, 0, input);
                        throw nvae;
                    }
                    switch (alt162) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression6523); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6529); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK433=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression6534); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK433);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON434=null;
        Token LPAREN436=null;
        Token RPAREN438=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier435 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList437 = null;
        CommonTree i_tree=null;
        CommonTree COLON434_tree=null;
        CommonTree LPAREN436_tree=null;
        CommonTree RPAREN438_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression6585); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON434=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression6587); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON434);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression6589);
            classIdentifier435=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier435.getTree());
            int alt165=2;
            int LA165_0 = input.LA(1);
            if ( (LA165_0==LPAREN) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    {
                    LPAREN436=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression6592); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN436);
                    int alt164=2;
                    int LA164_0 = input.LA(1);
                    if ( (LA164_0==WINDOW||LA164_0==BETWEEN||LA164_0==ESCAPE||(LA164_0>=NOT_EXPR && LA164_0<=EVERY_EXPR)||LA164_0==WHERE||(LA164_0>=SUM && LA164_0<=COUNT)||LA164_0==CASE||LA164_0==OUTER||(LA164_0>=JOIN && LA164_0<=FULL)||(LA164_0>=EVENTS && LA164_0<=LAST)||(LA164_0>=UNIDIRECTIONAL && LA164_0<=CURRENT_TIMESTAMP)||(LA164_0>=SNAPSHOT && LA164_0<=INDEX)||(LA164_0>=BOOLEAN_TRUE && LA164_0<=VALUE_NULL)||(LA164_0>=DEFINE && LA164_0<=AFTER)||LA164_0==WHILE||(LA164_0>=MERGE && LA164_0<=MATCHED)||LA164_0==NEWKW||LA164_0==CONTEXT||LA164_0==NUM_DOUBLE||(LA164_0>=IDENT && LA164_0<=LPAREN)||LA164_0==LCURLY||(LA164_0>=PLUS && LA164_0<=QUOTED_STRING_LITERAL)||LA164_0==MINUS||LA164_0==NUM_INT||(LA164_0>=TICKED_STRING_LITERAL && LA164_0<=NUM_FLOAT)) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression6594);
                            expressionList437=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList437.getTree());
                            }
                            break;
                    }
                    RPAREN438=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression6597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN438);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON439=null;
        Token LPAREN440=null;
        Token RPAREN442=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList441 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON439_tree=null;
        CommonTree LPAREN440_tree=null;
        CommonTree RPAREN442_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression6650); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON439=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression6652); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON439);
            int alt166=2;
            int LA166_0 = input.LA(1);
            if ( (LA166_0==IDENT) ) {
                alt166=1;
            }
            else if ( (LA166_0==MERGE) ) {
                alt166=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);
                throw nvae;
            }
            switch (alt166) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression6657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression6661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN440=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression6664); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN440);
            int alt167=2;
            int LA167_0 = input.LA(1);
            if ( (LA167_0==WINDOW||LA167_0==BETWEEN||LA167_0==ESCAPE||(LA167_0>=NOT_EXPR && LA167_0<=EVERY_EXPR)||LA167_0==WHERE||(LA167_0>=SUM && LA167_0<=COUNT)||LA167_0==CASE||LA167_0==OUTER||(LA167_0>=JOIN && LA167_0<=FULL)||(LA167_0>=EVENTS && LA167_0<=LAST)||(LA167_0>=UNIDIRECTIONAL && LA167_0<=CURRENT_TIMESTAMP)||(LA167_0>=SNAPSHOT && LA167_0<=INDEX)||(LA167_0>=BOOLEAN_TRUE && LA167_0<=VALUE_NULL)||(LA167_0>=DEFINE && LA167_0<=AFTER)||LA167_0==WHILE||(LA167_0>=MERGE && LA167_0<=MATCHED)||LA167_0==NEWKW||LA167_0==CONTEXT||LA167_0==NUM_DOUBLE||LA167_0==LBRACK||(LA167_0>=IDENT && LA167_0<=LPAREN)||LA167_0==LCURLY||LA167_0==STAR||(LA167_0>=PLUS && LA167_0<=QUOTED_STRING_LITERAL)||LA167_0==MINUS||LA167_0==NUM_INT||(LA167_0>=TICKED_STRING_LITERAL && LA167_0<=NUM_FLOAT)) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression6666);
                    expressionWithTimeList441=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList441.getTree());
                    }
                    break;
            }
            RPAREN442=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression6669); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN442);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA444=null;
        EsperEPL2GrammarParser.expression_return expression443 = null;
        EsperEPL2GrammarParser.expression_return expression445 = null;
        CommonTree COMMA444_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr6729);
            expression443=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression443.getTree());
            loop168:
            do {
                int alt168=2;
                int LA168_0 = input.LA(1);
                if ( (LA168_0==COMMA) ) {
                    alt168=1;
                }
                switch (alt168) {
            	case 1 :
            	    {
            	    COMMA444=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr6732); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA444);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr6734);
            	    expression445=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression445.getTree());
            	    }
            	    break;
            	default :
            	    break loop168;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA447=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement446 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement448 = null;
        CommonTree COMMA447_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr6769);
            orderByListElement446=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement446.getTree());
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);
                if ( (LA169_0==COMMA) ) {
                    alt169=1;
                }
                switch (alt169) {
            	case 1 :
            	    {
            	    COMMA447=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr6772); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA447);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr6774);
            	    orderByListElement448=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement448.getTree());
            	    }
            	    break;
            	default :
            	    break loop169;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression449 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement6799);
            expression449=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression449.getTree());
            int alt170=3;
            int LA170_0 = input.LA(1);
            if ( (LA170_0==ASC) ) {
                alt170=1;
            }
            else if ( (LA170_0==DESC) ) {
                alt170=2;
            }
            switch (alt170) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement6804); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement6808); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression450 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause6846);
            evalOrExpression450=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression450.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token t=null;
        Token THEN456=null;
        Token TERMINATED458=null;
        Token AND_EXPR459=null;
        Token THEN461=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter451 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod452 = null;
        EsperEPL2GrammarParser.number_return number453 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet454 = null;
        EsperEPL2GrammarParser.expression_return expression455 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr457 = null;
        EsperEPL2GrammarParser.expression_return expression460 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr462 = null;
        EsperEPL2GrammarParser.outputLimitAndTerm_return outputLimitAndTerm463 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree t_tree=null;
        CommonTree THEN456_tree=null;
        CommonTree TERMINATED458_tree=null;
        CommonTree AND_EXPR459_tree=null;
        CommonTree THEN461_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_outputLimitAndTerm=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAndTerm");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt171=2;
            int LA171_0 = input.LA(1);
            if ( (LA171_0==AFTER) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit6884);
                    outputLimitAfter451=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter451.getTree());
                    }
                    break;
            }
            int alt172=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt172=1;
                    }
                    break;
                case FIRST:
                    {
                    alt172=2;
                    }
                    break;
                case LAST:
                    {
                    alt172=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt172=4;
                    }
                    break;
            }
            switch (alt172) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit6899); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit6903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit6907); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit6911); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt178=5;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt178=1;
                }
                break;
            case AT:
                {
                alt178=2;
                }
                break;
            case WHEN:
                {
                int LA178_3 = input.LA(2);
                if ( (LA178_3==TERMINATED) ) {
                    alt178=4;
                }
                else if ( (LA178_3==WINDOW||LA178_3==BETWEEN||LA178_3==ESCAPE||(LA178_3>=NOT_EXPR && LA178_3<=EVERY_EXPR)||LA178_3==WHERE||(LA178_3>=SUM && LA178_3<=COUNT)||LA178_3==CASE||LA178_3==OUTER||(LA178_3>=JOIN && LA178_3<=FULL)||(LA178_3>=EVENTS && LA178_3<=LAST)||(LA178_3>=UNIDIRECTIONAL && LA178_3<=CURRENT_TIMESTAMP)||(LA178_3>=SNAPSHOT && LA178_3<=INDEX)||(LA178_3>=BOOLEAN_TRUE && LA178_3<=VALUE_NULL)||(LA178_3>=DEFINE && LA178_3<=AFTER)||LA178_3==WHILE||(LA178_3>=MERGE && LA178_3<=MATCHED)||LA178_3==NEWKW||LA178_3==CONTEXT||LA178_3==NUM_DOUBLE||(LA178_3>=IDENT && LA178_3<=LPAREN)||LA178_3==LCURLY||(LA178_3>=PLUS && LA178_3<=QUOTED_STRING_LITERAL)||LA178_3==MINUS||LA178_3==NUM_INT||(LA178_3>=TICKED_STRING_LITERAL && LA178_3<=NUM_FLOAT)) ) {
                    alt178=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 178, 3, input);
                    throw nvae;
                }
                }
                break;
            case EOF:
            case AND_EXPR:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt178=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);
                throw nvae;
            }
            switch (alt178) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit6942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt174=2;
                    int LA174_0 = input.LA(1);
                    if ( (LA174_0==MINUS) && (synpred2_EsperEPL2Grammar())) {
                        alt174=1;
                    }
                    else if ( (LA174_0==PLUS) && (synpred2_EsperEPL2Grammar())) {
                        alt174=1;
                    }
                    else if ( (LA174_0==NUM_INT) ) {
                        int LA174_3 = input.LA(2);
                        if ( (LA174_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==EVENTS) ) {
                            alt174=2;
                        }
                        else if ( (LA174_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 174, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA174_0==NUM_LONG) ) {
                        int LA174_4 = input.LA(2);
                        if ( (LA174_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==EVENTS) ) {
                            alt174=2;
                        }
                        else if ( (LA174_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 174, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA174_0==NUM_FLOAT) ) {
                        int LA174_5 = input.LA(2);
                        if ( (LA174_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==EVENTS) ) {
                            alt174=2;
                        }
                        else if ( (LA174_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 174, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA174_0==NUM_DOUBLE) ) {
                        int LA174_6 = input.LA(2);
                        if ( (LA174_6==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==EVENTS) ) {
                            alt174=2;
                        }
                        else if ( (LA174_6==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_6==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 174, 6, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA174_0==IDENT) ) {
                        int LA174_7 = input.LA(2);
                        if ( (LA174_7==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==EVENTS) ) {
                            alt174=2;
                        }
                        else if ( (LA174_7==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else if ( (LA174_7==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt174=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 174, 7, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA174_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt174=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 174, 0, input);
                        throw nvae;
                    }
                    switch (alt174) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit6968);
                            timePeriod452=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod452.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt173=2;
                            int LA173_0 = input.LA(1);
                            if ( (LA173_0==NUM_DOUBLE||LA173_0==NUM_INT||(LA173_0>=NUM_LONG && LA173_0<=NUM_FLOAT)) ) {
                                alt173=1;
                            }
                            else if ( (LA173_0==IDENT) ) {
                                alt173=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 173, 0, input);
                                throw nvae;
                            }
                            switch (alt173) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit6979);
                                    number453=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number453.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit6985); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit6991); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit7022); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit7024);
                    crontabLimitParameterSet454=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet454.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit7041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit7043);
                    expression455=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression455.getTree());
                    int alt175=2;
                    int LA175_0 = input.LA(1);
                    if ( (LA175_0==THEN) ) {
                        alt175=1;
                    }
                    switch (alt175) {
                        case 1 :
                            {
                            THEN456=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit7046); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN456);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit7048);
                            onSetExpr457=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr457.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    t=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit7068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(t);
                    TERMINATED458=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimit7070); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED458);
                    int alt176=2;
                    int LA176_0 = input.LA(1);
                    if ( (LA176_0==AND_EXPR) ) {
                        int LA176_1 = input.LA(2);
                        if ( (LA176_1==WINDOW||LA176_1==BETWEEN||LA176_1==ESCAPE||(LA176_1>=NOT_EXPR && LA176_1<=EVERY_EXPR)||LA176_1==WHERE||(LA176_1>=SUM && LA176_1<=COUNT)||LA176_1==CASE||LA176_1==OUTER||(LA176_1>=JOIN && LA176_1<=FULL)||(LA176_1>=EVENTS && LA176_1<=LAST)||(LA176_1>=UNIDIRECTIONAL && LA176_1<=CURRENT_TIMESTAMP)||(LA176_1>=SNAPSHOT && LA176_1<=INDEX)||(LA176_1>=BOOLEAN_TRUE && LA176_1<=VALUE_NULL)||(LA176_1>=DEFINE && LA176_1<=AFTER)||LA176_1==WHILE||(LA176_1>=MERGE && LA176_1<=MATCHED)||LA176_1==NEWKW||LA176_1==CONTEXT||LA176_1==NUM_DOUBLE||(LA176_1>=IDENT && LA176_1<=LPAREN)||LA176_1==LCURLY||(LA176_1>=PLUS && LA176_1<=QUOTED_STRING_LITERAL)||LA176_1==MINUS||LA176_1==NUM_INT||(LA176_1>=TICKED_STRING_LITERAL && LA176_1<=NUM_FLOAT)) ) {
                            alt176=1;
                        }
                    }
                    switch (alt176) {
                        case 1 :
                            {
                            AND_EXPR459=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimit7073); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR459);
                            pushFollow(FOLLOW_expression_in_outputLimit7075);
                            expression460=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression460.getTree());
                            }
                            break;
                    }
                    int alt177=2;
                    int LA177_0 = input.LA(1);
                    if ( (LA177_0==THEN) ) {
                        alt177=1;
                    }
                    switch (alt177) {
                        case 1 :
                            {
                            THEN461=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit7080); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN461);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit7082);
                            onSetExpr462=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr462.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    }
                    break;
            }
            int alt179=2;
            int LA179_0 = input.LA(1);
            if ( (LA179_0==AND_EXPR) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAndTerm_in_outputLimit7115);
                    outputLimitAndTerm463=outputLimitAndTerm();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAndTerm.add(outputLimitAndTerm463.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (t != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TERM_LIMIT_EXPR, "TERM_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_TERMINATED.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAndTerm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAndTerm_return outputLimitAndTerm() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAndTerm_return retval = new EsperEPL2GrammarParser.outputLimitAndTerm_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR464=null;
        Token WHEN465=null;
        Token TERMINATED466=null;
        Token AND_EXPR467=null;
        Token THEN469=null;
        EsperEPL2GrammarParser.expression_return expression468 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr470 = null;
        CommonTree AND_EXPR464_tree=null;
        CommonTree WHEN465_tree=null;
        CommonTree TERMINATED466_tree=null;
        CommonTree AND_EXPR467_tree=null;
        CommonTree THEN469_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        try {
            {
            AND_EXPR464=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimitAndTerm7289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR464);
            WHEN465=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimitAndTerm7291); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN465);
            TERMINATED466=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimitAndTerm7293); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED466);
            int alt180=2;
            int LA180_0 = input.LA(1);
            if ( (LA180_0==AND_EXPR) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    {
                    AND_EXPR467=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimitAndTerm7296); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR467);
                    pushFollow(FOLLOW_expression_in_outputLimitAndTerm7298);
                    expression468=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression468.getTree());
                    }
                    break;
            }
            int alt181=2;
            int LA181_0 = input.LA(1);
            if ( (LA181_0==THEN) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    {
                    THEN469=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimitAndTerm7303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THEN.add(THEN469);
                    pushFollow(FOLLOW_onSetExpr_in_outputLimitAndTerm7305);
                    onSetExpr470=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr470.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_TERMINATED.nextNode(), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS473=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod471 = null;
        EsperEPL2GrammarParser.number_return number472 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS473_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter7335); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt182=2;
            switch ( input.LA(1) ) {
            case IDENT:
            case PLUS:
            case QUESTION:
            case MINUS:
                {
                alt182=1;
                }
                break;
            case NUM_INT:
                {
                int LA182_3 = input.LA(2);
                if ( (LA182_3==MIN||(LA182_3>=TIMEPERIOD_YEAR && LA182_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt182=1;
                }
                else if ( (LA182_3==EVENTS) ) {
                    alt182=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 182, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA182_4 = input.LA(2);
                if ( (LA182_4==MIN||(LA182_4>=TIMEPERIOD_YEAR && LA182_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt182=1;
                }
                else if ( (LA182_4==EVENTS) ) {
                    alt182=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 182, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA182_5 = input.LA(2);
                if ( (LA182_5==MIN||(LA182_5>=TIMEPERIOD_YEAR && LA182_5<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt182=1;
                }
                else if ( (LA182_5==EVENTS) ) {
                    alt182=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 182, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA182_6 = input.LA(2);
                if ( (LA182_6==MIN||(LA182_6>=TIMEPERIOD_YEAR && LA182_6<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt182=1;
                }
                else if ( (LA182_6==EVENTS) ) {
                    alt182=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 182, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);
                throw nvae;
            }
            switch (alt182) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter7338);
                    timePeriod471=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod471.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter7342);
                    number472=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number472.getTree());
                    EVENTS473=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter7344); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS473);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt183=2;
            int LA183_0 = input.LA(1);
            if ( (LA183_0==NUM_DOUBLE||LA183_0==PLUS||LA183_0==MINUS||LA183_0==NUM_INT||(LA183_0>=NUM_LONG && LA183_0<=NUM_FLOAT)) ) {
                alt183=1;
            }
            else if ( (LA183_0==IDENT) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);
                throw nvae;
            }
            switch (alt183) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit7390);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit7396); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt186=2;
            int LA186_0 = input.LA(1);
            if ( (LA186_0==OFFSET||LA186_0==COMMA) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    {
                    int alt184=2;
                    int LA184_0 = input.LA(1);
                    if ( (LA184_0==COMMA) ) {
                        alt184=1;
                    }
                    else if ( (LA184_0==OFFSET) ) {
                        alt184=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 184, 0, input);
                        throw nvae;
                    }
                    switch (alt184) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit7403); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit7409); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt185=2;
                    int LA185_0 = input.LA(1);
                    if ( (LA185_0==NUM_DOUBLE||LA185_0==PLUS||LA185_0==MINUS||LA185_0==NUM_INT||(LA185_0>=NUM_LONG && LA185_0<=NUM_FLOAT)) ) {
                        alt185=1;
                    }
                    else if ( (LA185_0==IDENT) ) {
                        alt185=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 185, 0, input);
                        throw nvae;
                    }
                    switch (alt185) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit7415);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit7421); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN474=null;
        Token COMMA476=null;
        Token COMMA478=null;
        Token COMMA480=null;
        Token COMMA482=null;
        Token COMMA484=null;
        Token RPAREN486=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime475 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime477 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime479 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime481 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime483 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime485 = null;
        CommonTree LPAREN474_tree=null;
        CommonTree COMMA476_tree=null;
        CommonTree COMMA478_tree=null;
        CommonTree COMMA480_tree=null;
        CommonTree COMMA482_tree=null;
        CommonTree COMMA484_tree=null;
        CommonTree RPAREN486_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN474=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet7473); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN474);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7475);
            expressionWithTime475=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime475.getTree());
            COMMA476=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA476);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7479);
            expressionWithTime477=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime477.getTree());
            COMMA478=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7481); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA478);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7483);
            expressionWithTime479=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime479.getTree());
            COMMA480=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7485); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA480);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7487);
            expressionWithTime481=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime481.getTree());
            COMMA482=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7489); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA482);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7491);
            expressionWithTime483=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime483.getTree());
            int alt187=2;
            int LA187_0 = input.LA(1);
            if ( (LA187_0==COMMA) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    {
                    COMMA484=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7494); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA484);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7496);
                    expressionWithTime485=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime485.getTree());
                    }
                    break;
            }
            RPAREN486=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet7500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN486);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN487=null;
        Token THEN489=null;
        EsperEPL2GrammarParser.expression_return expression488 = null;
        EsperEPL2GrammarParser.expression_return expression490 = null;
        CommonTree WHEN487_tree=null;
        CommonTree THEN489_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN487=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause7530); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause7533);
            expression488=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression488.getTree());
            THEN489=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause7535); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause7538);
            expression490=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression490.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE491=null;
        EsperEPL2GrammarParser.expression_return expression492 = null;
        CommonTree ELSE491_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE491=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause7551); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause7554);
            expression492=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression492.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression493 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression7567);
            caseExpression493=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression493.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE494=null;
        Token END497=null;
        Token CASE498=null;
        Token END502=null;
        EsperEPL2GrammarParser.whenClause_return whenClause495 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause496 = null;
        EsperEPL2GrammarParser.expression_return expression499 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause500 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause501 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression503 = null;
        CommonTree CASE494_tree=null;
        CommonTree END497_tree=null;
        CommonTree CASE498_tree=null;
        CommonTree END502_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt192=3;
            int LA192_0 = input.LA(1);
            if ( (LA192_0==CASE) ) {
                int LA192_1 = input.LA(2);
                if ( (LA192_1==WHEN) ) {
                    alt192=1;
                }
                else if ( (LA192_1==WINDOW||LA192_1==BETWEEN||LA192_1==ESCAPE||(LA192_1>=NOT_EXPR && LA192_1<=EVERY_EXPR)||LA192_1==WHERE||(LA192_1>=SUM && LA192_1<=COUNT)||LA192_1==CASE||LA192_1==OUTER||(LA192_1>=JOIN && LA192_1<=FULL)||(LA192_1>=EVENTS && LA192_1<=LAST)||(LA192_1>=UNIDIRECTIONAL && LA192_1<=CURRENT_TIMESTAMP)||(LA192_1>=SNAPSHOT && LA192_1<=INDEX)||(LA192_1>=BOOLEAN_TRUE && LA192_1<=VALUE_NULL)||(LA192_1>=DEFINE && LA192_1<=AFTER)||LA192_1==WHILE||(LA192_1>=MERGE && LA192_1<=MATCHED)||LA192_1==NEWKW||LA192_1==CONTEXT||LA192_1==NUM_DOUBLE||(LA192_1>=IDENT && LA192_1<=LPAREN)||LA192_1==LCURLY||(LA192_1>=PLUS && LA192_1<=QUOTED_STRING_LITERAL)||LA192_1==MINUS||LA192_1==NUM_INT||(LA192_1>=TICKED_STRING_LITERAL && LA192_1<=NUM_FLOAT)) ) {
                    alt192=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 192, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA192_0==WINDOW||LA192_0==BETWEEN||LA192_0==ESCAPE||(LA192_0>=NOT_EXPR && LA192_0<=EVERY_EXPR)||LA192_0==WHERE||(LA192_0>=SUM && LA192_0<=COUNT)||LA192_0==OUTER||(LA192_0>=JOIN && LA192_0<=FULL)||(LA192_0>=EVENTS && LA192_0<=LAST)||(LA192_0>=UNIDIRECTIONAL && LA192_0<=CURRENT_TIMESTAMP)||(LA192_0>=SNAPSHOT && LA192_0<=INDEX)||(LA192_0>=BOOLEAN_TRUE && LA192_0<=VALUE_NULL)||(LA192_0>=DEFINE && LA192_0<=AFTER)||LA192_0==WHILE||(LA192_0>=MERGE && LA192_0<=MATCHED)||LA192_0==NEWKW||LA192_0==CONTEXT||LA192_0==NUM_DOUBLE||(LA192_0>=IDENT && LA192_0<=LPAREN)||LA192_0==LCURLY||(LA192_0>=PLUS && LA192_0<=QUOTED_STRING_LITERAL)||LA192_0==MINUS||LA192_0==NUM_INT||(LA192_0>=TICKED_STRING_LITERAL && LA192_0<=NUM_FLOAT)) ) {
                alt192=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);
                throw nvae;
            }
            switch (alt192) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE494=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression7581); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE494_tree = (CommonTree)adaptor.create(CASE494);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE494_tree, root_0);
                    }
                    int cnt188=0;
                    loop188:
                    do {
                        int alt188=2;
                        int LA188_0 = input.LA(1);
                        if ( (LA188_0==WHEN) ) {
                            alt188=1;
                        }
                        switch (alt188) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression7584);
                    	    whenClause495=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause495.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt188 >= 1 ) break loop188;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(188, input);
                                throw eee;
                        }
                        cnt188++;
                    } while (true);
                    int alt189=2;
                    int LA189_0 = input.LA(1);
                    if ( (LA189_0==ELSE) ) {
                        alt189=1;
                    }
                    switch (alt189) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression7587);
                            elseClause496=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause496.getTree());
                            }
                            break;
                    }
                    END497=(Token)match(input,END,FOLLOW_END_in_caseExpression7590); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE498=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression7601); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE498);
                    pushFollow(FOLLOW_expression_in_caseExpression7603);
                    expression499=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression499.getTree());
                    int cnt190=0;
                    loop190:
                    do {
                        int alt190=2;
                        int LA190_0 = input.LA(1);
                        if ( (LA190_0==WHEN) ) {
                            alt190=1;
                        }
                        switch (alt190) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression7605);
                    	    whenClause500=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause500.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt190 >= 1 ) break loop190;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(190, input);
                                throw eee;
                        }
                        cnt190++;
                    } while (true);
                    int alt191=2;
                    int LA191_0 = input.LA(1);
                    if ( (LA191_0==ELSE) ) {
                        alt191=1;
                    }
                    switch (alt191) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression7608);
                            elseClause501=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause501.getTree());
                            }
                            break;
                    }
                    END502=(Token)match(input,END,FOLLOW_END_in_caseExpression7611); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END502);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression7635);
                    evalOrExpression503=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression503.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression504 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression505 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression7646);
            evalAndExpression504=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression504.getTree());
            loop193:
            do {
                int alt193=2;
                int LA193_0 = input.LA(1);
                if ( (LA193_0==OR_EXPR) ) {
                    alt193=1;
                }
                switch (alt193) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression7651); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression7653);
            	    evalAndExpression505=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression505.getTree());
            	    }
            	    break;
            	default :
            	    break loop193;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression506 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression507 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression7685);
            bitWiseExpression506=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression506.getTree());
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);
                if ( (LA194_0==AND_EXPR) ) {
                    int LA194_16 = input.LA(2);
                    if ( (LA194_16==WINDOW||LA194_16==BETWEEN||LA194_16==ESCAPE||(LA194_16>=NOT_EXPR && LA194_16<=EVERY_EXPR)||LA194_16==WHERE||(LA194_16>=SUM && LA194_16<=COUNT)||LA194_16==OUTER||(LA194_16>=JOIN && LA194_16<=FULL)||(LA194_16>=EVENTS && LA194_16<=LAST)||(LA194_16>=UNIDIRECTIONAL && LA194_16<=CURRENT_TIMESTAMP)||(LA194_16>=SNAPSHOT && LA194_16<=INDEX)||(LA194_16>=BOOLEAN_TRUE && LA194_16<=VALUE_NULL)||(LA194_16>=DEFINE && LA194_16<=AFTER)||LA194_16==WHILE||(LA194_16>=MERGE && LA194_16<=MATCHED)||LA194_16==NEWKW||LA194_16==CONTEXT||LA194_16==NUM_DOUBLE||(LA194_16>=IDENT && LA194_16<=LPAREN)||LA194_16==LCURLY||(LA194_16>=PLUS && LA194_16<=QUOTED_STRING_LITERAL)||LA194_16==MINUS||LA194_16==NUM_INT||(LA194_16>=TICKED_STRING_LITERAL && LA194_16<=NUM_FLOAT)) ) {
                        alt194=1;
                    }
                }
                switch (alt194) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression7690); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression7692);
            	    bitWiseExpression507=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression507.getTree());
            	    }
            	    break;
            	default :
            	    break loop194;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND509=null;
        Token BOR510=null;
        Token BXOR511=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression508 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression512 = null;
        CommonTree BAND509_tree=null;
        CommonTree BOR510_tree=null;
        CommonTree BXOR511_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression7724);
            negatedExpression508=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression508.getTree());
            loop196:
            do {
                int alt196=2;
                int LA196_0 = input.LA(1);
                if ( (LA196_0==BOR||(LA196_0>=BAND && LA196_0<=BXOR)) ) {
                    alt196=1;
                }
                switch (alt196) {
            	case 1 :
            	    {
            	    int alt195=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt195=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt195=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt195=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 195, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt195) {
            	        case 1 :
            	            {
            	            BAND509=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression7729); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND509_tree = (CommonTree)adaptor.create(BAND509);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND509_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR510=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression7732); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR510_tree = (CommonTree)adaptor.create(BOR510);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR510_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR511=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression7735); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR511_tree = (CommonTree)adaptor.create(BXOR511);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR511_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression7739);
            	    negatedExpression512=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression512.getTree());
            	    }
            	    break;
            	default :
            	    break loop196;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR514=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression513 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression515 = null;
        CommonTree NOT_EXPR514_tree=null;
        try {
            int alt197=2;
            int LA197_0 = input.LA(1);
            if ( (LA197_0==WINDOW||LA197_0==BETWEEN||LA197_0==ESCAPE||LA197_0==EVERY_EXPR||LA197_0==WHERE||(LA197_0>=SUM && LA197_0<=COUNT)||LA197_0==OUTER||(LA197_0>=JOIN && LA197_0<=FULL)||(LA197_0>=EVENTS && LA197_0<=LAST)||(LA197_0>=UNIDIRECTIONAL && LA197_0<=CURRENT_TIMESTAMP)||(LA197_0>=SNAPSHOT && LA197_0<=INDEX)||(LA197_0>=BOOLEAN_TRUE && LA197_0<=VALUE_NULL)||(LA197_0>=DEFINE && LA197_0<=AFTER)||LA197_0==WHILE||(LA197_0>=MERGE && LA197_0<=MATCHED)||LA197_0==NEWKW||LA197_0==CONTEXT||LA197_0==NUM_DOUBLE||(LA197_0>=IDENT && LA197_0<=LPAREN)||LA197_0==LCURLY||(LA197_0>=PLUS && LA197_0<=QUOTED_STRING_LITERAL)||LA197_0==MINUS||LA197_0==NUM_INT||(LA197_0>=TICKED_STRING_LITERAL && LA197_0<=NUM_FLOAT)) ) {
                alt197=1;
            }
            else if ( (LA197_0==NOT_EXPR) ) {
                alt197=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);
                throw nvae;
            }
            switch (alt197) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression7754);
                    evalEqualsExpression513=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression513.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR514=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression7760); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR514_tree = (CommonTree)adaptor.create(NOT_EXPR514);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR514_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression7763);
                    evalEqualsExpression515=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression515.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR517=null;
        Token LPAREN519=null;
        Token RPAREN521=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression516 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression518 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList520 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression522 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR517_tree=null;
        CommonTree LPAREN519_tree=null;
        CommonTree RPAREN521_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression7776);
            evalRelationalExpression516=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression516.getTree());
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);
                if ( (LA203_0==IS||LA203_0==EQUALS||(LA203_0>=SQL_NE && LA203_0<=NOT_EQUAL)) ) {
                    alt203=1;
                }
                switch (alt203) {
            	case 1 :
            	    {
            	    int alt198=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt198=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA198_2 = input.LA(2);
            	        if ( (LA198_2==NOT_EXPR) ) {
            	            alt198=3;
            	        }
            	        else if ( (LA198_2==WINDOW||LA198_2==BETWEEN||LA198_2==ESCAPE||LA198_2==EVERY_EXPR||LA198_2==WHERE||(LA198_2>=SUM && LA198_2<=COUNT)||LA198_2==OUTER||(LA198_2>=JOIN && LA198_2<=FULL)||(LA198_2>=ALL && LA198_2<=SOME)||(LA198_2>=EVENTS && LA198_2<=LAST)||(LA198_2>=UNIDIRECTIONAL && LA198_2<=CURRENT_TIMESTAMP)||(LA198_2>=SNAPSHOT && LA198_2<=INDEX)||(LA198_2>=BOOLEAN_TRUE && LA198_2<=VALUE_NULL)||(LA198_2>=DEFINE && LA198_2<=AFTER)||LA198_2==WHILE||(LA198_2>=MERGE && LA198_2<=MATCHED)||LA198_2==NEWKW||LA198_2==CONTEXT||LA198_2==NUM_DOUBLE||(LA198_2>=IDENT && LA198_2<=LPAREN)||LA198_2==LCURLY||(LA198_2>=PLUS && LA198_2<=QUOTED_STRING_LITERAL)||LA198_2==MINUS||LA198_2==NUM_INT||(LA198_2>=TICKED_STRING_LITERAL && LA198_2<=NUM_FLOAT)) ) {
            	            alt198=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 198, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt198=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt198=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 198, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt198) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression7789); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression7807); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression7821); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR517=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression7823); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR517);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression7837); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression7851); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt202=2;
            	    int LA202_0 = input.LA(1);
            	    if ( (LA202_0==WINDOW||LA202_0==BETWEEN||LA202_0==ESCAPE||LA202_0==EVERY_EXPR||LA202_0==WHERE||(LA202_0>=SUM && LA202_0<=COUNT)||LA202_0==OUTER||(LA202_0>=JOIN && LA202_0<=FULL)||(LA202_0>=EVENTS && LA202_0<=LAST)||(LA202_0>=UNIDIRECTIONAL && LA202_0<=CURRENT_TIMESTAMP)||(LA202_0>=SNAPSHOT && LA202_0<=INDEX)||(LA202_0>=BOOLEAN_TRUE && LA202_0<=VALUE_NULL)||(LA202_0>=DEFINE && LA202_0<=AFTER)||LA202_0==WHILE||(LA202_0>=MERGE && LA202_0<=MATCHED)||LA202_0==NEWKW||LA202_0==CONTEXT||LA202_0==NUM_DOUBLE||(LA202_0>=IDENT && LA202_0<=LPAREN)||LA202_0==LCURLY||(LA202_0>=PLUS && LA202_0<=QUOTED_STRING_LITERAL)||LA202_0==MINUS||LA202_0==NUM_INT||(LA202_0>=TICKED_STRING_LITERAL && LA202_0<=NUM_FLOAT)) ) {
            	        alt202=1;
            	    }
            	    else if ( ((LA202_0>=ALL && LA202_0<=SOME)) ) {
            	        alt202=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 202, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt202) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression7881);
            	            evalRelationalExpression518=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression518.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt199=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt199=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt199=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt199=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 199, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt199) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression7898); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression7904); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression7910); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt201=2;
            	            int LA201_0 = input.LA(1);
            	            if ( (LA201_0==LPAREN) ) {
            	                int LA201_1 = input.LA(2);
            	                if ( (LA201_1==SELECT) ) {
            	                    alt201=2;
            	                }
            	                else if ( (LA201_1==WINDOW||LA201_1==BETWEEN||LA201_1==ESCAPE||(LA201_1>=NOT_EXPR && LA201_1<=EVERY_EXPR)||LA201_1==WHERE||(LA201_1>=SUM && LA201_1<=COUNT)||LA201_1==CASE||LA201_1==OUTER||(LA201_1>=JOIN && LA201_1<=FULL)||(LA201_1>=EVENTS && LA201_1<=LAST)||(LA201_1>=UNIDIRECTIONAL && LA201_1<=CURRENT_TIMESTAMP)||(LA201_1>=SNAPSHOT && LA201_1<=INDEX)||(LA201_1>=BOOLEAN_TRUE && LA201_1<=VALUE_NULL)||(LA201_1>=DEFINE && LA201_1<=AFTER)||LA201_1==WHILE||(LA201_1>=MERGE && LA201_1<=MATCHED)||LA201_1==NEWKW||LA201_1==CONTEXT||LA201_1==NUM_DOUBLE||(LA201_1>=IDENT && LA201_1<=RPAREN)||LA201_1==LCURLY||(LA201_1>=PLUS && LA201_1<=QUOTED_STRING_LITERAL)||LA201_1==MINUS||LA201_1==NUM_INT||(LA201_1>=TICKED_STRING_LITERAL && LA201_1<=NUM_FLOAT)) ) {
            	                    alt201=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 201, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 201, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt201) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN519=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression7916); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN519);
            	                    int alt200=2;
            	                    int LA200_0 = input.LA(1);
            	                    if ( (LA200_0==WINDOW||LA200_0==BETWEEN||LA200_0==ESCAPE||(LA200_0>=NOT_EXPR && LA200_0<=EVERY_EXPR)||LA200_0==WHERE||(LA200_0>=SUM && LA200_0<=COUNT)||LA200_0==CASE||LA200_0==OUTER||(LA200_0>=JOIN && LA200_0<=FULL)||(LA200_0>=EVENTS && LA200_0<=LAST)||(LA200_0>=UNIDIRECTIONAL && LA200_0<=CURRENT_TIMESTAMP)||(LA200_0>=SNAPSHOT && LA200_0<=INDEX)||(LA200_0>=BOOLEAN_TRUE && LA200_0<=VALUE_NULL)||(LA200_0>=DEFINE && LA200_0<=AFTER)||LA200_0==WHILE||(LA200_0>=MERGE && LA200_0<=MATCHED)||LA200_0==NEWKW||LA200_0==CONTEXT||LA200_0==NUM_DOUBLE||(LA200_0>=IDENT && LA200_0<=LPAREN)||LA200_0==LCURLY||(LA200_0>=PLUS && LA200_0<=QUOTED_STRING_LITERAL)||LA200_0==MINUS||LA200_0==NUM_INT||(LA200_0>=TICKED_STRING_LITERAL && LA200_0<=NUM_FLOAT)) ) {
            	                        alt200=1;
            	                    }
            	                    switch (alt200) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression7918);
            	                            expressionList520=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList520.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN521=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression7921); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN521);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression7926);
            	                    subSelectGroupExpression522=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression522.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop203;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && eq != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && is != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_IS_EXPR, "EVAL_IS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && isnot != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_ISNOT_EXPR, "EVAL_ISNOT_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (sqlne != null || ne != null || isnot != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN525=null;
        Token RPAREN527=null;
        Token COMMA531=null;
        Token IN_SET533=null;
        Token BETWEEN535=null;
        Token LIKE537=null;
        Token ESCAPE539=null;
        Token REGEXP541=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr523 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr524 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList526 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression528 = null;
        EsperEPL2GrammarParser.expression_return expression529 = null;
        EsperEPL2GrammarParser.expression_return expression530 = null;
        EsperEPL2GrammarParser.expression_return expression532 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery534 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList536 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr538 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant540 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr542 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN525_tree=null;
        CommonTree RPAREN527_tree=null;
        CommonTree COMMA531_tree=null;
        CommonTree IN_SET533_tree=null;
        CommonTree BETWEEN535_tree=null;
        CommonTree LIKE537_tree=null;
        CommonTree ESCAPE539_tree=null;
        CommonTree REGEXP541_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8086);
            concatenationExpr523=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr523.getTree());
            int alt217=2;
            int LA217_0 = input.LA(1);
            if ( (LA217_0==EOF||(LA217_0>=OR_EXPR && LA217_0<=AND_EXPR)||(LA217_0>=WHERE && LA217_0<=AS)||(LA217_0>=ELSE && LA217_0<=FROM)||LA217_0==IS||(LA217_0>=GROUP && LA217_0<=HAVING)||LA217_0==ALL||LA217_0==OUTPUT||LA217_0==INSERT||(LA217_0>=ORDER && LA217_0<=DESC)||LA217_0==PATTERN||(LA217_0>=TIMEPERIOD_SEC && LA217_0<=TIMEPERIOD_SECONDS)||LA217_0==ROW_LIMIT_EXPR||LA217_0==MEASURES||(LA217_0>=AFTER && LA217_0<=FOR)||LA217_0==RBRACK||(LA217_0>=RPAREN && LA217_0<=COLON)||LA217_0==RCURLY||(LA217_0>=COMMA && LA217_0<=EQUALS)||LA217_0==BOR||(LA217_0>=BAND && LA217_0<=GE)||(LA217_0>=FOLLOWMAX_END && LA217_0<=ATCHAR)) ) {
                alt217=1;
            }
            else if ( ((LA217_0>=IN_SET && LA217_0<=REGEXP)||LA217_0==NOT_EXPR) ) {
                alt217=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);
                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    {
                    {
                    loop209:
                    do {
                        int alt209=2;
                        int LA209_0 = input.LA(1);
                        if ( ((LA209_0>=LT && LA209_0<=GE)) ) {
                            alt209=1;
                        }
                        switch (alt209) {
                    	case 1 :
                    	    {
                    	    int alt204=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt204=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt204=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt204=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt204=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 204, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt204) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression8118); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression8122); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression8126); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression8130); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt208=2;
                    	    int LA208_0 = input.LA(1);
                    	    if ( (LA208_0==WINDOW||LA208_0==BETWEEN||LA208_0==ESCAPE||LA208_0==EVERY_EXPR||LA208_0==WHERE||(LA208_0>=SUM && LA208_0<=COUNT)||LA208_0==OUTER||(LA208_0>=JOIN && LA208_0<=FULL)||(LA208_0>=EVENTS && LA208_0<=LAST)||(LA208_0>=UNIDIRECTIONAL && LA208_0<=CURRENT_TIMESTAMP)||(LA208_0>=SNAPSHOT && LA208_0<=INDEX)||(LA208_0>=BOOLEAN_TRUE && LA208_0<=VALUE_NULL)||(LA208_0>=DEFINE && LA208_0<=AFTER)||LA208_0==WHILE||(LA208_0>=MERGE && LA208_0<=MATCHED)||LA208_0==NEWKW||LA208_0==CONTEXT||LA208_0==NUM_DOUBLE||(LA208_0>=IDENT && LA208_0<=LPAREN)||LA208_0==LCURLY||(LA208_0>=PLUS && LA208_0<=QUOTED_STRING_LITERAL)||LA208_0==MINUS||LA208_0==NUM_INT||(LA208_0>=TICKED_STRING_LITERAL && LA208_0<=NUM_FLOAT)) ) {
                    	        alt208=1;
                    	    }
                    	    else if ( ((LA208_0>=ALL && LA208_0<=SOME)) ) {
                    	        alt208=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 208, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt208) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8154);
                    	            concatenationExpr524=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr524.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt205=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt205=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt205=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt205=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 205, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt205) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression8171); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression8177); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression8183); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt207=2;
                    	            int LA207_0 = input.LA(1);
                    	            if ( (LA207_0==LPAREN) ) {
                    	                int LA207_1 = input.LA(2);
                    	                if ( (LA207_1==SELECT) ) {
                    	                    alt207=2;
                    	                }
                    	                else if ( (LA207_1==WINDOW||LA207_1==BETWEEN||LA207_1==ESCAPE||(LA207_1>=NOT_EXPR && LA207_1<=EVERY_EXPR)||LA207_1==WHERE||(LA207_1>=SUM && LA207_1<=COUNT)||LA207_1==CASE||LA207_1==OUTER||(LA207_1>=JOIN && LA207_1<=FULL)||(LA207_1>=EVENTS && LA207_1<=LAST)||(LA207_1>=UNIDIRECTIONAL && LA207_1<=CURRENT_TIMESTAMP)||(LA207_1>=SNAPSHOT && LA207_1<=INDEX)||(LA207_1>=BOOLEAN_TRUE && LA207_1<=VALUE_NULL)||(LA207_1>=DEFINE && LA207_1<=AFTER)||LA207_1==WHILE||(LA207_1>=MERGE && LA207_1<=MATCHED)||LA207_1==NEWKW||LA207_1==CONTEXT||LA207_1==NUM_DOUBLE||(LA207_1>=IDENT && LA207_1<=RPAREN)||LA207_1==LCURLY||(LA207_1>=PLUS && LA207_1<=QUOTED_STRING_LITERAL)||LA207_1==MINUS||LA207_1==NUM_INT||(LA207_1>=TICKED_STRING_LITERAL && LA207_1<=NUM_FLOAT)) ) {
                    	                    alt207=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 207, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 207, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt207) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN525=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression8189); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN525);
                    	                    int alt206=2;
                    	                    int LA206_0 = input.LA(1);
                    	                    if ( (LA206_0==WINDOW||LA206_0==BETWEEN||LA206_0==ESCAPE||(LA206_0>=NOT_EXPR && LA206_0<=EVERY_EXPR)||LA206_0==WHERE||(LA206_0>=SUM && LA206_0<=COUNT)||LA206_0==CASE||LA206_0==OUTER||(LA206_0>=JOIN && LA206_0<=FULL)||(LA206_0>=EVENTS && LA206_0<=LAST)||(LA206_0>=UNIDIRECTIONAL && LA206_0<=CURRENT_TIMESTAMP)||(LA206_0>=SNAPSHOT && LA206_0<=INDEX)||(LA206_0>=BOOLEAN_TRUE && LA206_0<=VALUE_NULL)||(LA206_0>=DEFINE && LA206_0<=AFTER)||LA206_0==WHILE||(LA206_0>=MERGE && LA206_0<=MATCHED)||LA206_0==NEWKW||LA206_0==CONTEXT||LA206_0==NUM_DOUBLE||(LA206_0>=IDENT && LA206_0<=LPAREN)||LA206_0==LCURLY||(LA206_0>=PLUS && LA206_0<=QUOTED_STRING_LITERAL)||LA206_0==MINUS||LA206_0==NUM_INT||(LA206_0>=TICKED_STRING_LITERAL && LA206_0<=NUM_FLOAT)) ) {
                    	                        alt206=1;
                    	                    }
                    	                    switch (alt206) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression8191);
                    	                            expressionList526=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList526.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN527=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression8194); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN527);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression8199);
                    	                    subSelectGroupExpression528=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression528.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop209;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt210=2;
                    int LA210_0 = input.LA(1);
                    if ( (LA210_0==NOT_EXPR) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression8295); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt216=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA216_1 = input.LA(2);
                        if ( (LA216_1==LPAREN) ) {
                            int LA216_5 = input.LA(3);
                            if ( (LA216_5==SELECT) ) {
                                alt216=2;
                            }
                            else if ( (LA216_5==WINDOW||LA216_5==BETWEEN||LA216_5==ESCAPE||(LA216_5>=NOT_EXPR && LA216_5<=EVERY_EXPR)||LA216_5==WHERE||(LA216_5>=SUM && LA216_5<=COUNT)||LA216_5==CASE||LA216_5==OUTER||(LA216_5>=JOIN && LA216_5<=FULL)||(LA216_5>=EVENTS && LA216_5<=LAST)||(LA216_5>=UNIDIRECTIONAL && LA216_5<=CURRENT_TIMESTAMP)||(LA216_5>=SNAPSHOT && LA216_5<=INDEX)||(LA216_5>=BOOLEAN_TRUE && LA216_5<=VALUE_NULL)||(LA216_5>=DEFINE && LA216_5<=AFTER)||LA216_5==WHILE||(LA216_5>=MERGE && LA216_5<=MATCHED)||LA216_5==NEWKW||LA216_5==CONTEXT||LA216_5==NUM_DOUBLE||(LA216_5>=IDENT && LA216_5<=LPAREN)||LA216_5==LCURLY||(LA216_5>=PLUS && LA216_5<=QUOTED_STRING_LITERAL)||LA216_5==MINUS||LA216_5==NUM_INT||(LA216_5>=TICKED_STRING_LITERAL && LA216_5<=NUM_FLOAT)) ) {
                                alt216=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 216, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA216_1==LBRACK) ) {
                            alt216=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 216, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt216=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt216=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt216=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 216, 0, input);
                        throw nvae;
                    }
                    switch (alt216) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression8322); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt211=2;
                            int LA211_0 = input.LA(1);
                            if ( (LA211_0==LPAREN) ) {
                                alt211=1;
                            }
                            else if ( (LA211_0==LBRACK) ) {
                                alt211=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 211, 0, input);
                                throw nvae;
                            }
                            switch (alt211) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression8334); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression8340); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression8343);
                            expression529=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression529.getTree());
                            int alt213=2;
                            int LA213_0 = input.LA(1);
                            if ( (LA213_0==COLON) ) {
                                alt213=1;
                            }
                            else if ( (LA213_0==RBRACK||LA213_0==RPAREN||LA213_0==COMMA) ) {
                                alt213=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 213, 0, input);
                                throw nvae;
                            }
                            switch (alt213) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression8365); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression8368);
                                    expression530=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression530.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop212:
                                    do {
                                        int alt212=2;
                                        int LA212_0 = input.LA(1);
                                        if ( (LA212_0==COMMA) ) {
                                            alt212=1;
                                        }
                                        switch (alt212) {
                                    	case 1 :
                                    	    {
                                    	    COMMA531=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression8394); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA531);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression8396);
                                    	    expression532=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression532.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop212;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt214=2;
                            int LA214_0 = input.LA(1);
                            if ( (LA214_0==RPAREN) ) {
                                alt214=1;
                            }
                            else if ( (LA214_0==RBRACK) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 0, input);
                                throw nvae;
                            }
                            switch (alt214) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression8422); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression8428); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET533=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression8551); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET533);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression8553);
                            inSubSelectQuery534=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery534.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN535=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression8599); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN535);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression8601);
                            betweenList536=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList536.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE537=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression8651); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE537);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8653);
                            concatenationExpr538=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr538.getTree());
                            int alt215=2;
                            int LA215_0 = input.LA(1);
                            if ( (LA215_0==ESCAPE) ) {
                                alt215=1;
                            }
                            switch (alt215) {
                                case 1 :
                                    {
                                    ESCAPE539=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression8656); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE539);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression8658);
                                    stringconstant540=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant540.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP541=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression8710); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP541);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8712);
                            concatenationExpr542=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr542.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr543 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery8774);
            subQueryExpr543=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr543.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR546=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression544 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression545 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression547 = null;
        CommonTree c_tree=null;
        CommonTree LOR546_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr8799);
            additiveExpression544=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression544.getTree());
            int alt219=2;
            int LA219_0 = input.LA(1);
            if ( (LA219_0==LOR) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr8805); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr8807);
                    additiveExpression545=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression545.getTree());
                    loop218:
                    do {
                        int alt218=2;
                        int LA218_0 = input.LA(1);
                        if ( (LA218_0==LOR) ) {
                            alt218=1;
                        }
                        switch (alt218) {
                    	case 1 :
                    	    {
                    	    LOR546=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr8811); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR546);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr8813);
                    	    additiveExpression547=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression547.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop218;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS549=null;
        Token MINUS550=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression548 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression551 = null;
        CommonTree PLUS549_tree=null;
        CommonTree MINUS550_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression8854);
            multiplyExpression548=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression548.getTree());
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);
                if ( (LA221_0==PLUS||LA221_0==MINUS) ) {
                    alt221=1;
                }
                switch (alt221) {
            	case 1 :
            	    {
            	    int alt220=2;
            	    int LA220_0 = input.LA(1);
            	    if ( (LA220_0==PLUS) ) {
            	        alt220=1;
            	    }
            	    else if ( (LA220_0==MINUS) ) {
            	        alt220=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 220, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt220) {
            	        case 1 :
            	            {
            	            PLUS549=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression8859); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS549_tree = (CommonTree)adaptor.create(PLUS549);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS549_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS550=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression8862); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS550_tree = (CommonTree)adaptor.create(MINUS550);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS550_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression8866);
            	    multiplyExpression551=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression551.getTree());
            	    }
            	    break;
            	default :
            	    break loop221;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR553=null;
        Token DIV554=null;
        Token MOD555=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression552 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression556 = null;
        CommonTree STAR553_tree=null;
        CommonTree DIV554_tree=null;
        CommonTree MOD555_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression8880);
            unaryExpression552=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression552.getTree());
            loop223:
            do {
                int alt223=2;
                int LA223_0 = input.LA(1);
                if ( (LA223_0==STAR||(LA223_0>=DIV && LA223_0<=MOD)) ) {
                    alt223=1;
                }
                switch (alt223) {
            	case 1 :
            	    {
            	    int alt222=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt222=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt222=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt222=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 222, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt222) {
            	        case 1 :
            	            {
            	            STAR553=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression8885); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR553_tree = (CommonTree)adaptor.create(STAR553);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR553_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV554=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression8888); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV554_tree = (CommonTree)adaptor.create(DIV554);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV554_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD555=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression8891); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD555_tree = (CommonTree)adaptor.create(MOD555);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD555_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression8895);
            	    unaryExpression556=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression556.getTree());
            	    }
            	    break;
            	default :
            	    break loop223;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS557=null;
        Token LPAREN561=null;
        Token RPAREN563=null;
        Token NEWKW573=null;
        Token LCURLY574=null;
        Token COMMA576=null;
        Token RCURLY578=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty558 = null;
        EsperEPL2GrammarParser.constant_return constant559 = null;
        EsperEPL2GrammarParser.substitution_return substitution560 = null;
        EsperEPL2GrammarParser.expression_return expression562 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass564 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass565 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction566 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc567 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression568 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression569 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass570 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass571 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression572 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign575 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign577 = null;
        CommonTree d_tree=null;
        CommonTree MINUS557_tree=null;
        CommonTree LPAREN561_tree=null;
        CommonTree RPAREN563_tree=null;
        CommonTree NEWKW573_tree=null;
        CommonTree LCURLY574_tree=null;
        CommonTree COMMA576_tree=null;
        CommonTree RCURLY578_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_NEWKW=new RewriteRuleTokenStream(adaptor,"token NEWKW");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_newAssign=new RewriteRuleSubtreeStream(adaptor,"rule newAssign");
        RewriteRuleSubtreeStream stream_subSelectExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt229=10;
            alt229 = dfa229.predict(input);
            switch (alt229) {
                case 1 :
                    {
                    MINUS557=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression8910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS557);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression8912);
                    eventProperty558=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty558.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression8925);
                    constant559=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant559.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression8930);
                    substitution560=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution560.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN561=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression8935); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN561);
                    pushFollow(FOLLOW_expression_in_unaryExpression8937);
                    expression562=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression562.getTree());
                    RPAREN563=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression8939); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN563);
                    int alt225=2;
                    int LA225_0 = input.LA(1);
                    if ( (LA225_0==DOT) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8944); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8946);
                            libFunctionNoClass564=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass564.getTree());
                            loop224:
                            do {
                                int alt224=2;
                                int LA224_0 = input.LA(1);
                                if ( (LA224_0==DOT) ) {
                                    alt224=1;
                                }
                                switch (alt224) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8951); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8953);
                            	    libFunctionNoClass565=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass565.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop224;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression8990);
                    eventPropertyOrLibFunction566=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction566.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression9002);
                    builtinFunc567=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc567.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression9008);
                    arrayExpression568=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression568.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression9013);
                    subSelectExpression569=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelectExpression.add(subSelectExpression569.getTree());
                    int alt227=2;
                    int LA227_0 = input.LA(1);
                    if ( (LA227_0==DOT) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9018); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9020);
                            libFunctionNoClass570=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass570.getTree());
                            loop226:
                            do {
                                int alt226=2;
                                int LA226_0 = input.LA(1);
                                if ( (LA226_0==DOT) ) {
                                    alt226=1;
                                }
                                switch (alt226) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9025); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9027);
                            	    libFunctionNoClass571=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass571.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop226;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_subSelectExpression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_subSelectExpression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression9064);
                    existsSubSelectExpression572=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression572.getTree());
                    }
                    break;
                case 10 :
                    {
                    NEWKW573=(Token)match(input,NEWKW,FOLLOW_NEWKW_in_unaryExpression9069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NEWKW.add(NEWKW573);
                    LCURLY574=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_unaryExpression9071); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY574);
                    pushFollow(FOLLOW_newAssign_in_unaryExpression9073);
                    newAssign575=newAssign();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newAssign.add(newAssign575.getTree());
                    loop228:
                    do {
                        int alt228=2;
                        int LA228_0 = input.LA(1);
                        if ( (LA228_0==COMMA) ) {
                            alt228=1;
                        }
                        switch (alt228) {
                    	case 1 :
                    	    {
                    	    COMMA576=(Token)match(input,COMMA,FOLLOW_COMMA_in_unaryExpression9076); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA576);
                    	    pushFollow(FOLLOW_newAssign_in_unaryExpression9078);
                    	    newAssign577=newAssign();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_newAssign.add(newAssign577.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop228;
                        }
                    } while (true);
                    RCURLY578=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_unaryExpression9082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY578);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NEWKW.nextNode(), root_1);
                        while ( stream_newAssign.hasNext() ) {
                            adaptor.addChild(root_1, stream_newAssign.nextTree());
                        }
                        stream_newAssign.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class newAssign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.newAssign_return newAssign() throws RecognitionException {
        EsperEPL2GrammarParser.newAssign_return retval = new EsperEPL2GrammarParser.newAssign_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS580=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty579 = null;
        EsperEPL2GrammarParser.expression_return expression581 = null;
        CommonTree EQUALS580_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_newAssign9104);
            eventProperty579=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty579.getTree());
            int alt230=2;
            int LA230_0 = input.LA(1);
            if ( (LA230_0==EQUALS) ) {
                alt230=1;
            }
            switch (alt230) {
                case 1 :
                    {
                    EQUALS580=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_newAssign9107); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS580);
                    pushFollow(FOLLOW_expression_in_newAssign9109);
                    expression581=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression581.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEW_ITEM, "NEW_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr582 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression9137);
            subQueryExpr582=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr582.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr583 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression9159);
            subQueryExpr583=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr583.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS584=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr585 = null;
        CommonTree EXISTS584_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS584=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression9181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS584);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression9183);
            subQueryExpr585=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr585.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN586=null;
        Token SELECT587=null;
        Token DISTINCT588=null;
        Token FROM590=null;
        Token WHERE592=null;
        Token RPAREN594=null;
        EsperEPL2GrammarParser.selectionList_return selectionList589 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr591 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause593 = null;
        CommonTree LPAREN586_tree=null;
        CommonTree SELECT587_tree=null;
        CommonTree DISTINCT588_tree=null;
        CommonTree FROM590_tree=null;
        CommonTree WHERE592_tree=null;
        CommonTree RPAREN594_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN586=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr9216); if (state.failed) return retval;
            SELECT587=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr9222); if (state.failed) return retval;
            int alt231=2;
            int LA231_0 = input.LA(1);
            if ( (LA231_0==DISTINCT) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    {
                    DISTINCT588=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr9225); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT588_tree = (CommonTree)adaptor.create(DISTINCT588);
                    adaptor.addChild(root_0, DISTINCT588_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr9228);
            selectionList589=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList589.getTree());
            FROM590=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr9235); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr9238);
            subSelectFilterExpr591=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr591.getTree());
            int alt232=2;
            int LA232_0 = input.LA(1);
            if ( (LA232_0==WHERE) ) {
                alt232=1;
            }
            switch (alt232) {
                case 1 :
                    {
                    WHERE592=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr9246); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr9249);
                    whereClause593=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause593.getTree());
                    }
                    break;
            }
            RPAREN594=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr9258); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT596=null;
        Token DOT598=null;
        Token AS600=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression595 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression597 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression599 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT596_tree=null;
        CommonTree DOT598_tree=null;
        CommonTree AS600_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr9282);
            eventFilterExpression595=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression595.getTree());
            int alt234=2;
            int LA234_0 = input.LA(1);
            if ( (LA234_0==DOT) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    {
                    DOT596=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr9287); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT596);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr9289);
                    viewExpression597=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression597.getTree());
                    loop233:
                    do {
                        int alt233=2;
                        int LA233_0 = input.LA(1);
                        if ( (LA233_0==DOT) ) {
                            alt233=1;
                        }
                        switch (alt233) {
                    	case 1 :
                    	    {
                    	    DOT598=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr9292); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT598);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr9294);
                    	    viewExpression599=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression599.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop233;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt235=3;
            int LA235_0 = input.LA(1);
            if ( (LA235_0==AS) ) {
                alt235=1;
            }
            else if ( (LA235_0==IDENT) ) {
                alt235=2;
            }
            switch (alt235) {
                case 1 :
                    {
                    AS600=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr9301); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS600);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr9305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr9311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt236=3;
            int LA236_0 = input.LA(1);
            if ( (LA236_0==RETAINUNION) ) {
                alt236=1;
            }
            else if ( (LA236_0==RETAININTERSECTION) ) {
                alt236=2;
            }
            switch (alt236) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr9318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr9322); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LCURLY601=null;
        Token COMMA603=null;
        Token RCURLY605=null;
        EsperEPL2GrammarParser.expression_return expression602 = null;
        EsperEPL2GrammarParser.expression_return expression604 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass606 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass607 = null;
        CommonTree d_tree=null;
        CommonTree LCURLY601_tree=null;
        CommonTree COMMA603_tree=null;
        CommonTree RCURLY605_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LCURLY601=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression9362); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY601);
            int alt238=2;
            int LA238_0 = input.LA(1);
            if ( (LA238_0==WINDOW||LA238_0==BETWEEN||LA238_0==ESCAPE||(LA238_0>=NOT_EXPR && LA238_0<=EVERY_EXPR)||LA238_0==WHERE||(LA238_0>=SUM && LA238_0<=COUNT)||LA238_0==CASE||LA238_0==OUTER||(LA238_0>=JOIN && LA238_0<=FULL)||(LA238_0>=EVENTS && LA238_0<=LAST)||(LA238_0>=UNIDIRECTIONAL && LA238_0<=CURRENT_TIMESTAMP)||(LA238_0>=SNAPSHOT && LA238_0<=INDEX)||(LA238_0>=BOOLEAN_TRUE && LA238_0<=VALUE_NULL)||(LA238_0>=DEFINE && LA238_0<=AFTER)||LA238_0==WHILE||(LA238_0>=MERGE && LA238_0<=MATCHED)||LA238_0==NEWKW||LA238_0==CONTEXT||LA238_0==NUM_DOUBLE||(LA238_0>=IDENT && LA238_0<=LPAREN)||LA238_0==LCURLY||(LA238_0>=PLUS && LA238_0<=QUOTED_STRING_LITERAL)||LA238_0==MINUS||LA238_0==NUM_INT||(LA238_0>=TICKED_STRING_LITERAL && LA238_0<=NUM_FLOAT)) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression9365);
                    expression602=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression602.getTree());
                    loop237:
                    do {
                        int alt237=2;
                        int LA237_0 = input.LA(1);
                        if ( (LA237_0==COMMA) ) {
                            alt237=1;
                        }
                        switch (alt237) {
                    	case 1 :
                    	    {
                    	    COMMA603=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression9368); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA603);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression9370);
                    	    expression604=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression604.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop237;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY605=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression9377); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY605);
            int alt240=2;
            int LA240_0 = input.LA(1);
            if ( (LA240_0==DOT) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression9382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression9384);
                    libFunctionNoClass606=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass606.getTree());
                    loop239:
                    do {
                        int alt239=2;
                        int LA239_0 = input.LA(1);
                        if ( (LA239_0==DOT) ) {
                            alt239=1;
                        }
                        switch (alt239) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression9389); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression9391);
                    	    libFunctionNoClass607=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass607.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop239;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_2);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token SUM608=null;
        Token LPAREN609=null;
        Token ALL610=null;
        Token DISTINCT611=null;
        Token RPAREN614=null;
        Token AVG615=null;
        Token LPAREN616=null;
        Token ALL617=null;
        Token DISTINCT618=null;
        Token RPAREN621=null;
        Token COUNT622=null;
        Token LPAREN623=null;
        Token ALL624=null;
        Token DISTINCT625=null;
        Token STAR627=null;
        Token RPAREN629=null;
        Token MEDIAN630=null;
        Token LPAREN631=null;
        Token ALL632=null;
        Token DISTINCT633=null;
        Token RPAREN636=null;
        Token STDDEV637=null;
        Token LPAREN638=null;
        Token ALL639=null;
        Token DISTINCT640=null;
        Token RPAREN643=null;
        Token AVEDEV644=null;
        Token LPAREN645=null;
        Token ALL646=null;
        Token DISTINCT647=null;
        Token RPAREN650=null;
        Token COALESCE654=null;
        Token LPAREN655=null;
        Token COMMA657=null;
        Token COMMA659=null;
        Token RPAREN661=null;
        Token PREVIOUS662=null;
        Token LPAREN663=null;
        Token COMMA665=null;
        Token RPAREN667=null;
        Token PREVIOUSTAIL670=null;
        Token LPAREN671=null;
        Token COMMA673=null;
        Token RPAREN675=null;
        Token PREVIOUSCOUNT678=null;
        Token LPAREN679=null;
        Token RPAREN681=null;
        Token PREVIOUSWINDOW682=null;
        Token LPAREN683=null;
        Token RPAREN685=null;
        Token PRIOR688=null;
        Token LPAREN689=null;
        Token NUM_INT690=null;
        Token COMMA691=null;
        Token RPAREN693=null;
        Token INSTANCEOF694=null;
        Token LPAREN695=null;
        Token COMMA697=null;
        Token COMMA699=null;
        Token RPAREN701=null;
        Token TYPEOF702=null;
        Token LPAREN703=null;
        Token RPAREN705=null;
        Token CAST706=null;
        Token LPAREN707=null;
        Token COMMA709=null;
        Token AS710=null;
        Token RPAREN712=null;
        Token EXISTS715=null;
        Token LPAREN716=null;
        Token RPAREN718=null;
        Token CURRENT_TIMESTAMP719=null;
        Token LPAREN720=null;
        Token RPAREN721=null;
        EsperEPL2GrammarParser.expression_return expression612 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr613 = null;
        EsperEPL2GrammarParser.expression_return expression619 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr620 = null;
        EsperEPL2GrammarParser.expression_return expression626 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr628 = null;
        EsperEPL2GrammarParser.expression_return expression634 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr635 = null;
        EsperEPL2GrammarParser.expression_return expression641 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr642 = null;
        EsperEPL2GrammarParser.expression_return expression648 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr649 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation651 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation652 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation653 = null;
        EsperEPL2GrammarParser.expression_return expression656 = null;
        EsperEPL2GrammarParser.expression_return expression658 = null;
        EsperEPL2GrammarParser.expression_return expression660 = null;
        EsperEPL2GrammarParser.expression_return expression664 = null;
        EsperEPL2GrammarParser.expression_return expression666 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass668 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass669 = null;
        EsperEPL2GrammarParser.expression_return expression672 = null;
        EsperEPL2GrammarParser.expression_return expression674 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass676 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass677 = null;
        EsperEPL2GrammarParser.expression_return expression680 = null;
        EsperEPL2GrammarParser.expression_return expression684 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass686 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass687 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty692 = null;
        EsperEPL2GrammarParser.expression_return expression696 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier698 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier700 = null;
        EsperEPL2GrammarParser.expression_return expression704 = null;
        EsperEPL2GrammarParser.expression_return expression708 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier711 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass713 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass714 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty717 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass722 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass723 = null;
        CommonTree d_tree=null;
        CommonTree SUM608_tree=null;
        CommonTree LPAREN609_tree=null;
        CommonTree ALL610_tree=null;
        CommonTree DISTINCT611_tree=null;
        CommonTree RPAREN614_tree=null;
        CommonTree AVG615_tree=null;
        CommonTree LPAREN616_tree=null;
        CommonTree ALL617_tree=null;
        CommonTree DISTINCT618_tree=null;
        CommonTree RPAREN621_tree=null;
        CommonTree COUNT622_tree=null;
        CommonTree LPAREN623_tree=null;
        CommonTree ALL624_tree=null;
        CommonTree DISTINCT625_tree=null;
        CommonTree STAR627_tree=null;
        CommonTree RPAREN629_tree=null;
        CommonTree MEDIAN630_tree=null;
        CommonTree LPAREN631_tree=null;
        CommonTree ALL632_tree=null;
        CommonTree DISTINCT633_tree=null;
        CommonTree RPAREN636_tree=null;
        CommonTree STDDEV637_tree=null;
        CommonTree LPAREN638_tree=null;
        CommonTree ALL639_tree=null;
        CommonTree DISTINCT640_tree=null;
        CommonTree RPAREN643_tree=null;
        CommonTree AVEDEV644_tree=null;
        CommonTree LPAREN645_tree=null;
        CommonTree ALL646_tree=null;
        CommonTree DISTINCT647_tree=null;
        CommonTree RPAREN650_tree=null;
        CommonTree COALESCE654_tree=null;
        CommonTree LPAREN655_tree=null;
        CommonTree COMMA657_tree=null;
        CommonTree COMMA659_tree=null;
        CommonTree RPAREN661_tree=null;
        CommonTree PREVIOUS662_tree=null;
        CommonTree LPAREN663_tree=null;
        CommonTree COMMA665_tree=null;
        CommonTree RPAREN667_tree=null;
        CommonTree PREVIOUSTAIL670_tree=null;
        CommonTree LPAREN671_tree=null;
        CommonTree COMMA673_tree=null;
        CommonTree RPAREN675_tree=null;
        CommonTree PREVIOUSCOUNT678_tree=null;
        CommonTree LPAREN679_tree=null;
        CommonTree RPAREN681_tree=null;
        CommonTree PREVIOUSWINDOW682_tree=null;
        CommonTree LPAREN683_tree=null;
        CommonTree RPAREN685_tree=null;
        CommonTree PRIOR688_tree=null;
        CommonTree LPAREN689_tree=null;
        CommonTree NUM_INT690_tree=null;
        CommonTree COMMA691_tree=null;
        CommonTree RPAREN693_tree=null;
        CommonTree INSTANCEOF694_tree=null;
        CommonTree LPAREN695_tree=null;
        CommonTree COMMA697_tree=null;
        CommonTree COMMA699_tree=null;
        CommonTree RPAREN701_tree=null;
        CommonTree TYPEOF702_tree=null;
        CommonTree LPAREN703_tree=null;
        CommonTree RPAREN705_tree=null;
        CommonTree CAST706_tree=null;
        CommonTree LPAREN707_tree=null;
        CommonTree COMMA709_tree=null;
        CommonTree AS710_tree=null;
        CommonTree RPAREN712_tree=null;
        CommonTree EXISTS715_tree=null;
        CommonTree LPAREN716_tree=null;
        CommonTree RPAREN718_tree=null;
        CommonTree CURRENT_TIMESTAMP719_tree=null;
        CommonTree LPAREN720_tree=null;
        CommonTree RPAREN721_tree=null;
        RewriteRuleTokenStream stream_CAST=new RewriteRuleTokenStream(adaptor,"token CAST");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PREVIOUSTAIL=new RewriteRuleTokenStream(adaptor,"token PREVIOUSTAIL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_CURRENT_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token CURRENT_TIMESTAMP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PREVIOUS=new RewriteRuleTokenStream(adaptor,"token PREVIOUS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_PREVIOUSWINDOW=new RewriteRuleTokenStream(adaptor,"token PREVIOUSWINDOW");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            int alt270=20;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt270=1;
                }
                break;
            case AVG:
                {
                alt270=2;
                }
                break;
            case COUNT:
                {
                alt270=3;
                }
                break;
            case MEDIAN:
                {
                alt270=4;
                }
                break;
            case STDDEV:
                {
                alt270=5;
                }
                break;
            case AVEDEV:
                {
                alt270=6;
                }
                break;
            case FIRST:
                {
                alt270=7;
                }
                break;
            case LAST:
                {
                alt270=8;
                }
                break;
            case WINDOW:
                {
                alt270=9;
                }
                break;
            case COALESCE:
                {
                alt270=10;
                }
                break;
            case PREVIOUS:
                {
                alt270=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt270=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt270=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt270=14;
                }
                break;
            case PRIOR:
                {
                alt270=15;
                }
                break;
            case INSTANCEOF:
                {
                alt270=16;
                }
                break;
            case TYPEOF:
                {
                alt270=17;
                }
                break;
            case CAST:
                {
                alt270=18;
                }
                break;
            case EXISTS:
                {
                alt270=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt270=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);
                throw nvae;
            }
            switch (alt270) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM608=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc9440); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM608_tree = (CommonTree)adaptor.create(SUM608);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM608_tree, root_0);
                    }
                    LPAREN609=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9443); if (state.failed) return retval;
                    int alt241=3;
                    int LA241_0 = input.LA(1);
                    if ( (LA241_0==ALL) ) {
                        alt241=1;
                    }
                    else if ( (LA241_0==DISTINCT) ) {
                        alt241=2;
                    }
                    switch (alt241) {
                        case 1 :
                            {
                            ALL610=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9447); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT611=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9452); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT611_tree = (CommonTree)adaptor.create(DISTINCT611);
                            adaptor.addChild(root_0, DISTINCT611_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9456);
                    expression612=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression612.getTree());
                    int alt242=2;
                    int LA242_0 = input.LA(1);
                    if ( (LA242_0==COMMA) ) {
                        alt242=1;
                    }
                    switch (alt242) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9458);
                            aggregationFilterExpr613=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr613.getTree());
                            }
                            break;
                    }
                    RPAREN614=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9461); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG615=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc9467); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG615_tree = (CommonTree)adaptor.create(AVG615);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG615_tree, root_0);
                    }
                    LPAREN616=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9470); if (state.failed) return retval;
                    int alt243=3;
                    int LA243_0 = input.LA(1);
                    if ( (LA243_0==ALL) ) {
                        alt243=1;
                    }
                    else if ( (LA243_0==DISTINCT) ) {
                        alt243=2;
                    }
                    switch (alt243) {
                        case 1 :
                            {
                            ALL617=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9474); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT618=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9479); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT618_tree = (CommonTree)adaptor.create(DISTINCT618);
                            adaptor.addChild(root_0, DISTINCT618_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9483);
                    expression619=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression619.getTree());
                    int alt244=2;
                    int LA244_0 = input.LA(1);
                    if ( (LA244_0==COMMA) ) {
                        alt244=1;
                    }
                    switch (alt244) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9485);
                            aggregationFilterExpr620=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr620.getTree());
                            }
                            break;
                    }
                    RPAREN621=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9488); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT622=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc9494); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT622_tree = (CommonTree)adaptor.create(COUNT622);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT622_tree, root_0);
                    }
                    LPAREN623=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9497); if (state.failed) return retval;
                    int alt246=2;
                    int LA246_0 = input.LA(1);
                    if ( (LA246_0==WINDOW||LA246_0==BETWEEN||LA246_0==ESCAPE||(LA246_0>=NOT_EXPR && LA246_0<=EVERY_EXPR)||LA246_0==WHERE||(LA246_0>=SUM && LA246_0<=COUNT)||LA246_0==CASE||LA246_0==OUTER||(LA246_0>=JOIN && LA246_0<=FULL)||(LA246_0>=DISTINCT && LA246_0<=ALL)||(LA246_0>=EVENTS && LA246_0<=LAST)||(LA246_0>=UNIDIRECTIONAL && LA246_0<=CURRENT_TIMESTAMP)||(LA246_0>=SNAPSHOT && LA246_0<=INDEX)||(LA246_0>=BOOLEAN_TRUE && LA246_0<=VALUE_NULL)||(LA246_0>=DEFINE && LA246_0<=AFTER)||LA246_0==WHILE||(LA246_0>=MERGE && LA246_0<=MATCHED)||LA246_0==NEWKW||LA246_0==CONTEXT||LA246_0==NUM_DOUBLE||(LA246_0>=IDENT && LA246_0<=LPAREN)||LA246_0==LCURLY||(LA246_0>=PLUS && LA246_0<=QUOTED_STRING_LITERAL)||LA246_0==MINUS||LA246_0==NUM_INT||(LA246_0>=TICKED_STRING_LITERAL && LA246_0<=NUM_FLOAT)) ) {
                        alt246=1;
                    }
                    else if ( (LA246_0==STAR) ) {
                        alt246=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 246, 0, input);
                        throw nvae;
                    }
                    switch (alt246) {
                        case 1 :
                            {
                            {
                            int alt245=3;
                            int LA245_0 = input.LA(1);
                            if ( (LA245_0==ALL) ) {
                                alt245=1;
                            }
                            else if ( (LA245_0==DISTINCT) ) {
                                alt245=2;
                            }
                            switch (alt245) {
                                case 1 :
                                    {
                                    ALL624=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9509); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT625=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9514); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT625_tree = (CommonTree)adaptor.create(DISTINCT625);
                                    adaptor.addChild(root_0, DISTINCT625_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc9518);
                            expression626=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression626.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR627=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc9529); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    int alt247=2;
                    int LA247_0 = input.LA(1);
                    if ( (LA247_0==COMMA) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9540);
                            aggregationFilterExpr628=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr628.getTree());
                            }
                            break;
                    }
                    RPAREN629=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9543); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN630=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc9549); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN630_tree = (CommonTree)adaptor.create(MEDIAN630);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN630_tree, root_0);
                    }
                    LPAREN631=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9552); if (state.failed) return retval;
                    int alt248=3;
                    int LA248_0 = input.LA(1);
                    if ( (LA248_0==ALL) ) {
                        alt248=1;
                    }
                    else if ( (LA248_0==DISTINCT) ) {
                        alt248=2;
                    }
                    switch (alt248) {
                        case 1 :
                            {
                            ALL632=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9556); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT633=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9561); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT633_tree = (CommonTree)adaptor.create(DISTINCT633);
                            adaptor.addChild(root_0, DISTINCT633_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9565);
                    expression634=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression634.getTree());
                    int alt249=2;
                    int LA249_0 = input.LA(1);
                    if ( (LA249_0==COMMA) ) {
                        alt249=1;
                    }
                    switch (alt249) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9567);
                            aggregationFilterExpr635=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr635.getTree());
                            }
                            break;
                    }
                    RPAREN636=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9570); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV637=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc9576); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV637_tree = (CommonTree)adaptor.create(STDDEV637);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV637_tree, root_0);
                    }
                    LPAREN638=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9579); if (state.failed) return retval;
                    int alt250=3;
                    int LA250_0 = input.LA(1);
                    if ( (LA250_0==ALL) ) {
                        alt250=1;
                    }
                    else if ( (LA250_0==DISTINCT) ) {
                        alt250=2;
                    }
                    switch (alt250) {
                        case 1 :
                            {
                            ALL639=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9583); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT640=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9588); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT640_tree = (CommonTree)adaptor.create(DISTINCT640);
                            adaptor.addChild(root_0, DISTINCT640_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9592);
                    expression641=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression641.getTree());
                    int alt251=2;
                    int LA251_0 = input.LA(1);
                    if ( (LA251_0==COMMA) ) {
                        alt251=1;
                    }
                    switch (alt251) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9594);
                            aggregationFilterExpr642=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr642.getTree());
                            }
                            break;
                    }
                    RPAREN643=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9597); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV644=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc9603); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV644_tree = (CommonTree)adaptor.create(AVEDEV644);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV644_tree, root_0);
                    }
                    LPAREN645=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9606); if (state.failed) return retval;
                    int alt252=3;
                    int LA252_0 = input.LA(1);
                    if ( (LA252_0==ALL) ) {
                        alt252=1;
                    }
                    else if ( (LA252_0==DISTINCT) ) {
                        alt252=2;
                    }
                    switch (alt252) {
                        case 1 :
                            {
                            ALL646=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9610); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT647=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9615); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT647_tree = (CommonTree)adaptor.create(DISTINCT647);
                            adaptor.addChild(root_0, DISTINCT647_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9619);
                    expression648=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression648.getTree());
                    int alt253=2;
                    int LA253_0 = input.LA(1);
                    if ( (LA253_0==COMMA) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9621);
                            aggregationFilterExpr649=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr649.getTree());
                            }
                            break;
                    }
                    RPAREN650=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9624); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc9630);
                    firstAggregation651=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation651.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc9635);
                    lastAggregation652=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation652.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc9640);
                    windowAggregation653=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation653.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE654=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc9645); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE654_tree = (CommonTree)adaptor.create(COALESCE654);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE654_tree, root_0);
                    }
                    LPAREN655=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9648); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9651);
                    expression656=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression656.getTree());
                    COMMA657=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9653); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9656);
                    expression658=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression658.getTree());
                    loop254:
                    do {
                        int alt254=2;
                        int LA254_0 = input.LA(1);
                        if ( (LA254_0==COMMA) ) {
                            alt254=1;
                        }
                        switch (alt254) {
                    	case 1 :
                    	    {
                    	    COMMA659=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9659); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc9662);
                    	    expression660=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression660.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop254;
                        }
                    } while (true);
                    RPAREN661=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9666); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    PREVIOUS662=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc9672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUS.add(PREVIOUS662);
                    LPAREN663=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9674); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN663);
                    pushFollow(FOLLOW_expression_in_builtinFunc9676);
                    expression664=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression664.getTree());
                    int alt255=2;
                    int LA255_0 = input.LA(1);
                    if ( (LA255_0==COMMA) ) {
                        alt255=1;
                    }
                    switch (alt255) {
                        case 1 :
                            {
                            COMMA665=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9679); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA665);
                            pushFollow(FOLLOW_expression_in_builtinFunc9681);
                            expression666=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression666.getTree());
                            }
                            break;
                    }
                    RPAREN667=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN667);
                    int alt257=2;
                    int LA257_0 = input.LA(1);
                    if ( (LA257_0==DOT) ) {
                        alt257=1;
                    }
                    switch (alt257) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9690); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9692);
                            libFunctionNoClass668=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass668.getTree());
                            loop256:
                            do {
                                int alt256=2;
                                int LA256_0 = input.LA(1);
                                if ( (LA256_0==DOT) ) {
                                    alt256=1;
                                }
                                switch (alt256) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9697); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9699);
                            	    libFunctionNoClass669=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass669.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop256;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    {
                    PREVIOUSTAIL670=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc9746); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSTAIL.add(PREVIOUSTAIL670);
                    LPAREN671=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN671);
                    pushFollow(FOLLOW_expression_in_builtinFunc9750);
                    expression672=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression672.getTree());
                    int alt258=2;
                    int LA258_0 = input.LA(1);
                    if ( (LA258_0==COMMA) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            {
                            COMMA673=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9753); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA673);
                            pushFollow(FOLLOW_expression_in_builtinFunc9755);
                            expression674=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression674.getTree());
                            }
                            break;
                    }
                    RPAREN675=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN675);
                    int alt260=2;
                    int LA260_0 = input.LA(1);
                    if ( (LA260_0==DOT) ) {
                        alt260=1;
                    }
                    switch (alt260) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9764); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9766);
                            libFunctionNoClass676=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass676.getTree());
                            loop259:
                            do {
                                int alt259=2;
                                int LA259_0 = input.LA(1);
                                if ( (LA259_0==DOT) ) {
                                    alt259=1;
                                }
                                switch (alt259) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9771); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9773);
                            	    libFunctionNoClass677=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass677.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop259;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT678=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc9820); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT678_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT678);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT678_tree, root_0);
                    }
                    LPAREN679=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9823); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9826);
                    expression680=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression680.getTree());
                    RPAREN681=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9828); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    PREVIOUSWINDOW682=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc9834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSWINDOW.add(PREVIOUSWINDOW682);
                    LPAREN683=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9836); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN683);
                    pushFollow(FOLLOW_expression_in_builtinFunc9838);
                    expression684=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression684.getTree());
                    RPAREN685=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9840); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN685);
                    int alt262=2;
                    int LA262_0 = input.LA(1);
                    if ( (LA262_0==DOT) ) {
                        alt262=1;
                    }
                    switch (alt262) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9845); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9847);
                            libFunctionNoClass686=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass686.getTree());
                            loop261:
                            do {
                                int alt261=2;
                                int LA261_0 = input.LA(1);
                                if ( (LA261_0==DOT) ) {
                                    alt261=1;
                                }
                                switch (alt261) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9852); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9854);
                            	    libFunctionNoClass687=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass687.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop261;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR688=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc9899); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR688_tree = (CommonTree)adaptor.create(PRIOR688);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR688_tree, root_0);
                    }
                    LPAREN689=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9902); if (state.failed) return retval;
                    NUM_INT690=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc9905); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT690_tree = (CommonTree)adaptor.create(NUM_INT690);
                    adaptor.addChild(root_0, NUM_INT690_tree);
                    }
                    COMMA691=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9907); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc9910);
                    eventProperty692=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty692.getTree());
                    RPAREN693=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9912); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF694=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc9922); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF694_tree = (CommonTree)adaptor.create(INSTANCEOF694);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF694_tree, root_0);
                    }
                    LPAREN695=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9925); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9928);
                    expression696=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression696.getTree());
                    COMMA697=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9930); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9933);
                    classIdentifier698=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier698.getTree());
                    loop263:
                    do {
                        int alt263=2;
                        int LA263_0 = input.LA(1);
                        if ( (LA263_0==COMMA) ) {
                            alt263=1;
                        }
                        switch (alt263) {
                    	case 1 :
                    	    {
                    	    COMMA699=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9936); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9939);
                    	    classIdentifier700=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier700.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop263;
                        }
                    } while (true);
                    RPAREN701=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9943); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF702=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc9949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF702_tree = (CommonTree)adaptor.create(TYPEOF702);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF702_tree, root_0);
                    }
                    LPAREN703=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9952); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9955);
                    expression704=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression704.getTree());
                    RPAREN705=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9957); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    CAST706=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc9963); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CAST.add(CAST706);
                    LPAREN707=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN707);
                    pushFollow(FOLLOW_expression_in_builtinFunc9967);
                    expression708=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression708.getTree());
                    int alt264=2;
                    int LA264_0 = input.LA(1);
                    if ( (LA264_0==COMMA) ) {
                        alt264=1;
                    }
                    else if ( (LA264_0==AS) ) {
                        alt264=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 264, 0, input);
                        throw nvae;
                    }
                    switch (alt264) {
                        case 1 :
                            {
                            COMMA709=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9970); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA709);
                            }
                            break;
                        case 2 :
                            {
                            AS710=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc9974); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS710);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9977);
                    classIdentifier711=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier711.getTree());
                    RPAREN712=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9979); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN712);
                    int alt266=2;
                    int LA266_0 = input.LA(1);
                    if ( (LA266_0==DOT) ) {
                        alt266=1;
                    }
                    switch (alt266) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9984); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9986);
                            libFunctionNoClass713=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass713.getTree());
                            loop265:
                            do {
                                int alt265=2;
                                int LA265_0 = input.LA(1);
                                if ( (LA265_0==DOT) ) {
                                    alt265=1;
                                }
                                switch (alt265) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9991); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9993);
                            	    libFunctionNoClass714=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass714.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop265;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_2, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS715=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc10038); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS715_tree = (CommonTree)adaptor.create(EXISTS715);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS715_tree, root_0);
                    }
                    LPAREN716=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10041); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc10044);
                    eventProperty717=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty717.getTree());
                    RPAREN718=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10046); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    CURRENT_TIMESTAMP719=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc10052); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURRENT_TIMESTAMP.add(CURRENT_TIMESTAMP719);
                    int alt267=2;
                    int LA267_0 = input.LA(1);
                    if ( (LA267_0==LPAREN) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            {
                            LPAREN720=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10055); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN720);
                            RPAREN721=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10057); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN721);
                            }
                            break;
                    }
                    int alt269=2;
                    int LA269_0 = input.LA(1);
                    if ( (LA269_0==DOT) ) {
                        alt269=1;
                    }
                    switch (alt269) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10064); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10066);
                            libFunctionNoClass722=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass722.getTree());
                            loop268:
                            do {
                                int alt268=2;
                                int LA268_0 = input.LA(1);
                                if ( (LA268_0==DOT) ) {
                                    alt268=1;
                                }
                                switch (alt268) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10071); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10073);
                            	    libFunctionNoClass723=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass723.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop268;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_2);
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token FIRST724=null;
        Token LPAREN725=null;
        Token COMMA727=null;
        Token RPAREN729=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr726 = null;
        EsperEPL2GrammarParser.expression_return expression728 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass730 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass731 = null;
        CommonTree d_tree=null;
        CommonTree FIRST724_tree=null;
        CommonTree LPAREN725_tree=null;
        CommonTree COMMA727_tree=null;
        CommonTree RPAREN729_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            FIRST724=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation10117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST724);
            LPAREN725=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation10119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN725);
            int alt272=2;
            int LA272_0 = input.LA(1);
            if ( (LA272_0==WINDOW||LA272_0==BETWEEN||LA272_0==ESCAPE||(LA272_0>=NOT_EXPR && LA272_0<=EVERY_EXPR)||LA272_0==WHERE||(LA272_0>=SUM && LA272_0<=COUNT)||LA272_0==CASE||LA272_0==OUTER||(LA272_0>=JOIN && LA272_0<=FULL)||(LA272_0>=EVENTS && LA272_0<=LAST)||(LA272_0>=UNIDIRECTIONAL && LA272_0<=CURRENT_TIMESTAMP)||(LA272_0>=SNAPSHOT && LA272_0<=INDEX)||(LA272_0>=BOOLEAN_TRUE && LA272_0<=VALUE_NULL)||(LA272_0>=DEFINE && LA272_0<=AFTER)||LA272_0==WHILE||(LA272_0>=MERGE && LA272_0<=MATCHED)||LA272_0==NEWKW||LA272_0==CONTEXT||LA272_0==NUM_DOUBLE||(LA272_0>=IDENT && LA272_0<=LPAREN)||LA272_0==LCURLY||LA272_0==STAR||(LA272_0>=PLUS && LA272_0<=QUOTED_STRING_LITERAL)||LA272_0==MINUS||LA272_0==NUM_INT||(LA272_0>=TICKED_STRING_LITERAL && LA272_0<=NUM_FLOAT)) ) {
                alt272=1;
            }
            switch (alt272) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_firstAggregation10122);
                    accessAggExpr726=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr726.getTree());
                    int alt271=2;
                    int LA271_0 = input.LA(1);
                    if ( (LA271_0==COMMA) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            {
                            COMMA727=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation10125); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA727);
                            pushFollow(FOLLOW_expression_in_firstAggregation10127);
                            expression728=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression728.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN729=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation10133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN729);
            int alt274=2;
            int LA274_0 = input.LA(1);
            if ( (LA274_0==DOT) ) {
                alt274=1;
            }
            switch (alt274) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation10138); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation10140);
                    libFunctionNoClass730=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass730.getTree());
                    loop273:
                    do {
                        int alt273=2;
                        int LA273_0 = input.LA(1);
                        if ( (LA273_0==DOT) ) {
                            alt273=1;
                        }
                        switch (alt273) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation10145); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation10147);
                    	    libFunctionNoClass731=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass731.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop273;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LAST732=null;
        Token LPAREN733=null;
        Token COMMA735=null;
        Token RPAREN737=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr734 = null;
        EsperEPL2GrammarParser.expression_return expression736 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass738 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass739 = null;
        CommonTree d_tree=null;
        CommonTree LAST732_tree=null;
        CommonTree LPAREN733_tree=null;
        CommonTree COMMA735_tree=null;
        CommonTree RPAREN737_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LAST732=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation10202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST732);
            LPAREN733=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation10204); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN733);
            int alt276=2;
            int LA276_0 = input.LA(1);
            if ( (LA276_0==WINDOW||LA276_0==BETWEEN||LA276_0==ESCAPE||(LA276_0>=NOT_EXPR && LA276_0<=EVERY_EXPR)||LA276_0==WHERE||(LA276_0>=SUM && LA276_0<=COUNT)||LA276_0==CASE||LA276_0==OUTER||(LA276_0>=JOIN && LA276_0<=FULL)||(LA276_0>=EVENTS && LA276_0<=LAST)||(LA276_0>=UNIDIRECTIONAL && LA276_0<=CURRENT_TIMESTAMP)||(LA276_0>=SNAPSHOT && LA276_0<=INDEX)||(LA276_0>=BOOLEAN_TRUE && LA276_0<=VALUE_NULL)||(LA276_0>=DEFINE && LA276_0<=AFTER)||LA276_0==WHILE||(LA276_0>=MERGE && LA276_0<=MATCHED)||LA276_0==NEWKW||LA276_0==CONTEXT||LA276_0==NUM_DOUBLE||(LA276_0>=IDENT && LA276_0<=LPAREN)||LA276_0==LCURLY||LA276_0==STAR||(LA276_0>=PLUS && LA276_0<=QUOTED_STRING_LITERAL)||LA276_0==MINUS||LA276_0==NUM_INT||(LA276_0>=TICKED_STRING_LITERAL && LA276_0<=NUM_FLOAT)) ) {
                alt276=1;
            }
            switch (alt276) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_lastAggregation10207);
                    accessAggExpr734=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr734.getTree());
                    int alt275=2;
                    int LA275_0 = input.LA(1);
                    if ( (LA275_0==COMMA) ) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            {
                            COMMA735=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation10210); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA735);
                            pushFollow(FOLLOW_expression_in_lastAggregation10212);
                            expression736=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression736.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN737=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation10218); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN737);
            int alt278=2;
            int LA278_0 = input.LA(1);
            if ( (LA278_0==DOT) ) {
                alt278=1;
            }
            switch (alt278) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation10223); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation10225);
                    libFunctionNoClass738=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass738.getTree());
                    loop277:
                    do {
                        int alt277=2;
                        int LA277_0 = input.LA(1);
                        if ( (LA277_0==DOT) ) {
                            alt277=1;
                        }
                        switch (alt277) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation10230); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation10232);
                    	    libFunctionNoClass739=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass739.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop277;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token WINDOW740=null;
        Token LPAREN741=null;
        Token RPAREN743=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr742 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass744 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass745 = null;
        CommonTree d_tree=null;
        CommonTree WINDOW740_tree=null;
        CommonTree LPAREN741_tree=null;
        CommonTree RPAREN743_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            WINDOW740=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation10288); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW740);
            LPAREN741=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation10290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN741);
            int alt279=2;
            int LA279_0 = input.LA(1);
            if ( (LA279_0==WINDOW||LA279_0==BETWEEN||LA279_0==ESCAPE||(LA279_0>=NOT_EXPR && LA279_0<=EVERY_EXPR)||LA279_0==WHERE||(LA279_0>=SUM && LA279_0<=COUNT)||LA279_0==CASE||LA279_0==OUTER||(LA279_0>=JOIN && LA279_0<=FULL)||(LA279_0>=EVENTS && LA279_0<=LAST)||(LA279_0>=UNIDIRECTIONAL && LA279_0<=CURRENT_TIMESTAMP)||(LA279_0>=SNAPSHOT && LA279_0<=INDEX)||(LA279_0>=BOOLEAN_TRUE && LA279_0<=VALUE_NULL)||(LA279_0>=DEFINE && LA279_0<=AFTER)||LA279_0==WHILE||(LA279_0>=MERGE && LA279_0<=MATCHED)||LA279_0==NEWKW||LA279_0==CONTEXT||LA279_0==NUM_DOUBLE||(LA279_0>=IDENT && LA279_0<=LPAREN)||LA279_0==LCURLY||LA279_0==STAR||(LA279_0>=PLUS && LA279_0<=QUOTED_STRING_LITERAL)||LA279_0==MINUS||LA279_0==NUM_INT||(LA279_0>=TICKED_STRING_LITERAL && LA279_0<=NUM_FLOAT)) ) {
                alt279=1;
            }
            switch (alt279) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_windowAggregation10292);
                    accessAggExpr742=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr742.getTree());
                    }
                    break;
            }
            RPAREN743=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation10295); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN743);
            int alt281=2;
            int LA281_0 = input.LA(1);
            if ( (LA281_0==DOT) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation10300); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation10302);
                    libFunctionNoClass744=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass744.getTree());
                    loop280:
                    do {
                        int alt280=2;
                        int LA280_0 = input.LA(1);
                        if ( (LA280_0==DOT) ) {
                            alt280=1;
                        }
                        switch (alt280) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation10307); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation10309);
                    	    libFunctionNoClass745=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass745.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop280;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector746 = null;
        EsperEPL2GrammarParser.expression_return expression747 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyStreamSelector=new RewriteRuleSubtreeStream(adaptor,"rule propertyStreamSelector");
        try {
            int alt282=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt282=1;
                }
                break;
            case IDENT:
                {
                int LA282_2 = input.LA(2);
                if ( (LA282_2==DOT) ) {
                    int LA282_75 = input.LA(3);
                    if ( (LA282_75==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt282=2;
                    }
                    else if ( (LA282_75==WINDOW||LA282_75==BETWEEN||LA282_75==ESCAPE||LA282_75==EVERY_EXPR||LA282_75==WHERE||(LA282_75>=SUM && LA282_75<=COUNT)||LA282_75==OUTER||(LA282_75>=JOIN && LA282_75<=FULL)||(LA282_75>=EVENTS && LA282_75<=LAST)||(LA282_75>=UNIDIRECTIONAL && LA282_75<=PREVIOUSTAIL)||LA282_75==PRIOR||(LA282_75>=WEEKDAY && LA282_75<=CAST)||(LA282_75>=SNAPSHOT && LA282_75<=INDEX)||(LA282_75>=DEFINE && LA282_75<=AFTER)||LA282_75==WHILE||(LA282_75>=MERGE && LA282_75<=MATCHED)||LA282_75==CONTEXT||LA282_75==IDENT||LA282_75==TICKED_STRING_LITERAL) ) {
                        alt282=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 282, 75, input);
                        throw nvae;
                    }
                }
                else if ( ((LA282_2>=IN_SET && LA282_2<=REGEXP)||(LA282_2>=OR_EXPR && LA282_2<=NOT_EXPR)||LA282_2==IS||LA282_2==LBRACK||(LA282_2>=LPAREN && LA282_2<=RPAREN)||(LA282_2>=COMMA && LA282_2<=EQUALS)||(LA282_2>=STAR && LA282_2<=QUESTION)||(LA282_2>=BAND && LA282_2<=MOD)||LA282_2==ESCAPECHAR) ) {
                    alt282=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 282, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt282=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 282, 0, input);
                throw nvae;
            }
            switch (alt282) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr10366); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr10386);
                    propertyStreamSelector746=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyStreamSelector.add(propertyStreamSelector746.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_propertyStreamSelector.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_accessAggExpr10399);
                    expression747=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression747.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class aggregationFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.aggregationFilterExpr_return retval = new EsperEPL2GrammarParser.aggregationFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA748=null;
        EsperEPL2GrammarParser.expression_return expression749 = null;
        CommonTree COMMA748_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            COMMA748=(Token)match(input,COMMA,FOLLOW_COMMA_in_aggregationFilterExpr10418); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA748);
            pushFollow(FOLLOW_expression_in_aggregationFilterExpr10420);
            expression749=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression749.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGG_FILTER_EXPR, "AGG_FILTER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty750 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction751 = null;
        try {
            int alt283=2;
            int LA283_0 = input.LA(1);
            if ( (LA283_0==IDENT) ) {
                int LA283_1 = input.LA(2);
                if ( (LA283_1==DOT) ) {
                    int LA283_53 = input.LA(3);
                    if ( (LA283_53==IDENT) ) {
                        int LA283_297 = input.LA(4);
                        if ( (LA283_297==DOT) ) {
                            int LA283_713 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 713, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA283_297==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==LPAREN) ) {
                            int LA283_716 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 716, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA283_297==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_297==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 297, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA283_53==TICKED_STRING_LITERAL) ) {
                        int LA283_298 = input.LA(4);
                        if ( (LA283_298==DOT) ) {
                            int LA283_774 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 774, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA283_298==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==LPAREN) ) {
                            int LA283_777 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 777, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA283_298==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_298==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 298, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA283_53==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==MAX) ) {
                        int LA283_305 = input.LA(4);
                        if ( (LA283_305==LPAREN) ) {
                            int LA283_835 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 835, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA283_305==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_305==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 305, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA283_53==MIN) ) {
                        int LA283_306 = input.LA(4);
                        if ( (LA283_306==LPAREN) ) {
                            int LA283_896 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 896, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA283_306==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_306==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 306, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA283_53==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_53==BETWEEN||LA283_53==WHERE||LA283_53==SET||LA283_53==AFTER) ) {
                        alt283=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 283, 53, input);
                        throw nvae;
                    }
                }
                else if ( (LA283_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA283_349 = input.LA(4);
                        if ( (LA283_349==RPAREN) ) {
                            int LA283_957 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 957, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA283_349>=IN_SET && LA283_349<=REGEXP)||(LA283_349>=OR_EXPR && LA283_349<=NOT_EXPR)||LA283_349==IS||(LA283_349>=ASC && LA283_349<=DESC)||(LA283_349>=TIMEPERIOD_SEC && LA283_349<=TIMEPERIOD_SECONDS)||(LA283_349>=COMMA && LA283_349<=EQUALS)||(LA283_349>=STAR && LA283_349<=PLUS)||(LA283_349>=BAND && LA283_349<=MOD)) ) {
                            alt283=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 349, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA283_350 = input.LA(4);
                        if ( (LA283_350==RPAREN) ) {
                            int LA283_988 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 988, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA283_350>=IN_SET && LA283_350<=REGEXP)||(LA283_350>=OR_EXPR && LA283_350<=NOT_EXPR)||LA283_350==IS||(LA283_350>=ASC && LA283_350<=DESC)||(LA283_350>=TIMEPERIOD_SEC && LA283_350<=TIMEPERIOD_SECONDS)||(LA283_350>=COMMA && LA283_350<=EQUALS)||(LA283_350>=STAR && LA283_350<=PLUS)||(LA283_350>=BAND && LA283_350<=MOD)) ) {
                            alt283=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 350, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case LBRACK:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case LCURLY:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt283=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 283, 56, input);
                        throw nvae;
                    }
                }
                else if ( (LA283_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 283, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA283_0==TICKED_STRING_LITERAL) ) {
                int LA283_2 = input.LA(2);
                if ( (LA283_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA283_427 = input.LA(4);
                        if ( (LA283_427==RPAREN) ) {
                            int LA283_1019 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 1019, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA283_427>=IN_SET && LA283_427<=REGEXP)||(LA283_427>=OR_EXPR && LA283_427<=NOT_EXPR)||LA283_427==IS||(LA283_427>=ASC && LA283_427<=DESC)||(LA283_427>=TIMEPERIOD_SEC && LA283_427<=TIMEPERIOD_SECONDS)||(LA283_427>=COMMA && LA283_427<=EQUALS)||(LA283_427>=STAR && LA283_427<=PLUS)||(LA283_427>=BAND && LA283_427<=MOD)) ) {
                            alt283=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 427, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA283_428 = input.LA(4);
                        if ( (LA283_428==RPAREN) ) {
                            int LA283_1050 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 1050, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA283_428>=IN_SET && LA283_428<=REGEXP)||(LA283_428>=OR_EXPR && LA283_428<=NOT_EXPR)||LA283_428==IS||(LA283_428>=ASC && LA283_428<=DESC)||(LA283_428>=TIMEPERIOD_SEC && LA283_428<=TIMEPERIOD_SECONDS)||(LA283_428>=COMMA && LA283_428<=EQUALS)||(LA283_428>=STAR && LA283_428<=PLUS)||(LA283_428>=BAND && LA283_428<=MOD)) ) {
                            alt283=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 428, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case LBRACK:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case LCURLY:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt283=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 283, 116, input);
                        throw nvae;
                    }
                }
                else if ( (LA283_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==DOT) ) {
                    int LA283_118 = input.LA(3);
                    if ( (LA283_118==IDENT) ) {
                        int LA283_505 = input.LA(4);
                        if ( (LA283_505==DOT) ) {
                            int LA283_1081 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 1081, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA283_505==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==LPAREN) ) {
                            int LA283_1084 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 1084, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA283_505==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_505==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 505, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA283_118==TICKED_STRING_LITERAL) ) {
                        int LA283_506 = input.LA(4);
                        if ( (LA283_506==DOT) ) {
                            int LA283_1142 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 1142, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA283_506==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==LPAREN) ) {
                            int LA283_1145 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 1145, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA283_506==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_506==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 506, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA283_118==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==MAX) ) {
                        int LA283_513 = input.LA(4);
                        if ( (LA283_513==LPAREN) ) {
                            int LA283_1203 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 1203, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA283_513==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_513==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 513, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA283_118==MIN) ) {
                        int LA283_514 = input.LA(4);
                        if ( (LA283_514==LPAREN) ) {
                            int LA283_1264 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 1264, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA283_514==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else if ( (LA283_514==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt283=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 514, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA283_118==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                        alt283=1;
                    }
                    else if ( (LA283_118==BETWEEN||LA283_118==WHERE||LA283_118==SET||LA283_118==AFTER) ) {
                        alt283=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 283, 118, input);
                        throw nvae;
                    }
                }
                else if ( (LA283_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 283, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA283_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==MAX) ) {
                int LA283_9 = input.LA(2);
                if ( (LA283_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA283_557 = input.LA(4);
                        if ( (LA283_557==RPAREN) ) {
                            int LA283_1325 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 1325, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA283_557>=IN_SET && LA283_557<=REGEXP)||(LA283_557>=OR_EXPR && LA283_557<=NOT_EXPR)||LA283_557==IS||(LA283_557>=ASC && LA283_557<=DESC)||(LA283_557>=TIMEPERIOD_SEC && LA283_557<=TIMEPERIOD_SECONDS)||(LA283_557>=COMMA && LA283_557<=EQUALS)||(LA283_557>=STAR && LA283_557<=PLUS)||(LA283_557>=BAND && LA283_557<=MOD)) ) {
                            alt283=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 557, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA283_558 = input.LA(4);
                        if ( (LA283_558==RPAREN) ) {
                            int LA283_1356 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 1356, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA283_558>=IN_SET && LA283_558<=REGEXP)||(LA283_558>=OR_EXPR && LA283_558<=NOT_EXPR)||LA283_558==IS||(LA283_558>=ASC && LA283_558<=DESC)||(LA283_558>=TIMEPERIOD_SEC && LA283_558<=TIMEPERIOD_SECONDS)||(LA283_558>=COMMA && LA283_558<=EQUALS)||(LA283_558>=STAR && LA283_558<=PLUS)||(LA283_558>=BAND && LA283_558<=MOD)) ) {
                            alt283=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 558, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case LBRACK:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case LCURLY:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt283=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 283, 175, input);
                        throw nvae;
                    }
                }
                else if ( (LA283_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 283, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA283_0==MIN) ) {
                int LA283_10 = input.LA(2);
                if ( (LA283_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA283_635 = input.LA(4);
                        if ( (LA283_635==RPAREN) ) {
                            int LA283_1387 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 1387, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA283_635>=IN_SET && LA283_635<=REGEXP)||(LA283_635>=OR_EXPR && LA283_635<=NOT_EXPR)||LA283_635==IS||(LA283_635>=ASC && LA283_635<=DESC)||(LA283_635>=TIMEPERIOD_SEC && LA283_635<=TIMEPERIOD_SECONDS)||(LA283_635>=COMMA && LA283_635<=EQUALS)||(LA283_635>=STAR && LA283_635<=PLUS)||(LA283_635>=BAND && LA283_635<=MOD)) ) {
                            alt283=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 635, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA283_636 = input.LA(4);
                        if ( (LA283_636==RPAREN) ) {
                            int LA283_1418 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt283=1;
                            }
                            else if ( (true) ) {
                                alt283=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 283, 1418, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA283_636>=IN_SET && LA283_636<=REGEXP)||(LA283_636>=OR_EXPR && LA283_636<=NOT_EXPR)||LA283_636==IS||(LA283_636>=ASC && LA283_636<=DESC)||(LA283_636>=TIMEPERIOD_SEC && LA283_636<=TIMEPERIOD_SECONDS)||(LA283_636>=COMMA && LA283_636<=EQUALS)||(LA283_636>=STAR && LA283_636<=PLUS)||(LA283_636>=BAND && LA283_636<=MOD)) ) {
                            alt283=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 283, 636, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case LBRACK:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case LCURLY:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt283=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 283, 236, input);
                        throw nvae;
                    }
                }
                else if ( (LA283_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==ATCHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else if ( (LA283_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt283=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 283, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA283_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                alt283=1;
            }
            else if ( (LA283_0==BETWEEN||LA283_0==WHERE||LA283_0==SET||LA283_0==AFTER) ) {
                alt283=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);
                throw nvae;
            }
            switch (alt283) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction10448);
                    eventProperty750=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty750.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction10453);
                    libFunction751=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction751.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT753=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass752 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass754 = null;
        CommonTree DOT753_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction10465);
            libFunctionWithClass752=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass752.getTree());
            loop284:
            do {
                int alt284=2;
                int LA284_0 = input.LA(1);
                if ( (LA284_0==DOT) ) {
                    alt284=1;
                }
                switch (alt284) {
            	case 1 :
            	    {
            	    DOT753=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction10468); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT753);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction10470);
            	    libFunctionNoClass754=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass754.getTree());
            	    }
            	    break;
            	default :
            	    break loop284;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token DOT756=null;
        Token RPAREN759=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy755 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent757 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs758 = null;
        CommonTree l_tree=null;
        CommonTree DOT756_tree=null;
        CommonTree RPAREN759_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt285=2;
            int LA285_0 = input.LA(1);
            if ( (LA285_0==IDENT) ) {
                int LA285_1 = input.LA(2);
                if ( (LA285_1==DOT) ) {
                    alt285=1;
                }
            }
            else if ( (LA285_0==TICKED_STRING_LITERAL) ) {
                int LA285_2 = input.LA(2);
                if ( (LA285_2==DOT) ) {
                    alt285=1;
                }
            }
            switch (alt285) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass10503);
                    classIdentifierNonGreedy755=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy755.getTree());
                    DOT756=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass10505); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT756);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass10509);
            funcIdent757=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent757.getTree());
            l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass10513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(l);
            int alt286=2;
            int LA286_0 = input.LA(1);
            if ( (LA286_0==WINDOW||LA286_0==BETWEEN||LA286_0==ESCAPE||(LA286_0>=NOT_EXPR && LA286_0<=EVERY_EXPR)||LA286_0==WHERE||(LA286_0>=SUM && LA286_0<=COUNT)||LA286_0==CASE||LA286_0==OUTER||(LA286_0>=JOIN && LA286_0<=FULL)||(LA286_0>=DISTINCT && LA286_0<=ALL)||(LA286_0>=EVENTS && LA286_0<=LAST)||(LA286_0>=UNIDIRECTIONAL && LA286_0<=CURRENT_TIMESTAMP)||(LA286_0>=SNAPSHOT && LA286_0<=INDEX)||(LA286_0>=BOOLEAN_TRUE && LA286_0<=VALUE_NULL)||(LA286_0>=DEFINE && LA286_0<=AFTER)||LA286_0==WHILE||(LA286_0>=MERGE && LA286_0<=MATCHED)||LA286_0==NEWKW||LA286_0==CONTEXT||LA286_0==NUM_DOUBLE||LA286_0==LBRACK||(LA286_0>=IDENT && LA286_0<=LPAREN)||LA286_0==LCURLY||LA286_0==STAR||(LA286_0>=PLUS && LA286_0<=QUOTED_STRING_LITERAL)||LA286_0==MINUS||LA286_0==NUM_INT||(LA286_0>=TICKED_STRING_LITERAL && LA286_0<=NUM_FLOAT)) ) {
                alt286=1;
            }
            switch (alt286) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass10516);
                    libFunctionArgs758=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs758.getTree());
                    }
                    break;
            }
            RPAREN759=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass10520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN759);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token RPAREN762=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent760 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs761 = null;
        CommonTree l_tree=null;
        CommonTree RPAREN762_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass10553);
            funcIdent760=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent760.getTree());
            int alt288=2;
            int LA288_0 = input.LA(1);
            if ( (LA288_0==LPAREN) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass10558); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    int alt287=2;
                    int LA287_0 = input.LA(1);
                    if ( (LA287_0==WINDOW||LA287_0==BETWEEN||LA287_0==ESCAPE||(LA287_0>=NOT_EXPR && LA287_0<=EVERY_EXPR)||LA287_0==WHERE||(LA287_0>=SUM && LA287_0<=COUNT)||LA287_0==CASE||LA287_0==OUTER||(LA287_0>=JOIN && LA287_0<=FULL)||(LA287_0>=DISTINCT && LA287_0<=ALL)||(LA287_0>=EVENTS && LA287_0<=LAST)||(LA287_0>=UNIDIRECTIONAL && LA287_0<=CURRENT_TIMESTAMP)||(LA287_0>=SNAPSHOT && LA287_0<=INDEX)||(LA287_0>=BOOLEAN_TRUE && LA287_0<=VALUE_NULL)||(LA287_0>=DEFINE && LA287_0<=AFTER)||LA287_0==WHILE||(LA287_0>=MERGE && LA287_0<=MATCHED)||LA287_0==NEWKW||LA287_0==CONTEXT||LA287_0==NUM_DOUBLE||LA287_0==LBRACK||(LA287_0>=IDENT && LA287_0<=LPAREN)||LA287_0==LCURLY||LA287_0==STAR||(LA287_0>=PLUS && LA287_0<=QUOTED_STRING_LITERAL)||LA287_0==MINUS||LA287_0==NUM_INT||(LA287_0>=TICKED_STRING_LITERAL && LA287_0<=NUM_FLOAT)) ) {
                        alt287=1;
                    }
                    switch (alt287) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass10561);
                            libFunctionArgs761=libFunctionArgs();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs761.getTree());
                            }
                            break;
                    }
                    RPAREN762=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass10565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN762);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        Token w=null;
        Token s=null;
        Token after=null;
        Token between=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent763 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree w_tree=null;
        CommonTree s_tree=null;
        CommonTree after_tree=null;
        CommonTree between_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        try {
            int alt289=7;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt289=1;
                }
                break;
            case MAX:
                {
                alt289=2;
                }
                break;
            case MIN:
                {
                alt289=3;
                }
                break;
            case WHERE:
                {
                alt289=4;
                }
                break;
            case SET:
                {
                alt289=5;
                }
                break;
            case AFTER:
                {
                alt289=6;
                }
                break;
            case BETWEEN:
                {
                alt289=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);
                throw nvae;
            }
            switch (alt289) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent10597);
                    escapableIdent763=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent763.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent10604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent10616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_funcIdent10628); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, w));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,SET,FOLLOW_SET_in_funcIdent10640); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    {
                    after=(Token)match(input,AFTER,FOLLOW_AFTER_in_funcIdent10652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(after);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, after));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    {
                    between=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_funcIdent10663); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BETWEEN.add(between);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, between));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL764=null;
        Token DISTINCT765=null;
        Token COMMA767=null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem766 = null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem768 = null;
        CommonTree ALL764_tree=null;
        CommonTree DISTINCT765_tree=null;
        CommonTree COMMA767_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt290=3;
            int LA290_0 = input.LA(1);
            if ( (LA290_0==ALL) ) {
                alt290=1;
            }
            else if ( (LA290_0==DISTINCT) ) {
                alt290=2;
            }
            switch (alt290) {
                case 1 :
                    {
                    ALL764=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs10680); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT765=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs10685); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT765_tree = (CommonTree)adaptor.create(DISTINCT765);
                    adaptor.addChild(root_0, DISTINCT765_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs10689);
            libFunctionArgItem766=libFunctionArgItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem766.getTree());
            loop291:
            do {
                int alt291=2;
                int LA291_0 = input.LA(1);
                if ( (LA291_0==COMMA) ) {
                    alt291=1;
                }
                switch (alt291) {
            	case 1 :
            	    {
            	    COMMA767=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs10692); if (state.failed) return retval;
            	    pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs10695);
            	    libFunctionArgItem768=libFunctionArgItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem768.getTree());
            	    }
            	    break;
            	default :
            	    break loop291;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgItem_return retval = new EsperEPL2GrammarParser.libFunctionArgItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl769 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime770 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt292=2;
            int LA292_0 = input.LA(1);
            if ( (LA292_0==IDENT) ) {
                int LA292_1 = input.LA(2);
                if ( (LA292_1==GOES) ) {
                    alt292=1;
                }
            }
            else if ( (LA292_0==LPAREN) ) {
                int LA292_2 = input.LA(2);
                if ( (LA292_2==IDENT) ) {
                    int LA292_133 = input.LA(3);
                    if ( (LA292_133==RPAREN) ) {
                        int LA292_230 = input.LA(4);
                        if ( (LA292_230==GOES) ) {
                            alt292=1;
                        }
                    }
                    else if ( (LA292_133==COMMA) ) {
                        alt292=1;
                    }
                }
            }
            switch (alt292) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_libFunctionArgItem10709);
                    expressionLambdaDecl769=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionLambdaDecl769.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionWithTime_in_libFunctionArgItem10712);
            expressionWithTime770=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime770.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR772=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr771 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr773 = null;
        CommonTree AND_EXPR772_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList10723);
            concatenationExpr771=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr771.getTree());
            AND_EXPR772=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList10725); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList10728);
            concatenationExpr773=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr773.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression774 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression10756);
            followedByExpression774=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression774.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression775 = null;
        EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat776 = null;
        RewriteRuleSubtreeStream stream_followedByRepeat=new RewriteRuleSubtreeStream(adaptor,"rule followedByRepeat");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
         boolean fb = false; 
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression10775);
            orExpression775=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression775.getTree());
            loop293:
            do {
                int alt293=2;
                int LA293_0 = input.LA(1);
                if ( ((LA293_0>=FOLLOWED_BY && LA293_0<=FOLLOWMAX_BEGIN)) ) {
                    alt293=1;
                }
                switch (alt293) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_followedByRepeat_in_followedByExpression10778);
            	    followedByRepeat776=followedByRepeat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_followedByRepeat.add(followedByRepeat776.getTree());
            	    if ( state.backtracking==0 ) {
            	       fb = true; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop293;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (fb == true) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_2);
                adaptor.addChild(root_2, stream_orExpression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_followedByRepeat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_followedByRepeat.hasNext() ) {
                    adaptor.addChild(root_1, stream_followedByRepeat.nextTree());
                }
                stream_followedByRepeat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByRepeat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat() throws RecognitionException {
        EsperEPL2GrammarParser.followedByRepeat_return retval = new EsperEPL2GrammarParser.followedByRepeat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token g=null;
        Token FOLLOWMAX_END778=null;
        EsperEPL2GrammarParser.expression_return expression777 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression779 = null;
        CommonTree f_tree=null;
        CommonTree g_tree=null;
        CommonTree FOLLOWMAX_END778_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleTokenStream stream_FOLLOWMAX_END=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_END");
        RewriteRuleTokenStream stream_FOLLOWMAX_BEGIN=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_BEGIN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            int alt294=2;
            int LA294_0 = input.LA(1);
            if ( (LA294_0==FOLLOWED_BY) ) {
                alt294=1;
            }
            else if ( (LA294_0==FOLLOWMAX_BEGIN) ) {
                alt294=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 294, 0, input);
                throw nvae;
            }
            switch (alt294) {
                case 1 :
                    {
                    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByRepeat10831); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
                    }
                    break;
                case 2 :
                    {
                    {
                    g=(Token)match(input,FOLLOWMAX_BEGIN,FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat10838); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_BEGIN.add(g);
                    pushFollow(FOLLOW_expression_in_followedByRepeat10840);
                    expression777=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression777.getTree());
                    FOLLOWMAX_END778=(Token)match(input,FOLLOWMAX_END,FOLLOW_FOLLOWMAX_END_in_followedByRepeat10842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_END.add(FOLLOWMAX_END778);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_orExpression_in_followedByRepeat10846);
            orExpression779=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression779.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_orExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression780 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression781 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression10875);
            andExpression780=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression780.getTree());
            loop295:
            do {
                int alt295=2;
                int LA295_0 = input.LA(1);
                if ( (LA295_0==OR_EXPR) ) {
                    alt295=1;
                }
                switch (alt295) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression10880); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression10882);
            	    andExpression781=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression781.getTree());
            	    }
            	    break;
            	default :
            	    break loop295;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression782 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression783 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression10914);
            matchUntilExpression782=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression782.getTree());
            loop296:
            do {
                int alt296=2;
                int LA296_0 = input.LA(1);
                if ( (LA296_0==AND_EXPR) ) {
                    alt296=1;
                }
                switch (alt296) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression10919); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression10921);
            	    matchUntilExpression783=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression783.getTree());
            	    }
            	    break;
            	default :
            	    break loop296;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression784 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression785 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt297=2;
            int LA297_0 = input.LA(1);
            if ( (LA297_0==LBRACK) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression10956);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression10960);
            qualifyExpression784=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression784.getTree());
            int alt298=2;
            int LA298_0 = input.LA(1);
            if ( (LA298_0==UNTIL) ) {
                alt298=1;
            }
            switch (alt298) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression10965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression10967);
                    qualifyExpression785=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression785.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList786 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix787 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt301=2;
            int LA301_0 = input.LA(1);
            if ( ((LA301_0>=NOT_EXPR && LA301_0<=EVERY_DISTINCT_EXPR)) ) {
                alt301=1;
            }
            switch (alt301) {
                case 1 :
                    {
                    int alt299=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt299=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt299=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt299=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 299, 0, input);
                        throw nvae;
                    }
                    switch (alt299) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression11032); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression11038); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression11044); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression11046);
                            distinctExpressionList786=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList786.getTree());
                            }
                            break;
                    }
                    int alt300=2;
                    int LA300_0 = input.LA(1);
                    if ( (LA300_0==LBRACK) ) {
                        alt300=1;
                    }
                    switch (alt300) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression11052);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression11061);
            guardPostFix787=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix787.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN788=null;
        Token COMMA790=null;
        Token RPAREN792=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom789 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom791 = null;
        CommonTree LPAREN788_tree=null;
        CommonTree COMMA790_tree=null;
        CommonTree RPAREN792_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN788=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList11176); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN788);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList11178);
            distinctExpressionAtom789=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom789.getTree());
            loop302:
            do {
                int alt302=2;
                int LA302_0 = input.LA(1);
                if ( (LA302_0==COMMA) ) {
                    alt302=1;
                }
                switch (alt302) {
            	case 1 :
            	    {
            	    COMMA790=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList11181); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA790);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList11183);
            	    distinctExpressionAtom791=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom791.getTree());
            	    }
            	    break;
            	default :
            	    break loop302;
                }
            } while (true);
            RPAREN792=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList11187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN792);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime793 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_distinctExpressionAtom11210);
            expressionWithTime793=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime793.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN796=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression794 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression795 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression797 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression798 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN796_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt303=2;
            int LA303_0 = input.LA(1);
            if ( (LA303_0==IDENT||LA303_0==TICKED_STRING_LITERAL) ) {
                alt303=1;
            }
            else if ( (LA303_0==LPAREN) ) {
                alt303=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 303, 0, input);
                throw nvae;
            }
            switch (alt303) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix11225);
                    atomicExpression794=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression794.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix11231); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix11233);
                    patternExpression795=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression795.getTree());
                    RPAREN796=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix11235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN796);
                    }
                    break;
            }
            int alt304=3;
            int LA304_0 = input.LA(1);
            if ( (LA304_0==WHERE) ) {
                alt304=1;
            }
            else if ( (LA304_0==WHILE) ) {
                alt304=2;
            }
            switch (alt304) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix11242); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix11244);
                    guardWhereExpression797=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression797.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix11252); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix11254);
                    guardWhileExpression798=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression798.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression799 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression800 = null;
        try {
            int alt305=2;
            int LA305_0 = input.LA(1);
            if ( (LA305_0==IDENT) ) {
                int LA305_1 = input.LA(2);
                if ( (LA305_1==COLON) ) {
                    alt305=1;
                }
                else if ( (LA305_1==EOF||(LA305_1>=OR_EXPR && LA305_1<=AND_EXPR)||LA305_1==WHERE||LA305_1==UNTIL||LA305_1==WHILE||(LA305_1>=LBRACK && LA305_1<=RBRACK)||(LA305_1>=LPAREN && LA305_1<=RPAREN)||(LA305_1>=EQUALS && LA305_1<=DOT)||(LA305_1>=FOLLOWED_BY && LA305_1<=FOLLOWMAX_BEGIN)||LA305_1==ATCHAR) ) {
                    alt305=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 305, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA305_0==TICKED_STRING_LITERAL) ) {
                alt305=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 305, 0, input);
                throw nvae;
            }
            switch (alt305) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression11316);
                    observerExpression799=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression799.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression11320);
                    patternFilterExpression800=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression800.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON801=null;
        Token LPAREN802=null;
        Token RPAREN804=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList803 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON801_tree=null;
        CommonTree LPAREN802_tree=null;
        CommonTree RPAREN804_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression11335); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON801=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression11337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON801);
            int alt306=2;
            int LA306_0 = input.LA(1);
            if ( (LA306_0==IDENT) ) {
                alt306=1;
            }
            else if ( (LA306_0==AT) ) {
                alt306=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 306, 0, input);
                throw nvae;
            }
            switch (alt306) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression11342); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression11348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN802=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression11351); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN802);
            int alt307=2;
            int LA307_0 = input.LA(1);
            if ( (LA307_0==WINDOW||LA307_0==BETWEEN||LA307_0==ESCAPE||(LA307_0>=NOT_EXPR && LA307_0<=EVERY_EXPR)||LA307_0==WHERE||(LA307_0>=SUM && LA307_0<=COUNT)||LA307_0==CASE||LA307_0==OUTER||(LA307_0>=JOIN && LA307_0<=FULL)||(LA307_0>=EVENTS && LA307_0<=LAST)||(LA307_0>=UNIDIRECTIONAL && LA307_0<=CURRENT_TIMESTAMP)||(LA307_0>=SNAPSHOT && LA307_0<=INDEX)||(LA307_0>=BOOLEAN_TRUE && LA307_0<=VALUE_NULL)||(LA307_0>=DEFINE && LA307_0<=AFTER)||LA307_0==WHILE||(LA307_0>=MERGE && LA307_0<=MATCHED)||LA307_0==NEWKW||LA307_0==CONTEXT||LA307_0==NUM_DOUBLE||LA307_0==LBRACK||(LA307_0>=IDENT && LA307_0<=LPAREN)||LA307_0==LCURLY||LA307_0==STAR||(LA307_0>=PLUS && LA307_0<=QUOTED_STRING_LITERAL)||LA307_0==MINUS||LA307_0==NUM_INT||(LA307_0>=TICKED_STRING_LITERAL && LA307_0<=NUM_FLOAT)) ) {
                alt307=1;
            }
            switch (alt307) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression11353);
                    expressionWithTimeList803=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList803.getTree());
                    }
                    break;
            }
            RPAREN804=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression11356); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN804);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT805=null;
        Token COLON806=null;
        Token IDENT807=null;
        Token LPAREN808=null;
        Token RPAREN810=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList809 = null;
        CommonTree IDENT805_tree=null;
        CommonTree COLON806_tree=null;
        CommonTree IDENT807_tree=null;
        CommonTree LPAREN808_tree=null;
        CommonTree RPAREN810_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT805=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression11405); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT805_tree = (CommonTree)adaptor.create(IDENT805);
            adaptor.addChild(root_0, IDENT805_tree);
            }
            COLON806=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression11407); if (state.failed) return retval;
            IDENT807=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression11410); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT807_tree = (CommonTree)adaptor.create(IDENT807);
            adaptor.addChild(root_0, IDENT807_tree);
            }
            LPAREN808=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression11412); if (state.failed) return retval;
            int alt308=2;
            int LA308_0 = input.LA(1);
            if ( (LA308_0==WINDOW||LA308_0==BETWEEN||LA308_0==ESCAPE||(LA308_0>=NOT_EXPR && LA308_0<=EVERY_EXPR)||LA308_0==WHERE||(LA308_0>=SUM && LA308_0<=COUNT)||LA308_0==CASE||LA308_0==OUTER||(LA308_0>=JOIN && LA308_0<=FULL)||(LA308_0>=EVENTS && LA308_0<=LAST)||(LA308_0>=UNIDIRECTIONAL && LA308_0<=CURRENT_TIMESTAMP)||(LA308_0>=SNAPSHOT && LA308_0<=INDEX)||(LA308_0>=BOOLEAN_TRUE && LA308_0<=VALUE_NULL)||(LA308_0>=DEFINE && LA308_0<=AFTER)||LA308_0==WHILE||(LA308_0>=MERGE && LA308_0<=MATCHED)||LA308_0==NEWKW||LA308_0==CONTEXT||LA308_0==NUM_DOUBLE||LA308_0==LBRACK||(LA308_0>=IDENT && LA308_0<=LPAREN)||LA308_0==LCURLY||LA308_0==STAR||(LA308_0>=PLUS && LA308_0<=QUOTED_STRING_LITERAL)||LA308_0==MINUS||LA308_0==NUM_INT||(LA308_0>=TICKED_STRING_LITERAL && LA308_0<=NUM_FLOAT)) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression11416);
                    expressionWithTimeList809=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList809.getTree());
                    }
                    break;
            }
            RPAREN810=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression11420); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN811=null;
        Token RPAREN813=null;
        EsperEPL2GrammarParser.expression_return expression812 = null;
        CommonTree LPAREN811_tree=null;
        CommonTree RPAREN813_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN811=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression11433); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression11436);
            expression812=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression812.getTree());
            RPAREN813=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression11438); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK814=null;
        Token RBRACK818=null;
        EsperEPL2GrammarParser.expression_return expression815 = null;
        EsperEPL2GrammarParser.expression_return expression816 = null;
        EsperEPL2GrammarParser.expression_return expression817 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK814_tree=null;
        CommonTree RBRACK818_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK814=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange11459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK814);
            int alt311=2;
            int LA311_0 = input.LA(1);
            if ( (LA311_0==WINDOW||LA311_0==BETWEEN||LA311_0==ESCAPE||(LA311_0>=NOT_EXPR && LA311_0<=EVERY_EXPR)||LA311_0==WHERE||(LA311_0>=SUM && LA311_0<=COUNT)||LA311_0==CASE||LA311_0==OUTER||(LA311_0>=JOIN && LA311_0<=FULL)||(LA311_0>=EVENTS && LA311_0<=LAST)||(LA311_0>=UNIDIRECTIONAL && LA311_0<=CURRENT_TIMESTAMP)||(LA311_0>=SNAPSHOT && LA311_0<=INDEX)||(LA311_0>=BOOLEAN_TRUE && LA311_0<=VALUE_NULL)||(LA311_0>=DEFINE && LA311_0<=AFTER)||LA311_0==WHILE||(LA311_0>=MERGE && LA311_0<=MATCHED)||LA311_0==NEWKW||LA311_0==CONTEXT||LA311_0==NUM_DOUBLE||(LA311_0>=IDENT && LA311_0<=LPAREN)||LA311_0==LCURLY||(LA311_0>=PLUS && LA311_0<=QUOTED_STRING_LITERAL)||LA311_0==MINUS||LA311_0==NUM_INT||(LA311_0>=TICKED_STRING_LITERAL && LA311_0<=NUM_FLOAT)) ) {
                alt311=1;
            }
            else if ( (LA311_0==COLON) ) {
                alt311=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 311, 0, input);
                throw nvae;
            }
            switch (alt311) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange11466);
                    expression815=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression815.getTree());
                    int alt310=2;
                    int LA310_0 = input.LA(1);
                    if ( (LA310_0==COLON) ) {
                        alt310=1;
                    }
                    switch (alt310) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange11471); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt309=2;
                            int LA309_0 = input.LA(1);
                            if ( (LA309_0==WINDOW||LA309_0==BETWEEN||LA309_0==ESCAPE||(LA309_0>=NOT_EXPR && LA309_0<=EVERY_EXPR)||LA309_0==WHERE||(LA309_0>=SUM && LA309_0<=COUNT)||LA309_0==CASE||LA309_0==OUTER||(LA309_0>=JOIN && LA309_0<=FULL)||(LA309_0>=EVENTS && LA309_0<=LAST)||(LA309_0>=UNIDIRECTIONAL && LA309_0<=CURRENT_TIMESTAMP)||(LA309_0>=SNAPSHOT && LA309_0<=INDEX)||(LA309_0>=BOOLEAN_TRUE && LA309_0<=VALUE_NULL)||(LA309_0>=DEFINE && LA309_0<=AFTER)||LA309_0==WHILE||(LA309_0>=MERGE && LA309_0<=MATCHED)||LA309_0==NEWKW||LA309_0==CONTEXT||LA309_0==NUM_DOUBLE||(LA309_0>=IDENT && LA309_0<=LPAREN)||LA309_0==LCURLY||(LA309_0>=PLUS && LA309_0<=QUOTED_STRING_LITERAL)||LA309_0==MINUS||LA309_0==NUM_INT||(LA309_0>=TICKED_STRING_LITERAL && LA309_0<=NUM_FLOAT)) ) {
                                alt309=1;
                            }
                            switch (alt309) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange11474);
                                    expression816=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression816.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange11494); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange11496);
                    expression817=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression817.getTree());
                    }
                    break;
            }
            RBRACK818=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange11507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK818);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS819=null;
        Token LPAREN821=null;
        Token RPAREN823=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier820 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList822 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression824 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS819_tree=null;
        CommonTree LPAREN821_tree=null;
        CommonTree RPAREN823_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt312=2;
            int LA312_0 = input.LA(1);
            if ( (LA312_0==IDENT) ) {
                int LA312_1 = input.LA(2);
                if ( (LA312_1==EQUALS) ) {
                    alt312=1;
                }
            }
            switch (alt312) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression11594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS819=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression11596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS819);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression11605);
            classIdentifier820=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier820.getTree());
            int alt314=2;
            int LA314_0 = input.LA(1);
            if ( (LA314_0==LPAREN) ) {
                alt314=1;
            }
            switch (alt314) {
                case 1 :
                    {
                    LPAREN821=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression11616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN821);
                    int alt313=2;
                    int LA313_0 = input.LA(1);
                    if ( (LA313_0==WINDOW||LA313_0==BETWEEN||LA313_0==ESCAPE||(LA313_0>=NOT_EXPR && LA313_0<=EVERY_EXPR)||LA313_0==WHERE||(LA313_0>=SUM && LA313_0<=COUNT)||LA313_0==CASE||LA313_0==OUTER||(LA313_0>=JOIN && LA313_0<=FULL)||(LA313_0>=EVENTS && LA313_0<=LAST)||(LA313_0>=UNIDIRECTIONAL && LA313_0<=CURRENT_TIMESTAMP)||(LA313_0>=SNAPSHOT && LA313_0<=INDEX)||(LA313_0>=BOOLEAN_TRUE && LA313_0<=VALUE_NULL)||(LA313_0>=DEFINE && LA313_0<=AFTER)||LA313_0==WHILE||(LA313_0>=MERGE && LA313_0<=MATCHED)||LA313_0==NEWKW||LA313_0==CONTEXT||LA313_0==NUM_DOUBLE||(LA313_0>=IDENT && LA313_0<=LPAREN)||LA313_0==LCURLY||(LA313_0>=PLUS && LA313_0<=QUOTED_STRING_LITERAL)||LA313_0==MINUS||LA313_0==NUM_INT||(LA313_0>=TICKED_STRING_LITERAL && LA313_0<=NUM_FLOAT)) ) {
                        alt313=1;
                    }
                    switch (alt313) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression11618);
                            expressionList822=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList822.getTree());
                            }
                            break;
                    }
                    RPAREN823=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression11621); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN823);
                    }
                    break;
            }
            int alt315=2;
            int LA315_0 = input.LA(1);
            if ( (LA315_0==LBRACK) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression11633);
                    propertyExpression824=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression824.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic825 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic826 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression11678);
            propertyExpressionAtomic825=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic825.getTree());
            loop316:
            do {
                int alt316=2;
                int LA316_0 = input.LA(1);
                if ( (LA316_0==LBRACK) ) {
                    alt316=1;
                }
                switch (alt316) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression11681);
            	    propertyExpressionAtomic826=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic826.getTree());
            	    }
            	    break;
            	default :
            	    break loop316;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK827=null;
        Token AS831=null;
        Token IDENT832=null;
        Token WHERE833=null;
        Token RBRACK835=null;
        EsperEPL2GrammarParser.propertyExpressionSelect_return propertyExpressionSelect828 = null;
        EsperEPL2GrammarParser.expression_return expression829 = null;
        EsperEPL2GrammarParser.propertyExpressionAnnotation_return propertyExpressionAnnotation830 = null;
        EsperEPL2GrammarParser.expression_return expression834 = null;
        CommonTree LBRACK827_tree=null;
        CommonTree AS831_tree=null;
        CommonTree IDENT832_tree=null;
        CommonTree WHERE833_tree=null;
        CommonTree RBRACK835_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyExpressionAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAnnotation");
        RewriteRuleSubtreeStream stream_propertyExpressionSelect=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionSelect");
        try {
            {
            LBRACK827=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic11711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK827);
            int alt317=2;
            int LA317_0 = input.LA(1);
            if ( (LA317_0==SELECT) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpressionSelect_in_propertyExpressionAtomic11713);
                    propertyExpressionSelect828=propertyExpressionSelect();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpressionSelect.add(propertyExpressionSelect828.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_propertyExpressionAtomic11716);
            expression829=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression829.getTree());
            int alt318=2;
            int LA318_0 = input.LA(1);
            if ( (LA318_0==ATCHAR) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpressionAnnotation_in_propertyExpressionAtomic11718);
                    propertyExpressionAnnotation830=propertyExpressionAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpressionAnnotation.add(propertyExpressionAnnotation830.getTree());
                    }
                    break;
            }
            int alt319=2;
            int LA319_0 = input.LA(1);
            if ( (LA319_0==AS) ) {
                alt319=1;
            }
            switch (alt319) {
                case 1 :
                    {
                    AS831=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic11722); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS831);
                    IDENT832=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic11724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT832);
                    }
                    break;
            }
            int alt320=2;
            int LA320_0 = input.LA(1);
            if ( (LA320_0==WHERE) ) {
                alt320=1;
            }
            switch (alt320) {
                case 1 :
                    {
                    WHERE833=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic11729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE833);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic11731);
                    expression834=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression834.getTree());
                    }
                    break;
            }
            RBRACK835=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic11735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK835);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertyExpressionSelect.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionSelect.nextTree());
                }
                stream_propertyExpressionSelect.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_propertyExpressionAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAnnotation.nextTree());
                }
                stream_propertyExpressionAnnotation.reset();
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionSelect_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionSelect_return propertyExpressionSelect() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionSelect_return retval = new EsperEPL2GrammarParser.propertyExpressionSelect_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT836=null;
        Token FROM838=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList837 = null;
        CommonTree SELECT836_tree=null;
        CommonTree FROM838_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        try {
            {
            SELECT836=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionSelect11793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT836);
            pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionSelect11795);
            propertySelectionList837=propertySelectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList837.getTree());
            FROM838=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionSelect11797); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM838);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_SELECT.nextNode(), root_1);
                adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAnnotation_return propertyExpressionAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAnnotation_return retval = new EsperEPL2GrammarParser.propertyExpressionAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token v=null;
        Token ATCHAR839=null;
        Token LPAREN840=null;
        Token RPAREN841=null;
        CommonTree n_tree=null;
        CommonTree v_tree=null;
        CommonTree ATCHAR839_tree=null;
        CommonTree LPAREN840_tree=null;
        CommonTree RPAREN841_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        try {
            {
            ATCHAR839=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_propertyExpressionAnnotation11820); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR839);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAnnotation11824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            {
            LPAREN840=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_propertyExpressionAnnotation11827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN840);
            v=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAnnotation11831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(v);
            RPAREN841=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_propertyExpressionAnnotation11833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN841);
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_v=new RewriteRuleTokenStream(adaptor,"token v",v);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_v.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA843=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement842 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement844 = null;
        CommonTree COMMA843_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList11863);
            propertySelectionListElement842=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement842.getTree());
            loop321:
            do {
                int alt321=2;
                int LA321_0 = input.LA(1);
                if ( (LA321_0==COMMA) ) {
                    alt321=1;
                }
                switch (alt321) {
            	case 1 :
            	    {
            	    COMMA843=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList11866); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList11869);
            	    propertySelectionListElement844=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement844.getTree());
            	    }
            	    break;
            	default :
            	    break loop321;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS847=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector845 = null;
        EsperEPL2GrammarParser.expression_return expression846 = null;
        CommonTree s_tree=null;
        CommonTree AS847_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt323=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt323=1;
                }
                break;
            case IDENT:
                {
                int LA323_2 = input.LA(2);
                if ( (LA323_2==DOT) ) {
                    int LA323_75 = input.LA(3);
                    if ( (LA323_75==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt323=2;
                    }
                    else if ( (LA323_75==WINDOW||LA323_75==BETWEEN||LA323_75==ESCAPE||LA323_75==EVERY_EXPR||LA323_75==WHERE||(LA323_75>=SUM && LA323_75<=COUNT)||LA323_75==OUTER||(LA323_75>=JOIN && LA323_75<=FULL)||(LA323_75>=EVENTS && LA323_75<=LAST)||(LA323_75>=UNIDIRECTIONAL && LA323_75<=PREVIOUSTAIL)||LA323_75==PRIOR||(LA323_75>=WEEKDAY && LA323_75<=CAST)||(LA323_75>=SNAPSHOT && LA323_75<=INDEX)||(LA323_75>=DEFINE && LA323_75<=AFTER)||LA323_75==WHILE||(LA323_75>=MERGE && LA323_75<=MATCHED)||LA323_75==CONTEXT||LA323_75==IDENT||LA323_75==TICKED_STRING_LITERAL) ) {
                        alt323=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 323, 75, input);
                        throw nvae;
                    }
                }
                else if ( ((LA323_2>=IN_SET && LA323_2<=REGEXP)||(LA323_2>=OR_EXPR && LA323_2<=NOT_EXPR)||LA323_2==AS||LA323_2==FROM||LA323_2==IS||LA323_2==LBRACK||LA323_2==LPAREN||(LA323_2>=COMMA && LA323_2<=EQUALS)||(LA323_2>=STAR && LA323_2<=QUESTION)||(LA323_2>=BAND && LA323_2<=MOD)||LA323_2==ESCAPECHAR) ) {
                    alt323=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 323, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt323=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 323, 0, input);
                throw nvae;
            }
            switch (alt323) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement11895); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement11911);
                    propertyStreamSelector845=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector845.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement11916);
                    expression846=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression846.getTree());
                    int alt322=2;
                    int LA322_0 = input.LA(1);
                    if ( (LA322_0==AS) ) {
                        alt322=1;
                    }
                    switch (alt322) {
                        case 1 :
                            {
                            AS847=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement11919); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS847);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement11923);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT848=null;
        Token STAR849=null;
        Token AS850=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT848_tree=null;
        CommonTree STAR849_tree=null;
        CommonTree AS850_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector11967); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT848=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector11969); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT848);
            STAR849=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector11971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR849);
            int alt324=2;
            int LA324_0 = input.LA(1);
            if ( (LA324_0==AS) ) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    {
                    AS850=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector11974); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS850);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector11978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS851=null;
        Token LPAREN853=null;
        Token RPAREN855=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier852 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList854 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression856 = null;
        EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation857 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS851_tree=null;
        CommonTree LPAREN853_tree=null;
        CommonTree RPAREN855_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        RewriteRuleSubtreeStream stream_patternFilterAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule patternFilterAnnotation");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt325=2;
            int LA325_0 = input.LA(1);
            if ( (LA325_0==IDENT) ) {
                int LA325_1 = input.LA(2);
                if ( (LA325_1==EQUALS) ) {
                    alt325=1;
                }
            }
            switch (alt325) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression12025); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS851=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression12027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS851);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression12036);
            classIdentifier852=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier852.getTree());
            int alt327=2;
            int LA327_0 = input.LA(1);
            if ( (LA327_0==LPAREN) ) {
                alt327=1;
            }
            switch (alt327) {
                case 1 :
                    {
                    LPAREN853=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression12047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN853);
                    int alt326=2;
                    int LA326_0 = input.LA(1);
                    if ( (LA326_0==WINDOW||LA326_0==BETWEEN||LA326_0==ESCAPE||(LA326_0>=NOT_EXPR && LA326_0<=EVERY_EXPR)||LA326_0==WHERE||(LA326_0>=SUM && LA326_0<=COUNT)||LA326_0==CASE||LA326_0==OUTER||(LA326_0>=JOIN && LA326_0<=FULL)||(LA326_0>=EVENTS && LA326_0<=LAST)||(LA326_0>=UNIDIRECTIONAL && LA326_0<=CURRENT_TIMESTAMP)||(LA326_0>=SNAPSHOT && LA326_0<=INDEX)||(LA326_0>=BOOLEAN_TRUE && LA326_0<=VALUE_NULL)||(LA326_0>=DEFINE && LA326_0<=AFTER)||LA326_0==WHILE||(LA326_0>=MERGE && LA326_0<=MATCHED)||LA326_0==NEWKW||LA326_0==CONTEXT||LA326_0==NUM_DOUBLE||(LA326_0>=IDENT && LA326_0<=LPAREN)||LA326_0==LCURLY||(LA326_0>=PLUS && LA326_0<=QUOTED_STRING_LITERAL)||LA326_0==MINUS||LA326_0==NUM_INT||(LA326_0>=TICKED_STRING_LITERAL && LA326_0<=NUM_FLOAT)) ) {
                        alt326=1;
                    }
                    switch (alt326) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression12049);
                            expressionList854=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList854.getTree());
                            }
                            break;
                    }
                    RPAREN855=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression12052); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN855);
                    }
                    break;
            }
            int alt328=2;
            int LA328_0 = input.LA(1);
            if ( (LA328_0==LBRACK) ) {
                alt328=1;
            }
            switch (alt328) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression12064);
                    propertyExpression856=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression856.getTree());
                    }
                    break;
            }
            int alt329=2;
            int LA329_0 = input.LA(1);
            if ( (LA329_0==ATCHAR) ) {
                alt329=1;
            }
            switch (alt329) {
                case 1 :
                    {
                    pushFollow(FOLLOW_patternFilterAnnotation_in_patternFilterExpression12075);
                    patternFilterAnnotation857=patternFilterAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternFilterAnnotation.add(patternFilterAnnotation857.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_patternFilterAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternFilterAnnotation.nextTree());
                }
                stream_patternFilterAnnotation.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterAnnotation_return retval = new EsperEPL2GrammarParser.patternFilterAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR858=null;
        Token LPAREN859=null;
        Token RPAREN861=null;
        EsperEPL2GrammarParser.number_return number860 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR858_tree=null;
        CommonTree LPAREN859_tree=null;
        CommonTree RPAREN861_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            ATCHAR858=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_patternFilterAnnotation12127); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR858);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterAnnotation12131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt330=2;
            int LA330_0 = input.LA(1);
            if ( (LA330_0==LPAREN) ) {
                alt330=1;
            }
            switch (alt330) {
                case 1 :
                    {
                    LPAREN859=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterAnnotation12134); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN859);
                    pushFollow(FOLLOW_number_in_patternFilterAnnotation12136);
                    number860=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number860.getTree());
                    RPAREN861=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterAnnotation12138); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN861);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT862=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT862_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier12174);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop331:
            do {
                int alt331=2;
                int LA331_0 = input.LA(1);
                if ( (LA331_0==DOT) ) {
                    int LA331_23 = input.LA(2);
                    if ( (LA331_23==IDENT) ) {
                        int LA331_50 = input.LA(3);
                        if ( (LA331_50==EOF||LA331_50==CREATE||(LA331_50>=OR_EXPR && LA331_50<=AS)||LA331_50==SELECT||LA331_50==END||(LA331_50>=INNER && LA331_50<=ON)||(LA331_50>=GROUP && LA331_50<=HAVING)||LA331_50==OUTPUT||LA331_50==INSERT||LA331_50==ORDER||(LA331_50>=UNIDIRECTIONAL && LA331_50<=RETAININTERSECTION)||LA331_50==DELETE||LA331_50==SET||LA331_50==UNTIL||LA331_50==ROW_LIMIT_EXPR||(LA331_50>=UPDATE && LA331_50<=MATCH_RECOGNIZE)||(LA331_50>=FOR && LA331_50<=WHILE)||LA331_50==MERGE||LA331_50==EXPRESSIONDECL||LA331_50==CONTEXT||LA331_50==TERMINATED||(LA331_50>=LBRACK && LA331_50<=RPAREN)||LA331_50==RCURLY||LA331_50==COMMA||LA331_50==DOT||(LA331_50>=FOLLOWED_BY && LA331_50<=FOLLOWMAX_BEGIN)||LA331_50==ATCHAR||LA331_50==TICKED_STRING_LITERAL) ) {
                            alt331=1;
                        }
                    }
                    else if ( (LA331_23==TICKED_STRING_LITERAL) ) {
                        alt331=1;
                    }
                }
                switch (alt331) {
            	case 1 :
            	    {
            	    DOT862=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier12193); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT862);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier12197);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop331;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT863=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT863_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy12242);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop332:
            do {
                int alt332=2;
                int LA332_0 = input.LA(1);
                if ( (LA332_0==IDENT||LA332_0==TICKED_STRING_LITERAL) ) {
                    alt332=2;
                }
                else if ( (LA332_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA332_4 = input.LA(3);
                        if ( (LA332_4==IDENT||LA332_4==DOT||LA332_4==TICKED_STRING_LITERAL) ) {
                            alt332=1;
                        }
                        else if ( (LA332_4==LPAREN) ) {
                            alt332=2;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA332_5 = input.LA(3);
                        if ( (LA332_5==IDENT||LA332_5==DOT||LA332_5==TICKED_STRING_LITERAL) ) {
                            alt332=1;
                        }
                        else if ( (LA332_5==LPAREN) ) {
                            alt332=2;
                        }
                        }
                        break;
                    case BETWEEN:
                    case WHERE:
                    case MAX:
                    case MIN:
                    case SET:
                    case AFTER:
                        {
                        alt332=2;
                        }
                        break;
                    }
                }
                switch (alt332) {
            	case 1 :
            	    {
            	    DOT863=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy12277); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT863);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy12281);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop332;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA865=null;
        EsperEPL2GrammarParser.expression_return expression864 = null;
        EsperEPL2GrammarParser.expression_return expression866 = null;
        CommonTree COMMA865_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList12323);
            expression864=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression864.getTree());
            loop333:
            do {
                int alt333=2;
                int LA333_0 = input.LA(1);
                if ( (LA333_0==COMMA) ) {
                    alt333=1;
                }
                switch (alt333) {
            	case 1 :
            	    {
            	    COMMA865=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList12326); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList12329);
            	    expression866=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression866.getTree());
            	    }
            	    break;
            	default :
            	    break loop333;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA868=null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast867 = null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast869 = null;
        CommonTree COMMA868_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList12357);
            expressionWithTimeInclLast867=expressionWithTimeInclLast();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast867.getTree());
            loop334:
            do {
                int alt334=2;
                int LA334_0 = input.LA(1);
                if ( (LA334_0==COMMA) ) {
                    alt334=1;
                }
                switch (alt334) {
            	case 1 :
            	    {
            	    COMMA868=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList12360); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList12363);
            	    expressionWithTimeInclLast869=expressionWithTimeInclLast();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast869.getTree());
            	    }
            	    break;
            	default :
            	    break loop334;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand870 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod871 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable872 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand873 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand874 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator875 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator876 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList877 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar878 = null;
        try {
            int alt335=9;
            int LA335_0 = input.LA(1);
            if ( (LA335_0==LW) ) {
                int LA335_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt335=1;
                }
                else if ( (synpred9_EsperEPL2Grammar()) ) {
                    alt335=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 335, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA335_0==MINUS) ) {
                int LA335_2 = input.LA(2);
                if ( (LA335_2==NUM_INT) ) {
                    int LA335_113 = input.LA(3);
                    if ( (LA335_113==TIMEPERIOD_SECONDS) ) {
                        int LA335_477 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 477, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_113==TIMEPERIOD_SECOND) ) {
                        int LA335_478 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 478, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_113==TIMEPERIOD_SEC) ) {
                        int LA335_479 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 479, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_113==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_113==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_113==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 113, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_2==NUM_LONG) ) {
                    int LA335_114 = input.LA(3);
                    if ( (LA335_114==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==TIMEPERIOD_SECONDS) ) {
                        int LA335_527 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 527, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_114==TIMEPERIOD_SECOND) ) {
                        int LA335_528 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 528, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_114==TIMEPERIOD_SEC) ) {
                        int LA335_529 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 529, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_114==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_114==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_114==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 114, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_2==NUM_FLOAT) ) {
                    int LA335_115 = input.LA(3);
                    if ( (LA335_115==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==TIMEPERIOD_SECONDS) ) {
                        int LA335_580 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 580, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_115==TIMEPERIOD_SECOND) ) {
                        int LA335_581 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 581, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_115==TIMEPERIOD_SEC) ) {
                        int LA335_582 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 582, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_115==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_115==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_115==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 115, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_2==NUM_DOUBLE) ) {
                    int LA335_116 = input.LA(3);
                    if ( (LA335_116==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==TIMEPERIOD_SECONDS) ) {
                        int LA335_648 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 648, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_116==TIMEPERIOD_SECOND) ) {
                        int LA335_649 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 649, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_116==TIMEPERIOD_SEC) ) {
                        int LA335_650 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 650, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_116==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_116==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_116==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 116, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_2==IDENT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==AT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==COUNT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==SUM) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==AVG) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==MAX) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==FIRST) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==LAST) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==WHILE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==MERGE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==SQL) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==LW) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==CAST) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==INDEX) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==LEFT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==OUTER) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==FULL) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==JOIN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_2==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 335, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA335_0==PLUS) ) {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    int LA335_165 = input.LA(3);
                    if ( (LA335_165==TIMEPERIOD_SECONDS) ) {
                        int LA335_665 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 665, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_165==TIMEPERIOD_SECOND) ) {
                        int LA335_666 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 666, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_165==TIMEPERIOD_SEC) ) {
                        int LA335_667 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 667, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_165==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_165==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_165==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 165, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    int LA335_166 = input.LA(3);
                    if ( (LA335_166==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==TIMEPERIOD_SECONDS) ) {
                        int LA335_715 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 715, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_166==TIMEPERIOD_SECOND) ) {
                        int LA335_716 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 716, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_166==TIMEPERIOD_SEC) ) {
                        int LA335_717 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 717, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_166==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_166==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_166==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 166, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    int LA335_167 = input.LA(3);
                    if ( (LA335_167==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==TIMEPERIOD_SECONDS) ) {
                        int LA335_768 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 768, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_167==TIMEPERIOD_SECOND) ) {
                        int LA335_769 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 769, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_167==TIMEPERIOD_SEC) ) {
                        int LA335_770 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 770, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_167==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_167==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_167==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 167, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    int LA335_168 = input.LA(3);
                    if ( (LA335_168==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==TIMEPERIOD_SECONDS) ) {
                        int LA335_834 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 834, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_168==TIMEPERIOD_SECOND) ) {
                        int LA335_835 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 835, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_168==TIMEPERIOD_SEC) ) {
                        int LA335_836 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt335=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt335=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 335, 836, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA335_168==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt335=3;
                    }
                    else if ( (LA335_168==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else if ( (LA335_168==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt335=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 168, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 335, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA335_0==NUM_INT) ) {
                int LA335_4 = input.LA(2);
                if ( (LA335_4==TIMEPERIOD_SECONDS) ) {
                    int LA335_169 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 169, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_4==TIMEPERIOD_SECOND) ) {
                    int LA335_170 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 170, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_4==TIMEPERIOD_SEC) ) {
                    int LA335_171 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 171, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_4==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt335=4;
                }
                else if ( (LA335_4==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt335=7;
                }
                else if ( (LA335_4==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt335=6;
                }
                else if ( (LA335_4==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_4==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 335, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA335_0==NUM_LONG) ) {
                int LA335_5 = input.LA(2);
                if ( (LA335_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==TIMEPERIOD_SECONDS) ) {
                    int LA335_222 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 222, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_5==TIMEPERIOD_SECOND) ) {
                    int LA335_223 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 223, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_5==TIMEPERIOD_SEC) ) {
                    int LA335_224 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 224, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt335=4;
                }
                else if ( (LA335_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt335=7;
                }
                else if ( (LA335_5==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_5==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt335=6;
                }
                else if ( (LA335_5==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_5==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 335, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA335_0==NUM_FLOAT) ) {
                int LA335_6 = input.LA(2);
                if ( (LA335_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt335=4;
                }
                else if ( (LA335_6==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt335=7;
                }
                else if ( (LA335_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt335=6;
                }
                else if ( (LA335_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==TIMEPERIOD_SECONDS) ) {
                    int LA335_281 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 281, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_6==TIMEPERIOD_SECOND) ) {
                    int LA335_282 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 282, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_6==TIMEPERIOD_SEC) ) {
                    int LA335_283 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 283, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_6==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 335, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA335_0==NUM_DOUBLE) ) {
                int LA335_7 = input.LA(2);
                if ( (LA335_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt335=7;
                }
                else if ( (LA335_7==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==TIMEPERIOD_SECONDS) ) {
                    int LA335_348 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 348, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_7==TIMEPERIOD_SECOND) ) {
                    int LA335_349 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 349, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_7==TIMEPERIOD_SEC) ) {
                    int LA335_350 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 350, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_7==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt335=6;
                }
                else if ( (LA335_7==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt335=4;
                }
                else if ( (LA335_7==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_7==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 335, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA335_0==IDENT) ) {
                int LA335_8 = input.LA(2);
                if ( (LA335_8==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==LBRACK) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==QUESTION) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==DOT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==TIMEPERIOD_SECONDS) ) {
                    int LA335_395 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 395, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_8==TIMEPERIOD_SECOND) ) {
                    int LA335_396 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 396, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_8==TIMEPERIOD_SEC) ) {
                    int LA335_397 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 397, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_8==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt335=7;
                }
                else if ( (LA335_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt335=4;
                }
                else if ( (LA335_8==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt335=6;
                }
                else if ( (LA335_8==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_8==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 335, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA335_0==QUESTION) ) {
                int LA335_9 = input.LA(2);
                if ( (LA335_9==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==TIMEPERIOD_SECONDS) ) {
                    int LA335_429 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 429, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_9==TIMEPERIOD_SECOND) ) {
                    int LA335_430 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 430, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_9==TIMEPERIOD_SEC) ) {
                    int LA335_431 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt335=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt335=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 335, 431, input);
                        throw nvae;
                    }
                }
                else if ( (LA335_9==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt335=4;
                }
                else if ( (LA335_9==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt335=7;
                }
                else if ( (LA335_9==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt335=3;
                }
                else if ( (LA335_9==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt335=6;
                }
                else if ( (LA335_9==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else if ( (LA335_9==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt335=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 335, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA335_0==CASE) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==AT) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==COUNT) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==SUM) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==AVG) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==MAX) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==MIN) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==FIRST) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==LAST) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==WHILE) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==MERGE) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==SQL) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==CAST) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==INDEX) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==LEFT) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==OUTER) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==FULL) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==JOIN) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==WHERE) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==SET) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==AFTER) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==PREVIOUSCOUNT) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==PREVIOUSWINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==NEWKW) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt335=3;
            }
            else if ( (LA335_0==STAR) ) {
                int LA335_74 = input.LA(2);
                if ( (LA335_74==DIV) && (synpred11_EsperEPL2Grammar())) {
                    alt335=5;
                }
                else if ( (LA335_74==RPAREN||LA335_74==COMMA) ) {
                    alt335=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 335, 74, input);
                    throw nvae;
                }
            }
            else if ( (LA335_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {
                alt335=8;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 335, 0, input);
                throw nvae;
            }
            switch (alt335) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime12392);
                    lastWeekdayOperand870=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand870.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime12403);
                    timePeriod871=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod871.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime12414);
                    expressionQualifyable872=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable872.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime12425);
                    rangeOperand873=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand873.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime12437);
                    frequencyOperand874=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand874.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime12448);
                    lastOperator875=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator875.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime12460);
                    weekDayOperator876=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator876.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime12472);
                    numericParameterList877=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList877.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime12477);
                    numberSetStar878=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar878.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeInclLast_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return retval = new EsperEPL2GrammarParser.expressionWithTimeInclLast_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand879 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime880 = null;
        try {
            int alt336=2;
            int LA336_0 = input.LA(1);
            if ( (LA336_0==LAST) ) {
                int LA336_1 = input.LA(2);
                if ( (synpred15_EsperEPL2Grammar()) ) {
                    alt336=1;
                }
                else if ( (true) ) {
                    alt336=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA336_0==WINDOW||LA336_0==BETWEEN||LA336_0==ESCAPE||(LA336_0>=NOT_EXPR && LA336_0<=EVERY_EXPR)||LA336_0==WHERE||(LA336_0>=SUM && LA336_0<=COUNT)||LA336_0==CASE||LA336_0==OUTER||(LA336_0>=JOIN && LA336_0<=FULL)||(LA336_0>=EVENTS && LA336_0<=FIRST)||(LA336_0>=UNIDIRECTIONAL && LA336_0<=CURRENT_TIMESTAMP)||(LA336_0>=SNAPSHOT && LA336_0<=INDEX)||(LA336_0>=BOOLEAN_TRUE && LA336_0<=VALUE_NULL)||(LA336_0>=DEFINE && LA336_0<=AFTER)||LA336_0==WHILE||(LA336_0>=MERGE && LA336_0<=MATCHED)||LA336_0==NEWKW||LA336_0==CONTEXT||LA336_0==NUM_DOUBLE||LA336_0==LBRACK||(LA336_0>=IDENT && LA336_0<=LPAREN)||LA336_0==LCURLY||LA336_0==STAR||(LA336_0>=PLUS && LA336_0<=QUOTED_STRING_LITERAL)||LA336_0==MINUS||LA336_0==NUM_INT||(LA336_0>=TICKED_STRING_LITERAL && LA336_0<=NUM_FLOAT)) ) {
                alt336=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);
                throw nvae;
            }
            switch (alt336) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTimeInclLast12497);
                    lastOperand879=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand879.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeInclLast12502);
                    expressionWithTime880=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime880.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression881 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable12513);
            expression881=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression881.getTree());
            int alt337=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt337=1;
                    }
                    break;
                case DESC:
                    {
                    alt337=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt337=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt337=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt337=5;
                    }
                    break;
            }
            switch (alt337) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable12518); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable12522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable12526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable12530); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable12534); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR882=null;
        CommonTree STAR882_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR882=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar12591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR882);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW883=null;
        CommonTree LW883_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW883=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand12611); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW883_tree = (CommonTree)adaptor.create(LW883);
            root_0 = (CommonTree)adaptor.becomeRoot(LW883_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST884=null;
        CommonTree LAST884_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST884=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand12624); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST884_tree = (CommonTree)adaptor.create(LAST884);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST884_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR885=null;
        Token DIV886=null;
        EsperEPL2GrammarParser.number_return number887 = null;
        EsperEPL2GrammarParser.substitution_return substitution888 = null;
        CommonTree i_tree=null;
        CommonTree STAR885_tree=null;
        CommonTree DIV886_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR885=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand12636); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR885);
            DIV886=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand12638); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV886);
            int alt338=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt338=1;
                }
                break;
            case IDENT:
                {
                alt338=2;
                }
                break;
            case QUESTION:
                {
                alt338=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 338, 0, input);
                throw nvae;
            }
            switch (alt338) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand12641);
                    number887=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number887.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand12645); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand12647);
                    substitution888=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution888.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON891=null;
        EsperEPL2GrammarParser.number_return number889 = null;
        EsperEPL2GrammarParser.substitution_return substitution890 = null;
        EsperEPL2GrammarParser.number_return number892 = null;
        EsperEPL2GrammarParser.substitution_return substitution893 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON891_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt339=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt339=1;
                }
                break;
            case IDENT:
                {
                alt339=2;
                }
                break;
            case QUESTION:
                {
                alt339=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 339, 0, input);
                throw nvae;
            }
            switch (alt339) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand12696);
                    number889=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number889.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand12700); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand12702);
                    substitution890=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution890.getTree());
                    }
                    break;
            }
            COLON891=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand12705); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON891);
            int alt340=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt340=1;
                }
                break;
            case IDENT:
                {
                alt340=2;
                }
                break;
            case QUESTION:
                {
                alt340=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 340, 0, input);
                throw nvae;
            }
            switch (alt340) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand12708);
                    number892=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number892.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand12712); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand12714);
                    substitution893=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution893.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST896=null;
        EsperEPL2GrammarParser.number_return number894 = null;
        EsperEPL2GrammarParser.substitution_return substitution895 = null;
        CommonTree i_tree=null;
        CommonTree LAST896_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt341=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt341=1;
                }
                break;
            case IDENT:
                {
                alt341=2;
                }
                break;
            case QUESTION:
                {
                alt341=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 341, 0, input);
                throw nvae;
            }
            switch (alt341) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator12828);
                    number894=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number894.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator12832); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator12834);
                    substitution895=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution895.getTree());
                    }
                    break;
            }
            LAST896=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator12837); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST896);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY899=null;
        EsperEPL2GrammarParser.number_return number897 = null;
        EsperEPL2GrammarParser.substitution_return substitution898 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY899_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt342=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt342=1;
                }
                break;
            case IDENT:
                {
                alt342=2;
                }
                break;
            case QUESTION:
                {
                alt342=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 342, 0, input);
                throw nvae;
            }
            switch (alt342) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator12885);
                    number897=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number897.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator12889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator12891);
                    substitution898=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution898.getTree());
                    }
                    break;
            }
            WEEKDAY899=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator12894); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY899);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK900=null;
        Token COMMA902=null;
        Token RBRACK904=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter901 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter903 = null;
        CommonTree LBRACK900_tree=null;
        CommonTree COMMA902_tree=null;
        CommonTree RBRACK904_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK900=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList12941); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK900);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList12943);
            numericListParameter901=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter901.getTree());
            loop343:
            do {
                int alt343=2;
                int LA343_0 = input.LA(1);
                if ( (LA343_0==COMMA) ) {
                    alt343=1;
                }
                switch (alt343) {
            	case 1 :
            	    {
            	    COMMA902=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList12946); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA902);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList12948);
            	    numericListParameter903=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter903.getTree());
            	    }
            	    break;
            	default :
            	    break loop343;
                }
            } while (true);
            RBRACK904=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList12952); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK904);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand905 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand906 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant907 = null;
        try {
            int alt344=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA344_1 = input.LA(2);
                if ( (LA344_1==COLON) ) {
                    alt344=1;
                }
                else if ( (LA344_1==RBRACK||LA344_1==COMMA) ) {
                    alt344=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 344, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA344_2 = input.LA(2);
                if ( (LA344_2==COLON) ) {
                    alt344=1;
                }
                else if ( (LA344_2==RBRACK||LA344_2==COMMA) ) {
                    alt344=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 344, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA344_3 = input.LA(2);
                if ( (LA344_3==RBRACK||LA344_3==COMMA) ) {
                    alt344=3;
                }
                else if ( (LA344_3==COLON) ) {
                    alt344=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 344, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA344_4 = input.LA(2);
                if ( (LA344_4==RBRACK||LA344_4==COMMA) ) {
                    alt344=3;
                }
                else if ( (LA344_4==COLON) ) {
                    alt344=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 344, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt344=1;
                }
                break;
            case STAR:
                {
                alt344=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt344=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 0, input);
                throw nvae;
            }
            switch (alt344) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter12974);
                    rangeOperand905=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand905.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter12980);
                    frequencyOperand906=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand906.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter12985);
                    numberconstant907=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant907.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT909=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic908 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic910 = null;
        CommonTree DOT909_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty13001);
            eventPropertyAtomic908=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic908.getTree());
            loop345:
            do {
                int alt345=2;
                int LA345_0 = input.LA(1);
                if ( (LA345_0==DOT) ) {
                    alt345=1;
                }
                switch (alt345) {
            	case 1 :
            	    {
            	    DOT909=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty13004); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT909);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty13006);
            	    eventPropertyAtomic910=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic910.getTree());
            	    }
            	    break;
            	default :
            	    break loop345;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK912=null;
        Token RPAREN913=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent911 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK912_tree=null;
        CommonTree RPAREN913_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic13032);
            eventPropertyIdent911=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent911.getTree());
            int alt349=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt349=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt349=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt349=3;
                    }
                    break;
            }
            switch (alt349) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic13041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic13045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK912=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic13047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK912);
                    int alt346=2;
                    int LA346_0 = input.LA(1);
                    if ( (LA346_0==QUESTION) ) {
                        alt346=1;
                    }
                    switch (alt346) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13052); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic13066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt347=2;
                    int LA347_0 = input.LA(1);
                    if ( (LA347_0==STRING_LITERAL) ) {
                        alt347=1;
                    }
                    else if ( (LA347_0==QUOTED_STRING_LITERAL) ) {
                        alt347=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 347, 0, input);
                        throw nvae;
                    }
                    switch (alt347) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic13071); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic13077); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN913=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic13080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN913);
                    int alt348=2;
                    int LA348_0 = input.LA(1);
                    if ( (LA348_0==QUESTION) ) {
                        alt348=1;
                    }
                    switch (alt348) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13085); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13099); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR914=null;
        Token DOT915=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR914_tree=null;
        CommonTree DOT915_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent13222);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop351:
            do {
                int alt351=2;
                int LA351_0 = input.LA(1);
                if ( (LA351_0==ESCAPECHAR) ) {
                    alt351=1;
                }
                switch (alt351) {
            	case 1 :
            	    {
            	    ESCAPECHAR914=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent13234); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR914);
            	    DOT915=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent13236); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT915);
            	    int alt350=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case MERGE:
            	        case MATCHED:
            	        case CONTEXT:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt350=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA350_5 = input.LA(2);
            	            if ( (LA350_5==EOF||(LA350_5>=IN_SET && LA350_5<=NOT_EXPR)||(LA350_5>=WHERE && LA350_5<=AS)||(LA350_5>=ELSE && LA350_5<=FROM)||(LA350_5>=INNER && LA350_5<=FULL)||LA350_5==IS||(LA350_5>=GROUP && LA350_5<=HAVING)||LA350_5==ALL||LA350_5==OUTPUT||LA350_5==INSERT||(LA350_5>=ORDER && LA350_5<=DESC)||LA350_5==PATTERN||(LA350_5>=TIMEPERIOD_SEC && LA350_5<=TIMEPERIOD_SECONDS)||LA350_5==ROW_LIMIT_EXPR||(LA350_5>=MATCH_RECOGNIZE && LA350_5<=MEASURES)||(LA350_5>=AFTER && LA350_5<=FOR)||(LA350_5>=LBRACK && LA350_5<=RBRACK)||(LA350_5>=LPAREN && LA350_5<=COLON)||LA350_5==RCURLY||(LA350_5>=COMMA && LA350_5<=QUESTION)||(LA350_5>=BAND && LA350_5<=MOD)||(LA350_5>=FOLLOWMAX_END && LA350_5<=ESCAPECHAR)) ) {
            	                alt350=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA350_25 = input.LA(2);
            	            if ( (LA350_25==LPAREN) ) {
            	                int LA350_179 = input.LA(3);
            	                if ( ((LA350_179>=STRING_LITERAL && LA350_179<=QUOTED_STRING_LITERAL)) ) {
            	                    alt350=1;
            	                }
            	            }
            	            else if ( (LA350_25==EOF||(LA350_25>=IN_SET && LA350_25<=NOT_EXPR)||(LA350_25>=WHERE && LA350_25<=AS)||(LA350_25>=ELSE && LA350_25<=FROM)||(LA350_25>=INNER && LA350_25<=FULL)||LA350_25==IS||(LA350_25>=GROUP && LA350_25<=HAVING)||LA350_25==ALL||LA350_25==OUTPUT||LA350_25==INSERT||(LA350_25>=ORDER && LA350_25<=DESC)||LA350_25==PATTERN||(LA350_25>=TIMEPERIOD_SEC && LA350_25<=TIMEPERIOD_SECONDS)||LA350_25==ROW_LIMIT_EXPR||(LA350_25>=MATCH_RECOGNIZE && LA350_25<=MEASURES)||(LA350_25>=AFTER && LA350_25<=FOR)||(LA350_25>=LBRACK && LA350_25<=RBRACK)||(LA350_25>=RPAREN && LA350_25<=COLON)||LA350_25==RCURLY||(LA350_25>=COMMA && LA350_25<=QUESTION)||(LA350_25>=BAND && LA350_25<=MOD)||(LA350_25>=FOLLOWMAX_END && LA350_25<=ESCAPECHAR)) ) {
            	                alt350=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA350_40 = input.LA(2);
            	            if ( (LA350_40==EOF||(LA350_40>=IN_SET && LA350_40<=NOT_EXPR)||(LA350_40>=WHERE && LA350_40<=AS)||(LA350_40>=ELSE && LA350_40<=FROM)||(LA350_40>=INNER && LA350_40<=FULL)||LA350_40==IS||(LA350_40>=GROUP && LA350_40<=HAVING)||LA350_40==ALL||LA350_40==OUTPUT||LA350_40==INSERT||(LA350_40>=ORDER && LA350_40<=DESC)||LA350_40==PATTERN||(LA350_40>=TIMEPERIOD_SEC && LA350_40<=TIMEPERIOD_SECONDS)||LA350_40==ROW_LIMIT_EXPR||(LA350_40>=MATCH_RECOGNIZE && LA350_40<=MEASURES)||(LA350_40>=AFTER && LA350_40<=FOR)||(LA350_40>=LBRACK && LA350_40<=RBRACK)||(LA350_40>=LPAREN && LA350_40<=COLON)||LA350_40==RCURLY||(LA350_40>=COMMA && LA350_40<=QUESTION)||(LA350_40>=BAND && LA350_40<=MOD)||(LA350_40>=FOLLOWMAX_END && LA350_40<=ESCAPECHAR)) ) {
            	                alt350=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA350_41 = input.LA(2);
            	            if ( (LA350_41==EOF||(LA350_41>=IN_SET && LA350_41<=NOT_EXPR)||(LA350_41>=WHERE && LA350_41<=AS)||(LA350_41>=ELSE && LA350_41<=FROM)||(LA350_41>=INNER && LA350_41<=FULL)||LA350_41==IS||(LA350_41>=GROUP && LA350_41<=HAVING)||LA350_41==ALL||LA350_41==OUTPUT||LA350_41==INSERT||(LA350_41>=ORDER && LA350_41<=DESC)||LA350_41==PATTERN||(LA350_41>=TIMEPERIOD_SEC && LA350_41<=TIMEPERIOD_SECONDS)||LA350_41==ROW_LIMIT_EXPR||(LA350_41>=MATCH_RECOGNIZE && LA350_41<=MEASURES)||(LA350_41>=AFTER && LA350_41<=FOR)||(LA350_41>=LBRACK && LA350_41<=RBRACK)||(LA350_41>=LPAREN && LA350_41<=COLON)||LA350_41==RCURLY||(LA350_41>=COMMA && LA350_41<=QUESTION)||(LA350_41>=BAND && LA350_41<=MOD)||(LA350_41>=FOLLOWMAX_END && LA350_41<=ESCAPECHAR)) ) {
            	                alt350=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA350_43 = input.LA(2);
            	            if ( (LA350_43==EOF||(LA350_43>=IN_SET && LA350_43<=NOT_EXPR)||(LA350_43>=WHERE && LA350_43<=AS)||(LA350_43>=ELSE && LA350_43<=FROM)||(LA350_43>=INNER && LA350_43<=FULL)||LA350_43==IS||(LA350_43>=GROUP && LA350_43<=HAVING)||LA350_43==ALL||LA350_43==OUTPUT||LA350_43==INSERT||(LA350_43>=ORDER && LA350_43<=DESC)||LA350_43==PATTERN||(LA350_43>=TIMEPERIOD_SEC && LA350_43<=TIMEPERIOD_SECONDS)||LA350_43==ROW_LIMIT_EXPR||(LA350_43>=MATCH_RECOGNIZE && LA350_43<=MEASURES)||(LA350_43>=AFTER && LA350_43<=FOR)||(LA350_43>=LBRACK && LA350_43<=RBRACK)||(LA350_43>=LPAREN && LA350_43<=COLON)||LA350_43==RCURLY||(LA350_43>=COMMA && LA350_43<=QUESTION)||(LA350_43>=BAND && LA350_43<=MOD)||(LA350_43>=FOLLOWMAX_END && LA350_43<=ESCAPECHAR)) ) {
            	                alt350=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA350_44 = input.LA(2);
            	            if ( (LA350_44==EOF||(LA350_44>=IN_SET && LA350_44<=NOT_EXPR)||(LA350_44>=WHERE && LA350_44<=AS)||(LA350_44>=ELSE && LA350_44<=FROM)||(LA350_44>=INNER && LA350_44<=FULL)||LA350_44==IS||(LA350_44>=GROUP && LA350_44<=HAVING)||LA350_44==ALL||LA350_44==OUTPUT||LA350_44==INSERT||(LA350_44>=ORDER && LA350_44<=DESC)||(LA350_44>=TIMEPERIOD_SEC && LA350_44<=TIMEPERIOD_SECONDS)||LA350_44==ROW_LIMIT_EXPR||(LA350_44>=MATCH_RECOGNIZE && LA350_44<=MEASURES)||(LA350_44>=AFTER && LA350_44<=FOR)||(LA350_44>=LBRACK && LA350_44<=RBRACK)||(LA350_44>=LPAREN && LA350_44<=COLON)||LA350_44==RCURLY||(LA350_44>=COMMA && LA350_44<=QUESTION)||(LA350_44>=BAND && LA350_44<=MOD)||(LA350_44>=FOLLOWMAX_END && LA350_44<=ESCAPECHAR)) ) {
            	                alt350=1;
            	            }
            	            else if ( (LA350_44==PATTERN) ) {
            	                int LA350_498 = input.LA(3);
            	                if ( (LA350_498==LPAREN) ) {
            	                    alt350=1;
            	                }
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt350) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent13240);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop351;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT916=null;
        Token COUNT917=null;
        Token ESCAPE918=null;
        Token EVERY_EXPR919=null;
        Token SUM920=null;
        Token AVG921=null;
        Token MAX922=null;
        Token MIN923=null;
        Token COALESCE924=null;
        Token MEDIAN925=null;
        Token STDDEV926=null;
        Token AVEDEV927=null;
        Token EVENTS928=null;
        Token FIRST929=null;
        Token LAST930=null;
        Token WHILE931=null;
        Token MERGE932=null;
        Token MATCHED933=null;
        Token UNIDIRECTIONAL934=null;
        Token RETAINUNION935=null;
        Token RETAININTERSECTION936=null;
        Token UNTIL937=null;
        Token PATTERN938=null;
        Token SQL939=null;
        Token METADATASQL940=null;
        Token PREVIOUS941=null;
        Token PREVIOUSTAIL942=null;
        Token PRIOR943=null;
        Token WEEKDAY944=null;
        Token LW945=null;
        Token INSTANCEOF946=null;
        Token TYPEOF947=null;
        Token CAST948=null;
        Token SNAPSHOT949=null;
        Token VARIABLE950=null;
        Token INDEX951=null;
        Token WINDOW952=null;
        Token LEFT953=null;
        Token RIGHT954=null;
        Token OUTER955=null;
        Token FULL956=null;
        Token JOIN957=null;
        Token DEFINE958=null;
        Token PARTITION959=null;
        Token MATCHES960=null;
        Token CONTEXT961=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT916_tree=null;
        CommonTree COUNT917_tree=null;
        CommonTree ESCAPE918_tree=null;
        CommonTree EVERY_EXPR919_tree=null;
        CommonTree SUM920_tree=null;
        CommonTree AVG921_tree=null;
        CommonTree MAX922_tree=null;
        CommonTree MIN923_tree=null;
        CommonTree COALESCE924_tree=null;
        CommonTree MEDIAN925_tree=null;
        CommonTree STDDEV926_tree=null;
        CommonTree AVEDEV927_tree=null;
        CommonTree EVENTS928_tree=null;
        CommonTree FIRST929_tree=null;
        CommonTree LAST930_tree=null;
        CommonTree WHILE931_tree=null;
        CommonTree MERGE932_tree=null;
        CommonTree MATCHED933_tree=null;
        CommonTree UNIDIRECTIONAL934_tree=null;
        CommonTree RETAINUNION935_tree=null;
        CommonTree RETAININTERSECTION936_tree=null;
        CommonTree UNTIL937_tree=null;
        CommonTree PATTERN938_tree=null;
        CommonTree SQL939_tree=null;
        CommonTree METADATASQL940_tree=null;
        CommonTree PREVIOUS941_tree=null;
        CommonTree PREVIOUSTAIL942_tree=null;
        CommonTree PRIOR943_tree=null;
        CommonTree WEEKDAY944_tree=null;
        CommonTree LW945_tree=null;
        CommonTree INSTANCEOF946_tree=null;
        CommonTree TYPEOF947_tree=null;
        CommonTree CAST948_tree=null;
        CommonTree SNAPSHOT949_tree=null;
        CommonTree VARIABLE950_tree=null;
        CommonTree INDEX951_tree=null;
        CommonTree WINDOW952_tree=null;
        CommonTree LEFT953_tree=null;
        CommonTree RIGHT954_tree=null;
        CommonTree OUTER955_tree=null;
        CommonTree FULL956_tree=null;
        CommonTree JOIN957_tree=null;
        CommonTree DEFINE958_tree=null;
        CommonTree PARTITION959_tree=null;
        CommonTree MATCHES960_tree=null;
        CommonTree CONTEXT961_tree=null;
        try {
            int alt352=48;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt352=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt352=2;
                }
                break;
            case AT:
                {
                alt352=3;
                }
                break;
            case COUNT:
                {
                alt352=4;
                }
                break;
            case ESCAPE:
                {
                alt352=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt352=6;
                }
                break;
            case SUM:
                {
                alt352=7;
                }
                break;
            case AVG:
                {
                alt352=8;
                }
                break;
            case MAX:
                {
                alt352=9;
                }
                break;
            case MIN:
                {
                alt352=10;
                }
                break;
            case COALESCE:
                {
                alt352=11;
                }
                break;
            case MEDIAN:
                {
                alt352=12;
                }
                break;
            case STDDEV:
                {
                alt352=13;
                }
                break;
            case AVEDEV:
                {
                alt352=14;
                }
                break;
            case EVENTS:
                {
                alt352=15;
                }
                break;
            case FIRST:
                {
                alt352=16;
                }
                break;
            case LAST:
                {
                alt352=17;
                }
                break;
            case WHILE:
                {
                alt352=18;
                }
                break;
            case MERGE:
                {
                alt352=19;
                }
                break;
            case MATCHED:
                {
                alt352=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt352=21;
                }
                break;
            case RETAINUNION:
                {
                alt352=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt352=23;
                }
                break;
            case UNTIL:
                {
                alt352=24;
                }
                break;
            case PATTERN:
                {
                alt352=25;
                }
                break;
            case SQL:
                {
                alt352=26;
                }
                break;
            case METADATASQL:
                {
                alt352=27;
                }
                break;
            case PREVIOUS:
                {
                alt352=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt352=29;
                }
                break;
            case PRIOR:
                {
                alt352=30;
                }
                break;
            case WEEKDAY:
                {
                alt352=31;
                }
                break;
            case LW:
                {
                alt352=32;
                }
                break;
            case INSTANCEOF:
                {
                alt352=33;
                }
                break;
            case TYPEOF:
                {
                alt352=34;
                }
                break;
            case CAST:
                {
                alt352=35;
                }
                break;
            case SNAPSHOT:
                {
                alt352=36;
                }
                break;
            case VARIABLE:
                {
                alt352=37;
                }
                break;
            case INDEX:
                {
                alt352=38;
                }
                break;
            case WINDOW:
                {
                alt352=39;
                }
                break;
            case LEFT:
                {
                alt352=40;
                }
                break;
            case RIGHT:
                {
                alt352=41;
                }
                break;
            case OUTER:
                {
                alt352=42;
                }
                break;
            case FULL:
                {
                alt352=43;
                }
                break;
            case JOIN:
                {
                alt352=44;
                }
                break;
            case DEFINE:
                {
                alt352=45;
                }
                break;
            case PARTITION:
                {
                alt352=46;
                }
                break;
            case MATCHES:
                {
                alt352=47;
                }
                break;
            case CONTEXT:
                {
                alt352=48;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 352, 0, input);
                throw nvae;
            }
            switch (alt352) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent13279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent13288); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT916=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent13295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT916_tree = (CommonTree)adaptor.create(AT916);
                    adaptor.addChild(root_0, AT916_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT917=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent13302); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT917_tree = (CommonTree)adaptor.create(COUNT917);
                    adaptor.addChild(root_0, COUNT917_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE918=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent13309); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE918_tree = (CommonTree)adaptor.create(ESCAPE918);
                    adaptor.addChild(root_0, ESCAPE918_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR919=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent13320); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR919_tree = (CommonTree)adaptor.create(EVERY_EXPR919);
                    adaptor.addChild(root_0, EVERY_EXPR919_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM920=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent13327); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM920_tree = (CommonTree)adaptor.create(SUM920);
                    adaptor.addChild(root_0, SUM920_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG921=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent13334); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG921_tree = (CommonTree)adaptor.create(AVG921);
                    adaptor.addChild(root_0, AVG921_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX922=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent13341); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX922_tree = (CommonTree)adaptor.create(MAX922);
                    adaptor.addChild(root_0, MAX922_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN923=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent13348); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN923_tree = (CommonTree)adaptor.create(MIN923);
                    adaptor.addChild(root_0, MIN923_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE924=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent13355); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE924_tree = (CommonTree)adaptor.create(COALESCE924);
                    adaptor.addChild(root_0, COALESCE924_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN925=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent13362); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN925_tree = (CommonTree)adaptor.create(MEDIAN925);
                    adaptor.addChild(root_0, MEDIAN925_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV926=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent13369); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV926_tree = (CommonTree)adaptor.create(STDDEV926);
                    adaptor.addChild(root_0, STDDEV926_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV927=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent13376); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV927_tree = (CommonTree)adaptor.create(AVEDEV927);
                    adaptor.addChild(root_0, AVEDEV927_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS928=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent13383); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS928_tree = (CommonTree)adaptor.create(EVENTS928);
                    adaptor.addChild(root_0, EVENTS928_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST929=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent13390); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST929_tree = (CommonTree)adaptor.create(FIRST929);
                    adaptor.addChild(root_0, FIRST929_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST930=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent13397); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST930_tree = (CommonTree)adaptor.create(LAST930);
                    adaptor.addChild(root_0, LAST930_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE931=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent13404); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE931_tree = (CommonTree)adaptor.create(WHILE931);
                    adaptor.addChild(root_0, WHILE931_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE932=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent13411); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE932_tree = (CommonTree)adaptor.create(MERGE932);
                    adaptor.addChild(root_0, MERGE932_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED933=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent13418); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED933_tree = (CommonTree)adaptor.create(MATCHED933);
                    adaptor.addChild(root_0, MATCHED933_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL934=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent13425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL934_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL934);
                    adaptor.addChild(root_0, UNIDIRECTIONAL934_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION935=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent13432); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION935_tree = (CommonTree)adaptor.create(RETAINUNION935);
                    adaptor.addChild(root_0, RETAINUNION935_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION936=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent13439); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION936_tree = (CommonTree)adaptor.create(RETAININTERSECTION936);
                    adaptor.addChild(root_0, RETAININTERSECTION936_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL937=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent13446); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL937_tree = (CommonTree)adaptor.create(UNTIL937);
                    adaptor.addChild(root_0, UNTIL937_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN938=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent13453); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN938_tree = (CommonTree)adaptor.create(PATTERN938);
                    adaptor.addChild(root_0, PATTERN938_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL939=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent13460); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL939_tree = (CommonTree)adaptor.create(SQL939);
                    adaptor.addChild(root_0, SQL939_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL940=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent13467); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL940_tree = (CommonTree)adaptor.create(METADATASQL940);
                    adaptor.addChild(root_0, METADATASQL940_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS941=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent13474); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS941_tree = (CommonTree)adaptor.create(PREVIOUS941);
                    adaptor.addChild(root_0, PREVIOUS941_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL942=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent13481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL942_tree = (CommonTree)adaptor.create(PREVIOUSTAIL942);
                    adaptor.addChild(root_0, PREVIOUSTAIL942_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR943=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent13488); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR943_tree = (CommonTree)adaptor.create(PRIOR943);
                    adaptor.addChild(root_0, PRIOR943_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY944=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent13495); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY944_tree = (CommonTree)adaptor.create(WEEKDAY944);
                    adaptor.addChild(root_0, WEEKDAY944_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW945=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent13502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW945_tree = (CommonTree)adaptor.create(LW945);
                    adaptor.addChild(root_0, LW945_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF946=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent13509); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF946_tree = (CommonTree)adaptor.create(INSTANCEOF946);
                    adaptor.addChild(root_0, INSTANCEOF946_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF947=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent13516); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF947_tree = (CommonTree)adaptor.create(TYPEOF947);
                    adaptor.addChild(root_0, TYPEOF947_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST948=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent13523); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST948_tree = (CommonTree)adaptor.create(CAST948);
                    adaptor.addChild(root_0, CAST948_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT949=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent13530); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT949_tree = (CommonTree)adaptor.create(SNAPSHOT949);
                    adaptor.addChild(root_0, SNAPSHOT949_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE950=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent13537); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE950_tree = (CommonTree)adaptor.create(VARIABLE950);
                    adaptor.addChild(root_0, VARIABLE950_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX951=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent13546); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX951_tree = (CommonTree)adaptor.create(INDEX951);
                    adaptor.addChild(root_0, INDEX951_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW952=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent13555); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW952_tree = (CommonTree)adaptor.create(WINDOW952);
                    adaptor.addChild(root_0, WINDOW952_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT953=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent13562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT953_tree = (CommonTree)adaptor.create(LEFT953);
                    adaptor.addChild(root_0, LEFT953_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT954=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent13569); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT954_tree = (CommonTree)adaptor.create(RIGHT954);
                    adaptor.addChild(root_0, RIGHT954_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER955=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent13576); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER955_tree = (CommonTree)adaptor.create(OUTER955);
                    adaptor.addChild(root_0, OUTER955_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL956=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent13583); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL956_tree = (CommonTree)adaptor.create(FULL956);
                    adaptor.addChild(root_0, FULL956_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN957=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent13590); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN957_tree = (CommonTree)adaptor.create(JOIN957);
                    adaptor.addChild(root_0, JOIN957_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE958=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent13597); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE958_tree = (CommonTree)adaptor.create(DEFINE958);
                    adaptor.addChild(root_0, DEFINE958_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION959=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent13604); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION959_tree = (CommonTree)adaptor.create(PARTITION959);
                    adaptor.addChild(root_0, PARTITION959_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES960=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent13611); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES960_tree = (CommonTree)adaptor.create(MATCHES960);
                    adaptor.addChild(root_0, MATCHES960_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
                case 48 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CONTEXT961=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_keywordAllowedIdent13618); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONTEXT961_tree = (CommonTree)adaptor.create(CONTEXT961);
                    adaptor.addChild(root_0, CONTEXT961_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "context"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt353=2;
            int LA353_0 = input.LA(1);
            if ( (LA353_0==IDENT) ) {
                alt353=1;
            }
            else if ( (LA353_0==TICKED_STRING_LITERAL) ) {
                alt353=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 353, 0, input);
                throw nvae;
            }
            switch (alt353) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr13639); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr13648); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT962=null;
        CommonTree t_tree=null;
        CommonTree IDENT962_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt354=2;
            int LA354_0 = input.LA(1);
            if ( (LA354_0==IDENT) ) {
                alt354=1;
            }
            else if ( (LA354_0==TICKED_STRING_LITERAL) ) {
                alt354=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 354, 0, input);
                throw nvae;
            }
            switch (alt354) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT962=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent13662); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT962_tree = (CommonTree)adaptor.create(IDENT962);
                    adaptor.addChild(root_0, IDENT962_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent13670); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.yearPart_return yearPart963 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart964 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart965 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart966 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart967 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart968 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart969 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart970 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart971 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart972 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart973 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart974 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart975 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart976 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart977 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart978 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart979 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart980 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart981 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart982 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart983 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart984 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart985 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart986 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart987 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart988 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart989 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart990 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart991 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart992 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart993 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart994 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart995 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart996 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart997 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart998 = null;
        RewriteRuleSubtreeStream stream_yearPart=new RewriteRuleSubtreeStream(adaptor,"rule yearPart");
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        RewriteRuleSubtreeStream stream_weekPart=new RewriteRuleSubtreeStream(adaptor,"rule weekPart");
        RewriteRuleSubtreeStream stream_monthPart=new RewriteRuleSubtreeStream(adaptor,"rule monthPart");
        try {
            {
            int alt383=8;
            switch ( input.LA(1) ) {
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt383=6;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt383=2;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt383=4;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt383=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt383=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt383=1;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt383=7;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt383=8;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 383, 9, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt383=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt383=4;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt383=5;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt383=8;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt383=3;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt383=1;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt383=7;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt383=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 383, 10, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt383=4;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt383=1;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt383=6;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt383=7;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt383=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt383=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt383=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt383=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 383, 11, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt383=1;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt383=4;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt383=3;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt383=8;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt383=7;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt383=6;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt383=2;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt383=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 383, 12, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 383, 1, input);
                    throw nvae;
                }
                }
                break;
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt383=6;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt383=2;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt383=4;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt383=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt383=5;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt383=7;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt383=1;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt383=8;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 383, 13, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt383=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt383=4;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt383=5;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt383=8;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt383=3;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt383=7;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt383=1;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt383=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 383, 14, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt383=4;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt383=1;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt383=6;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt383=7;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt383=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt383=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt383=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt383=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 383, 15, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt383=1;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt383=4;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt383=3;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt383=8;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt383=7;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt383=6;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt383=2;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt383=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 383, 16, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 383, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt383=6;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt383=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt383=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt383=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt383=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt383=7;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt383=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt383=8;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 383, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt383=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt383=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt383=5;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt383=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt383=7;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt383=3;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt383=1;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt383=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 383, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt383=4;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt383=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt383=6;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt383=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt383=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt383=2;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt383=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt383=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 383, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt383=1;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt383=4;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt383=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt383=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt383=7;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt383=6;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt383=2;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt383=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 383, 6, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt383=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt383=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt383=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt383=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt383=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt383=8;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt383=6;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt383=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 383, 7, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt383=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt383=4;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt383=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt383=6;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt383=8;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt383=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt383=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt383=7;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 383, 8, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 383, 0, input);
                throw nvae;
            }
            switch (alt383) {
                case 1 :
                    {
                    pushFollow(FOLLOW_yearPart_in_timePeriod13695);
                    yearPart963=yearPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yearPart.add(yearPart963.getTree());
                    int alt355=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA355_26 = input.LA(3);
                                    if ( ((LA355_26>=TIMEPERIOD_MONTH && LA355_26<=TIMEPERIOD_MONTHS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA355_27 = input.LA(3);
                                    if ( ((LA355_27>=TIMEPERIOD_MONTH && LA355_27<=TIMEPERIOD_MONTHS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA355_28 = input.LA(3);
                                    if ( ((LA355_28>=TIMEPERIOD_MONTH && LA355_28<=TIMEPERIOD_MONTHS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA355_29 = input.LA(3);
                                    if ( ((LA355_29>=TIMEPERIOD_MONTH && LA355_29<=TIMEPERIOD_MONTHS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA355_30 = input.LA(3);
                                    if ( ((LA355_30>=TIMEPERIOD_MONTH && LA355_30<=TIMEPERIOD_MONTHS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA355_31 = input.LA(3);
                                    if ( ((LA355_31>=TIMEPERIOD_MONTH && LA355_31<=TIMEPERIOD_MONTHS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA355_32 = input.LA(3);
                                    if ( ((LA355_32>=TIMEPERIOD_MONTH && LA355_32<=TIMEPERIOD_MONTHS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA355_33 = input.LA(3);
                                    if ( ((LA355_33>=TIMEPERIOD_MONTH && LA355_33<=TIMEPERIOD_MONTHS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA355_3 = input.LA(2);
                            if ( ((LA355_3>=TIMEPERIOD_MONTH && LA355_3<=TIMEPERIOD_MONTHS)) ) {
                                alt355=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA355_4 = input.LA(2);
                            if ( ((LA355_4>=TIMEPERIOD_MONTH && LA355_4<=TIMEPERIOD_MONTHS)) ) {
                                alt355=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA355_5 = input.LA(2);
                            if ( ((LA355_5>=TIMEPERIOD_MONTH && LA355_5<=TIMEPERIOD_MONTHS)) ) {
                                alt355=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA355_6 = input.LA(2);
                            if ( ((LA355_6>=TIMEPERIOD_MONTH && LA355_6<=TIMEPERIOD_MONTHS)) ) {
                                alt355=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA355_7 = input.LA(2);
                            if ( ((LA355_7>=TIMEPERIOD_MONTH && LA355_7<=TIMEPERIOD_MONTHS)) ) {
                                alt355=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA355_8 = input.LA(2);
                            if ( ((LA355_8>=TIMEPERIOD_MONTH && LA355_8<=TIMEPERIOD_MONTHS)) ) {
                                alt355=1;
                            }
                            }
                            break;
                    }
                    switch (alt355) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_monthPart_in_timePeriod13697);
                            monthPart964=monthPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_monthPart.add(monthPart964.getTree());
                            }
                            break;
                    }
                    int alt356=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA356_26 = input.LA(3);
                                    if ( ((LA356_26>=TIMEPERIOD_WEEK && LA356_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA356_27 = input.LA(3);
                                    if ( ((LA356_27>=TIMEPERIOD_WEEK && LA356_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA356_28 = input.LA(3);
                                    if ( ((LA356_28>=TIMEPERIOD_WEEK && LA356_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA356_29 = input.LA(3);
                                    if ( ((LA356_29>=TIMEPERIOD_WEEK && LA356_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA356_30 = input.LA(3);
                                    if ( ((LA356_30>=TIMEPERIOD_WEEK && LA356_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA356_31 = input.LA(3);
                                    if ( ((LA356_31>=TIMEPERIOD_WEEK && LA356_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA356_32 = input.LA(3);
                                    if ( ((LA356_32>=TIMEPERIOD_WEEK && LA356_32<=TIMEPERIOD_WEEKS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA356_33 = input.LA(3);
                                    if ( ((LA356_33>=TIMEPERIOD_WEEK && LA356_33<=TIMEPERIOD_WEEKS)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA356_3 = input.LA(2);
                            if ( ((LA356_3>=TIMEPERIOD_WEEK && LA356_3<=TIMEPERIOD_WEEKS)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA356_4 = input.LA(2);
                            if ( ((LA356_4>=TIMEPERIOD_WEEK && LA356_4<=TIMEPERIOD_WEEKS)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA356_5 = input.LA(2);
                            if ( ((LA356_5>=TIMEPERIOD_WEEK && LA356_5<=TIMEPERIOD_WEEKS)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA356_6 = input.LA(2);
                            if ( ((LA356_6>=TIMEPERIOD_WEEK && LA356_6<=TIMEPERIOD_WEEKS)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA356_7 = input.LA(2);
                            if ( ((LA356_7>=TIMEPERIOD_WEEK && LA356_7<=TIMEPERIOD_WEEKS)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA356_8 = input.LA(2);
                            if ( ((LA356_8>=TIMEPERIOD_WEEK && LA356_8<=TIMEPERIOD_WEEKS)) ) {
                                alt356=1;
                            }
                            }
                            break;
                    }
                    switch (alt356) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod13700);
                            weekPart965=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart965.getTree());
                            }
                            break;
                    }
                    int alt357=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA357_26 = input.LA(3);
                                    if ( ((LA357_26>=TIMEPERIOD_DAY && LA357_26<=TIMEPERIOD_DAYS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA357_27 = input.LA(3);
                                    if ( ((LA357_27>=TIMEPERIOD_DAY && LA357_27<=TIMEPERIOD_DAYS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA357_28 = input.LA(3);
                                    if ( ((LA357_28>=TIMEPERIOD_DAY && LA357_28<=TIMEPERIOD_DAYS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA357_29 = input.LA(3);
                                    if ( ((LA357_29>=TIMEPERIOD_DAY && LA357_29<=TIMEPERIOD_DAYS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA357_30 = input.LA(3);
                                    if ( ((LA357_30>=TIMEPERIOD_DAY && LA357_30<=TIMEPERIOD_DAYS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA357_31 = input.LA(3);
                                    if ( ((LA357_31>=TIMEPERIOD_DAY && LA357_31<=TIMEPERIOD_DAYS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA357_32 = input.LA(3);
                                    if ( ((LA357_32>=TIMEPERIOD_DAY && LA357_32<=TIMEPERIOD_DAYS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA357_33 = input.LA(3);
                                    if ( ((LA357_33>=TIMEPERIOD_DAY && LA357_33<=TIMEPERIOD_DAYS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA357_3 = input.LA(2);
                            if ( ((LA357_3>=TIMEPERIOD_DAY && LA357_3<=TIMEPERIOD_DAYS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA357_4 = input.LA(2);
                            if ( ((LA357_4>=TIMEPERIOD_DAY && LA357_4<=TIMEPERIOD_DAYS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA357_5 = input.LA(2);
                            if ( ((LA357_5>=TIMEPERIOD_DAY && LA357_5<=TIMEPERIOD_DAYS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA357_6 = input.LA(2);
                            if ( ((LA357_6>=TIMEPERIOD_DAY && LA357_6<=TIMEPERIOD_DAYS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA357_7 = input.LA(2);
                            if ( ((LA357_7>=TIMEPERIOD_DAY && LA357_7<=TIMEPERIOD_DAYS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA357_8 = input.LA(2);
                            if ( ((LA357_8>=TIMEPERIOD_DAY && LA357_8<=TIMEPERIOD_DAYS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                    }
                    switch (alt357) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod13703);
                            dayPart966=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart966.getTree());
                            }
                            break;
                    }
                    int alt358=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA358_26 = input.LA(3);
                                    if ( ((LA358_26>=TIMEPERIOD_HOUR && LA358_26<=TIMEPERIOD_HOURS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA358_27 = input.LA(3);
                                    if ( ((LA358_27>=TIMEPERIOD_HOUR && LA358_27<=TIMEPERIOD_HOURS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA358_28 = input.LA(3);
                                    if ( ((LA358_28>=TIMEPERIOD_HOUR && LA358_28<=TIMEPERIOD_HOURS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA358_29 = input.LA(3);
                                    if ( ((LA358_29>=TIMEPERIOD_HOUR && LA358_29<=TIMEPERIOD_HOURS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA358_30 = input.LA(3);
                                    if ( ((LA358_30>=TIMEPERIOD_HOUR && LA358_30<=TIMEPERIOD_HOURS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA358_31 = input.LA(3);
                                    if ( ((LA358_31>=TIMEPERIOD_HOUR && LA358_31<=TIMEPERIOD_HOURS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA358_32 = input.LA(3);
                                    if ( ((LA358_32>=TIMEPERIOD_HOUR && LA358_32<=TIMEPERIOD_HOURS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA358_33 = input.LA(3);
                                    if ( ((LA358_33>=TIMEPERIOD_HOUR && LA358_33<=TIMEPERIOD_HOURS)) ) {
                                        alt358=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA358_3 = input.LA(2);
                            if ( ((LA358_3>=TIMEPERIOD_HOUR && LA358_3<=TIMEPERIOD_HOURS)) ) {
                                alt358=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA358_4 = input.LA(2);
                            if ( ((LA358_4>=TIMEPERIOD_HOUR && LA358_4<=TIMEPERIOD_HOURS)) ) {
                                alt358=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA358_5 = input.LA(2);
                            if ( ((LA358_5>=TIMEPERIOD_HOUR && LA358_5<=TIMEPERIOD_HOURS)) ) {
                                alt358=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA358_6 = input.LA(2);
                            if ( ((LA358_6>=TIMEPERIOD_HOUR && LA358_6<=TIMEPERIOD_HOURS)) ) {
                                alt358=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA358_7 = input.LA(2);
                            if ( ((LA358_7>=TIMEPERIOD_HOUR && LA358_7<=TIMEPERIOD_HOURS)) ) {
                                alt358=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA358_8 = input.LA(2);
                            if ( ((LA358_8>=TIMEPERIOD_HOUR && LA358_8<=TIMEPERIOD_HOURS)) ) {
                                alt358=1;
                            }
                            }
                            break;
                    }
                    switch (alt358) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13706);
                            hourPart967=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart967.getTree());
                            }
                            break;
                    }
                    int alt359=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA359_26 = input.LA(3);
                                    if ( (LA359_26==MIN||(LA359_26>=TIMEPERIOD_MINUTE && LA359_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA359_27 = input.LA(3);
                                    if ( (LA359_27==MIN||(LA359_27>=TIMEPERIOD_MINUTE && LA359_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA359_28 = input.LA(3);
                                    if ( (LA359_28==MIN||(LA359_28>=TIMEPERIOD_MINUTE && LA359_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA359_29 = input.LA(3);
                                    if ( (LA359_29==MIN||(LA359_29>=TIMEPERIOD_MINUTE && LA359_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA359_30 = input.LA(3);
                                    if ( (LA359_30==MIN||(LA359_30>=TIMEPERIOD_MINUTE && LA359_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA359_31 = input.LA(3);
                                    if ( (LA359_31==MIN||(LA359_31>=TIMEPERIOD_MINUTE && LA359_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA359_32 = input.LA(3);
                                    if ( (LA359_32==MIN||(LA359_32>=TIMEPERIOD_MINUTE && LA359_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA359_33 = input.LA(3);
                                    if ( (LA359_33==MIN||(LA359_33>=TIMEPERIOD_MINUTE && LA359_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA359_3 = input.LA(2);
                            if ( (LA359_3==MIN||(LA359_3>=TIMEPERIOD_MINUTE && LA359_3<=TIMEPERIOD_MINUTES)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA359_4 = input.LA(2);
                            if ( (LA359_4==MIN||(LA359_4>=TIMEPERIOD_MINUTE && LA359_4<=TIMEPERIOD_MINUTES)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA359_5 = input.LA(2);
                            if ( (LA359_5==MIN||(LA359_5>=TIMEPERIOD_MINUTE && LA359_5<=TIMEPERIOD_MINUTES)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA359_6 = input.LA(2);
                            if ( (LA359_6==MIN||(LA359_6>=TIMEPERIOD_MINUTE && LA359_6<=TIMEPERIOD_MINUTES)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA359_7 = input.LA(2);
                            if ( (LA359_7==MIN||(LA359_7>=TIMEPERIOD_MINUTE && LA359_7<=TIMEPERIOD_MINUTES)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA359_8 = input.LA(2);
                            if ( (LA359_8==MIN||(LA359_8>=TIMEPERIOD_MINUTE && LA359_8<=TIMEPERIOD_MINUTES)) ) {
                                alt359=1;
                            }
                            }
                            break;
                    }
                    switch (alt359) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13709);
                            minutePart968=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart968.getTree());
                            }
                            break;
                    }
                    int alt360=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA360_26 = input.LA(3);
                                    if ( ((LA360_26>=TIMEPERIOD_SEC && LA360_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA360_27 = input.LA(3);
                                    if ( ((LA360_27>=TIMEPERIOD_SEC && LA360_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA360_28 = input.LA(3);
                                    if ( ((LA360_28>=TIMEPERIOD_SEC && LA360_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA360_29 = input.LA(3);
                                    if ( ((LA360_29>=TIMEPERIOD_SEC && LA360_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA360_30 = input.LA(3);
                                    if ( ((LA360_30>=TIMEPERIOD_SEC && LA360_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA360_31 = input.LA(3);
                                    if ( ((LA360_31>=TIMEPERIOD_SEC && LA360_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA360_32 = input.LA(3);
                                    if ( ((LA360_32>=TIMEPERIOD_SEC && LA360_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA360_33 = input.LA(3);
                                    if ( ((LA360_33>=TIMEPERIOD_SEC && LA360_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt360=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA360_3 = input.LA(2);
                            if ( ((LA360_3>=TIMEPERIOD_SEC && LA360_3<=TIMEPERIOD_SECONDS)) ) {
                                alt360=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA360_4 = input.LA(2);
                            if ( ((LA360_4>=TIMEPERIOD_SEC && LA360_4<=TIMEPERIOD_SECONDS)) ) {
                                alt360=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA360_5 = input.LA(2);
                            if ( ((LA360_5>=TIMEPERIOD_SEC && LA360_5<=TIMEPERIOD_SECONDS)) ) {
                                alt360=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA360_6 = input.LA(2);
                            if ( ((LA360_6>=TIMEPERIOD_SEC && LA360_6<=TIMEPERIOD_SECONDS)) ) {
                                alt360=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA360_7 = input.LA(2);
                            if ( ((LA360_7>=TIMEPERIOD_SEC && LA360_7<=TIMEPERIOD_SECONDS)) ) {
                                alt360=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA360_8 = input.LA(2);
                            if ( ((LA360_8>=TIMEPERIOD_SEC && LA360_8<=TIMEPERIOD_SECONDS)) ) {
                                alt360=1;
                            }
                            }
                            break;
                    }
                    switch (alt360) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13712);
                            secondPart969=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart969.getTree());
                            }
                            break;
                    }
                    int alt361=2;
                    int LA361_0 = input.LA(1);
                    if ( (LA361_0==NUM_DOUBLE||LA361_0==IDENT||(LA361_0>=PLUS && LA361_0<=QUESTION)||LA361_0==MINUS||LA361_0==NUM_INT||(LA361_0>=NUM_LONG && LA361_0<=NUM_FLOAT)) ) {
                        alt361=1;
                    }
                    switch (alt361) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13715);
                            millisecondPart970=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart970.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_monthPart_in_timePeriod13721);
                    monthPart971=monthPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monthPart.add(monthPart971.getTree());
                    int alt362=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA362_26 = input.LA(3);
                                    if ( ((LA362_26>=TIMEPERIOD_WEEK && LA362_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt362=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA362_27 = input.LA(3);
                                    if ( ((LA362_27>=TIMEPERIOD_WEEK && LA362_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt362=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA362_28 = input.LA(3);
                                    if ( ((LA362_28>=TIMEPERIOD_WEEK && LA362_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt362=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA362_29 = input.LA(3);
                                    if ( ((LA362_29>=TIMEPERIOD_WEEK && LA362_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt362=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA362_30 = input.LA(3);
                                    if ( ((LA362_30>=TIMEPERIOD_WEEK && LA362_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt362=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA362_31 = input.LA(3);
                                    if ( ((LA362_31>=TIMEPERIOD_WEEK && LA362_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt362=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA362_32 = input.LA(3);
                                    if ( ((LA362_32>=TIMEPERIOD_WEEK && LA362_32<=TIMEPERIOD_WEEKS)) ) {
                                        alt362=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA362_33 = input.LA(3);
                                    if ( ((LA362_33>=TIMEPERIOD_WEEK && LA362_33<=TIMEPERIOD_WEEKS)) ) {
                                        alt362=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA362_3 = input.LA(2);
                            if ( ((LA362_3>=TIMEPERIOD_WEEK && LA362_3<=TIMEPERIOD_WEEKS)) ) {
                                alt362=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA362_4 = input.LA(2);
                            if ( ((LA362_4>=TIMEPERIOD_WEEK && LA362_4<=TIMEPERIOD_WEEKS)) ) {
                                alt362=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA362_5 = input.LA(2);
                            if ( ((LA362_5>=TIMEPERIOD_WEEK && LA362_5<=TIMEPERIOD_WEEKS)) ) {
                                alt362=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA362_6 = input.LA(2);
                            if ( ((LA362_6>=TIMEPERIOD_WEEK && LA362_6<=TIMEPERIOD_WEEKS)) ) {
                                alt362=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA362_7 = input.LA(2);
                            if ( ((LA362_7>=TIMEPERIOD_WEEK && LA362_7<=TIMEPERIOD_WEEKS)) ) {
                                alt362=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA362_8 = input.LA(2);
                            if ( ((LA362_8>=TIMEPERIOD_WEEK && LA362_8<=TIMEPERIOD_WEEKS)) ) {
                                alt362=1;
                            }
                            }
                            break;
                    }
                    switch (alt362) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod13723);
                            weekPart972=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart972.getTree());
                            }
                            break;
                    }
                    int alt363=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA363_26 = input.LA(3);
                                    if ( ((LA363_26>=TIMEPERIOD_DAY && LA363_26<=TIMEPERIOD_DAYS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA363_27 = input.LA(3);
                                    if ( ((LA363_27>=TIMEPERIOD_DAY && LA363_27<=TIMEPERIOD_DAYS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA363_28 = input.LA(3);
                                    if ( ((LA363_28>=TIMEPERIOD_DAY && LA363_28<=TIMEPERIOD_DAYS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA363_29 = input.LA(3);
                                    if ( ((LA363_29>=TIMEPERIOD_DAY && LA363_29<=TIMEPERIOD_DAYS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA363_30 = input.LA(3);
                                    if ( ((LA363_30>=TIMEPERIOD_DAY && LA363_30<=TIMEPERIOD_DAYS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA363_31 = input.LA(3);
                                    if ( ((LA363_31>=TIMEPERIOD_DAY && LA363_31<=TIMEPERIOD_DAYS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA363_32 = input.LA(3);
                                    if ( ((LA363_32>=TIMEPERIOD_DAY && LA363_32<=TIMEPERIOD_DAYS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA363_33 = input.LA(3);
                                    if ( ((LA363_33>=TIMEPERIOD_DAY && LA363_33<=TIMEPERIOD_DAYS)) ) {
                                        alt363=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA363_3 = input.LA(2);
                            if ( ((LA363_3>=TIMEPERIOD_DAY && LA363_3<=TIMEPERIOD_DAYS)) ) {
                                alt363=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA363_4 = input.LA(2);
                            if ( ((LA363_4>=TIMEPERIOD_DAY && LA363_4<=TIMEPERIOD_DAYS)) ) {
                                alt363=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA363_5 = input.LA(2);
                            if ( ((LA363_5>=TIMEPERIOD_DAY && LA363_5<=TIMEPERIOD_DAYS)) ) {
                                alt363=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA363_6 = input.LA(2);
                            if ( ((LA363_6>=TIMEPERIOD_DAY && LA363_6<=TIMEPERIOD_DAYS)) ) {
                                alt363=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA363_7 = input.LA(2);
                            if ( ((LA363_7>=TIMEPERIOD_DAY && LA363_7<=TIMEPERIOD_DAYS)) ) {
                                alt363=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA363_8 = input.LA(2);
                            if ( ((LA363_8>=TIMEPERIOD_DAY && LA363_8<=TIMEPERIOD_DAYS)) ) {
                                alt363=1;
                            }
                            }
                            break;
                    }
                    switch (alt363) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod13726);
                            dayPart973=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart973.getTree());
                            }
                            break;
                    }
                    int alt364=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA364_26 = input.LA(3);
                                    if ( ((LA364_26>=TIMEPERIOD_HOUR && LA364_26<=TIMEPERIOD_HOURS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA364_27 = input.LA(3);
                                    if ( ((LA364_27>=TIMEPERIOD_HOUR && LA364_27<=TIMEPERIOD_HOURS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA364_28 = input.LA(3);
                                    if ( ((LA364_28>=TIMEPERIOD_HOUR && LA364_28<=TIMEPERIOD_HOURS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA364_29 = input.LA(3);
                                    if ( ((LA364_29>=TIMEPERIOD_HOUR && LA364_29<=TIMEPERIOD_HOURS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA364_30 = input.LA(3);
                                    if ( ((LA364_30>=TIMEPERIOD_HOUR && LA364_30<=TIMEPERIOD_HOURS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA364_31 = input.LA(3);
                                    if ( ((LA364_31>=TIMEPERIOD_HOUR && LA364_31<=TIMEPERIOD_HOURS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA364_32 = input.LA(3);
                                    if ( ((LA364_32>=TIMEPERIOD_HOUR && LA364_32<=TIMEPERIOD_HOURS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA364_33 = input.LA(3);
                                    if ( ((LA364_33>=TIMEPERIOD_HOUR && LA364_33<=TIMEPERIOD_HOURS)) ) {
                                        alt364=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA364_3 = input.LA(2);
                            if ( ((LA364_3>=TIMEPERIOD_HOUR && LA364_3<=TIMEPERIOD_HOURS)) ) {
                                alt364=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA364_4 = input.LA(2);
                            if ( ((LA364_4>=TIMEPERIOD_HOUR && LA364_4<=TIMEPERIOD_HOURS)) ) {
                                alt364=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA364_5 = input.LA(2);
                            if ( ((LA364_5>=TIMEPERIOD_HOUR && LA364_5<=TIMEPERIOD_HOURS)) ) {
                                alt364=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA364_6 = input.LA(2);
                            if ( ((LA364_6>=TIMEPERIOD_HOUR && LA364_6<=TIMEPERIOD_HOURS)) ) {
                                alt364=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA364_7 = input.LA(2);
                            if ( ((LA364_7>=TIMEPERIOD_HOUR && LA364_7<=TIMEPERIOD_HOURS)) ) {
                                alt364=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA364_8 = input.LA(2);
                            if ( ((LA364_8>=TIMEPERIOD_HOUR && LA364_8<=TIMEPERIOD_HOURS)) ) {
                                alt364=1;
                            }
                            }
                            break;
                    }
                    switch (alt364) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13729);
                            hourPart974=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart974.getTree());
                            }
                            break;
                    }
                    int alt365=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA365_26 = input.LA(3);
                                    if ( (LA365_26==MIN||(LA365_26>=TIMEPERIOD_MINUTE && LA365_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA365_27 = input.LA(3);
                                    if ( (LA365_27==MIN||(LA365_27>=TIMEPERIOD_MINUTE && LA365_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA365_28 = input.LA(3);
                                    if ( (LA365_28==MIN||(LA365_28>=TIMEPERIOD_MINUTE && LA365_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA365_29 = input.LA(3);
                                    if ( (LA365_29==MIN||(LA365_29>=TIMEPERIOD_MINUTE && LA365_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA365_30 = input.LA(3);
                                    if ( (LA365_30==MIN||(LA365_30>=TIMEPERIOD_MINUTE && LA365_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA365_31 = input.LA(3);
                                    if ( (LA365_31==MIN||(LA365_31>=TIMEPERIOD_MINUTE && LA365_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA365_32 = input.LA(3);
                                    if ( (LA365_32==MIN||(LA365_32>=TIMEPERIOD_MINUTE && LA365_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA365_33 = input.LA(3);
                                    if ( (LA365_33==MIN||(LA365_33>=TIMEPERIOD_MINUTE && LA365_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt365=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA365_3 = input.LA(2);
                            if ( (LA365_3==MIN||(LA365_3>=TIMEPERIOD_MINUTE && LA365_3<=TIMEPERIOD_MINUTES)) ) {
                                alt365=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA365_4 = input.LA(2);
                            if ( (LA365_4==MIN||(LA365_4>=TIMEPERIOD_MINUTE && LA365_4<=TIMEPERIOD_MINUTES)) ) {
                                alt365=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA365_5 = input.LA(2);
                            if ( (LA365_5==MIN||(LA365_5>=TIMEPERIOD_MINUTE && LA365_5<=TIMEPERIOD_MINUTES)) ) {
                                alt365=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA365_6 = input.LA(2);
                            if ( (LA365_6==MIN||(LA365_6>=TIMEPERIOD_MINUTE && LA365_6<=TIMEPERIOD_MINUTES)) ) {
                                alt365=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA365_7 = input.LA(2);
                            if ( (LA365_7==MIN||(LA365_7>=TIMEPERIOD_MINUTE && LA365_7<=TIMEPERIOD_MINUTES)) ) {
                                alt365=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA365_8 = input.LA(2);
                            if ( (LA365_8==MIN||(LA365_8>=TIMEPERIOD_MINUTE && LA365_8<=TIMEPERIOD_MINUTES)) ) {
                                alt365=1;
                            }
                            }
                            break;
                    }
                    switch (alt365) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13732);
                            minutePart975=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart975.getTree());
                            }
                            break;
                    }
                    int alt366=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA366_26 = input.LA(3);
                                    if ( ((LA366_26>=TIMEPERIOD_SEC && LA366_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA366_27 = input.LA(3);
                                    if ( ((LA366_27>=TIMEPERIOD_SEC && LA366_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA366_28 = input.LA(3);
                                    if ( ((LA366_28>=TIMEPERIOD_SEC && LA366_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA366_29 = input.LA(3);
                                    if ( ((LA366_29>=TIMEPERIOD_SEC && LA366_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA366_30 = input.LA(3);
                                    if ( ((LA366_30>=TIMEPERIOD_SEC && LA366_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA366_31 = input.LA(3);
                                    if ( ((LA366_31>=TIMEPERIOD_SEC && LA366_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA366_32 = input.LA(3);
                                    if ( ((LA366_32>=TIMEPERIOD_SEC && LA366_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA366_33 = input.LA(3);
                                    if ( ((LA366_33>=TIMEPERIOD_SEC && LA366_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt366=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA366_3 = input.LA(2);
                            if ( ((LA366_3>=TIMEPERIOD_SEC && LA366_3<=TIMEPERIOD_SECONDS)) ) {
                                alt366=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA366_4 = input.LA(2);
                            if ( ((LA366_4>=TIMEPERIOD_SEC && LA366_4<=TIMEPERIOD_SECONDS)) ) {
                                alt366=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA366_5 = input.LA(2);
                            if ( ((LA366_5>=TIMEPERIOD_SEC && LA366_5<=TIMEPERIOD_SECONDS)) ) {
                                alt366=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA366_6 = input.LA(2);
                            if ( ((LA366_6>=TIMEPERIOD_SEC && LA366_6<=TIMEPERIOD_SECONDS)) ) {
                                alt366=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA366_7 = input.LA(2);
                            if ( ((LA366_7>=TIMEPERIOD_SEC && LA366_7<=TIMEPERIOD_SECONDS)) ) {
                                alt366=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA366_8 = input.LA(2);
                            if ( ((LA366_8>=TIMEPERIOD_SEC && LA366_8<=TIMEPERIOD_SECONDS)) ) {
                                alt366=1;
                            }
                            }
                            break;
                    }
                    switch (alt366) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13735);
                            secondPart976=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart976.getTree());
                            }
                            break;
                    }
                    int alt367=2;
                    int LA367_0 = input.LA(1);
                    if ( (LA367_0==NUM_DOUBLE||LA367_0==IDENT||(LA367_0>=PLUS && LA367_0<=QUESTION)||LA367_0==MINUS||LA367_0==NUM_INT||(LA367_0>=NUM_LONG && LA367_0<=NUM_FLOAT)) ) {
                        alt367=1;
                    }
                    switch (alt367) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13738);
                            millisecondPart977=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart977.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_weekPart_in_timePeriod13744);
                    weekPart978=weekPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_weekPart.add(weekPart978.getTree());
                    int alt368=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA368_26 = input.LA(3);
                                    if ( ((LA368_26>=TIMEPERIOD_DAY && LA368_26<=TIMEPERIOD_DAYS)) ) {
                                        alt368=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA368_27 = input.LA(3);
                                    if ( ((LA368_27>=TIMEPERIOD_DAY && LA368_27<=TIMEPERIOD_DAYS)) ) {
                                        alt368=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA368_28 = input.LA(3);
                                    if ( ((LA368_28>=TIMEPERIOD_DAY && LA368_28<=TIMEPERIOD_DAYS)) ) {
                                        alt368=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA368_29 = input.LA(3);
                                    if ( ((LA368_29>=TIMEPERIOD_DAY && LA368_29<=TIMEPERIOD_DAYS)) ) {
                                        alt368=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA368_30 = input.LA(3);
                                    if ( ((LA368_30>=TIMEPERIOD_DAY && LA368_30<=TIMEPERIOD_DAYS)) ) {
                                        alt368=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA368_31 = input.LA(3);
                                    if ( ((LA368_31>=TIMEPERIOD_DAY && LA368_31<=TIMEPERIOD_DAYS)) ) {
                                        alt368=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA368_32 = input.LA(3);
                                    if ( ((LA368_32>=TIMEPERIOD_DAY && LA368_32<=TIMEPERIOD_DAYS)) ) {
                                        alt368=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA368_33 = input.LA(3);
                                    if ( ((LA368_33>=TIMEPERIOD_DAY && LA368_33<=TIMEPERIOD_DAYS)) ) {
                                        alt368=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA368_3 = input.LA(2);
                            if ( ((LA368_3>=TIMEPERIOD_DAY && LA368_3<=TIMEPERIOD_DAYS)) ) {
                                alt368=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA368_4 = input.LA(2);
                            if ( ((LA368_4>=TIMEPERIOD_DAY && LA368_4<=TIMEPERIOD_DAYS)) ) {
                                alt368=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA368_5 = input.LA(2);
                            if ( ((LA368_5>=TIMEPERIOD_DAY && LA368_5<=TIMEPERIOD_DAYS)) ) {
                                alt368=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA368_6 = input.LA(2);
                            if ( ((LA368_6>=TIMEPERIOD_DAY && LA368_6<=TIMEPERIOD_DAYS)) ) {
                                alt368=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA368_7 = input.LA(2);
                            if ( ((LA368_7>=TIMEPERIOD_DAY && LA368_7<=TIMEPERIOD_DAYS)) ) {
                                alt368=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA368_8 = input.LA(2);
                            if ( ((LA368_8>=TIMEPERIOD_DAY && LA368_8<=TIMEPERIOD_DAYS)) ) {
                                alt368=1;
                            }
                            }
                            break;
                    }
                    switch (alt368) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod13746);
                            dayPart979=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart979.getTree());
                            }
                            break;
                    }
                    int alt369=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA369_26 = input.LA(3);
                                    if ( ((LA369_26>=TIMEPERIOD_HOUR && LA369_26<=TIMEPERIOD_HOURS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA369_27 = input.LA(3);
                                    if ( ((LA369_27>=TIMEPERIOD_HOUR && LA369_27<=TIMEPERIOD_HOURS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA369_28 = input.LA(3);
                                    if ( ((LA369_28>=TIMEPERIOD_HOUR && LA369_28<=TIMEPERIOD_HOURS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA369_29 = input.LA(3);
                                    if ( ((LA369_29>=TIMEPERIOD_HOUR && LA369_29<=TIMEPERIOD_HOURS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA369_30 = input.LA(3);
                                    if ( ((LA369_30>=TIMEPERIOD_HOUR && LA369_30<=TIMEPERIOD_HOURS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA369_31 = input.LA(3);
                                    if ( ((LA369_31>=TIMEPERIOD_HOUR && LA369_31<=TIMEPERIOD_HOURS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA369_32 = input.LA(3);
                                    if ( ((LA369_32>=TIMEPERIOD_HOUR && LA369_32<=TIMEPERIOD_HOURS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA369_33 = input.LA(3);
                                    if ( ((LA369_33>=TIMEPERIOD_HOUR && LA369_33<=TIMEPERIOD_HOURS)) ) {
                                        alt369=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA369_3 = input.LA(2);
                            if ( ((LA369_3>=TIMEPERIOD_HOUR && LA369_3<=TIMEPERIOD_HOURS)) ) {
                                alt369=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA369_4 = input.LA(2);
                            if ( ((LA369_4>=TIMEPERIOD_HOUR && LA369_4<=TIMEPERIOD_HOURS)) ) {
                                alt369=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA369_5 = input.LA(2);
                            if ( ((LA369_5>=TIMEPERIOD_HOUR && LA369_5<=TIMEPERIOD_HOURS)) ) {
                                alt369=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA369_6 = input.LA(2);
                            if ( ((LA369_6>=TIMEPERIOD_HOUR && LA369_6<=TIMEPERIOD_HOURS)) ) {
                                alt369=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA369_7 = input.LA(2);
                            if ( ((LA369_7>=TIMEPERIOD_HOUR && LA369_7<=TIMEPERIOD_HOURS)) ) {
                                alt369=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA369_8 = input.LA(2);
                            if ( ((LA369_8>=TIMEPERIOD_HOUR && LA369_8<=TIMEPERIOD_HOURS)) ) {
                                alt369=1;
                            }
                            }
                            break;
                    }
                    switch (alt369) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13749);
                            hourPart980=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart980.getTree());
                            }
                            break;
                    }
                    int alt370=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA370_26 = input.LA(3);
                                    if ( (LA370_26==MIN||(LA370_26>=TIMEPERIOD_MINUTE && LA370_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA370_27 = input.LA(3);
                                    if ( (LA370_27==MIN||(LA370_27>=TIMEPERIOD_MINUTE && LA370_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA370_28 = input.LA(3);
                                    if ( (LA370_28==MIN||(LA370_28>=TIMEPERIOD_MINUTE && LA370_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA370_29 = input.LA(3);
                                    if ( (LA370_29==MIN||(LA370_29>=TIMEPERIOD_MINUTE && LA370_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA370_30 = input.LA(3);
                                    if ( (LA370_30==MIN||(LA370_30>=TIMEPERIOD_MINUTE && LA370_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA370_31 = input.LA(3);
                                    if ( (LA370_31==MIN||(LA370_31>=TIMEPERIOD_MINUTE && LA370_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA370_32 = input.LA(3);
                                    if ( (LA370_32==MIN||(LA370_32>=TIMEPERIOD_MINUTE && LA370_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA370_33 = input.LA(3);
                                    if ( (LA370_33==MIN||(LA370_33>=TIMEPERIOD_MINUTE && LA370_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt370=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA370_3 = input.LA(2);
                            if ( (LA370_3==MIN||(LA370_3>=TIMEPERIOD_MINUTE && LA370_3<=TIMEPERIOD_MINUTES)) ) {
                                alt370=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA370_4 = input.LA(2);
                            if ( (LA370_4==MIN||(LA370_4>=TIMEPERIOD_MINUTE && LA370_4<=TIMEPERIOD_MINUTES)) ) {
                                alt370=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA370_5 = input.LA(2);
                            if ( (LA370_5==MIN||(LA370_5>=TIMEPERIOD_MINUTE && LA370_5<=TIMEPERIOD_MINUTES)) ) {
                                alt370=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA370_6 = input.LA(2);
                            if ( (LA370_6==MIN||(LA370_6>=TIMEPERIOD_MINUTE && LA370_6<=TIMEPERIOD_MINUTES)) ) {
                                alt370=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA370_7 = input.LA(2);
                            if ( (LA370_7==MIN||(LA370_7>=TIMEPERIOD_MINUTE && LA370_7<=TIMEPERIOD_MINUTES)) ) {
                                alt370=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA370_8 = input.LA(2);
                            if ( (LA370_8==MIN||(LA370_8>=TIMEPERIOD_MINUTE && LA370_8<=TIMEPERIOD_MINUTES)) ) {
                                alt370=1;
                            }
                            }
                            break;
                    }
                    switch (alt370) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13752);
                            minutePart981=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart981.getTree());
                            }
                            break;
                    }
                    int alt371=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA371_26 = input.LA(3);
                                    if ( ((LA371_26>=TIMEPERIOD_SEC && LA371_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA371_27 = input.LA(3);
                                    if ( ((LA371_27>=TIMEPERIOD_SEC && LA371_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA371_28 = input.LA(3);
                                    if ( ((LA371_28>=TIMEPERIOD_SEC && LA371_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA371_29 = input.LA(3);
                                    if ( ((LA371_29>=TIMEPERIOD_SEC && LA371_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA371_30 = input.LA(3);
                                    if ( ((LA371_30>=TIMEPERIOD_SEC && LA371_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA371_31 = input.LA(3);
                                    if ( ((LA371_31>=TIMEPERIOD_SEC && LA371_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA371_32 = input.LA(3);
                                    if ( ((LA371_32>=TIMEPERIOD_SEC && LA371_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA371_33 = input.LA(3);
                                    if ( ((LA371_33>=TIMEPERIOD_SEC && LA371_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt371=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA371_3 = input.LA(2);
                            if ( ((LA371_3>=TIMEPERIOD_SEC && LA371_3<=TIMEPERIOD_SECONDS)) ) {
                                alt371=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA371_4 = input.LA(2);
                            if ( ((LA371_4>=TIMEPERIOD_SEC && LA371_4<=TIMEPERIOD_SECONDS)) ) {
                                alt371=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA371_5 = input.LA(2);
                            if ( ((LA371_5>=TIMEPERIOD_SEC && LA371_5<=TIMEPERIOD_SECONDS)) ) {
                                alt371=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA371_6 = input.LA(2);
                            if ( ((LA371_6>=TIMEPERIOD_SEC && LA371_6<=TIMEPERIOD_SECONDS)) ) {
                                alt371=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA371_7 = input.LA(2);
                            if ( ((LA371_7>=TIMEPERIOD_SEC && LA371_7<=TIMEPERIOD_SECONDS)) ) {
                                alt371=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA371_8 = input.LA(2);
                            if ( ((LA371_8>=TIMEPERIOD_SEC && LA371_8<=TIMEPERIOD_SECONDS)) ) {
                                alt371=1;
                            }
                            }
                            break;
                    }
                    switch (alt371) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13755);
                            secondPart982=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart982.getTree());
                            }
                            break;
                    }
                    int alt372=2;
                    int LA372_0 = input.LA(1);
                    if ( (LA372_0==NUM_DOUBLE||LA372_0==IDENT||(LA372_0>=PLUS && LA372_0<=QUESTION)||LA372_0==MINUS||LA372_0==NUM_INT||(LA372_0>=NUM_LONG && LA372_0<=NUM_FLOAT)) ) {
                        alt372=1;
                    }
                    switch (alt372) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13758);
                            millisecondPart983=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart983.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod13764);
                    dayPart984=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart984.getTree());
                    int alt373=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA373_26 = input.LA(3);
                                    if ( ((LA373_26>=TIMEPERIOD_HOUR && LA373_26<=TIMEPERIOD_HOURS)) ) {
                                        alt373=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA373_27 = input.LA(3);
                                    if ( ((LA373_27>=TIMEPERIOD_HOUR && LA373_27<=TIMEPERIOD_HOURS)) ) {
                                        alt373=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA373_28 = input.LA(3);
                                    if ( ((LA373_28>=TIMEPERIOD_HOUR && LA373_28<=TIMEPERIOD_HOURS)) ) {
                                        alt373=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA373_29 = input.LA(3);
                                    if ( ((LA373_29>=TIMEPERIOD_HOUR && LA373_29<=TIMEPERIOD_HOURS)) ) {
                                        alt373=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA373_30 = input.LA(3);
                                    if ( ((LA373_30>=TIMEPERIOD_HOUR && LA373_30<=TIMEPERIOD_HOURS)) ) {
                                        alt373=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA373_31 = input.LA(3);
                                    if ( ((LA373_31>=TIMEPERIOD_HOUR && LA373_31<=TIMEPERIOD_HOURS)) ) {
                                        alt373=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA373_32 = input.LA(3);
                                    if ( ((LA373_32>=TIMEPERIOD_HOUR && LA373_32<=TIMEPERIOD_HOURS)) ) {
                                        alt373=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA373_33 = input.LA(3);
                                    if ( ((LA373_33>=TIMEPERIOD_HOUR && LA373_33<=TIMEPERIOD_HOURS)) ) {
                                        alt373=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA373_3 = input.LA(2);
                            if ( ((LA373_3>=TIMEPERIOD_HOUR && LA373_3<=TIMEPERIOD_HOURS)) ) {
                                alt373=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA373_4 = input.LA(2);
                            if ( ((LA373_4>=TIMEPERIOD_HOUR && LA373_4<=TIMEPERIOD_HOURS)) ) {
                                alt373=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA373_5 = input.LA(2);
                            if ( ((LA373_5>=TIMEPERIOD_HOUR && LA373_5<=TIMEPERIOD_HOURS)) ) {
                                alt373=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA373_6 = input.LA(2);
                            if ( ((LA373_6>=TIMEPERIOD_HOUR && LA373_6<=TIMEPERIOD_HOURS)) ) {
                                alt373=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA373_7 = input.LA(2);
                            if ( ((LA373_7>=TIMEPERIOD_HOUR && LA373_7<=TIMEPERIOD_HOURS)) ) {
                                alt373=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA373_8 = input.LA(2);
                            if ( ((LA373_8>=TIMEPERIOD_HOUR && LA373_8<=TIMEPERIOD_HOURS)) ) {
                                alt373=1;
                            }
                            }
                            break;
                    }
                    switch (alt373) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13766);
                            hourPart985=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart985.getTree());
                            }
                            break;
                    }
                    int alt374=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA374_26 = input.LA(3);
                                    if ( (LA374_26==MIN||(LA374_26>=TIMEPERIOD_MINUTE && LA374_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA374_27 = input.LA(3);
                                    if ( (LA374_27==MIN||(LA374_27>=TIMEPERIOD_MINUTE && LA374_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA374_28 = input.LA(3);
                                    if ( (LA374_28==MIN||(LA374_28>=TIMEPERIOD_MINUTE && LA374_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA374_29 = input.LA(3);
                                    if ( (LA374_29==MIN||(LA374_29>=TIMEPERIOD_MINUTE && LA374_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA374_30 = input.LA(3);
                                    if ( (LA374_30==MIN||(LA374_30>=TIMEPERIOD_MINUTE && LA374_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA374_31 = input.LA(3);
                                    if ( (LA374_31==MIN||(LA374_31>=TIMEPERIOD_MINUTE && LA374_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA374_32 = input.LA(3);
                                    if ( (LA374_32==MIN||(LA374_32>=TIMEPERIOD_MINUTE && LA374_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA374_33 = input.LA(3);
                                    if ( (LA374_33==MIN||(LA374_33>=TIMEPERIOD_MINUTE && LA374_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt374=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA374_3 = input.LA(2);
                            if ( (LA374_3==MIN||(LA374_3>=TIMEPERIOD_MINUTE && LA374_3<=TIMEPERIOD_MINUTES)) ) {
                                alt374=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA374_4 = input.LA(2);
                            if ( (LA374_4==MIN||(LA374_4>=TIMEPERIOD_MINUTE && LA374_4<=TIMEPERIOD_MINUTES)) ) {
                                alt374=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA374_5 = input.LA(2);
                            if ( (LA374_5==MIN||(LA374_5>=TIMEPERIOD_MINUTE && LA374_5<=TIMEPERIOD_MINUTES)) ) {
                                alt374=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA374_6 = input.LA(2);
                            if ( (LA374_6==MIN||(LA374_6>=TIMEPERIOD_MINUTE && LA374_6<=TIMEPERIOD_MINUTES)) ) {
                                alt374=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA374_7 = input.LA(2);
                            if ( (LA374_7==MIN||(LA374_7>=TIMEPERIOD_MINUTE && LA374_7<=TIMEPERIOD_MINUTES)) ) {
                                alt374=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA374_8 = input.LA(2);
                            if ( (LA374_8==MIN||(LA374_8>=TIMEPERIOD_MINUTE && LA374_8<=TIMEPERIOD_MINUTES)) ) {
                                alt374=1;
                            }
                            }
                            break;
                    }
                    switch (alt374) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13769);
                            minutePart986=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart986.getTree());
                            }
                            break;
                    }
                    int alt375=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA375_26 = input.LA(3);
                                    if ( ((LA375_26>=TIMEPERIOD_SEC && LA375_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA375_27 = input.LA(3);
                                    if ( ((LA375_27>=TIMEPERIOD_SEC && LA375_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA375_28 = input.LA(3);
                                    if ( ((LA375_28>=TIMEPERIOD_SEC && LA375_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA375_29 = input.LA(3);
                                    if ( ((LA375_29>=TIMEPERIOD_SEC && LA375_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA375_30 = input.LA(3);
                                    if ( ((LA375_30>=TIMEPERIOD_SEC && LA375_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA375_31 = input.LA(3);
                                    if ( ((LA375_31>=TIMEPERIOD_SEC && LA375_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA375_32 = input.LA(3);
                                    if ( ((LA375_32>=TIMEPERIOD_SEC && LA375_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA375_33 = input.LA(3);
                                    if ( ((LA375_33>=TIMEPERIOD_SEC && LA375_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt375=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA375_3 = input.LA(2);
                            if ( ((LA375_3>=TIMEPERIOD_SEC && LA375_3<=TIMEPERIOD_SECONDS)) ) {
                                alt375=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA375_4 = input.LA(2);
                            if ( ((LA375_4>=TIMEPERIOD_SEC && LA375_4<=TIMEPERIOD_SECONDS)) ) {
                                alt375=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA375_5 = input.LA(2);
                            if ( ((LA375_5>=TIMEPERIOD_SEC && LA375_5<=TIMEPERIOD_SECONDS)) ) {
                                alt375=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA375_6 = input.LA(2);
                            if ( ((LA375_6>=TIMEPERIOD_SEC && LA375_6<=TIMEPERIOD_SECONDS)) ) {
                                alt375=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA375_7 = input.LA(2);
                            if ( ((LA375_7>=TIMEPERIOD_SEC && LA375_7<=TIMEPERIOD_SECONDS)) ) {
                                alt375=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA375_8 = input.LA(2);
                            if ( ((LA375_8>=TIMEPERIOD_SEC && LA375_8<=TIMEPERIOD_SECONDS)) ) {
                                alt375=1;
                            }
                            }
                            break;
                    }
                    switch (alt375) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13772);
                            secondPart987=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart987.getTree());
                            }
                            break;
                    }
                    int alt376=2;
                    int LA376_0 = input.LA(1);
                    if ( (LA376_0==NUM_DOUBLE||LA376_0==IDENT||(LA376_0>=PLUS && LA376_0<=QUESTION)||LA376_0==MINUS||LA376_0==NUM_INT||(LA376_0>=NUM_LONG && LA376_0<=NUM_FLOAT)) ) {
                        alt376=1;
                    }
                    switch (alt376) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13775);
                            millisecondPart988=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart988.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod13781);
                    hourPart989=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart989.getTree());
                    int alt377=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA377_26 = input.LA(3);
                                    if ( (LA377_26==MIN||(LA377_26>=TIMEPERIOD_MINUTE && LA377_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt377=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA377_27 = input.LA(3);
                                    if ( (LA377_27==MIN||(LA377_27>=TIMEPERIOD_MINUTE && LA377_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt377=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA377_28 = input.LA(3);
                                    if ( (LA377_28==MIN||(LA377_28>=TIMEPERIOD_MINUTE && LA377_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt377=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA377_29 = input.LA(3);
                                    if ( (LA377_29==MIN||(LA377_29>=TIMEPERIOD_MINUTE && LA377_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt377=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA377_30 = input.LA(3);
                                    if ( (LA377_30==MIN||(LA377_30>=TIMEPERIOD_MINUTE && LA377_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt377=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA377_31 = input.LA(3);
                                    if ( (LA377_31==MIN||(LA377_31>=TIMEPERIOD_MINUTE && LA377_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt377=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA377_32 = input.LA(3);
                                    if ( (LA377_32==MIN||(LA377_32>=TIMEPERIOD_MINUTE && LA377_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt377=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA377_33 = input.LA(3);
                                    if ( (LA377_33==MIN||(LA377_33>=TIMEPERIOD_MINUTE && LA377_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt377=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA377_3 = input.LA(2);
                            if ( (LA377_3==MIN||(LA377_3>=TIMEPERIOD_MINUTE && LA377_3<=TIMEPERIOD_MINUTES)) ) {
                                alt377=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA377_4 = input.LA(2);
                            if ( (LA377_4==MIN||(LA377_4>=TIMEPERIOD_MINUTE && LA377_4<=TIMEPERIOD_MINUTES)) ) {
                                alt377=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA377_5 = input.LA(2);
                            if ( (LA377_5==MIN||(LA377_5>=TIMEPERIOD_MINUTE && LA377_5<=TIMEPERIOD_MINUTES)) ) {
                                alt377=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA377_6 = input.LA(2);
                            if ( (LA377_6==MIN||(LA377_6>=TIMEPERIOD_MINUTE && LA377_6<=TIMEPERIOD_MINUTES)) ) {
                                alt377=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA377_7 = input.LA(2);
                            if ( (LA377_7==MIN||(LA377_7>=TIMEPERIOD_MINUTE && LA377_7<=TIMEPERIOD_MINUTES)) ) {
                                alt377=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA377_8 = input.LA(2);
                            if ( (LA377_8==MIN||(LA377_8>=TIMEPERIOD_MINUTE && LA377_8<=TIMEPERIOD_MINUTES)) ) {
                                alt377=1;
                            }
                            }
                            break;
                    }
                    switch (alt377) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13783);
                            minutePart990=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart990.getTree());
                            }
                            break;
                    }
                    int alt378=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA378_26 = input.LA(3);
                                    if ( ((LA378_26>=TIMEPERIOD_SEC && LA378_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA378_27 = input.LA(3);
                                    if ( ((LA378_27>=TIMEPERIOD_SEC && LA378_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA378_28 = input.LA(3);
                                    if ( ((LA378_28>=TIMEPERIOD_SEC && LA378_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA378_29 = input.LA(3);
                                    if ( ((LA378_29>=TIMEPERIOD_SEC && LA378_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA378_30 = input.LA(3);
                                    if ( ((LA378_30>=TIMEPERIOD_SEC && LA378_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA378_31 = input.LA(3);
                                    if ( ((LA378_31>=TIMEPERIOD_SEC && LA378_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA378_32 = input.LA(3);
                                    if ( ((LA378_32>=TIMEPERIOD_SEC && LA378_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA378_33 = input.LA(3);
                                    if ( ((LA378_33>=TIMEPERIOD_SEC && LA378_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt378=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA378_3 = input.LA(2);
                            if ( ((LA378_3>=TIMEPERIOD_SEC && LA378_3<=TIMEPERIOD_SECONDS)) ) {
                                alt378=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA378_4 = input.LA(2);
                            if ( ((LA378_4>=TIMEPERIOD_SEC && LA378_4<=TIMEPERIOD_SECONDS)) ) {
                                alt378=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA378_5 = input.LA(2);
                            if ( ((LA378_5>=TIMEPERIOD_SEC && LA378_5<=TIMEPERIOD_SECONDS)) ) {
                                alt378=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA378_6 = input.LA(2);
                            if ( ((LA378_6>=TIMEPERIOD_SEC && LA378_6<=TIMEPERIOD_SECONDS)) ) {
                                alt378=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA378_7 = input.LA(2);
                            if ( ((LA378_7>=TIMEPERIOD_SEC && LA378_7<=TIMEPERIOD_SECONDS)) ) {
                                alt378=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA378_8 = input.LA(2);
                            if ( ((LA378_8>=TIMEPERIOD_SEC && LA378_8<=TIMEPERIOD_SECONDS)) ) {
                                alt378=1;
                            }
                            }
                            break;
                    }
                    switch (alt378) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13786);
                            secondPart991=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart991.getTree());
                            }
                            break;
                    }
                    int alt379=2;
                    int LA379_0 = input.LA(1);
                    if ( (LA379_0==NUM_DOUBLE||LA379_0==IDENT||(LA379_0>=PLUS && LA379_0<=QUESTION)||LA379_0==MINUS||LA379_0==NUM_INT||(LA379_0>=NUM_LONG && LA379_0<=NUM_FLOAT)) ) {
                        alt379=1;
                    }
                    switch (alt379) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13789);
                            millisecondPart992=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart992.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod13795);
                    minutePart993=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart993.getTree());
                    int alt380=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA380_26 = input.LA(3);
                                    if ( ((LA380_26>=TIMEPERIOD_SEC && LA380_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA380_27 = input.LA(3);
                                    if ( ((LA380_27>=TIMEPERIOD_SEC && LA380_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA380_28 = input.LA(3);
                                    if ( ((LA380_28>=TIMEPERIOD_SEC && LA380_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA380_29 = input.LA(3);
                                    if ( ((LA380_29>=TIMEPERIOD_SEC && LA380_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA380_30 = input.LA(3);
                                    if ( ((LA380_30>=TIMEPERIOD_SEC && LA380_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA380_31 = input.LA(3);
                                    if ( ((LA380_31>=TIMEPERIOD_SEC && LA380_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA380_32 = input.LA(3);
                                    if ( ((LA380_32>=TIMEPERIOD_SEC && LA380_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA380_33 = input.LA(3);
                                    if ( ((LA380_33>=TIMEPERIOD_SEC && LA380_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt380=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA380_3 = input.LA(2);
                            if ( ((LA380_3>=TIMEPERIOD_SEC && LA380_3<=TIMEPERIOD_SECONDS)) ) {
                                alt380=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA380_4 = input.LA(2);
                            if ( ((LA380_4>=TIMEPERIOD_SEC && LA380_4<=TIMEPERIOD_SECONDS)) ) {
                                alt380=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA380_5 = input.LA(2);
                            if ( ((LA380_5>=TIMEPERIOD_SEC && LA380_5<=TIMEPERIOD_SECONDS)) ) {
                                alt380=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA380_6 = input.LA(2);
                            if ( ((LA380_6>=TIMEPERIOD_SEC && LA380_6<=TIMEPERIOD_SECONDS)) ) {
                                alt380=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA380_7 = input.LA(2);
                            if ( ((LA380_7>=TIMEPERIOD_SEC && LA380_7<=TIMEPERIOD_SECONDS)) ) {
                                alt380=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA380_8 = input.LA(2);
                            if ( ((LA380_8>=TIMEPERIOD_SEC && LA380_8<=TIMEPERIOD_SECONDS)) ) {
                                alt380=1;
                            }
                            }
                            break;
                    }
                    switch (alt380) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13797);
                            secondPart994=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart994.getTree());
                            }
                            break;
                    }
                    int alt381=2;
                    int LA381_0 = input.LA(1);
                    if ( (LA381_0==NUM_DOUBLE||LA381_0==IDENT||(LA381_0>=PLUS && LA381_0<=QUESTION)||LA381_0==MINUS||LA381_0==NUM_INT||(LA381_0>=NUM_LONG && LA381_0<=NUM_FLOAT)) ) {
                        alt381=1;
                    }
                    switch (alt381) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13800);
                            millisecondPart995=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart995.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod13806);
                    secondPart996=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart996.getTree());
                    int alt382=2;
                    int LA382_0 = input.LA(1);
                    if ( (LA382_0==NUM_DOUBLE||LA382_0==IDENT||(LA382_0>=PLUS && LA382_0<=QUESTION)||LA382_0==MINUS||LA382_0==NUM_INT||(LA382_0>=NUM_LONG && LA382_0<=NUM_FLOAT)) ) {
                        alt382=1;
                    }
                    switch (alt382) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13808);
                            millisecondPart997=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart997.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod13814);
                    millisecondPart998=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart998.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_yearPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_yearPart.nextTree());
                }
                stream_yearPart.reset();
                if ( stream_monthPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_monthPart.nextTree());
                }
                stream_monthPart.reset();
                if ( stream_weekPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_weekPart.nextTree());
                }
                stream_weekPart.reset();
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class yearPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.yearPart_return yearPart() throws RecognitionException {
        EsperEPL2GrammarParser.yearPart_return retval = new EsperEPL2GrammarParser.yearPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_YEARS1001=null;
        Token TIMEPERIOD_YEAR1002=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant999 = null;
        EsperEPL2GrammarParser.substitution_return substitution1000 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_YEARS1001_tree=null;
        CommonTree TIMEPERIOD_YEAR1002_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEARS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEARS");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEAR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEAR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt384=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt384=1;
                }
                break;
            case IDENT:
                {
                alt384=2;
                }
                break;
            case QUESTION:
                {
                alt384=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 384, 0, input);
                throw nvae;
            }
            switch (alt384) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_yearPart13861);
                    numberconstant999=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant999.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_yearPart13865); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_yearPart13867);
                    substitution1000=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1000.getTree());
                    }
                    break;
            }
            int alt385=2;
            int LA385_0 = input.LA(1);
            if ( (LA385_0==TIMEPERIOD_YEARS) ) {
                alt385=1;
            }
            else if ( (LA385_0==TIMEPERIOD_YEAR) ) {
                alt385=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 385, 0, input);
                throw nvae;
            }
            switch (alt385) {
                case 1 :
                    {
                    TIMEPERIOD_YEARS1001=(Token)match(input,TIMEPERIOD_YEARS,FOLLOW_TIMEPERIOD_YEARS_in_yearPart13871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEARS.add(TIMEPERIOD_YEARS1001);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_YEAR1002=(Token)match(input,TIMEPERIOD_YEAR,FOLLOW_TIMEPERIOD_YEAR_in_yearPart13875); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEAR.add(TIMEPERIOD_YEAR1002);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class monthPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.monthPart_return monthPart() throws RecognitionException {
        EsperEPL2GrammarParser.monthPart_return retval = new EsperEPL2GrammarParser.monthPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MONTHS1005=null;
        Token TIMEPERIOD_MONTH1006=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1003 = null;
        EsperEPL2GrammarParser.substitution_return substitution1004 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MONTHS1005_tree=null;
        CommonTree TIMEPERIOD_MONTH1006_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTH=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTH");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTHS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTHS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt386=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt386=1;
                }
                break;
            case IDENT:
                {
                alt386=2;
                }
                break;
            case QUESTION:
                {
                alt386=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 386, 0, input);
                throw nvae;
            }
            switch (alt386) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_monthPart13923);
                    numberconstant1003=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1003.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_monthPart13927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_monthPart13929);
                    substitution1004=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1004.getTree());
                    }
                    break;
            }
            int alt387=2;
            int LA387_0 = input.LA(1);
            if ( (LA387_0==TIMEPERIOD_MONTHS) ) {
                alt387=1;
            }
            else if ( (LA387_0==TIMEPERIOD_MONTH) ) {
                alt387=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 387, 0, input);
                throw nvae;
            }
            switch (alt387) {
                case 1 :
                    {
                    TIMEPERIOD_MONTHS1005=(Token)match(input,TIMEPERIOD_MONTHS,FOLLOW_TIMEPERIOD_MONTHS_in_monthPart13933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTHS.add(TIMEPERIOD_MONTHS1005);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MONTH1006=(Token)match(input,TIMEPERIOD_MONTH,FOLLOW_TIMEPERIOD_MONTH_in_monthPart13937); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTH.add(TIMEPERIOD_MONTH1006);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekPart_return weekPart() throws RecognitionException {
        EsperEPL2GrammarParser.weekPart_return retval = new EsperEPL2GrammarParser.weekPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_WEEKS1009=null;
        Token TIMEPERIOD_WEEK1010=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1007 = null;
        EsperEPL2GrammarParser.substitution_return substitution1008 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_WEEKS1009_tree=null;
        CommonTree TIMEPERIOD_WEEK1010_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEK=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEK");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEKS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEKS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt388=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt388=1;
                }
                break;
            case IDENT:
                {
                alt388=2;
                }
                break;
            case QUESTION:
                {
                alt388=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 388, 0, input);
                throw nvae;
            }
            switch (alt388) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_weekPart13985);
                    numberconstant1007=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1007.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekPart13989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekPart13991);
                    substitution1008=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1008.getTree());
                    }
                    break;
            }
            int alt389=2;
            int LA389_0 = input.LA(1);
            if ( (LA389_0==TIMEPERIOD_WEEKS) ) {
                alt389=1;
            }
            else if ( (LA389_0==TIMEPERIOD_WEEK) ) {
                alt389=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 389, 0, input);
                throw nvae;
            }
            switch (alt389) {
                case 1 :
                    {
                    TIMEPERIOD_WEEKS1009=(Token)match(input,TIMEPERIOD_WEEKS,FOLLOW_TIMEPERIOD_WEEKS_in_weekPart13995); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEKS.add(TIMEPERIOD_WEEKS1009);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_WEEK1010=(Token)match(input,TIMEPERIOD_WEEK,FOLLOW_TIMEPERIOD_WEEK_in_weekPart13999); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEK.add(TIMEPERIOD_WEEK1010);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS1013=null;
        Token TIMEPERIOD_DAY1014=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1011 = null;
        EsperEPL2GrammarParser.substitution_return substitution1012 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS1013_tree=null;
        CommonTree TIMEPERIOD_DAY1014_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt390=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt390=1;
                }
                break;
            case IDENT:
                {
                alt390=2;
                }
                break;
            case QUESTION:
                {
                alt390=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 390, 0, input);
                throw nvae;
            }
            switch (alt390) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_dayPart14047);
                    numberconstant1011=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1011.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart14051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart14053);
                    substitution1012=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1012.getTree());
                    }
                    break;
            }
            int alt391=2;
            int LA391_0 = input.LA(1);
            if ( (LA391_0==TIMEPERIOD_DAYS) ) {
                alt391=1;
            }
            else if ( (LA391_0==TIMEPERIOD_DAY) ) {
                alt391=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 391, 0, input);
                throw nvae;
            }
            switch (alt391) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS1013=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart14057); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS1013);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY1014=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart14061); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY1014);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS1017=null;
        Token TIMEPERIOD_HOUR1018=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1015 = null;
        EsperEPL2GrammarParser.substitution_return substitution1016 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS1017_tree=null;
        CommonTree TIMEPERIOD_HOUR1018_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt392=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt392=1;
                }
                break;
            case IDENT:
                {
                alt392=2;
                }
                break;
            case QUESTION:
                {
                alt392=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 392, 0, input);
                throw nvae;
            }
            switch (alt392) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_hourPart14110);
                    numberconstant1015=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1015.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart14114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart14116);
                    substitution1016=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1016.getTree());
                    }
                    break;
            }
            int alt393=2;
            int LA393_0 = input.LA(1);
            if ( (LA393_0==TIMEPERIOD_HOURS) ) {
                alt393=1;
            }
            else if ( (LA393_0==TIMEPERIOD_HOUR) ) {
                alt393=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 393, 0, input);
                throw nvae;
            }
            switch (alt393) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS1017=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart14120); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS1017);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR1018=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart14124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR1018);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES1021=null;
        Token TIMEPERIOD_MINUTE1022=null;
        Token MIN1023=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1019 = null;
        EsperEPL2GrammarParser.substitution_return substitution1020 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES1021_tree=null;
        CommonTree TIMEPERIOD_MINUTE1022_tree=null;
        CommonTree MIN1023_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt394=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt394=1;
                }
                break;
            case IDENT:
                {
                alt394=2;
                }
                break;
            case QUESTION:
                {
                alt394=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 394, 0, input);
                throw nvae;
            }
            switch (alt394) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_minutePart14173);
                    numberconstant1019=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1019.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart14177); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart14179);
                    substitution1020=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1020.getTree());
                    }
                    break;
            }
            int alt395=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt395=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt395=2;
                }
                break;
            case MIN:
                {
                alt395=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 395, 0, input);
                throw nvae;
            }
            switch (alt395) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES1021=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart14183); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES1021);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE1022=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart14187); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE1022);
                    }
                    break;
                case 3 :
                    {
                    MIN1023=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart14191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN1023);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS1026=null;
        Token TIMEPERIOD_SECOND1027=null;
        Token TIMEPERIOD_SEC1028=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1024 = null;
        EsperEPL2GrammarParser.substitution_return substitution1025 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS1026_tree=null;
        CommonTree TIMEPERIOD_SECOND1027_tree=null;
        CommonTree TIMEPERIOD_SEC1028_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt396=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt396=1;
                }
                break;
            case IDENT:
                {
                alt396=2;
                }
                break;
            case QUESTION:
                {
                alt396=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 396, 0, input);
                throw nvae;
            }
            switch (alt396) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_secondPart14241);
                    numberconstant1024=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1024.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart14245); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart14247);
                    substitution1025=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1025.getTree());
                    }
                    break;
            }
            int alt397=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt397=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt397=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt397=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 397, 0, input);
                throw nvae;
            }
            switch (alt397) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS1026=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart14251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS1026);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND1027=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart14255); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND1027);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC1028=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart14259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC1028);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS1031=null;
        Token TIMEPERIOD_MILLISECOND1032=null;
        Token TIMEPERIOD_MILLISEC1033=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1029 = null;
        EsperEPL2GrammarParser.substitution_return substitution1030 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS1031_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND1032_tree=null;
        CommonTree TIMEPERIOD_MILLISEC1033_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt398=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt398=1;
                }
                break;
            case IDENT:
                {
                alt398=2;
                }
                break;
            case QUESTION:
                {
                alt398=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 398, 0, input);
                throw nvae;
            }
            switch (alt398) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_millisecondPart14309);
                    numberconstant1029=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1029.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart14313); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart14315);
                    substitution1030=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1030.getTree());
                    }
                    break;
            }
            int alt399=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt399=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt399=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt399=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 399, 0, input);
                throw nvae;
            }
            switch (alt399) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS1031=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart14319); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS1031);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND1032=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart14323); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND1032);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC1033=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart14327); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC1033);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt400=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt400=1;
                }
                break;
            case NUM_LONG:
                {
                alt400=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt400=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt400=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 400, 0, input);
                throw nvae;
            }
            switch (alt400) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number14382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number14399); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number14416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number14433); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution14454); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1034 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant1035 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt401=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt401=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt401=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt401=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt401=4;
                }
                break;
            case VALUE_NULL:
                {
                alt401=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 401, 0, input);
                throw nvae;
            }
            switch (alt401) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant14473);
                    numberconstant1034=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant1034.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant14480);
                    stringconstant1035=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant1035.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant14493); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant14513); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant14533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number1036 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt402=3;
            int LA402_0 = input.LA(1);
            if ( (LA402_0==MINUS) ) {
                alt402=1;
            }
            else if ( (LA402_0==PLUS) ) {
                alt402=2;
            }
            switch (alt402) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant14555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant14561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant14565);
            number1036=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number1036.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number1036!=null?((CommonTree)number1036.tree):null).getType(), "-" + (number1036!=null?input.toString(number1036.start,number1036.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt403=2;
            int LA403_0 = input.LA(1);
            if ( (LA403_0==STRING_LITERAL) ) {
                alt403=1;
            }
            else if ( (LA403_0==QUOTED_STRING_LITERAL) ) {
                alt403=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 403, 0, input);
                throw nvae;
            }
            switch (alt403) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant14594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant14610); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar5563);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6963);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar8996);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar10381);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar10443);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar11906);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar12387);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar12398);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar12409);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar12420);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar12432);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar12443);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar12454);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar12467);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar12492);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA229 dfa229 = new DFA229(this);
    static final String DFA229_eotS =
        "\u0c2f\uffff";
    static final String DFA229_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0bfa\uffff";
    static final String DFA229_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\17\uffff\1\u0136\u0081\uffff"+
        "\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff"+
        "\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff"+
        "\1\5\74\uffff\1\u0143\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74"+
        "\uffff\1\5\74\uffff\1\5\2\6\112\uffff\2\6\111\uffff\2\6\111\uffff"+
        "\2\6\107\uffff\2\6\111\uffff\2\6\111\uffff\2\6\111\uffff\2\6\111"+
        "\uffff\2\6\111\uffff\2\6\107\uffff\2\6\112\uffff\2\6\107\uffff\2"+
        "\6\107\uffff\2\6\107\uffff\2\6\172\uffff\1\0\55\uffff\1\0\5\uffff"+
        "\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0\71\uffff\1\0\55\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff"+
        "\1\0\55\uffff\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\55\uffff\1\0\31\uffff\1\0\71\uffff\1\0\53\uffff\1\0\73\uffff"+
        "\1\0\53\uffff\1\0\5\uffff";
    static final String DFA229_maxS =
        "\2\u0159\13\uffff\1\u0159\3\uffff\1\u0156\2\uffff\2\u0156\2\uffff"+
        "\4\u0156\1\uffff\2\u0156\12\uffff\3\u0156\2\uffff\3\u0156\3\uffff"+
        "\1\u0156\17\uffff\1\u0136\u0081\uffff\1\u0159\74\uffff\1\u0159\74"+
        "\uffff\1\u0159\74\uffff\1\u0159\74\uffff\1\u0159\74\uffff\1\u0159"+
        "\74\uffff\1\u0159\74\uffff\1\u0159\74\uffff\1\u0159\74\uffff\1\u0159"+
        "\74\uffff\1\u0159\74\uffff\1\u0151\74\uffff\1\u0159\74\uffff\1\u0159"+
        "\74\uffff\1\u0159\74\uffff\1\u0159\74\uffff\1\u0157\2\u0150\112"+
        "\uffff\2\u0150\111\uffff\2\u0150\111\uffff\2\u0150\107\uffff\2\u0150"+
        "\111\uffff\2\u0150\111\uffff\2\u0150\111\uffff\2\u0150\111\uffff"+
        "\2\u0150\111\uffff\2\u0150\107\uffff\2\u0150\112\uffff\2\u0150\107"+
        "\uffff\2\u0150\107\uffff\2\u0150\107\uffff\2\u0150\172\uffff\1\0"+
        "\55\uffff\1\0\5\uffff\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0"+
        "\71\uffff\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0"+
        "\55\uffff\1\0\5\uffff\1\0\55\uffff\1\0\31\uffff\1\0\5\uffff\1\0"+
        "\31\uffff\1\0\31\uffff\1\0\55\uffff\1\0\31\uffff\1\0\71\uffff\1"+
        "\0\53\uffff\1\0\73\uffff\1\0\53\uffff\1\0\5\uffff";
    static final String DFA229_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\63\uffff\2\6\1\uffff\1\6"+
        "\1\7\1\12\4\uffff\1\1\57\uffff\1\10\1\4\u041b\uffff\112\6\2\uffff"+
        "\111\6\2\uffff\111\6\2\uffff\107\6\2\uffff\111\6\2\uffff\111\6\2"+
        "\uffff\111\6\2\uffff\111\6\2\uffff\111\6\2\uffff\107\6\2\uffff\110"+
        "\6\4\uffff\107\6\2\uffff\107\6\2\uffff\107\6\2\uffff\111\6\1\11"+
        "\60\6\1\uffff\55\6\1\uffff\5\6\1\uffff\55\6\1\uffff\31\6\1\uffff"+
        "\31\6\1\uffff\5\6\1\uffff\62\6\2\uffff\55\6\1\uffff\31\6\1\uffff"+
        "\31\6\1\uffff\5\6\1\uffff\55\6\1\uffff\5\6\1\uffff\55\6\1\uffff"+
        "\31\6\1\uffff\5\6\1\uffff\31\6\1\uffff\31\6\1\uffff\55\6\1\uffff"+
        "\31\6\1\uffff\5\6\1\uffff\62\6\2\uffff\53\6\1\uffff\5\6\1\uffff"+
        "\64\6\2\uffff\53\6\1\uffff\5\6";
    static final String DFA229_specialS =
        "\1\0\u00c5\uffff\1\1\74\uffff\1\2\74\uffff\1\3\74\uffff\1\4\74"+
        "\uffff\1\5\74\uffff\1\6\74\uffff\1\7\74\uffff\1\10\74\uffff\1\11"+
        "\74\uffff\1\12\74\uffff\1\13\74\uffff\1\14\74\uffff\1\15\74\uffff"+
        "\1\16\74\uffff\1\17\74\uffff\1\20\74\uffff\1\21\1\22\1\23\112\uffff"+
        "\1\24\1\25\111\uffff\1\26\1\27\111\uffff\1\30\1\31\107\uffff\1\32"+
        "\1\33\111\uffff\1\34\1\35\111\uffff\1\36\1\37\111\uffff\1\40\1\41"+
        "\111\uffff\1\42\1\43\111\uffff\1\44\1\45\107\uffff\1\46\1\47\112"+
        "\uffff\1\50\1\51\107\uffff\1\52\1\53\107\uffff\1\54\1\55\107\uffff"+
        "\1\56\1\57\172\uffff\1\60\55\uffff\1\61\5\uffff\1\62\55\uffff\1"+
        "\63\31\uffff\1\64\31\uffff\1\65\71\uffff\1\66\55\uffff\1\67\31\uffff"+
        "\1\70\31\uffff\1\71\5\uffff\1\72\55\uffff\1\73\5\uffff\1\74\55\uffff"+
        "\1\75\31\uffff\1\76\5\uffff\1\77\31\uffff\1\100\31\uffff\1\101\55"+
        "\uffff\1\102\31\uffff\1\103\71\uffff\1\104\53\uffff\1\105\73\uffff"+
        "\1\106\53\uffff\1\107\5\uffff}>";
    static final short[] DFA229_eot = DFA.unpackEncodedString(DFA229_eotS);
    static final short[] DFA229_eof = DFA.unpackEncodedString(DFA229_eofS);
    static final char[] DFA229_min = DFA.unpackEncodedStringToUnsignedChars(DFA229_minS);
    static final char[] DFA229_max = DFA.unpackEncodedStringToUnsignedChars(DFA229_maxS);
    static final short[] DFA229_accept = DFA.unpackEncodedString(DFA229_acceptS);
    static final short[] DFA229_special = DFA.unpackEncodedString(DFA229_specialS);
    static final short[][] DFA229_transition;
    static {
        int numStates = EsperEPL2GrammarParser_DFAS.DFA229_transitionS.length;
        DFA229_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA229_transition[i] = DFA.unpackEncodedString(EsperEPL2GrammarParser_DFAS.DFA229_transitionS[i]);
        }
    }
    class DFA229 extends DFA {
        public DFA229(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 229;
            this.eot = DFA229_eot;
            this.eof = DFA229_eof;
            this.min = DFA229_min;
            this.max = DFA229_max;
            this.accept = DFA229_accept;
            this.special = DFA229_special;
            this.transition = DFA229_transition;
        }
        public String getDescription() {
            return "1422:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR subSelectExpression ( libFunctionNoClass )+ ) -> subSelectExpression | existsSubSelectExpression | NEWKW LCURLY newAssign ( COMMA newAssign )* RCURLY -> ^( NEWKW ( newAssign )* ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 229, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA229_0 = input.LA(1);
                        int index229_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_0==MINUS) ) {s = 1;}
                        else if ( ((LA229_0>=BOOLEAN_TRUE && LA229_0<=VALUE_NULL)||LA229_0==NUM_DOUBLE||LA229_0==PLUS||(LA229_0>=STRING_LITERAL && LA229_0<=QUOTED_STRING_LITERAL)||LA229_0==NUM_INT||(LA229_0>=NUM_LONG && LA229_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA229_0==QUESTION) ) {s = 12;}
                        else if ( (LA229_0==LPAREN) ) {s = 13;}
                        else if ( (LA229_0==BETWEEN||LA229_0==ESCAPE||LA229_0==EVERY_EXPR||LA229_0==WHERE||(LA229_0>=MAX && LA229_0<=MIN)||LA229_0==OUTER||(LA229_0>=JOIN && LA229_0<=FULL)||LA229_0==EVENTS||(LA229_0>=UNIDIRECTIONAL && LA229_0<=METADATASQL)||(LA229_0>=WEEKDAY && LA229_0<=LW)||(LA229_0>=SNAPSHOT && LA229_0<=INDEX)||(LA229_0>=DEFINE && LA229_0<=AFTER)||LA229_0==WHILE||(LA229_0>=MERGE && LA229_0<=MATCHED)||LA229_0==CONTEXT||LA229_0==IDENT||LA229_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA229_0==COUNT) ) {s = 17;}
                        else if ( (LA229_0==SUM) ) {s = 20;}
                        else if ( (LA229_0==AVG) ) {s = 21;}
                        else if ( (LA229_0==COALESCE) ) {s = 24;}
                        else if ( (LA229_0==MEDIAN) ) {s = 25;}
                        else if ( (LA229_0==STDDEV) ) {s = 26;}
                        else if ( (LA229_0==AVEDEV) ) {s = 27;}
                        else if ( (LA229_0==FIRST) ) {s = 29;}
                        else if ( (LA229_0==LAST) ) {s = 30;}
                        else if ( (LA229_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA229_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA229_0==PRIOR) ) {s = 43;}
                        else if ( (LA229_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA229_0==TYPEOF) ) {s = 47;}
                        else if ( (LA229_0==CAST) ) {s = 48;}
                        else if ( (LA229_0==WINDOW) ) {s = 52;}
                        else if ( (LA229_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 66;}
                        else if ( (LA229_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 67;}
                        else if ( (LA229_0==EXISTS) ) {s = 68;}
                        else if ( (LA229_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 69;}
                        else if ( (LA229_0==LCURLY) ) {s = 70;}
                        else if ( (LA229_0==NEWKW) ) {s = 71;}
                        input.seek(index229_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA229_198 = input.LA(1);
                        int index229_198 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_198==STRING_LITERAL) ) {s = 1175;}
                        else if ( (LA229_198==QUOTED_STRING_LITERAL) ) {s = 1176;}
                        else if ( (LA229_198==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA229_198==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA229_198==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA229_198==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA229_198==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA229_198==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA229_198==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA229_198==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA229_198==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA229_198==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA229_198==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA229_198==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA229_198==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA229_198==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA229_198==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA229_198==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA229_198==AT) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA229_198==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA229_198==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA229_198==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA229_198==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA229_198==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA229_198==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA229_198==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA229_198==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA229_198==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA229_198==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA229_198==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA229_198==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA229_198==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA229_198==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA229_198==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA229_198==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA229_198==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA229_198==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA229_198==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA229_198==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA229_198==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA229_198==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA229_198==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA229_198==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA229_198==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA229_198==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA229_198==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA229_198==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA229_198==LW) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA229_198==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA229_198==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA229_198==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA229_198==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA229_198==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA229_198==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA229_198==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA229_198==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA229_198==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA229_198==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA229_198==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA229_198==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA229_198==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA229_198==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA229_198==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA229_198==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA229_198==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA229_198==SET) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA229_198==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA229_198==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA229_198==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA229_198==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA229_198==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA229_198==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA229_198==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA229_198==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA229_198==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA229_198==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        input.seek(index229_198);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA229_259 = input.LA(1);
                        int index229_259 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_259==STRING_LITERAL) ) {s = 1251;}
                        else if ( (LA229_259==QUOTED_STRING_LITERAL) ) {s = 1252;}
                        else if ( (LA229_259==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA229_259==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA229_259==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA229_259==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA229_259==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA229_259==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA229_259==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA229_259==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA229_259==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA229_259==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA229_259==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA229_259==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA229_259==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA229_259==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA229_259==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA229_259==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA229_259==AT) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA229_259==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA229_259==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA229_259==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA229_259==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA229_259==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA229_259==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA229_259==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA229_259==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA229_259==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA229_259==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA229_259==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA229_259==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA229_259==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA229_259==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA229_259==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA229_259==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA229_259==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA229_259==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA229_259==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA229_259==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA229_259==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA229_259==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA229_259==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA229_259==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA229_259==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA229_259==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA229_259==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA229_259==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA229_259==LW) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA229_259==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA229_259==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA229_259==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA229_259==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA229_259==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA229_259==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA229_259==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA229_259==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA229_259==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA229_259==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA229_259==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA229_259==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA229_259==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA229_259==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA229_259==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA229_259==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA229_259==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA229_259==SET) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA229_259==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA229_259==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA229_259==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA229_259==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA229_259==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA229_259==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA229_259==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA229_259==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA229_259==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        input.seek(index229_259);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA229_320 = input.LA(1);
                        int index229_320 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_320==STRING_LITERAL) ) {s = 1326;}
                        else if ( (LA229_320==QUOTED_STRING_LITERAL) ) {s = 1327;}
                        else if ( (LA229_320==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA229_320==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA229_320==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA229_320==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA229_320==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA229_320==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA229_320==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA229_320==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA229_320==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA229_320==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA229_320==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA229_320==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA229_320==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA229_320==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA229_320==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA229_320==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA229_320==AT) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA229_320==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA229_320==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA229_320==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA229_320==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA229_320==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA229_320==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA229_320==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA229_320==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA229_320==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA229_320==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA229_320==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA229_320==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA229_320==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA229_320==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA229_320==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA229_320==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA229_320==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA229_320==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA229_320==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA229_320==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA229_320==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA229_320==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA229_320==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA229_320==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA229_320==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA229_320==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA229_320==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA229_320==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA229_320==LW) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA229_320==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA229_320==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA229_320==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA229_320==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA229_320==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA229_320==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA229_320==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA229_320==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA229_320==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA229_320==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA229_320==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA229_320==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA229_320==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA229_320==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA229_320==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA229_320==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA229_320==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA229_320==SET) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA229_320==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA229_320==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA229_320==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA229_320==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA229_320==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA229_320==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA229_320==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA229_320==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA229_320==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        input.seek(index229_320);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA229_381 = input.LA(1);
                        int index229_381 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_381==STRING_LITERAL) ) {s = 1401;}
                        else if ( (LA229_381==QUOTED_STRING_LITERAL) ) {s = 1402;}
                        else if ( (LA229_381==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA229_381==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA229_381==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA229_381==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA229_381==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA229_381==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA229_381==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA229_381==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA229_381==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA229_381==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA229_381==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA229_381==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA229_381==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA229_381==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA229_381==AT) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA229_381==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA229_381==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA229_381==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA229_381==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA229_381==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA229_381==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA229_381==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA229_381==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA229_381==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA229_381==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA229_381==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA229_381==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA229_381==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA229_381==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA229_381==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA229_381==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA229_381==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA229_381==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA229_381==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA229_381==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA229_381==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA229_381==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA229_381==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA229_381==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA229_381==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA229_381==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA229_381==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA229_381==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA229_381==LW) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA229_381==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA229_381==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA229_381==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA229_381==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA229_381==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA229_381==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA229_381==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA229_381==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA229_381==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA229_381==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA229_381==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA229_381==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA229_381==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA229_381==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA229_381==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA229_381==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA229_381==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA229_381==SET) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA229_381==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA229_381==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA229_381==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA229_381==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA229_381==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA229_381==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA229_381==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA229_381==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA229_381==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        input.seek(index229_381);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA229_442 = input.LA(1);
                        int index229_442 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_442==STRING_LITERAL) ) {s = 1474;}
                        else if ( (LA229_442==QUOTED_STRING_LITERAL) ) {s = 1475;}
                        else if ( (LA229_442==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA229_442==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA229_442==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA229_442==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA229_442==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA229_442==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA229_442==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA229_442==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA229_442==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA229_442==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA229_442==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA229_442==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA229_442==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA229_442==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA229_442==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA229_442==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA229_442==AT) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA229_442==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA229_442==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA229_442==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA229_442==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA229_442==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA229_442==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA229_442==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA229_442==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA229_442==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA229_442==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA229_442==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA229_442==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA229_442==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA229_442==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA229_442==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA229_442==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA229_442==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA229_442==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA229_442==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA229_442==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA229_442==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA229_442==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA229_442==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA229_442==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA229_442==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA229_442==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA229_442==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA229_442==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA229_442==LW) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA229_442==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA229_442==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA229_442==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA229_442==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA229_442==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA229_442==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA229_442==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA229_442==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA229_442==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA229_442==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA229_442==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA229_442==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA229_442==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA229_442==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA229_442==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA229_442==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA229_442==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA229_442==SET) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA229_442==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA229_442==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA229_442==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA229_442==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA229_442==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA229_442==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA229_442==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA229_442==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA229_442==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        input.seek(index229_442);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA229_503 = input.LA(1);
                        int index229_503 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_503==STRING_LITERAL) ) {s = 1549;}
                        else if ( (LA229_503==QUOTED_STRING_LITERAL) ) {s = 1550;}
                        else if ( (LA229_503==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA229_503==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA229_503==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA229_503==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA229_503==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA229_503==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA229_503==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA229_503==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA229_503==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA229_503==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA229_503==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA229_503==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA229_503==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA229_503==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA229_503==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA229_503==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA229_503==AT) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA229_503==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA229_503==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA229_503==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA229_503==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA229_503==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA229_503==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA229_503==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA229_503==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA229_503==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA229_503==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA229_503==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA229_503==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA229_503==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA229_503==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA229_503==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA229_503==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA229_503==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA229_503==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA229_503==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA229_503==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA229_503==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA229_503==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA229_503==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA229_503==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA229_503==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA229_503==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA229_503==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA229_503==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA229_503==LW) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA229_503==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA229_503==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA229_503==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA229_503==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA229_503==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA229_503==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA229_503==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA229_503==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA229_503==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA229_503==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA229_503==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA229_503==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA229_503==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA229_503==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA229_503==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        else if ( (LA229_503==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA229_503==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA229_503==SET) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA229_503==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA229_503==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA229_503==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA229_503==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA229_503==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA229_503==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA229_503==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA229_503==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA229_503==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        input.seek(index229_503);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA229_564 = input.LA(1);
                        int index229_564 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_564==STRING_LITERAL) ) {s = 1624;}
                        else if ( (LA229_564==QUOTED_STRING_LITERAL) ) {s = 1625;}
                        else if ( (LA229_564==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA229_564==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA229_564==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA229_564==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA229_564==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA229_564==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA229_564==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA229_564==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA229_564==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA229_564==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA229_564==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA229_564==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA229_564==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA229_564==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA229_564==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA229_564==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA229_564==AT) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA229_564==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA229_564==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA229_564==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA229_564==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA229_564==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA229_564==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA229_564==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA229_564==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA229_564==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA229_564==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA229_564==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA229_564==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA229_564==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA229_564==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA229_564==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA229_564==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA229_564==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA229_564==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA229_564==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA229_564==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA229_564==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA229_564==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA229_564==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA229_564==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA229_564==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA229_564==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA229_564==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA229_564==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA229_564==LW) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA229_564==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA229_564==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA229_564==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA229_564==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA229_564==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA229_564==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA229_564==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA229_564==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA229_564==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA229_564==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA229_564==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA229_564==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA229_564==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA229_564==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA229_564==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA229_564==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA229_564==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA229_564==SET) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA229_564==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA229_564==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA229_564==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA229_564==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA229_564==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA229_564==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA229_564==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA229_564==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA229_564==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        input.seek(index229_564);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA229_625 = input.LA(1);
                        int index229_625 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_625==STRING_LITERAL) ) {s = 1699;}
                        else if ( (LA229_625==QUOTED_STRING_LITERAL) ) {s = 1700;}
                        else if ( (LA229_625==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA229_625==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA229_625==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA229_625==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA229_625==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA229_625==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA229_625==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA229_625==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA229_625==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA229_625==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA229_625==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA229_625==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA229_625==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA229_625==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA229_625==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA229_625==AT) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA229_625==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA229_625==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA229_625==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA229_625==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA229_625==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA229_625==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA229_625==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA229_625==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA229_625==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA229_625==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA229_625==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA229_625==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA229_625==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA229_625==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA229_625==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA229_625==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA229_625==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA229_625==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA229_625==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA229_625==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA229_625==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA229_625==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA229_625==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA229_625==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA229_625==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA229_625==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA229_625==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA229_625==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA229_625==LW) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA229_625==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA229_625==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA229_625==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA229_625==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA229_625==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA229_625==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA229_625==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA229_625==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA229_625==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA229_625==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA229_625==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA229_625==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA229_625==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA229_625==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA229_625==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA229_625==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA229_625==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA229_625==SET) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA229_625==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA229_625==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA229_625==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA229_625==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA229_625==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA229_625==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA229_625==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA229_625==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA229_625==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA229_625==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        input.seek(index229_625);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA229_686 = input.LA(1);
                        int index229_686 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_686==STRING_LITERAL) ) {s = 1774;}
                        else if ( (LA229_686==QUOTED_STRING_LITERAL) ) {s = 1775;}
                        else if ( (LA229_686==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA229_686==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA229_686==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA229_686==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA229_686==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA229_686==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA229_686==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA229_686==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA229_686==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA229_686==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA229_686==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA229_686==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA229_686==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA229_686==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA229_686==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA229_686==AT) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA229_686==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA229_686==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA229_686==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA229_686==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA229_686==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA229_686==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA229_686==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA229_686==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA229_686==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA229_686==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA229_686==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA229_686==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA229_686==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA229_686==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA229_686==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA229_686==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA229_686==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA229_686==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA229_686==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA229_686==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA229_686==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA229_686==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA229_686==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA229_686==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA229_686==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA229_686==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA229_686==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA229_686==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA229_686==LW) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA229_686==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA229_686==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA229_686==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA229_686==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA229_686==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA229_686==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA229_686==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA229_686==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA229_686==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA229_686==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA229_686==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA229_686==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA229_686==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA229_686==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA229_686==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA229_686==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA229_686==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA229_686==SET) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA229_686==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA229_686==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA229_686==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA229_686==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA229_686==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA229_686==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA229_686==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA229_686==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA229_686==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA229_686==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        input.seek(index229_686);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA229_747 = input.LA(1);
                        int index229_747 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_747==STRING_LITERAL) ) {s = 1849;}
                        else if ( (LA229_747==QUOTED_STRING_LITERAL) ) {s = 1850;}
                        else if ( (LA229_747==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA229_747==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA229_747==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA229_747==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA229_747==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA229_747==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA229_747==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA229_747==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA229_747==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA229_747==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA229_747==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA229_747==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA229_747==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA229_747==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA229_747==AT) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA229_747==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA229_747==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA229_747==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA229_747==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA229_747==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA229_747==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA229_747==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA229_747==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA229_747==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA229_747==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA229_747==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA229_747==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA229_747==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA229_747==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA229_747==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA229_747==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA229_747==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA229_747==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA229_747==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA229_747==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA229_747==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA229_747==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA229_747==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA229_747==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA229_747==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA229_747==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA229_747==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA229_747==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA229_747==LW) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA229_747==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA229_747==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA229_747==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA229_747==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA229_747==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA229_747==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA229_747==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA229_747==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA229_747==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA229_747==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA229_747==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA229_747==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA229_747==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA229_747==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA229_747==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA229_747==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA229_747==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA229_747==SET) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA229_747==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA229_747==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA229_747==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA229_747==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA229_747==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA229_747==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA229_747==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA229_747==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA229_747==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        input.seek(index229_747);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA229_808 = input.LA(1);
                        int index229_808 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_808==STRING_LITERAL) ) {s = 1922;}
                        else if ( (LA229_808==QUOTED_STRING_LITERAL) ) {s = 1923;}
                        else if ( (LA229_808==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA229_808==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA229_808==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA229_808==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA229_808==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA229_808==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA229_808==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA229_808==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA229_808==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA229_808==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA229_808==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA229_808==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA229_808==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA229_808==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA229_808==AT) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA229_808==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA229_808==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA229_808==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA229_808==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA229_808==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA229_808==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA229_808==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA229_808==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA229_808==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA229_808==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA229_808==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA229_808==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA229_808==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA229_808==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA229_808==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA229_808==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA229_808==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA229_808==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA229_808==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA229_808==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA229_808==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA229_808==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA229_808==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA229_808==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA229_808==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA229_808==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA229_808==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA229_808==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA229_808==LW) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA229_808==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA229_808==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA229_808==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA229_808==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA229_808==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA229_808==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA229_808==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA229_808==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA229_808==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA229_808==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA229_808==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA229_808==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA229_808==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA229_808==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA229_808==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA229_808==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA229_808==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA229_808==SET) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA229_808==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA229_808==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA229_808==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA229_808==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA229_808==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA229_808==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA229_808==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA229_808==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA229_808==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        input.seek(index229_808);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA229_869 = input.LA(1);
                        int index229_869 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_869==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( ((LA229_869>=STRING_LITERAL && LA229_869<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index229_869);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA229_930 = input.LA(1);
                        int index229_930 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_930==STRING_LITERAL) ) {s = 1998;}
                        else if ( (LA229_930==QUOTED_STRING_LITERAL) ) {s = 1999;}
                        else if ( (LA229_930==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA229_930==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA229_930==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA229_930==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA229_930==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA229_930==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA229_930==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA229_930==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA229_930==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA229_930==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA229_930==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA229_930==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA229_930==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA229_930==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA229_930==AT) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA229_930==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA229_930==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA229_930==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA229_930==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA229_930==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA229_930==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA229_930==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA229_930==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA229_930==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA229_930==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA229_930==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA229_930==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA229_930==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA229_930==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA229_930==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA229_930==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA229_930==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA229_930==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA229_930==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA229_930==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA229_930==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        else if ( (LA229_930==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( (LA229_930==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA229_930==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA229_930==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA229_930==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA229_930==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA229_930==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA229_930==LW) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA229_930==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA229_930==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA229_930==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA229_930==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA229_930==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA229_930==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA229_930==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA229_930==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA229_930==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA229_930==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA229_930==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA229_930==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA229_930==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA229_930==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        else if ( (LA229_930==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA229_930==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA229_930==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA229_930==SET) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA229_930==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA229_930==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA229_930==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA229_930==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA229_930==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA229_930==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA229_930==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA229_930==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA229_930==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        input.seek(index229_930);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA229_991 = input.LA(1);
                        int index229_991 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_991==STRING_LITERAL) ) {s = 2071;}
                        else if ( (LA229_991==QUOTED_STRING_LITERAL) ) {s = 2072;}
                        else if ( (LA229_991==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA229_991==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA229_991==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA229_991==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA229_991==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA229_991==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA229_991==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA229_991==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA229_991==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA229_991==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        else if ( (LA229_991==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA229_991==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA229_991==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA229_991==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA229_991==AT) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA229_991==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA229_991==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA229_991==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA229_991==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA229_991==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA229_991==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA229_991==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA229_991==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA229_991==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA229_991==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA229_991==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA229_991==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA229_991==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA229_991==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA229_991==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2102;}
                        else if ( (LA229_991==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA229_991==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA229_991==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA229_991==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA229_991==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA229_991==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA229_991==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA229_991==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA229_991==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA229_991==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA229_991==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA229_991==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA229_991==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA229_991==LW) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA229_991==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA229_991==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA229_991==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA229_991==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA229_991==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA229_991==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA229_991==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA229_991==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA229_991==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA229_991==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA229_991==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        else if ( (LA229_991==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA229_991==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA229_991==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA229_991==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA229_991==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA229_991==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA229_991==SET) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA229_991==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA229_991==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA229_991==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA229_991==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA229_991==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA229_991==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA229_991==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA229_991==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA229_991==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        input.seek(index229_991);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA229_1052 = input.LA(1);
                        int index229_1052 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1052==STRING_LITERAL) ) {s = 2144;}
                        else if ( (LA229_1052==QUOTED_STRING_LITERAL) ) {s = 2145;}
                        else if ( (LA229_1052==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA229_1052==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA229_1052==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA229_1052==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA229_1052==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA229_1052==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA229_1052==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2152;}
                        else if ( (LA229_1052==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA229_1052==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA229_1052==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA229_1052==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA229_1052==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA229_1052==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA229_1052==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA229_1052==AT) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA229_1052==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA229_1052==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA229_1052==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA229_1052==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA229_1052==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA229_1052==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA229_1052==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA229_1052==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA229_1052==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        else if ( (LA229_1052==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA229_1052==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA229_1052==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA229_1052==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA229_1052==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA229_1052==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA229_1052==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA229_1052==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA229_1052==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA229_1052==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA229_1052==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA229_1052==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA229_1052==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA229_1052==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA229_1052==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA229_1052==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA229_1052==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA229_1052==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA229_1052==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA229_1052==LW) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA229_1052==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA229_1052==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA229_1052==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA229_1052==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA229_1052==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA229_1052==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA229_1052==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA229_1052==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA229_1052==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA229_1052==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA229_1052==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA229_1052==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA229_1052==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2202;}
                        else if ( (LA229_1052==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA229_1052==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA229_1052==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA229_1052==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA229_1052==SET) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        else if ( (LA229_1052==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA229_1052==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA229_1052==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA229_1052==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA229_1052==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA229_1052==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA229_1052==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA229_1052==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA229_1052==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        input.seek(index229_1052);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA229_1113 = input.LA(1);
                        int index229_1113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1113==STRING_LITERAL) ) {s = 2217;}
                        else if ( (LA229_1113==QUOTED_STRING_LITERAL) ) {s = 2218;}
                        else if ( (LA229_1113==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA229_1113==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA229_1113==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA229_1113==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA229_1113==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA229_1113==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA229_1113==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA229_1113==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA229_1113==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA229_1113==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA229_1113==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA229_1113==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA229_1113==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA229_1113==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA229_1113==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA229_1113==AT) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA229_1113==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA229_1113==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA229_1113==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA229_1113==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA229_1113==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA229_1113==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA229_1113==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA229_1113==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA229_1113==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA229_1113==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA229_1113==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA229_1113==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA229_1113==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA229_1113==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA229_1113==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA229_1113==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA229_1113==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA229_1113==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA229_1113==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA229_1113==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA229_1113==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA229_1113==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA229_1113==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA229_1113==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA229_1113==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        else if ( (LA229_1113==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA229_1113==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA229_1113==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA229_1113==LW) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA229_1113==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA229_1113==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA229_1113==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA229_1113==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        else if ( (LA229_1113==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA229_1113==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA229_1113==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA229_1113==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA229_1113==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA229_1113==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA229_1113==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA229_1113==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA229_1113==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA229_1113==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA229_1113==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA229_1113==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2279;}
                        else if ( (LA229_1113==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA229_1113==SET) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA229_1113==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA229_1113==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA229_1113==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        else if ( (LA229_1113==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA229_1113==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA229_1113==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA229_1113==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA229_1113==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA229_1113==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA229_1113==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        input.seek(index229_1113);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA229_1174 = input.LA(1);
                        int index229_1174 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1174==SELECT) ) {s = 2292;}
                        else if ( (LA229_1174==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2293;}
                        else if ( (LA229_1174==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA229_1174==AT) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA229_1174==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA229_1174==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA229_1174==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA229_1174==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA229_1174==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA229_1174==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA229_1174==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA229_1174==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA229_1174==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2304;}
                        else if ( (LA229_1174==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA229_1174==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA229_1174==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA229_1174==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA229_1174==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        else if ( (LA229_1174==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA229_1174==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA229_1174==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA229_1174==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA229_1174==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA229_1174==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA229_1174==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA229_1174==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA229_1174==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA229_1174==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA229_1174==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA229_1174==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA229_1174==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA229_1174==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA229_1174==LW) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA229_1174==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA229_1174==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA229_1174==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA229_1174==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA229_1174==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA229_1174==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA229_1174==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA229_1174==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA229_1174==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA229_1174==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        else if ( (LA229_1174==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA229_1174==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA229_1174==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA229_1174==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA229_1174==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA229_1174==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        input.seek(index229_1174);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA229_1175 = input.LA(1);
                        int index229_1175 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1175==RPAREN) ) {s = 2341;}
                        else if ( (LA229_1175==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA229_1175==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA229_1175==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA229_1175==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2345;}
                        else if ( (LA229_1175==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA229_1175==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA229_1175==LT) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA229_1175==GT) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA229_1175==LE) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA229_1175==GE) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA229_1175==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA229_1175==IS) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA229_1175==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2354;}
                        else if ( (LA229_1175==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA229_1175==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA229_1175==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA229_1175==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA229_1175==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        else if ( (LA229_1175==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA229_1175==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA229_1175==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA229_1175==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA229_1175==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA229_1175==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA229_1175==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        input.seek(index229_1175);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA229_1176 = input.LA(1);
                        int index229_1176 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1176==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA229_1176==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA229_1176==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA229_1176==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA229_1176==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA229_1176==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA229_1176==LT) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA229_1176==GT) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA229_1176==LE) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA229_1176==GE) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA229_1176==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA229_1176==IS) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA229_1176==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2379;}
                        else if ( (LA229_1176==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA229_1176==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA229_1176==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA229_1176==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA229_1176==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        else if ( (LA229_1176==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA229_1176==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA229_1176==RPAREN) ) {s = 2387;}
                        else if ( (LA229_1176==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA229_1176==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA229_1176==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA229_1176==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA229_1176==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        input.seek(index229_1176);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA229_1251 = input.LA(1);
                        int index229_1251 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1251==RPAREN) ) {s = 2393;}
                        else if ( (LA229_1251==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA229_1251==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA229_1251==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA229_1251==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA229_1251==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA229_1251==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA229_1251==LT) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA229_1251==GT) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA229_1251==LE) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA229_1251==GE) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA229_1251==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        else if ( (LA229_1251==IS) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA229_1251==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA229_1251==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA229_1251==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA229_1251==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA229_1251==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA229_1251==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA229_1251==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA229_1251==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA229_1251==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA229_1251==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA229_1251==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA229_1251==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA229_1251==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        input.seek(index229_1251);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA229_1252 = input.LA(1);
                        int index229_1252 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1252==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA229_1252==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA229_1252==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA229_1252==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA229_1252==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA229_1252==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA229_1252==LT) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA229_1252==GT) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA229_1252==LE) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA229_1252==GE) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        else if ( (LA229_1252==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA229_1252==IS) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        else if ( (LA229_1252==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA229_1252==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA229_1252==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA229_1252==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA229_1252==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA229_1252==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA229_1252==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA229_1252==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA229_1252==RPAREN) ) {s = 2439;}
                        else if ( (LA229_1252==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA229_1252==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA229_1252==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA229_1252==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA229_1252==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        input.seek(index229_1252);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA229_1326 = input.LA(1);
                        int index229_1326 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1326==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA229_1326==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA229_1326==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA229_1326==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA229_1326==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA229_1326==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA229_1326==LT) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA229_1326==GT) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA229_1326==LE) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA229_1326==GE) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA229_1326==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA229_1326==IS) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        else if ( (LA229_1326==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA229_1326==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA229_1326==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA229_1326==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA229_1326==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        else if ( (LA229_1326==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA229_1326==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA229_1326==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA229_1326==RPAREN) ) {s = 2465;}
                        else if ( (LA229_1326==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA229_1326==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA229_1326==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA229_1326==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA229_1326==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        input.seek(index229_1326);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA229_1327 = input.LA(1);
                        int index229_1327 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1327==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA229_1327==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA229_1327==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA229_1327==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA229_1327==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA229_1327==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA229_1327==LT) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA229_1327==GT) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA229_1327==LE) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA229_1327==GE) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA229_1327==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA229_1327==IS) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA229_1327==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA229_1327==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA229_1327==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA229_1327==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA229_1327==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        else if ( (LA229_1327==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA229_1327==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA229_1327==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA229_1327==RPAREN) ) {s = 2491;}
                        else if ( (LA229_1327==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA229_1327==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA229_1327==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        else if ( (LA229_1327==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA229_1327==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        input.seek(index229_1327);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA229_1401 = input.LA(1);
                        int index229_1401 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1401==RPAREN) ) {s = 14;}
                        else if ( (LA229_1401==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA229_1401==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA229_1401==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA229_1401==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA229_1401==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA229_1401==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA229_1401==LT) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA229_1401==GT) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA229_1401==LE) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA229_1401==GE) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA229_1401==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        else if ( (LA229_1401==IS) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA229_1401==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA229_1401==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA229_1401==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA229_1401==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA229_1401==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA229_1401==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA229_1401==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA229_1401==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA229_1401==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA229_1401==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA229_1401==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA229_1401==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA229_1401==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        input.seek(index229_1401);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA229_1402 = input.LA(1);
                        int index229_1402 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1402==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA229_1402==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA229_1402==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA229_1402==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA229_1402==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA229_1402==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA229_1402==LT) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA229_1402==GT) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA229_1402==LE) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA229_1402==GE) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA229_1402==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA229_1402==IS) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        else if ( (LA229_1402==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA229_1402==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA229_1402==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA229_1402==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA229_1402==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA229_1402==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA229_1402==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA229_1402==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA229_1402==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA229_1402==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA229_1402==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA229_1402==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA229_1402==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA229_1402==RPAREN) ) {s = 14;}
                        input.seek(index229_1402);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA229_1474 = input.LA(1);
                        int index229_1474 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1474==RPAREN) ) {s = 2549;}
                        else if ( (LA229_1474==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA229_1474==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA229_1474==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA229_1474==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA229_1474==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA229_1474==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA229_1474==LT) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA229_1474==GT) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA229_1474==LE) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA229_1474==GE) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA229_1474==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2560;}
                        else if ( (LA229_1474==IS) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA229_1474==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA229_1474==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA229_1474==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA229_1474==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA229_1474==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA229_1474==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA229_1474==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA229_1474==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA229_1474==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA229_1474==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA229_1474==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA229_1474==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA229_1474==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        input.seek(index229_1474);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA229_1475 = input.LA(1);
                        int index229_1475 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1475==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA229_1475==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA229_1475==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA229_1475==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA229_1475==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA229_1475==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA229_1475==LT) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA229_1475==GT) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA229_1475==LE) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA229_1475==GE) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA229_1475==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA229_1475==IS) && (synpred3_EsperEPL2Grammar())) {s = 2586;}
                        else if ( (LA229_1475==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA229_1475==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA229_1475==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA229_1475==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA229_1475==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA229_1475==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA229_1475==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA229_1475==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA229_1475==RPAREN) ) {s = 2595;}
                        else if ( (LA229_1475==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA229_1475==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA229_1475==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA229_1475==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA229_1475==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        input.seek(index229_1475);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA229_1549 = input.LA(1);
                        int index229_1549 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1549==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA229_1549==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA229_1549==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA229_1549==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA229_1549==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA229_1549==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA229_1549==LT) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA229_1549==GT) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA229_1549==LE) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA229_1549==GE) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA229_1549==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA229_1549==IS) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        else if ( (LA229_1549==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA229_1549==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA229_1549==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA229_1549==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA229_1549==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA229_1549==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA229_1549==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA229_1549==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA229_1549==RPAREN) ) {s = 2621;}
                        else if ( (LA229_1549==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA229_1549==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA229_1549==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA229_1549==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA229_1549==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        input.seek(index229_1549);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA229_1550 = input.LA(1);
                        int index229_1550 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1550==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA229_1550==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA229_1550==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA229_1550==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA229_1550==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA229_1550==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA229_1550==LT) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA229_1550==GT) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA229_1550==LE) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA229_1550==GE) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA229_1550==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA229_1550==IS) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA229_1550==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA229_1550==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA229_1550==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA229_1550==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA229_1550==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA229_1550==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA229_1550==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA229_1550==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA229_1550==RPAREN) ) {s = 2647;}
                        else if ( (LA229_1550==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA229_1550==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA229_1550==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA229_1550==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA229_1550==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        input.seek(index229_1550);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA229_1624 = input.LA(1);
                        int index229_1624 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1624==RPAREN) ) {s = 2653;}
                        else if ( (LA229_1624==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA229_1624==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA229_1624==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA229_1624==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA229_1624==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA229_1624==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA229_1624==LT) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA229_1624==GT) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA229_1624==LE) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA229_1624==GE) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA229_1624==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA229_1624==IS) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA229_1624==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA229_1624==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA229_1624==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA229_1624==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA229_1624==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA229_1624==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA229_1624==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA229_1624==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        else if ( (LA229_1624==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA229_1624==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA229_1624==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA229_1624==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA229_1624==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        input.seek(index229_1624);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA229_1625 = input.LA(1);
                        int index229_1625 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1625==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA229_1625==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA229_1625==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA229_1625==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA229_1625==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA229_1625==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA229_1625==LT) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA229_1625==GT) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA229_1625==LE) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA229_1625==GE) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA229_1625==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA229_1625==IS) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA229_1625==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA229_1625==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA229_1625==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA229_1625==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA229_1625==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA229_1625==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA229_1625==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA229_1625==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA229_1625==RPAREN) ) {s = 2699;}
                        else if ( (LA229_1625==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA229_1625==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA229_1625==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA229_1625==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA229_1625==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        input.seek(index229_1625);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA229_1699 = input.LA(1);
                        int index229_1699 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1699==RPAREN) ) {s = 2705;}
                        else if ( (LA229_1699==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA229_1699==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA229_1699==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA229_1699==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA229_1699==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA229_1699==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA229_1699==LT) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA229_1699==GT) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA229_1699==LE) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA229_1699==GE) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA229_1699==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA229_1699==IS) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA229_1699==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA229_1699==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA229_1699==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA229_1699==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA229_1699==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA229_1699==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        else if ( (LA229_1699==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA229_1699==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        else if ( (LA229_1699==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA229_1699==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA229_1699==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA229_1699==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA229_1699==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        input.seek(index229_1699);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA229_1700 = input.LA(1);
                        int index229_1700 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1700==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA229_1700==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA229_1700==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA229_1700==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA229_1700==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA229_1700==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA229_1700==LT) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA229_1700==GT) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA229_1700==LE) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA229_1700==GE) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA229_1700==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA229_1700==IS) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA229_1700==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA229_1700==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA229_1700==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA229_1700==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA229_1700==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA229_1700==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA229_1700==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA229_1700==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA229_1700==RPAREN) ) {s = 2751;}
                        else if ( (LA229_1700==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA229_1700==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA229_1700==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA229_1700==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA229_1700==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        input.seek(index229_1700);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA229_1774 = input.LA(1);
                        int index229_1774 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1774==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA229_1774==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA229_1774==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA229_1774==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA229_1774==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA229_1774==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA229_1774==LT) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA229_1774==GT) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA229_1774==LE) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA229_1774==GE) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA229_1774==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA229_1774==IS) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA229_1774==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA229_1774==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA229_1774==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA229_1774==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA229_1774==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA229_1774==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA229_1774==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        else if ( (LA229_1774==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2776;}
                        else if ( (LA229_1774==RPAREN) ) {s = 2777;}
                        else if ( (LA229_1774==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2778;}
                        else if ( (LA229_1774==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA229_1774==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2780;}
                        else if ( (LA229_1774==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA229_1774==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        input.seek(index229_1774);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA229_1775 = input.LA(1);
                        int index229_1775 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1775==RPAREN) ) {s = 2783;}
                        else if ( (LA229_1775==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA229_1775==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        else if ( (LA229_1775==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2786;}
                        else if ( (LA229_1775==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2787;}
                        else if ( (LA229_1775==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2788;}
                        else if ( (LA229_1775==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2789;}
                        else if ( (LA229_1775==LT) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA229_1775==GT) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        else if ( (LA229_1775==LE) && (synpred3_EsperEPL2Grammar())) {s = 2792;}
                        else if ( (LA229_1775==GE) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA229_1775==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        else if ( (LA229_1775==IS) && (synpred3_EsperEPL2Grammar())) {s = 2795;}
                        else if ( (LA229_1775==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA229_1775==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA229_1775==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA229_1775==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA229_1775==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA229_1775==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        else if ( (LA229_1775==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2802;}
                        else if ( (LA229_1775==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2803;}
                        else if ( (LA229_1775==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2804;}
                        else if ( (LA229_1775==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA229_1775==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2806;}
                        else if ( (LA229_1775==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA229_1775==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        input.seek(index229_1775);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA229_1849 = input.LA(1);
                        int index229_1849 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1849==RPAREN) ) {s = 2809;}
                        else if ( (LA229_1849==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA229_1849==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        else if ( (LA229_1849==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2812;}
                        else if ( (LA229_1849==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2813;}
                        else if ( (LA229_1849==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA229_1849==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA229_1849==LT) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA229_1849==GT) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        else if ( (LA229_1849==LE) && (synpred3_EsperEPL2Grammar())) {s = 2818;}
                        else if ( (LA229_1849==GE) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA229_1849==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        else if ( (LA229_1849==IS) && (synpred3_EsperEPL2Grammar())) {s = 2821;}
                        else if ( (LA229_1849==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA229_1849==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA229_1849==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA229_1849==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA229_1849==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA229_1849==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        else if ( (LA229_1849==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2828;}
                        else if ( (LA229_1849==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2829;}
                        else if ( (LA229_1849==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2830;}
                        else if ( (LA229_1849==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA229_1849==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2832;}
                        else if ( (LA229_1849==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2833;}
                        else if ( (LA229_1849==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        input.seek(index229_1849);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA229_1850 = input.LA(1);
                        int index229_1850 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1850==RPAREN) ) {s = 2835;}
                        else if ( (LA229_1850==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA229_1850==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        else if ( (LA229_1850==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2838;}
                        else if ( (LA229_1850==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2839;}
                        else if ( (LA229_1850==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA229_1850==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA229_1850==LT) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA229_1850==GT) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        else if ( (LA229_1850==LE) && (synpred3_EsperEPL2Grammar())) {s = 2844;}
                        else if ( (LA229_1850==GE) && (synpred3_EsperEPL2Grammar())) {s = 2845;}
                        else if ( (LA229_1850==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        else if ( (LA229_1850==IS) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA229_1850==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA229_1850==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2849;}
                        else if ( (LA229_1850==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA229_1850==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA229_1850==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA229_1850==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        else if ( (LA229_1850==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        else if ( (LA229_1850==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2855;}
                        else if ( (LA229_1850==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA229_1850==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA229_1850==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2858;}
                        else if ( (LA229_1850==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA229_1850==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        input.seek(index229_1850);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA229_1922 = input.LA(1);
                        int index229_1922 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1922==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2861;}
                        else if ( (LA229_1922==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA229_1922==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        else if ( (LA229_1922==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2864;}
                        else if ( (LA229_1922==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2865;}
                        else if ( (LA229_1922==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2866;}
                        else if ( (LA229_1922==LT) && (synpred3_EsperEPL2Grammar())) {s = 2867;}
                        else if ( (LA229_1922==GT) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA229_1922==LE) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        else if ( (LA229_1922==GE) && (synpred3_EsperEPL2Grammar())) {s = 2870;}
                        else if ( (LA229_1922==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        else if ( (LA229_1922==IS) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        else if ( (LA229_1922==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2873;}
                        else if ( (LA229_1922==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2874;}
                        else if ( (LA229_1922==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA229_1922==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA229_1922==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA229_1922==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA229_1922==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        else if ( (LA229_1922==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2880;}
                        else if ( (LA229_1922==RPAREN) ) {s = 2881;}
                        else if ( (LA229_1922==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA229_1922==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA229_1922==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2884;}
                        else if ( (LA229_1922==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA229_1922==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        input.seek(index229_1922);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA229_1923 = input.LA(1);
                        int index229_1923 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1923==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2887;}
                        else if ( (LA229_1923==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA229_1923==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        else if ( (LA229_1923==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2890;}
                        else if ( (LA229_1923==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2891;}
                        else if ( (LA229_1923==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA229_1923==LT) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA229_1923==GT) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA229_1923==LE) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        else if ( (LA229_1923==GE) && (synpred3_EsperEPL2Grammar())) {s = 2896;}
                        else if ( (LA229_1923==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2897;}
                        else if ( (LA229_1923==IS) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        else if ( (LA229_1923==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA229_1923==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2900;}
                        else if ( (LA229_1923==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA229_1923==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA229_1923==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA229_1923==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA229_1923==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        else if ( (LA229_1923==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2906;}
                        else if ( (LA229_1923==RPAREN) ) {s = 2907;}
                        else if ( (LA229_1923==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA229_1923==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA229_1923==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2910;}
                        else if ( (LA229_1923==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA229_1923==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        input.seek(index229_1923);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA229_1998 = input.LA(1);
                        int index229_1998 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1998==RPAREN) ) {s = 14;}
                        else if ( (LA229_1998==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA229_1998==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        else if ( (LA229_1998==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2916;}
                        else if ( (LA229_1998==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        else if ( (LA229_1998==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA229_1998==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2919;}
                        else if ( (LA229_1998==LT) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        else if ( (LA229_1998==GT) && (synpred3_EsperEPL2Grammar())) {s = 2921;}
                        else if ( (LA229_1998==LE) && (synpred3_EsperEPL2Grammar())) {s = 2922;}
                        else if ( (LA229_1998==GE) && (synpred3_EsperEPL2Grammar())) {s = 2923;}
                        else if ( (LA229_1998==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2924;}
                        else if ( (LA229_1998==IS) && (synpred3_EsperEPL2Grammar())) {s = 2925;}
                        else if ( (LA229_1998==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2926;}
                        else if ( (LA229_1998==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA229_1998==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA229_1998==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA229_1998==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA229_1998==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        else if ( (LA229_1998==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2932;}
                        else if ( (LA229_1998==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2933;}
                        else if ( (LA229_1998==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2934;}
                        else if ( (LA229_1998==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA229_1998==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2936;}
                        else if ( (LA229_1998==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2937;}
                        else if ( (LA229_1998==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        input.seek(index229_1998);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA229_1999 = input.LA(1);
                        int index229_1999 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_1999==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA229_1999==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA229_1999==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        else if ( (LA229_1999==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2942;}
                        else if ( (LA229_1999==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2943;}
                        else if ( (LA229_1999==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA229_1999==LT) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        else if ( (LA229_1999==GT) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA229_1999==LE) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA229_1999==GE) && (synpred3_EsperEPL2Grammar())) {s = 2948;}
                        else if ( (LA229_1999==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2949;}
                        else if ( (LA229_1999==IS) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        else if ( (LA229_1999==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA229_1999==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA229_1999==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2953;}
                        else if ( (LA229_1999==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA229_1999==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA229_1999==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA229_1999==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2957;}
                        else if ( (LA229_1999==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2958;}
                        else if ( (LA229_1999==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2959;}
                        else if ( (LA229_1999==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA229_1999==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA229_1999==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2962;}
                        else if ( (LA229_1999==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2963;}
                        else if ( (LA229_1999==RPAREN) ) {s = 14;}
                        input.seek(index229_1999);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA229_2071 = input.LA(1);
                        int index229_2071 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_2071==RPAREN) ) {s = 2965;}
                        else if ( (LA229_2071==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA229_2071==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        else if ( (LA229_2071==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2968;}
                        else if ( (LA229_2071==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2969;}
                        else if ( (LA229_2071==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2970;}
                        else if ( (LA229_2071==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2971;}
                        else if ( (LA229_2071==LT) && (synpred3_EsperEPL2Grammar())) {s = 2972;}
                        else if ( (LA229_2071==GT) && (synpred3_EsperEPL2Grammar())) {s = 2973;}
                        else if ( (LA229_2071==LE) && (synpred3_EsperEPL2Grammar())) {s = 2974;}
                        else if ( (LA229_2071==GE) && (synpred3_EsperEPL2Grammar())) {s = 2975;}
                        else if ( (LA229_2071==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2976;}
                        else if ( (LA229_2071==IS) && (synpred3_EsperEPL2Grammar())) {s = 2977;}
                        else if ( (LA229_2071==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2978;}
                        else if ( (LA229_2071==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2979;}
                        else if ( (LA229_2071==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2980;}
                        else if ( (LA229_2071==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2981;}
                        else if ( (LA229_2071==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2982;}
                        else if ( (LA229_2071==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2983;}
                        else if ( (LA229_2071==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2984;}
                        else if ( (LA229_2071==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2985;}
                        else if ( (LA229_2071==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2986;}
                        else if ( (LA229_2071==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2987;}
                        else if ( (LA229_2071==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2988;}
                        else if ( (LA229_2071==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2989;}
                        input.seek(index229_2071);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA229_2072 = input.LA(1);
                        int index229_2072 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_2072==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2990;}
                        else if ( (LA229_2072==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2991;}
                        else if ( (LA229_2072==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2992;}
                        else if ( (LA229_2072==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2993;}
                        else if ( (LA229_2072==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2994;}
                        else if ( (LA229_2072==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2995;}
                        else if ( (LA229_2072==LT) && (synpred3_EsperEPL2Grammar())) {s = 2996;}
                        else if ( (LA229_2072==GT) && (synpred3_EsperEPL2Grammar())) {s = 2997;}
                        else if ( (LA229_2072==LE) && (synpred3_EsperEPL2Grammar())) {s = 2998;}
                        else if ( (LA229_2072==GE) && (synpred3_EsperEPL2Grammar())) {s = 2999;}
                        else if ( (LA229_2072==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3000;}
                        else if ( (LA229_2072==IS) && (synpred3_EsperEPL2Grammar())) {s = 3001;}
                        else if ( (LA229_2072==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3002;}
                        else if ( (LA229_2072==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3003;}
                        else if ( (LA229_2072==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3004;}
                        else if ( (LA229_2072==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3005;}
                        else if ( (LA229_2072==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3006;}
                        else if ( (LA229_2072==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3007;}
                        else if ( (LA229_2072==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3008;}
                        else if ( (LA229_2072==RPAREN) ) {s = 3009;}
                        else if ( (LA229_2072==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3010;}
                        else if ( (LA229_2072==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3011;}
                        else if ( (LA229_2072==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3012;}
                        else if ( (LA229_2072==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3013;}
                        else if ( (LA229_2072==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3014;}
                        input.seek(index229_2072);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA229_2144 = input.LA(1);
                        int index229_2144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_2144==RPAREN) ) {s = 14;}
                        else if ( (LA229_2144==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3016;}
                        else if ( (LA229_2144==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3017;}
                        else if ( (LA229_2144==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3018;}
                        else if ( (LA229_2144==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3019;}
                        else if ( (LA229_2144==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3020;}
                        else if ( (LA229_2144==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3021;}
                        else if ( (LA229_2144==LT) && (synpred3_EsperEPL2Grammar())) {s = 3022;}
                        else if ( (LA229_2144==GT) && (synpred3_EsperEPL2Grammar())) {s = 3023;}
                        else if ( (LA229_2144==LE) && (synpred3_EsperEPL2Grammar())) {s = 3024;}
                        else if ( (LA229_2144==GE) && (synpred3_EsperEPL2Grammar())) {s = 3025;}
                        else if ( (LA229_2144==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3026;}
                        else if ( (LA229_2144==IS) && (synpred3_EsperEPL2Grammar())) {s = 3027;}
                        else if ( (LA229_2144==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3028;}
                        else if ( (LA229_2144==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3029;}
                        else if ( (LA229_2144==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3030;}
                        else if ( (LA229_2144==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3031;}
                        else if ( (LA229_2144==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3032;}
                        else if ( (LA229_2144==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3033;}
                        else if ( (LA229_2144==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3034;}
                        else if ( (LA229_2144==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3035;}
                        else if ( (LA229_2144==AS) && (synpred3_EsperEPL2Grammar())) {s = 3036;}
                        else if ( (LA229_2144==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3037;}
                        else if ( (LA229_2144==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3038;}
                        else if ( (LA229_2144==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3039;}
                        else if ( (LA229_2144==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3040;}
                        else if ( (LA229_2144==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3041;}
                        input.seek(index229_2144);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA229_2145 = input.LA(1);
                        int index229_2145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_2145==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3042;}
                        else if ( (LA229_2145==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3043;}
                        else if ( (LA229_2145==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3044;}
                        else if ( (LA229_2145==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3045;}
                        else if ( (LA229_2145==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3046;}
                        else if ( (LA229_2145==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3047;}
                        else if ( (LA229_2145==LT) && (synpred3_EsperEPL2Grammar())) {s = 3048;}
                        else if ( (LA229_2145==GT) && (synpred3_EsperEPL2Grammar())) {s = 3049;}
                        else if ( (LA229_2145==LE) && (synpred3_EsperEPL2Grammar())) {s = 3050;}
                        else if ( (LA229_2145==GE) && (synpred3_EsperEPL2Grammar())) {s = 3051;}
                        else if ( (LA229_2145==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3052;}
                        else if ( (LA229_2145==IS) && (synpred3_EsperEPL2Grammar())) {s = 3053;}
                        else if ( (LA229_2145==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3054;}
                        else if ( (LA229_2145==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3055;}
                        else if ( (LA229_2145==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3056;}
                        else if ( (LA229_2145==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3057;}
                        else if ( (LA229_2145==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3058;}
                        else if ( (LA229_2145==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3059;}
                        else if ( (LA229_2145==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3060;}
                        else if ( (LA229_2145==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3061;}
                        else if ( (LA229_2145==AS) && (synpred3_EsperEPL2Grammar())) {s = 3062;}
                        else if ( (LA229_2145==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3063;}
                        else if ( (LA229_2145==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3064;}
                        else if ( (LA229_2145==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3065;}
                        else if ( (LA229_2145==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3066;}
                        else if ( (LA229_2145==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3067;}
                        else if ( (LA229_2145==RPAREN) ) {s = 14;}
                        input.seek(index229_2145);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA229_2217 = input.LA(1);
                        int index229_2217 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_2217==RPAREN) ) {s = 3069;}
                        else if ( (LA229_2217==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3070;}
                        else if ( (LA229_2217==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3071;}
                        else if ( (LA229_2217==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3072;}
                        else if ( (LA229_2217==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3073;}
                        else if ( (LA229_2217==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3074;}
                        else if ( (LA229_2217==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3075;}
                        else if ( (LA229_2217==LT) && (synpred3_EsperEPL2Grammar())) {s = 3076;}
                        else if ( (LA229_2217==GT) && (synpred3_EsperEPL2Grammar())) {s = 3077;}
                        else if ( (LA229_2217==LE) && (synpred3_EsperEPL2Grammar())) {s = 3078;}
                        else if ( (LA229_2217==GE) && (synpred3_EsperEPL2Grammar())) {s = 3079;}
                        else if ( (LA229_2217==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3080;}
                        else if ( (LA229_2217==IS) && (synpred3_EsperEPL2Grammar())) {s = 3081;}
                        else if ( (LA229_2217==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3082;}
                        else if ( (LA229_2217==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3083;}
                        else if ( (LA229_2217==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3084;}
                        else if ( (LA229_2217==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3085;}
                        else if ( (LA229_2217==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3086;}
                        else if ( (LA229_2217==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3087;}
                        else if ( (LA229_2217==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3088;}
                        else if ( (LA229_2217==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3089;}
                        else if ( (LA229_2217==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3090;}
                        else if ( (LA229_2217==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3091;}
                        else if ( (LA229_2217==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3092;}
                        else if ( (LA229_2217==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3093;}
                        input.seek(index229_2217);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA229_2218 = input.LA(1);
                        int index229_2218 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_2218==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3094;}
                        else if ( (LA229_2218==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3095;}
                        else if ( (LA229_2218==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3096;}
                        else if ( (LA229_2218==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3097;}
                        else if ( (LA229_2218==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3098;}
                        else if ( (LA229_2218==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3099;}
                        else if ( (LA229_2218==LT) && (synpred3_EsperEPL2Grammar())) {s = 3100;}
                        else if ( (LA229_2218==GT) && (synpred3_EsperEPL2Grammar())) {s = 3101;}
                        else if ( (LA229_2218==LE) && (synpred3_EsperEPL2Grammar())) {s = 3102;}
                        else if ( (LA229_2218==GE) && (synpred3_EsperEPL2Grammar())) {s = 3103;}
                        else if ( (LA229_2218==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3104;}
                        else if ( (LA229_2218==IS) && (synpred3_EsperEPL2Grammar())) {s = 3105;}
                        else if ( (LA229_2218==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3106;}
                        else if ( (LA229_2218==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3107;}
                        else if ( (LA229_2218==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3108;}
                        else if ( (LA229_2218==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3109;}
                        else if ( (LA229_2218==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3110;}
                        else if ( (LA229_2218==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3111;}
                        else if ( (LA229_2218==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3112;}
                        else if ( (LA229_2218==RPAREN) ) {s = 3113;}
                        else if ( (LA229_2218==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3114;}
                        else if ( (LA229_2218==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3115;}
                        else if ( (LA229_2218==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3116;}
                        else if ( (LA229_2218==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3117;}
                        else if ( (LA229_2218==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3118;}
                        input.seek(index229_2218);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA229_2341 = input.LA(1);
                        int index229_2341 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2341);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA229_2387 = input.LA(1);
                        int index229_2387 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2387);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA229_2393 = input.LA(1);
                        int index229_2393 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2393);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA229_2439 = input.LA(1);
                        int index229_2439 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2439);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA229_2465 = input.LA(1);
                        int index229_2465 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2465);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA229_2491 = input.LA(1);
                        int index229_2491 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2491);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA229_2549 = input.LA(1);
                        int index229_2549 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2549);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA229_2595 = input.LA(1);
                        int index229_2595 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2595);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA229_2621 = input.LA(1);
                        int index229_2621 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2621);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA229_2647 = input.LA(1);
                        int index229_2647 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2647);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA229_2653 = input.LA(1);
                        int index229_2653 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2653);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA229_2699 = input.LA(1);
                        int index229_2699 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2699);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA229_2705 = input.LA(1);
                        int index229_2705 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2705);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA229_2751 = input.LA(1);
                        int index229_2751 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2751);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA229_2777 = input.LA(1);
                        int index229_2777 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2777);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA229_2783 = input.LA(1);
                        int index229_2783 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2783);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA229_2809 = input.LA(1);
                        int index229_2809 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2809);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA229_2835 = input.LA(1);
                        int index229_2835 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2835);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA229_2881 = input.LA(1);
                        int index229_2881 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2881);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA229_2907 = input.LA(1);
                        int index229_2907 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2907);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA229_2965 = input.LA(1);
                        int index229_2965 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_2965);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA229_3009 = input.LA(1);
                        int index229_3009 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_3009);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA229_3069 = input.LA(1);
                        int index229_3069 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_3069);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA229_3113 = input.LA(1);
                        int index229_3113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3118;}
                        input.seek(index229_3113);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1862 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000A00000L});
    public static final BitSet FOLLOW_expressionDecl_in_startPatternExpressionRule1866 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000A00000L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1872 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1891 = new BitSet(new long[]{0x004002000800E010L,0x4800800000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000A00000L});
    public static final BitSet FOLLOW_expressionDecl_in_startEPLExpressionRule1895 = new BitSet(new long[]{0x004002000800E010L,0x4800800000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000A00000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1901 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1934 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPRESSIONDECL_in_expressionDecl1957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0028000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_expressionDecl1959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0028000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_expressionDecl1965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_expressionDecl1967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_expressionDialect_in_expressionDecl1971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_expressionDecl1976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0248000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_expressionDecl1979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_columnList_in_expressionDecl1981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_expressionDecl1984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0248000000000000L});
    public static final BitSet FOLLOW_expressionDef_in_expressionDecl1988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_expressionDialect2031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COLON_in_expressionDialect2033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_expressionDef2055 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_expressionDef2057 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_expressionDef2060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_expressionDef2062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_expressionDef2078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_stringconstant_in_expressionDef2080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_expressionDef2082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_expressionLambdaDecl2105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_expressionLambdaDecl2110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_columnList_in_expressionLambdaDecl2112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_expressionLambdaDecl2114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_GOES_in_expressionLambdaDecl2118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_annotationNoEnum2153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum2155 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum2159 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x02A0004000000000L,0x000000000322401AL});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum2163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum2167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum2172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_annotationEnum2213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum2215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum2219 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x02A0004000000000L,0x0000000003A2401AL});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum2223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum2227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum2232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2273 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum2276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2279 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2300 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum2303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2306 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum2329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum2331 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0200004000000000L,0x000000000322401AL});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum2370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum2372 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0220004000000000L,0x0000000003A2401AL});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum2374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum2405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2504 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x1600004000000000L,0x000000000322401AL});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2510 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0200004000000000L,0x000000000322401AL});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2552 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x1620004000000000L,0x0000000003A2401AL});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2558 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x0220004000000000L,0x0000000003A2401AL});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_contextExpr_in_eplExpression2603 = new BitSet(new long[]{0x0040020008000010L,0x4000800000000000L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2610 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2615 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2620 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2625 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2630 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createContextExpr_in_eplExpression2635 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2640 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2645 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTEXT_in_contextExpr2661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_contextExpr2665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2689 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2692 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2698 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2701 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2705 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2708 = new BitSet(new long[]{0x0104300000010002L,0x0001200000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2712 = new BitSet(new long[]{0x0104300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2718 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2721 = new BitSet(new long[]{0x0104300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2728 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2731 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2734 = new BitSet(new long[]{0x0104200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2741 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2744 = new BitSet(new long[]{0x0104000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2751 = new BitSet(new long[]{0x0130800080005000L,0x0020200000440000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2754 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2761 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2764 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2767 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024002L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2794 = new BitSet(new long[]{0x0040000008000000L,0x02008000000A0000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2803 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2806 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onMergeExpr_in_onExpr2824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2869 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2873 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2918 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2922 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2941 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2943 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2946 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2948 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2956 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_onMergeExpr2993 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_INTO_in_onMergeExpr2995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr3000 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_AS_in_onMergeExpr3003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr3007 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr3013 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_WHERE_in_onMergeExpr3020 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_whereClause_in_onMergeExpr3022 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_mergeItem_in_onMergeExpr3030 = new BitSet(new long[]{0x0000000080030002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_mergeMatched_in_mergeItem3064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeUnmatched_in_mergeItem3068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched3081 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched3083 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeMatched3086 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_mergeMatched3088 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeMatchedItem_in_mergeMatched3092 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeMatchedItem3118 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatchedItem3133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_mergeMatchedItem3135 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem3137 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatchedItem3140 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem3142 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem3148 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem3150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_mergeMatchedItem3162 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem3165 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem3167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeMatchedItem3178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched3235 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched3237 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched3239 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeUnmatched3242 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_mergeUnmatched3244 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3248 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatchedItem3275 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeUnmatchedItem3278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_mergeInsert3293 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_INTO_in_mergeInsert3296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_mergeInsert3298 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_mergeInsert3303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_columnList_in_mergeInsert3305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_mergeInsert3307 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeInsert3311 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_selectionList_in_mergeInsert3313 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeInsert3316 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_whereClause_in_mergeInsert3318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr3364 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr3366 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr3372 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr3374 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr3377 = new BitSet(new long[]{0x0100300400010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr3381 = new BitSet(new long[]{0x0100300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr3387 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr3389 = new BitSet(new long[]{0x0100300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr3398 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3400 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr3402 = new BitSet(new long[]{0x0100200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr3409 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr3411 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr3418 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3420 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr3422 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024002L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr3431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr3491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3498 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr3501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr3517 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3519 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr3522 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3524 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr3531 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr3533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr3584 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr3586 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr3590 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr3592 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr3597 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr3599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert3630 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3683 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3687 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3692 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3734 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3736 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3739 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3741 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3768 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3799 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3840 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3846 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4060000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3851 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4060000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3856 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4060000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3865 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3869 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3873 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3888 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3907 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3924 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3927 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter4016 = new BitSet(new long[]{0x803801E807FC4420L,0x469C1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8020004000000000L,0x000000000382401AL});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter4019 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter4021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter4026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr4039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr4041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr4045 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr4047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr4051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr4053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_createIndexColumnList_in_createIndexExpr4055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr4057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList4086 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createIndexColumnList4089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList4091 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn4118 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn4120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr4145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr4149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr4152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr4154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr4158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr4161 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_createVariableExpr4163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList4209 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList4212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList4214 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement4245 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement4250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement4252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList4298 = new BitSet(new long[]{0x803801E807FC4420L,0x469C1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8020004000000000L,0x000000000382401AL});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4300 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement4329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement4341 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement4369 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr4400 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4404 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr4407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4411 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8060000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr4413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8060000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr4426 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr4437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr4439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr4442 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_createSchemaQual_in_createSchemaExpr4451 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_CREATE_in_createContextExpr4513 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_CONTEXT_in_createContextExpr4515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextExpr4519 = new BitSet(new long[]{0x0000100000420000L,0xE008000000000000L});
    public static final BitSet FOLLOW_AS_in_createContextExpr4521 = new BitSet(new long[]{0x0000100000420000L,0xE008000000000000L});
    public static final BitSet FOLLOW_createContextDetail_in_createContextExpr4524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createContextChoice_in_createContextDetail4548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_contextContextNested_in_createContextDetail4553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextDetail4555 = new BitSet(new long[]{0x0000100000420000L,0xE008000000000000L});
    public static final BitSet FOLLOW_contextContextNested_in_createContextDetail4557 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextDetail4560 = new BitSet(new long[]{0x0000100000420000L,0xE008000000000000L});
    public static final BitSet FOLLOW_contextContextNested_in_createContextDetail4562 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_CONTEXT_in_contextContextNested4588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_contextContextNested4592 = new BitSet(new long[]{0x0000100000420000L,0xA008000000000000L});
    public static final BitSet FOLLOW_AS_in_contextContextNested4594 = new BitSet(new long[]{0x0000100000400000L,0xA008000000000000L});
    public static final BitSet FOLLOW_createContextChoice_in_contextContextNested4597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_START_in_createContextChoice4622 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x0060000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_createContextRangePoint_in_createContextChoice4624 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_createContextChoice4626 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x0060000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_createContextRangePoint_in_createContextChoice4628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INITIATED_in_createContextChoice4645 = new BitSet(new long[]{0x0000080000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x0060000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_BY_in_createContextChoice4648 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x0060000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_createContextRangePoint_in_createContextChoice4652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_createContextChoice4654 = new BitSet(new long[]{0x0000080000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x0060000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_BY_in_createContextChoice4657 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000004L,0x0000000000000000L,0x0000000000000000L,0x0060000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_createContextRangePoint_in_createContextChoice4661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_createContextChoice4678 = new BitSet(new long[]{0x803809E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_BY_in_createContextChoice4681 = new BitSet(new long[]{0x803809E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_createContextPartitionItem_in_createContextChoice4685 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextChoice4688 = new BitSet(new long[]{0x803809E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_createContextPartitionItem_in_createContextChoice4690 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_createContextGroupItem_in_createContextChoice4709 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextChoice4712 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_createContextGroupItem_in_createContextChoice4714 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_FROM_in_createContextChoice4718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextChoice4720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_createContextChoice4738 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_BY_in_createContextChoice4741 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_createContextCoalesceItem_in_createContextChoice4745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextChoice4748 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_createContextCoalesceItem_in_createContextChoice4750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextChoice4756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000003024002L});
    public static final BitSet FOLLOW_number_in_createContextChoice4758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextChoice4763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createContextFilter_in_createContextRangePoint4797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_createContextRangePoint4804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_createContextRangePoint4809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_createContextRangePoint4814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_timePeriod_in_createContextRangePoint4816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextFilter4836 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_AS_in_createContextFilter4839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextFilter4844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createContextPartitionItem4871 = new BitSet(new long[]{0x0000000400001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_AND_EXPR_in_createContextPartitionItem4875 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_COMMA_in_createContextPartitionItem4877 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_eventProperty_in_createContextPartitionItem4880 = new BitSet(new long[]{0x0000000400001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_FROM_in_createContextPartitionItem4884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextPartitionItem4886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_createContextCoalesceItem4912 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createContextCoalesceItem4914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextCoalesceItem4916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_createContextGroupItem4940 = new BitSet(new long[]{0x803809E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_BY_in_createContextGroupItem4942 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_createContextGroupItem4945 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createContextGroupItem4947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextGroupItem4951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaQual4981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_columnList_in_createSchemaQual4983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList5009 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_variantList5012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_variantListElement_in_variantList5014 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement5041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement5047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr5072 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr5078 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr5082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_insertIntoExpr5084 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr5087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr5089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr5091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList5124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnList5127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_columnList5129 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause5167 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause5170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause5174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin5188 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin5191 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList5205 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList5208 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin5251 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin5255 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin5259 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin5262 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin5283 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin5297 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin5299 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin5301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent5379 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent5382 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent5385 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent5388 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair5403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair5405 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair5408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause5430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause5466 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause5472 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause5478 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause5484 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_selectionList_in_selectClause5487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList5518 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList5521 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList5524 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement5550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement5568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement5573 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement5576 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement5580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector5636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector5638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector5640 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector5643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector5647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression5678 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression5682 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression5686 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression5690 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression5697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression5699 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression5702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression5704 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression5711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression5715 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression5721 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression5728 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression5735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression5739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr5795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_forExpr5799 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr5802 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x02E0004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionList_in_forExpr5804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr5807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog5843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog5857 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog5863 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog5870 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog5875 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5881 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog5887 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog5893 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog5899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog5906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy5943 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy5945 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5947 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy5950 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5952 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures5981 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5983 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures5986 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem6013 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem6016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem6021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection6052 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection6055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern6070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern6072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern6074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern6076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip6098 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6102 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6106 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6110 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6114 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip6118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval6154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval6156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration6182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration6187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration6189 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat6222 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary6247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary6253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested6265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested6267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested6269 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested6274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested6280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested6286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom6325 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom6331 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom6337 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom6343 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom6349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine6393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine6395 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine6398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine6400 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem6427 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem6429 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem6431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression6456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression6458 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression6460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression6462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression6495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression6497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression6501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression6503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression6508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression6518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression6523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression6534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression6585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression6587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression6589 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression6592 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x02E0004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression6594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression6597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression6650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression6652 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression6657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_MERGE_in_viewExpression6661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression6664 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x82E8004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression6666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression6669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr6729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr6732 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_groupByListExpr6734 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr6769 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr6772 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr6774 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement6799 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement6804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement6808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause6846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit6884 = new BitSet(new long[]{0x0030800080005002L,0x0000000000440000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit6899 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit6903 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit6907 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit6911 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit6942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit6968 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_number_in_outputLimit6979 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit6985 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit6991 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AT_in_outputLimit7022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit7024 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit7041 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_outputLimit7043 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit7046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit7048 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit7068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_outputLimit7070 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outputLimit7073 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_outputLimit7075 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit7080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit7082 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_outputLimitAndTerm_in_outputLimit7115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outputLimitAndTerm7289 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_WHEN_in_outputLimitAndTerm7291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_outputLimitAndTerm7293 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outputLimitAndTerm7296 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_outputLimitAndTerm7298 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimitAndTerm7303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimitAndTerm7305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter7335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter7338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter7342 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter7344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit7390 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit7396 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit7403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024002L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit7409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit7415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit7421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet7473 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8268004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7477 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8268004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7481 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8268004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7485 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8268004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7489 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8268004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7494 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8268004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet7500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause7530 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_whenClause7533 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause7535 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_whenClause7538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause7551 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_elseClause7554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression7567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression7581 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression7584 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression7587 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression7590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression7601 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_caseExpression7603 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression7605 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression7608 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression7611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression7635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression7646 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression7651 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression7653 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression7685 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression7690 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression7692 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression7724 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000061L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression7729 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression7732 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression7735 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression7739 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000061L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression7754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression7760 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression7763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression7776 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression7789 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression7807 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression7821 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression7823 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression7837 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression7851 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression7881 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression7898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression7904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression7910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression7916 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x02E0004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression7918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression7921 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression7926 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression8086 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression8118 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression8122 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression8126 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression8130 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression8154 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression8171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression8177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression8183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression8189 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x02E0004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression8191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression8194 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression8199 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression8295 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression8322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0048000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression8334 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression8340 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression8343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1190000000000000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression8365 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression8368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0090000000000000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression8394 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression8396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1090000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression8422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression8428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression8551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression8553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression8599 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression8601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression8651 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression8653 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression8656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression8658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression8710 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression8712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery8774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr8799 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr8805 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr8807 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr8811 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr8813 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression8854 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004002L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression8859 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression8862 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression8866 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression8880 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression8885 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression8888 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression8891 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression8895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression8910 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression8912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression8925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression8930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression8935 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_unaryExpression8937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression8939 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8944 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8946 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8951 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8953 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression8990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression9002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression9008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression9013 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression9018 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression9020 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression9025 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression9027 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression9064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWKW_in_unaryExpression9069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_unaryExpression9071 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_newAssign_in_unaryExpression9073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_unaryExpression9076 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_newAssign_in_unaryExpression9078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_unaryExpression9082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_newAssign9104 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_newAssign9107 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_newAssign9109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression9137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression9159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression9181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression9183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr9216 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr9222 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr9225 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr9228 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr9235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr9238 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr9246 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr9249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr9258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr9282 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr9287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr9289 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr9292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr9294 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr9301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr9305 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr9311 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr9318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr9322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression9362 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0660004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_arrayExpression9365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression9368 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_arrayExpression9370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1400000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression9377 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_arrayExpression9382 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_arrayExpression9384 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_arrayExpression9389 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_arrayExpression9391 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc9440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9443 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9447 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9452 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc9467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9470 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9474 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9479 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc9494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9497 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9509 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9514 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc9529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc9549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9552 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9556 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9561 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc9576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9579 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9583 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9588 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc9603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9606 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9610 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9615 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc9630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc9635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc9640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc9645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9648 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9653 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9659 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc9672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9674 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9679 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9685 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9690 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9692 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9697 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9699 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc9746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9748 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9753 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9759 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9764 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9771 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9773 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc9820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9823 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc9834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9836 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9840 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9845 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9847 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9852 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9854 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc9899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc9905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9907 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc9910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc9922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9925 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_builtinFunc9949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9952 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc9963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9965 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_builtinFunc9967 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc9974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9979 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9984 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9986 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9991 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9993 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc10038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10041 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc10044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc10052 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc10055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc10057 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10064 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10066 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc10071 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc10073 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation10117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation10119 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x82E0004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation10122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation10125 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_firstAggregation10127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation10133 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation10138 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation10140 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation10145 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation10147 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation10202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation10204 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x82E0004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation10207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation10210 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_lastAggregation10212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation10218 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation10223 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation10225 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation10230 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation10232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation10288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation10290 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x82E0004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation10292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation10295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation10300 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation10302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation10307 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation10309 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr10366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr10386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr10399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_aggregationFilterExpr10418 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_aggregationFilterExpr10420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction10448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction10453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction10465 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction10468 = new BitSet(new long[]{0x803809E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction10470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass10503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass10505 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass10509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass10513 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x82E8004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass10516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass10520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass10553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass10558 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x82E8004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass10561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass10565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent10597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent10604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent10616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_funcIdent10628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_funcIdent10640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_funcIdent10652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_funcIdent10663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs10680 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8268004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs10685 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8268004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs10689 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs10692 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8268004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs10695 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_libFunctionArgItem10709 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8268004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionWithTime_in_libFunctionArgItem10712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList10723 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList10725 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList10728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression10756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression10775 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_followedByRepeat_in_followedByExpression10778 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByRepeat10831 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat10838 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_followedByRepeat10840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_FOLLOWMAX_END_in_followedByRepeat10842 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_orExpression_in_followedByRepeat10846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_orExpression10875 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression10880 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression10882 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression10914 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression10919 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression10921 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression10956 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression10960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression10965 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression10967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression11032 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression11038 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression11044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression11046 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression11052 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression11061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList11176 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8268004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList11178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList11181 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8268004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList11183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList11187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_distinctExpressionAtom11210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix11225 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix11231 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0068000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix11233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix11235 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix11242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix11244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix11252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix11254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression11316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression11320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression11335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression11337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression11342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression11348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression11351 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x82E8004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression11353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression11356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression11405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression11407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression11410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression11412 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x82E8004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression11416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression11420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression11433 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression11436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression11438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange11459 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0360004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_matchUntilRange11466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0110000000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange11471 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0270004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_matchUntilRange11474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange11494 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_matchUntilRange11496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange11507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression11594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression11596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression11605 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0048000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression11616 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x02E0004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression11618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression11621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression11633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression11678 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression11681 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic11711 = new BitSet(new long[]{0x803801E81FFD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_propertyExpressionSelect_in_propertyExpressionAtomic11713 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic11716 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_propertyExpressionAnnotation_in_propertyExpressionAtomic11718 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic11722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic11724 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic11729 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic11731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic11735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionSelect11793 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionSelect11795 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionSelect11797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_propertyExpressionAnnotation11820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAnnotation11824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_propertyExpressionAnnotation11827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAnnotation11831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_propertyExpressionAnnotation11833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList11863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList11866 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList11869 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement11895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement11911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement11916 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement11919 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement11923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector11967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector11969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector11971 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector11974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector11978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression12025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression12027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression12036 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0048000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression12047 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x02E0004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression12049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression12052 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression12064 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_patternFilterAnnotation_in_patternFilterExpression12075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_patternFilterAnnotation12127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterAnnotation12131 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterAnnotation12134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000003024002L});
    public static final BitSet FOLLOW_number_in_patternFilterAnnotation12136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterAnnotation12138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier12174 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier12193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier12197 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy12242 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy12277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy12281 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList12323 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList12326 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x0260004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expression_in_expressionList12329 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList12357 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList12360 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8268004000000000L,0x000000000382401EL});
    public static final BitSet FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList12363 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime12392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime12403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime12414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime12425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime12437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime12448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime12460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime12472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime12477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTimeInclLast12497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeInclLast12502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable12513 = new BitSet(new long[]{0x0600000000000002L,0x0000007000000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable12518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable12522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable12526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable12530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable12534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar12591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand12611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand12624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand12636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand12638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_number_in_frequencyOperand12641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand12645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand12647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand12696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand12700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand12702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand12705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_number_in_rangeOperand12708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand12712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand12714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator12828 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator12832 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator12834 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator12837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator12885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator12889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator12891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator12894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList12941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList12943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1010000000000000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList12946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList12948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1010000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList12952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter12974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter12980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter12985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty13001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty13004 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty13006 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic13032 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0048000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic13041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic13045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic13047 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic13052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic13066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic13071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic13077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic13080 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic13085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic13099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent13222 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent13234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent13236 = new BitSet(new long[]{0x803801E807FC4422L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent13240 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent13279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent13288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent13295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent13302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent13309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent13320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent13327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent13334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent13341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent13348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent13355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent13362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent13369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent13376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent13383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent13390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent13397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent13404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent13411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent13418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent13425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent13432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent13439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent13446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent13453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent13460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent13467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent13474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent13481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent13488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent13495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent13502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent13509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_keywordAllowedIdent13516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent13523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent13530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent13537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent13546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent13555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent13562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent13569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent13576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent13583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent13590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent13597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent13604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent13611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTEXT_in_keywordAllowedIdent13618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr13639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr13648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent13662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent13670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yearPart_in_timePeriod13695 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod13697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod13700 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13703 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13706 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13709 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13712 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod13721 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod13723 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13735 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod13744 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13746 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13749 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13755 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13764 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13769 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13772 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13781 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13783 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13786 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13795 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13797 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020004000000000L,0x0000000003024006L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_yearPart13861 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_yearPart13865 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_yearPart13867 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEARS_in_yearPart13871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEAR_in_yearPart13875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_monthPart13923 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_IDENT_in_monthPart13927 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_substitution_in_monthPart13929 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTHS_in_monthPart13933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTH_in_monthPart13937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_weekPart13985 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_IDENT_in_weekPart13989 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_substitution_in_weekPart13991 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEKS_in_weekPart13995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEK_in_weekPart13999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_dayPart14047 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart14051 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_substitution_in_dayPart14053 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart14057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart14061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_hourPart14110 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart14114 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart14116 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart14120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart14124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_minutePart14173 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart14177 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart14179 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart14183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart14187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart14191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_secondPart14241 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart14245 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart14247 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart14251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart14255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart14259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_millisecondPart14309 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart14313 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart14315 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart14319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart14323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart14327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number14382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number14399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number14416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number14433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution14454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant14473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant14480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant14493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant14513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant14533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant14555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000003024002L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant14561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000003024002L});
    public static final BitSet FOLLOW_number_in_numberconstant14565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant14594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant14610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar5563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar8996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar10381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar10443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar11906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar12387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar12398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar12409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar12420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar12432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar12443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar12454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar12467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar12492 = new BitSet(new long[]{0x0000000000000002L});
}
