  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser implements EsperEPL2GrammarParser_Const {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", "TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "EXPRESSIONDECL", "NEWKW", "START", "CONTEXT", "INITIATED", "TERMINATED", "DATAFLOW", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "FOLLOWED_BY_ITEM", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_IS_EXPR", "EVAL_ISNOT_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "TERM_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "INDEXCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "YEAR_PART", "MONTH_PART", "WEEK_PART", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "ACCESS_AGG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_DEF", "VARIANT_LIST", "MERGE_UNM", "MERGE_MAT", "MERGE_UPD", "MERGE_INS", "MERGE_DEL", "NEW_ITEM", "AGG_FILTER_EXPR", "CREATE_EXPR", "CREATE_CTX", "CREATE_CTX_FIXED", "CREATE_CTX_PART", "CREATE_CTX_COAL", "CREATE_CTX_CAT", "CREATE_CTX_INIT", "CREATE_CTX_CATITEM", "CREATE_CTX_NESTED", "CREATE_CTX_PATTERN", "CREATE_DATAFLOW", "GOP", "GOPPARAM", "GOPPARAMITM", "GOPOUT", "GOPOUTITM", "GOPOUTTYP", "GOPCFG", "GOPCFGITM", "GOPCFGEPL", "PARTITIONITEM", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "JSON_OBJECT", "JSON_ARRAY", "JSON_FIELD", "LBRACK", "RBRACK", "IDENT", "LPAREN", "RPAREN", "COLON", "LCURLY", "RCURLY", "GOES", "ATCHAR", "COMMA", "DOT", "EQUALS", "STAR", "FOLLOWED_BY", "LT", "GT", "QUESTION", "BOR", "PLUS", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "NUM_INT", "FOLLOWMAX_BEGIN", "FOLLOWMAX_END", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int FLOAT_SUFFIX=385;
    public static final int NUMERIC_PARAM_LIST=131;
    public static final int GOPCFGITM=297;
    public static final int OUTERJOIN_EXPR=175;
    public static final int CREATE_COL_TYPE_LIST=256;
    public static final int MERGE_INS=275;
    public static final int TIMEPERIOD_MILLISECONDS=105;
    public static final int CREATE_CTX_FIXED=281;
    public static final int RPAREN=327;
    public static final int LNOT=363;
    public static final int INC=367;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=343;
    public static final int STREAM_EXPR=174;
    public static final int MATCHES=116;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=140;
    public static final int REGEXP=9;
    public static final int GOES=331;
    public static final int MATCHED=122;
    public static final int INITIATED=127;
    public static final int FOLLOWED_BY_EXPR=134;
    public static final int MATCH_UNTIL_RANGE_CLOSED=254;
    public static final int RBRACK=324;
    public static final int GE=350;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=139;
    public static final int EVENT_FILTER_NOT_IN=150;
    public static final int NUM_DOUBLE=307;
    public static final int TIMEPERIOD_MILLISEC=103;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=221;
    public static final int MEDIAN=23;
    public static final int GROUP=44;
    public static final int SUBSELECT_GROUP_EXPR=227;
    public static final int YEAR_PART=207;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=358;
    public static final int EXPRCOL=198;
    public static final int SL_COMMENT=378;
    public static final int NULL_TYPE=306;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=252;
    public static final int GT=339;
    public static final int LAND=375;
    public static final int EVENT_PROP_EXPR=183;
    public static final int LBRACK=323;
    public static final int VIEW_EXPR=156;
    public static final int MERGE_UPD=274;
    public static final int CREATE_SCHEMA_DEF=270;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=141;
    public static final int ON_MERGE_EXPR=244;
    public static final int TIMEPERIOD_SEC=100;
    public static final int ON_SELECT_EXPR=242;
    public static final int TICKED_STRING_LITERAL=359;
    public static final int SUM=18;
    public static final int JSON_ARRAY=321;
    public static final int HexDigit=383;
    public static final int AT=86;
    public static final int AS=17;
    public static final int TIMEPERIOD_MONTH=90;
    public static final int LEFT=38;
    public static final int AVG=19;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int PARTITIONITEM=299;
    public static final int DATABASE_JOIN_EXPR=158;
    public static final int IDENT=325;
    public static final int PLUS=342;
    public static final int EVENT_PROP_INDEXED=186;
    public static final int CREATE_SCHEMA_EXPR=268;
    public static final int CREATE_INDEX_EXPR=236;
    public static final int ACCESS_AGG=265;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int RIGHT_OUTERJOIN_EXPR=178;
    public static final int BY=43;
    public static final int MATCHREC_DEFINE=316;
    public static final int MERGE=121;
    public static final int MERGE_UNM=272;
    public static final int FOLLOWMAX_END=357;
    public static final int LEFT_OUTERJOIN_EXPR=177;
    public static final int GROUP_BY_EXPR=180;
    public static final int EPL_EXPR=308;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int GOPOUTITM=294;
    public static final int MINUS=352;
    public static final int INDEXCOL=199;
    public static final int SEMI=376;
    public static final int STAR_ASSIGN=370;
    public static final int FIRST_AGGREG=262;
    public static final int COLON=328;
    public static final int PREVIOUSTAIL=70;
    public static final int VALUE_NULL=108;
    public static final int NOT_IN_SET=215;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=187;
    public static final int NOT_IN_SUBSELECT_EXPR=230;
    public static final int GUARD_EXPR=154;
    public static final int RCURLY=330;
    public static final int EXISTS_SUBSELECT_EXPR=228;
    public static final int WEEK_PART=209;
    public static final int ROW_LIMIT_EXPR=109;
    public static final int SELECTION_EXPR=171;
    public static final int LW=76;
    public static final int LT=338;
    public static final int CREATE_CTX=280;
    public static final int ORDER_BY_EXPR=181;
    public static final int NEW_ITEM=277;
    public static final int MOD_ASSIGN=371;
    public static final int IN_SUBSELECT_QUERY_EXPR=231;
    public static final int JSON_FIELD=322;
    public static final int COUNT=26;
    public static final int EQUALS=335;
    public static final int RETAININTERSECTION=65;
    public static final int TERMINATED=128;
    public static final int TIMEPERIOD_WEEKS=93;
    public static final int PATTERN=66;
    public static final int MATCHREC_AFTER_SKIP=314;
    public static final int ESCAPE=10;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=169;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int EVAL_ISNOT_EXPR=167;
    public static final int EVENT_FILTER_BETWEEN=151;
    public static final int COALESCE=22;
    public static final int FLOAT_TYPE=302;
    public static final int ANNOTATION_VALUE=261;
    public static final int CLASS_IDENT=153;
    public static final int MATCHREC_PATTERN_ALTER=312;
    public static final int CREATE_WINDOW_EXPR=237;
    public static final int PROPERTY_SELECTION_STREAM=143;
    public static final int ON_DELETE_EXPR=241;
    public static final int ON=41;
    public static final int DELETE=81;
    public static final int INT_TYPE=300;
    public static final int EVAL_BITWISE_EXPR=161;
    public static final int EVERY_EXPR=14;
    public static final int TIMEPERIOD_HOURS=97;
    public static final int STRING_TYPE=304;
    public static final int MATCHREC_DEFINE_ITEM=317;
    public static final int STDDEV=24;
    public static final int OUTPUT=50;
    public static final int WEEKDAY_OPERATOR=233;
    public static final int WHERE=16;
    public static final int DEC=369;
    public static final int GOPOUT=293;
    public static final int BXOR_ASSIGN=372;
    public static final int SNAPSHOT=82;
    public static final int AFTER_LIMIT_EXPR=192;
    public static final int MAX=20;
    public static final int DEFINE=114;
    public static final int TIMEPERIOD_YEARS=89;
    public static final int CONTEXT=126;
    public static final int TIMEPERIOD_DAYS=95;
    public static final int CREATE_CTX_CAT=284;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=188;
    public static final int BOR_ASSIGN=373;
    public static final int COMMA=333;
    public static final int PARTITION=115;
    public static final int IS=42;
    public static final int WHEN_LIMIT_EXPR=195;
    public static final int SOME=49;
    public static final int MATCHREC_MEASURE_ITEM=319;
    public static final int EQUAL=362;
    public static final int EVENT_FILTER_NOT_BETWEEN=152;
    public static final int IN_RANGE=224;
    public static final int TIMEPERIOD_WEEK=92;
    public static final int PROPERTY_WILDCARD_SELECT=144;
    public static final int INSERTINTO_EXPR=197;
    public static final int UNIDIRECTIONAL=63;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=255;
    public static final int TIMEPERIOD_MINUTES=99;
    public static final int RSTREAM=59;
    public static final int TIMEPERIOD_MINUTE=98;
    public static final int NOT_BETWEEN=216;
    public static final int EVAL_OR_EXPR=163;
    public static final int MATCHREC_PATTERN_ATOM=310;
    public static final int BAND=345;
    public static final int QUOTED_STRING_LITERAL=344;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=340;
    public static final int EVENT_FILTER_IDENT=145;
    public static final int UnicodeEscape=381;
    public static final int DBSELECT_EXPR=219;
    public static final int FOLLOWMAX_BEGIN=356;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=267;
    public static final int DBFROM_CLAUSE=220;
    public static final int LE=349;
    public static final int EVAL_IDENT=170;
    public static final int CRONTAB_LIMIT_EXPR=193;
    public static final int STAR=336;
    public static final int DOT_EXPR=203;
    public static final int ISTREAM=60;
    public static final int MOD=354;
    public static final int LIB_FUNC_CHAIN=202;
    public static final int MONTH_PART=208;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=201;
    public static final int FULL_OUTERJOIN_EXPR=179;
    public static final int CREATE_CTX_NESTED=287;
    public static final int MATCHREC_PATTERN_CONCAT=311;
    public static final int USING=120;
    public static final int CAST_EXPR=235;
    public static final int TIMEPERIOD_SECONDS=102;
    public static final int NOT_EQUAL=348;
    public static final int LAST_AGGREG=263;
    public static final int NEWKW=124;
    public static final int HOUR_PART=211;
    public static final int FOLLOWED_BY=337;
    public static final int MATCHREC_PATTERN_NESTED=313;
    public static final int GOPPARAMITM=292;
    public static final int METHOD_JOIN_EXPR=250;
    public static final int CREATE_CTX_PART=282;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=138;
    public static final int CREATE_CTX_COAL=283;
    public static final int ELSE=30;
    public static final int MINUS_ASSIGN=368;
    public static final int INSERTINTO_STREAM_NAME=223;
    public static final int UNARY_MINUS=204;
    public static final int LCURLY=329;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int EVENT_FILTER_NOT_RANGE=148;
    public static final int WS=377;
    public static final int FOLLOWED_BY_ITEM=135;
    public static final int ON_SELECT_INSERT_EXPR=245;
    public static final int GOPPARAM=291;
    public static final int BNOT=364;
    public static final int EVAL_IS_EXPR=166;
    public static final int WHERE_EXPR=159;
    public static final int END=33;
    public static final int INNERJOIN_EXPR=176;
    public static final int TERM_LIMIT_EXPR=196;
    public static final int NOT_REGEXP=218;
    public static final int MATCH_UNTIL_EXPR=251;
    public static final int ANNOTATION=259;
    public static final int LONG_TYPE=301;
    public static final int MATCHREC_PATTERN=309;
    public static final int ATCHAR=332;
    public static final int MINUTE_PART=212;
    public static final int PATTERN_NOT_EXPR=137;
    public static final int SQL_NE=347;
    public static final int UPDATE_EXPR=266;
    public static final int LPAREN=326;
    public static final int IN_SUBSELECT_EXPR=229;
    public static final int BOOLEAN_TRUE=106;
    public static final int OR_EXPR=11;
    public static final int JSON_OBJECT=320;
    public static final int THEN=32;
    public static final int NOT_IN_RANGE=225;
    public static final int MATCHREC_INTERVAL=315;
    public static final int OFFSET=110;
    public static final int SECOND_PART=213;
    public static final int MATCH_RECOGNIZE=112;
    public static final int CASE2=29;
    public static final int BXOR=346;
    public static final int TIMEPERIOD_DAY=94;
    public static final int MERGE_MAT=273;
    public static final int EXISTS=74;
    public static final int TIMEPERIOD_MILLISECOND=104;
    public static final int EVAL_NOTEQUALS_EXPR=165;
    public static final int CREATE_CTX_CATITEM=286;
    public static final int CREATE_VARIABLE_EXPR=249;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=253;
    public static final int PATTERN_FILTER_EXPR=136;
    public static final int LAST_OPERATOR=232;
    public static final int NUMBERSETSTAR=258;
    public static final int EVAL_AND_EXPR=162;
    public static final int SET=83;
    public static final int INSTANCEOF=77;
    public static final int EVENT_PROP_SIMPLE=184;
    public static final int MIN=21;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=271;
    public static final int EVAL_EQUALS_GROUP_EXPR=168;
    public static final int SCHEMA=62;
    public static final int BAND_ASSIGN=374;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=194;
    public static final int WHEN=31;
    public static final int PLUS_ASSIGN=366;
    public static final int DAY_PART=210;
    public static final int START=125;
    public static final int EVENT_FILTER_IN=149;
    public static final int DIV=353;
    public static final int OBJECT_PARAM_ORDERED_EXPR=133;
    public static final int EXPRESSIONDECL=123;
    public static final int OctalEscape=382;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=214;
    public static final int FIRST=52;
    public static final int PRIOR=73;
    public static final int CAST=79;
    public static final int LOR=351;
    public static final int WILDCARD_SELECT=222;
    public static final int EXPONENT=384;
    public static final int PATTERN_INCL_EXPR=157;
    public static final int WHILE=119;
    public static final int BOOL_TYPE=305;
    public static final int GOPCFG=296;
    public static final int ANNOTATION_ARRAY=260;
    public static final int CASE=28;
    public static final int CREATE_EXPR=279;
    public static final int GOP=290;
    public static final int WINDOW_AGGREG=264;
    public static final int DIV_ASSIGN=365;
    public static final int CREATE_CTX_INIT=285;
    public static final int SQL=67;
    public static final int FULL=40;
    public static final int WEEKDAY=75;
    public static final int INSERT=54;
    public static final int ON_UPDATE_EXPR=243;
    public static final int ARRAY_EXPR=206;
    public static final int CREATE_COL_TYPE=257;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=107;
    public static final int TIMEPERIOD_SECOND=101;
    public static final int SUBSELECT_EXPR=226;
    public static final int NUMERIC_PARAM_RANGE=130;
    public static final int CONCAT=200;
    public static final int ON_EXPR=239;
    public static final int NUM_LONG=360;
    public static final int TIME_PERIOD=205;
    public static final int DOUBLE_TYPE=303;
    public static final int ORDER_ELEMENT_EXPR=182;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=234;
    public static final int UNTIL=85;
    public static final int ON_SET_EXPR=248;
    public static final int NUM_INT=355;
    public static final int ON_EXPR_FROM=247;
    public static final int NUM_FLOAT=361;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=380;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=142;
    public static final int INNER=36;
    public static final int NUMERIC_PARAM_FREQUENCY=132;
    public static final int ORDER=56;
    public static final int EVENT_FILTER_PARAM=146;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=189;
    public static final int IRSTREAM=61;
    public static final int UPDATE=111;
    public static final int FOR=118;
    public static final int ON_STREAM=240;
    public static final int EVENT_FILTER_RANGE=147;
    public static final int INDEX=87;
    public static final int ML_COMMENT=379;
    public static final int TIMEPERIOD_LIMIT_EXPR=191;
    public static final int TIMEPERIOD_HOUR=96;
    public static final int ALL=47;
    public static final int BOR=341;
    public static final int DOT=334;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int MATCHREC_MEASURES=318;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int HAVING_EXPR=160;
    public static final int MERGE_DEL=276;
    public static final int EVAL_EQUALS_EXPR=164;
    public static final int NOT_LIKE=217;
    public static final int EVENT_LIMIT_EXPR=190;
    public static final int ON_SELECT_INSERT_OUTPUT=246;
    public static final int CREATE_DATAFLOW=289;
    public static final int AFTER=117;
    public static final int MEASURES=113;
    public static final int AGG_FILTER_EXPR=278;
    public static final int CREATE_CTX_PATTERN=288;
    public static final int JOIN=37;
    public static final int GOPOUTTYP=295;
    public static final int ANY=48;
    public static final int OBSERVER_EXPR=155;
    public static final int CREATE_SCHEMA_EXPR_QUAL=269;
    public static final int EVENT_PROP_MAPPED=185;
    public static final int TIMEPERIOD_YEAR=88;
    public static final int AVEDEV=25;
    public static final int TIMEPERIOD_MONTHS=91;
    public static final int GOPCFGEPL=298;
    public static final int SELECTION_ELEMENT_EXPR=172;
    public static final int CREATE_WINDOW_SELECT_EXPR=238;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=173;
    public static final int DATAFLOW=129;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      private static java.util.Set<Integer> afterScriptTokens = new java.util.HashSet<Integer>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public synchronized static Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public synchronized static Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_YEAR, "'year'");
    	parserTokenParaphases.put(TIMEPERIOD_YEARS, "'years'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTH, "'month'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTHS, "'months'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEK, "'week'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEKS, "'weeks'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserTokenParaphases.put(CONTEXT, "'context'");
    	parserTokenParaphases.put(START, "'start'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(INITIATED, "'initiated'");
    	parserTokenParaphases.put(TERMINATED, "'terminated'");
    	parserTokenParaphases.put(USING, "'using'");
    	parserTokenParaphases.put(EXPRESSIONDECL, "'expression'");
    	parserTokenParaphases.put(NEWKW, "'new'");
    	parserTokenParaphases.put(DATAFLOW, "'dataflow'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      public synchronized static java.util.Set<Integer> getAfterScriptTokens() {
        if (afterScriptTokens.size() == 0) {
    	afterScriptTokens.add(CREATE);
    	afterScriptTokens.add(EXPRESSIONDECL);
    	afterScriptTokens.add(SELECT);
    	afterScriptTokens.add(INSERT);
    	afterScriptTokens.add(ON);
    	afterScriptTokens.add(DELETE);
    	afterScriptTokens.add(UPDATE);
    	afterScriptTokens.add(ATCHAR);
        }
        return afterScriptTokens;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF4=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl2 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression3 = null;
        CommonTree EOF4_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=3;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==ATCHAR) ) {
                    alt1=1;
                }
                else if ( (LA1_0==EXPRESSIONDECL) ) {
                    alt1=2;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1978);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startPatternExpressionRule1982);
            	    expressionDecl2=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionDecl2.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1988);
            patternExpression3=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression3.getTree());
            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1992); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum5 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl6 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression7 = null;
        CommonTree EOF8_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_expressionDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionDecl");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==ATCHAR) ) {
                    alt2=1;
                }
                else if ( (LA2_0==EXPRESSIONDECL) ) {
                    alt2=2;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule2007);
            	    annotationEnum5=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum5.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startEPLExpressionRule2011);
            	    expressionDecl6=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expressionDecl.add(expressionDecl6.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule2017);
            eplExpression7=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule2021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF8);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                while ( stream_expressionDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDecl.nextTree());
                }
                stream_expressionDecl.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF10=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty9 = null;
        CommonTree EOF10_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule2050);
            eventProperty9=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty9.getTree());
            EOF10=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule2054); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startJsonValueRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startJsonValueRule_return startJsonValueRule() throws RecognitionException {
        EsperEPL2GrammarParser.startJsonValueRule_return retval = new EsperEPL2GrammarParser.startJsonValueRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF12=null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue11 = null;
        CommonTree EOF12_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_jsonvalue_in_startJsonValueRule2067);
            jsonvalue11=jsonvalue();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonvalue11.getTree());
            EOF12=(Token)match(input,EOF,FOLLOW_EOF_in_startJsonValueRule2071); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDecl_return expressionDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDecl_return retval = new EsperEPL2GrammarParser.expressionDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token array=null;
        Token name=null;
        Token EXPRESSIONDECL13=null;
        Token RBRACK15=null;
        Token LPAREN17=null;
        Token RPAREN19=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier14 = null;
        EsperEPL2GrammarParser.expressionDialect_return expressionDialect16 = null;
        EsperEPL2GrammarParser.columnList_return columnList18 = null;
        EsperEPL2GrammarParser.expressionDef_return expressionDef20 = null;
        CommonTree array_tree=null;
        CommonTree name_tree=null;
        CommonTree EXPRESSIONDECL13_tree=null;
        CommonTree RBRACK15_tree=null;
        CommonTree LPAREN17_tree=null;
        CommonTree RPAREN19_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_EXPRESSIONDECL=new RewriteRuleTokenStream(adaptor,"token EXPRESSIONDECL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionDef=new RewriteRuleSubtreeStream(adaptor,"rule expressionDef");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_expressionDialect=new RewriteRuleSubtreeStream(adaptor,"rule expressionDialect");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            EXPRESSIONDECL13=(Token)match(input,EXPRESSIONDECL,FOLLOW_EXPRESSIONDECL_in_expressionDecl2090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXPRESSIONDECL.add(EXPRESSIONDECL13);
            int alt3=2;
            int LA3_0 = input.LA(1);
            if ( (LA3_0==IDENT) ) {
                int LA3_1 = input.LA(2);
                if ( (LA3_1==IDENT||LA3_1==DOT) ) {
                    alt3=1;
                }
                else if ( (LA3_1==LBRACK) ) {
                    int LA3_7 = input.LA(3);
                    if ( (LA3_7==RBRACK) ) {
                        alt3=1;
                    }
                }
            }
            else if ( (LA3_0==EVENTS||LA3_0==TICKED_STRING_LITERAL) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifier_in_expressionDecl2092);
                    classIdentifier14=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier14.getTree());
                    }
                    break;
            }
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==LBRACK) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    {
                    array=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_expressionDecl2098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(array);
                    RBRACK15=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_expressionDecl2100); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK15);
                    }
                    break;
            }
            int alt5=2;
            int LA5_0 = input.LA(1);
            if ( (LA5_0==IDENT) ) {
                int LA5_1 = input.LA(2);
                if ( (LA5_1==COLON) ) {
                    alt5=1;
                }
            }
            switch (alt5) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionDialect_in_expressionDecl2104);
                    expressionDialect16=expressionDialect();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionDialect.add(expressionDialect16.getTree());
                    }
                    break;
            }
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDecl2109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt7=2;
            int LA7_0 = input.LA(1);
            if ( (LA7_0==LPAREN) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    {
                    LPAREN17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionDecl2112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN17);
                    int alt6=2;
                    int LA6_0 = input.LA(1);
                    if ( (LA6_0==IDENT) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_columnList_in_expressionDecl2114);
                            columnList18=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList18.getTree());
                            }
                            break;
                    }
                    RPAREN19=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionDecl2117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN19);
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionDef_in_expressionDecl2121);
            expressionDef20=expressionDef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionDef.add(expressionDef20.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_array=new RewriteRuleTokenStream(adaptor,"token array",array);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EXPRESSIONDECL.nextNode(), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_expressionDef.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_expressionDialect.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDialect.nextTree());
                }
                stream_expressionDialect.reset();
                if ( stream_array.hasNext() ) {
                    adaptor.addChild(root_1, stream_array.nextNode());
                }
                stream_array.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDialect_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDialect_return expressionDialect() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDialect_return retval = new EsperEPL2GrammarParser.expressionDialect_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token COLON21=null;
        CommonTree d_tree=null;
        CommonTree COLON21_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            d=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDialect2164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(d);
            COLON21=(Token)match(input,COLON,FOLLOW_COLON_in_expressionDialect2166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON21);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_COLON.nextNode(), root_1);
                adaptor.addChild(root_1, stream_d.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDef_return expressionDef() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDef_return retval = new EsperEPL2GrammarParser.expressionDef_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY22=null;
        Token RCURLY25=null;
        Token LBRACK26=null;
        Token RBRACK28=null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl23 = null;
        EsperEPL2GrammarParser.expression_return expression24 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant27 = null;
        CommonTree LCURLY22_tree=null;
        CommonTree RCURLY25_tree=null;
        CommonTree LBRACK26_tree=null;
        CommonTree RBRACK28_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expressionLambdaDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionLambdaDecl");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        try {
            int alt9=2;
            int LA9_0 = input.LA(1);
            if ( (LA9_0==LCURLY) ) {
                alt9=1;
            }
            else if ( (LA9_0==LBRACK) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);
                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    LCURLY22=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_expressionDef2188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY22);
                    int alt8=2;
                    int LA8_0 = input.LA(1);
                    if ( (LA8_0==IDENT) ) {
                        int LA8_1 = input.LA(2);
                        if ( (LA8_1==GOES) ) {
                            alt8=1;
                        }
                    }
                    else if ( (LA8_0==LPAREN) ) {
                        int LA8_2 = input.LA(2);
                        if ( (LA8_2==IDENT) ) {
                            int LA8_109 = input.LA(3);
                            if ( (LA8_109==COMMA) ) {
                                alt8=1;
                            }
                            else if ( (LA8_109==RPAREN) ) {
                                int LA8_187 = input.LA(4);
                                if ( (LA8_187==GOES) ) {
                                    alt8=1;
                                }
                            }
                        }
                    }
                    switch (alt8) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionLambdaDecl_in_expressionDef2190);
                            expressionLambdaDecl23=expressionLambdaDecl();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionLambdaDecl.add(expressionLambdaDecl23.getTree());
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_expressionDef2193);
                    expression24=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression24.getTree());
                    RCURLY25=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_expressionDef2195); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY25);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOES, "GOES"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( stream_expressionLambdaDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionLambdaDecl.nextTree());
                        }
                        stream_expressionLambdaDecl.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    LBRACK26=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_expressionDef2211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK26);
                    pushFollow(FOLLOW_stringconstant_in_expressionDef2213);
                    stringconstant27=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant27.getTree());
                    RBRACK28=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_expressionDef2215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK28);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRESSIONDECL, "EXPRESSIONDECL"), root_1);
                        adaptor.addChild(root_1, stream_stringconstant.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionLambdaDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionLambdaDecl_return retval = new EsperEPL2GrammarParser.expressionLambdaDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LPAREN29=null;
        Token RPAREN31=null;
        Token GOES32=null;
        EsperEPL2GrammarParser.columnList_return columnList30 = null;
        CommonTree i_tree=null;
        CommonTree LPAREN29_tree=null;
        CommonTree RPAREN31_tree=null;
        CommonTree GOES32_tree=null;
        RewriteRuleTokenStream stream_GOES=new RewriteRuleTokenStream(adaptor,"token GOES");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            int alt10=2;
            int LA10_0 = input.LA(1);
            if ( (LA10_0==IDENT) ) {
                alt10=1;
            }
            else if ( (LA10_0==LPAREN) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);
                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionLambdaDecl2238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    {
                    LPAREN29=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionLambdaDecl2243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN29);
                    pushFollow(FOLLOW_columnList_in_expressionLambdaDecl2245);
                    columnList30=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList30.getTree());
                    RPAREN31=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionLambdaDecl2247); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN31);
                    }
                    }
                    break;
            }
            GOES32=(Token)match(input,GOES,FOLLOW_GOES_in_expressionLambdaDecl2251); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GOES.add(GOES32);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_GOES.nextNode(), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ATCHAR33=null;
        Token char_literal35=null;
        Token char_literal38=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier34 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum36 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum37 = null;
        CommonTree ATCHAR33_tree=null;
        CommonTree char_literal35_tree=null;
        CommonTree char_literal38_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            ATCHAR33=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationNoEnum2286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR33);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum2288);
            classIdentifier34=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier34.getTree());
            int alt12=2;
            int LA12_0 = input.LA(1);
            if ( (LA12_0==LPAREN) ) {
                int LA12_1 = input.LA(2);
                if ( (LA12_1==IDENT) ) {
                    int LA12_15 = input.LA(3);
                    if ( (LA12_15==EQUALS) ) {
                        int LA12_34 = input.LA(4);
                        if ( ((LA12_34>=BOOLEAN_TRUE && LA12_34<=VALUE_NULL)||LA12_34==NUM_DOUBLE||LA12_34==LCURLY||LA12_34==ATCHAR||(LA12_34>=PLUS && LA12_34<=QUOTED_STRING_LITERAL)||LA12_34==MINUS||LA12_34==NUM_INT||(LA12_34>=NUM_LONG && LA12_34<=NUM_FLOAT)) ) {
                            alt12=1;
                        }
                    }
                }
                else if ( ((LA12_1>=BOOLEAN_TRUE && LA12_1<=VALUE_NULL)||LA12_1==NUM_DOUBLE||LA12_1==RPAREN||LA12_1==LCURLY||LA12_1==ATCHAR||(LA12_1>=PLUS && LA12_1<=QUOTED_STRING_LITERAL)||LA12_1==MINUS||LA12_1==NUM_INT||(LA12_1>=NUM_LONG && LA12_1<=NUM_FLOAT)) ) {
                    alt12=1;
                }
            }
            switch (alt12) {
                case 1 :
                    {
                    char_literal35=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum2292); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal35);
                    int alt11=3;
                    int LA11_0 = input.LA(1);
                    if ( (LA11_0==IDENT) ) {
                        alt11=1;
                    }
                    else if ( ((LA11_0>=BOOLEAN_TRUE && LA11_0<=VALUE_NULL)||LA11_0==NUM_DOUBLE||LA11_0==LCURLY||LA11_0==ATCHAR||(LA11_0>=PLUS && LA11_0<=QUOTED_STRING_LITERAL)||LA11_0==MINUS||LA11_0==NUM_INT||(LA11_0>=NUM_LONG && LA11_0<=NUM_FLOAT)) ) {
                        alt11=2;
                    }
                    switch (alt11) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum2296);
                            elementValuePairsNoEnum36=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum36.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum2300);
                            elementValueNoEnum37=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum37.getTree());
                            }
                            break;
                    }
                    char_literal38=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum2305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal38);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ATCHAR39=null;
        Token char_literal41=null;
        Token char_literal44=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier40 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum42 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum43 = null;
        CommonTree ATCHAR39_tree=null;
        CommonTree char_literal41_tree=null;
        CommonTree char_literal44_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            ATCHAR39=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationEnum2346); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR39);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum2348);
            classIdentifier40=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier40.getTree());
            int alt14=2;
            int LA14_0 = input.LA(1);
            if ( (LA14_0==LPAREN) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    {
                    char_literal41=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum2352); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal41);
                    int alt13=3;
                    int LA13_0 = input.LA(1);
                    if ( (LA13_0==IDENT) ) {
                        int LA13_1 = input.LA(2);
                        if ( (LA13_1==EQUALS) ) {
                            alt13=1;
                        }
                        else if ( (LA13_1==RPAREN||LA13_1==DOT) ) {
                            alt13=2;
                        }
                    }
                    else if ( (LA13_0==EVENTS||(LA13_0>=BOOLEAN_TRUE && LA13_0<=VALUE_NULL)||LA13_0==NUM_DOUBLE||LA13_0==LCURLY||LA13_0==ATCHAR||(LA13_0>=PLUS && LA13_0<=QUOTED_STRING_LITERAL)||LA13_0==MINUS||LA13_0==NUM_INT||(LA13_0>=TICKED_STRING_LITERAL && LA13_0<=NUM_FLOAT)) ) {
                        alt13=2;
                    }
                    switch (alt13) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum2356);
                            elementValuePairsEnum42=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum42.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum2360);
                            elementValueEnum43=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum43.getTree());
                            }
                            break;
                    }
                    char_literal44=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum2365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal44);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA46=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum45 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum47 = null;
        CommonTree COMMA46_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2406);
            elementValuePairNoEnum45=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum45.getTree());
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);
                if ( (LA15_0==COMMA) ) {
                    alt15=1;
                }
                switch (alt15) {
            	case 1 :
            	    {
            	    COMMA46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum2409); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2412);
            	    elementValuePairNoEnum47=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum47.getTree());
            	    }
            	    break;
            	default :
            	    break loop15;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA49=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum48 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum50 = null;
        CommonTree COMMA49_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2433);
            elementValuePairEnum48=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum48.getTree());
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);
                if ( (LA16_0==COMMA) ) {
                    alt16=1;
                }
                switch (alt16) {
            	case 1 :
            	    {
            	    COMMA49=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum2436); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2439);
            	    elementValuePairEnum50=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum50.getTree());
            	    }
            	    break;
            	default :
            	    break loop16;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal51=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum52 = null;
        CommonTree i_tree=null;
        CommonTree char_literal51_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum2462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal51=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum2464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal51);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2466);
            elementValueNoEnum52=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum52.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal53=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum54 = null;
        CommonTree i_tree=null;
        CommonTree char_literal53_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum2503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal53=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum2505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal53);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum2507);
            elementValueEnum54=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum54.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum55 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum56 = null;
        EsperEPL2GrammarParser.constant_return constant57 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt17=3;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt17=1;
                }
                break;
            case LCURLY:
                {
                alt17=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt17=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);
                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2538);
                    annotationEnum55=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum55.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2549);
                    elementValueArrayNoEnum56=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum56.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2562);
                    constant57=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant57.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum58 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum59 = null;
        EsperEPL2GrammarParser.constant_return constant60 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier61 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt18=4;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt18=1;
                }
                break;
            case LCURLY:
                {
                alt18=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt18=3;
                }
                break;
            case EVENTS:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt18=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);
                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2585);
                    annotationEnum58=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum58.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2596);
                    elementValueArrayEnum59=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum59.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2609);
                    constant60=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant60.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2617);
                    classIdentifier61=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier61.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal62=null;
        Token char_literal64=null;
        Token char_literal66=null;
        Token char_literal67=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum63 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum65 = null;
        CommonTree char_literal62_tree=null;
        CommonTree char_literal64_tree=null;
        CommonTree char_literal66_tree=null;
        CommonTree char_literal67_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal62=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal62);
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( ((LA20_0>=BOOLEAN_TRUE && LA20_0<=VALUE_NULL)||LA20_0==NUM_DOUBLE||LA20_0==LCURLY||LA20_0==ATCHAR||(LA20_0>=PLUS && LA20_0<=QUOTED_STRING_LITERAL)||LA20_0==MINUS||LA20_0==NUM_INT||(LA20_0>=NUM_LONG && LA20_0<=NUM_FLOAT)) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2640);
                    elementValueNoEnum63=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum63.getTree());
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);
                        if ( (LA19_0==COMMA) ) {
                            int LA19_1 = input.LA(2);
                            if ( ((LA19_1>=BOOLEAN_TRUE && LA19_1<=VALUE_NULL)||LA19_1==NUM_DOUBLE||LA19_1==LCURLY||LA19_1==ATCHAR||(LA19_1>=PLUS && LA19_1<=QUOTED_STRING_LITERAL)||LA19_1==MINUS||LA19_1==NUM_INT||(LA19_1>=NUM_LONG && LA19_1<=NUM_FLOAT)) ) {
                                alt19=1;
                            }
                        }
                        switch (alt19) {
                    	case 1 :
                    	    {
                    	    char_literal64=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2643); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal64);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2645);
                    	    elementValueNoEnum65=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum65.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop19;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==COMMA) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    char_literal66=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal66);
                    }
                    break;
            }
            char_literal67=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal67);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal68=null;
        Token char_literal70=null;
        Token char_literal72=null;
        Token char_literal73=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum69 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum71 = null;
        CommonTree char_literal68_tree=null;
        CommonTree char_literal70_tree=null;
        CommonTree char_literal72_tree=null;
        CommonTree char_literal73_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal68=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2685); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal68);
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==EVENTS||(LA23_0>=BOOLEAN_TRUE && LA23_0<=VALUE_NULL)||LA23_0==NUM_DOUBLE||LA23_0==IDENT||LA23_0==LCURLY||LA23_0==ATCHAR||(LA23_0>=PLUS && LA23_0<=QUOTED_STRING_LITERAL)||LA23_0==MINUS||LA23_0==NUM_INT||(LA23_0>=TICKED_STRING_LITERAL && LA23_0<=NUM_FLOAT)) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2688);
                    elementValueEnum69=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum69.getTree());
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);
                        if ( (LA22_0==COMMA) ) {
                            int LA22_1 = input.LA(2);
                            if ( (LA22_1==EVENTS||(LA22_1>=BOOLEAN_TRUE && LA22_1<=VALUE_NULL)||LA22_1==NUM_DOUBLE||LA22_1==IDENT||LA22_1==LCURLY||LA22_1==ATCHAR||(LA22_1>=PLUS && LA22_1<=QUOTED_STRING_LITERAL)||LA22_1==MINUS||LA22_1==NUM_INT||(LA22_1>=TICKED_STRING_LITERAL && LA22_1<=NUM_FLOAT)) ) {
                                alt22=1;
                            }
                        }
                        switch (alt22) {
                    	case 1 :
                    	    {
                    	    char_literal70=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2691); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal70);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2693);
                    	    elementValueEnum71=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum71.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop22;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==COMMA) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    char_literal72=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2700); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal72);
                    }
                    break;
            }
            char_literal73=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal73);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.contextExpr_return contextExpr74 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr75 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr76 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr77 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr78 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr79 = null;
        EsperEPL2GrammarParser.createContextExpr_return createContextExpr80 = null;
        EsperEPL2GrammarParser.createExpressionExpr_return createExpressionExpr81 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr82 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr83 = null;
        EsperEPL2GrammarParser.createDataflow_return createDataflow84 = null;
        EsperEPL2GrammarParser.fafDelete_return fafDelete85 = null;
        EsperEPL2GrammarParser.fafUpdate_return fafUpdate86 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr87 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==CONTEXT) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    pushFollow(FOLLOW_contextExpr_in_eplExpression2736);
                    contextExpr74=contextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, contextExpr74.getTree());
                    }
                    break;
            }
            int alt26=12;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt26=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt26=2;
                    }
                    break;
                case CONTEXT:
                    {
                    alt26=6;
                    }
                    break;
                case DATAFLOW:
                    {
                    alt26=10;
                    }
                    break;
                case IDENT:
                    {
                    switch ( input.LA(3) ) {
                    case INDEX:
                        {
                        alt26=3;
                        }
                        break;
                    case SCHEMA:
                        {
                        alt26=5;
                        }
                        break;
                    case VARIABLE:
                        {
                        alt26=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 10, input);
                        throw nvae;
                    }
                    }
                    break;
                case SCHEMA:
                    {
                    alt26=5;
                    }
                    break;
                case VARIABLE:
                    {
                    alt26=4;
                    }
                    break;
                case EXPRESSIONDECL:
                    {
                    alt26=7;
                    }
                    break;
                case INDEX:
                    {
                    alt26=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt26=8;
                }
                break;
            case UPDATE:
                {
                int LA26_5 = input.LA(2);
                if ( (LA26_5==ISTREAM) ) {
                    alt26=9;
                }
                else if ( (LA26_5==EVENTS||LA26_5==IDENT||LA26_5==TICKED_STRING_LITERAL) ) {
                    alt26=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 5, input);
                    throw nvae;
                }
                }
                break;
            case DELETE:
                {
                alt26=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);
                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2743);
                    selectExpr75=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr75.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2748);
                    createWindowExpr76=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr76.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2753);
                    createIndexExpr77=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr77.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2758);
                    createVariableExpr78=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr78.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2763);
                    createSchemaExpr79=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr79.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_createContextExpr_in_eplExpression2768);
                    createContextExpr80=createContextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextExpr80.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_createExpressionExpr_in_eplExpression2773);
                    createExpressionExpr81=createExpressionExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createExpressionExpr81.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2778);
                    onExpr82=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr82.getTree());
                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2783);
                    updateExpr83=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr83.getTree());
                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_createDataflow_in_eplExpression2788);
                    createDataflow84=createDataflow();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createDataflow84.getTree());
                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_fafDelete_in_eplExpression2793);
                    fafDelete85=fafDelete();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fafDelete85.getTree());
                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_fafUpdate_in_eplExpression2798);
                    fafUpdate86=fafUpdate();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fafUpdate86.getTree());
                    }
                    break;
            }
            int alt27=2;
            int LA27_0 = input.LA(1);
            if ( (LA27_0==FOR) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2801);
                    forExpr87=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr87.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class contextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.contextExpr_return contextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.contextExpr_return retval = new EsperEPL2GrammarParser.contextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token CONTEXT88=null;
        CommonTree i_tree=null;
        CommonTree CONTEXT88_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        try {
            {
            CONTEXT88=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextExpr2814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT88);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_contextExpr2818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTEXT.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT89=null;
        Token SELECT91=null;
        Token FROM93=null;
        Token WHERE96=null;
        Token GROUP98=null;
        Token BY99=null;
        Token HAVING101=null;
        Token OUTPUT103=null;
        Token ORDER105=null;
        Token BY106=null;
        Token ROW_LIMIT_EXPR108=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr90 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause92 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause94 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog95 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause97 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr100 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause102 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit104 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr107 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit109 = null;
        CommonTree INSERT89_tree=null;
        CommonTree SELECT91_tree=null;
        CommonTree FROM93_tree=null;
        CommonTree WHERE96_tree=null;
        CommonTree GROUP98_tree=null;
        CommonTree BY99_tree=null;
        CommonTree HAVING101_tree=null;
        CommonTree OUTPUT103_tree=null;
        CommonTree ORDER105_tree=null;
        CommonTree BY106_tree=null;
        CommonTree ROW_LIMIT_EXPR108_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt28=2;
            int LA28_0 = input.LA(1);
            if ( (LA28_0==INSERT) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    {
                    INSERT89=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2842); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2845);
                    insertIntoExpr90=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr90.getTree());
                    }
                    break;
            }
            SELECT91=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2851); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2854);
            selectClause92=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause92.getTree());
            int alt29=2;
            int LA29_0 = input.LA(1);
            if ( (LA29_0==FROM) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    {
                    FROM93=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2859); if (state.failed) return retval;
                    pushFollow(FOLLOW_fromClause_in_selectExpr2862);
                    fromClause94=fromClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause94.getTree());
                    }
                    break;
            }
            int alt30=2;
            int LA30_0 = input.LA(1);
            if ( (LA30_0==MATCH_RECOGNIZE) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2868);
                    matchRecog95=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog95.getTree());
                    }
                    break;
            }
            int alt31=2;
            int LA31_0 = input.LA(1);
            if ( (LA31_0==WHERE) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    {
                    WHERE96=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2874); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2877);
                    whereClause97=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause97.getTree());
                    }
                    break;
            }
            int alt32=2;
            int LA32_0 = input.LA(1);
            if ( (LA32_0==GROUP) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    {
                    GROUP98=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2884); if (state.failed) return retval;
                    BY99=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2887); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2890);
                    groupByListExpr100=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr100.getTree());
                    }
                    break;
            }
            int alt33=2;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==HAVING) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    {
                    HAVING101=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2897); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2900);
                    havingClause102=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause102.getTree());
                    }
                    break;
            }
            int alt34=2;
            int LA34_0 = input.LA(1);
            if ( (LA34_0==OUTPUT) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    {
                    OUTPUT103=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2907); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2910);
                    outputLimit104=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit104.getTree());
                    }
                    break;
            }
            int alt35=2;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==ORDER) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    {
                    ORDER105=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2917); if (state.failed) return retval;
                    BY106=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2920); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2923);
                    orderByListExpr107=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr107.getTree());
                    }
                    break;
            }
            int alt36=2;
            int LA36_0 = input.LA(1);
            if ( (LA36_0==ROW_LIMIT_EXPR) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR108=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2930); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2933);
                    rowLimit109=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit109.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON110=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr111 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr112 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr113 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr114 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert115 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr116 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr117 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr118 = null;
        CommonTree ON110_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON110=(Token)match(input,ON,FOLLOW_ON_in_onExpr2948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON110);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2950);
            onStreamExpr111=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr111.getTree());
            int alt40=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt40=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt40=2;
                }
                break;
            case SET:
                {
                alt40=3;
                }
                break;
            case UPDATE:
                {
                alt40=4;
                }
                break;
            case MERGE:
                {
                alt40=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);
                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2955);
                    onDeleteExpr112=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr112.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2959);
                    onSelectExpr113=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr113.getTree());
                    int alt39=2;
                    int LA39_0 = input.LA(1);
                    if ( (LA39_0==INSERT) ) {
                        alt39=1;
                    }
                    switch (alt39) {
                        case 1 :
                            {
                            int cnt37=0;
                            loop37:
                            do {
                                int alt37=2;
                                int LA37_0 = input.LA(1);
                                if ( (LA37_0==INSERT) ) {
                                    alt37=1;
                                }
                                switch (alt37) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2962);
                            	    onSelectInsertExpr114=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr114.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt37 >= 1 ) break loop37;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(37, input);
                                        throw eee;
                                }
                                cnt37++;
                            } while (true);
                            int alt38=2;
                            int LA38_0 = input.LA(1);
                            if ( (LA38_0==OUTPUT) ) {
                                alt38=1;
                            }
                            switch (alt38) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2965);
                                    outputClauseInsert115=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert115.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2972);
                    onSetExpr116=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr116.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2976);
                    onUpdateExpr117=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr117.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2980);
                    onMergeExpr118=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr118.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS121=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression119 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression120 = null;
        CommonTree i_tree=null;
        CommonTree AS121_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt41=2;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==EVENTS||LA41_0==IDENT||LA41_0==TICKED_STRING_LITERAL) ) {
                alt41=1;
            }
            else if ( (LA41_0==PATTERN) ) {
                alt41=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);
                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr3025);
                    eventFilterExpression119=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression119.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr3029);
                    patternInclusionExpression120=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression120.getTree());
                    }
                    break;
            }
            int alt42=3;
            int LA42_0 = input.LA(1);
            if ( (LA42_0==AS) ) {
                alt42=1;
            }
            else if ( (LA42_0==IDENT) ) {
                alt42=2;
            }
            switch (alt42) {
                case 1 :
                    {
                    AS121=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr3033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS121);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr3037); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr3043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token UPDATE122=null;
        Token ISTREAM123=null;
        EsperEPL2GrammarParser.updateDetails_return updateDetails124 = null;
        CommonTree UPDATE122_tree=null;
        CommonTree ISTREAM123_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_updateDetails=new RewriteRuleSubtreeStream(adaptor,"rule updateDetails");
        try {
            {
            UPDATE122=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr3074); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE122);
            ISTREAM123=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr3076); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM123);
            pushFollow(FOLLOW_updateDetails_in_updateExpr3078);
            updateDetails124=updateDetails();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_updateDetails.add(updateDetails124.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_updateDetails.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateDetails_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateDetails_return updateDetails() throws RecognitionException {
        EsperEPL2GrammarParser.updateDetails_return retval = new EsperEPL2GrammarParser.updateDetails_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS126=null;
        Token SET127=null;
        Token COMMA129=null;
        Token WHERE131=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier125 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment128 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment130 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause132 = null;
        CommonTree i_tree=null;
        CommonTree AS126_tree=null;
        CommonTree SET127_tree=null;
        CommonTree COMMA129_tree=null;
        CommonTree WHERE131_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifier_in_updateDetails3100);
            classIdentifier125=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier125.getTree());
            int alt43=3;
            int LA43_0 = input.LA(1);
            if ( (LA43_0==AS) ) {
                alt43=1;
            }
            else if ( (LA43_0==IDENT) ) {
                alt43=2;
            }
            switch (alt43) {
                case 1 :
                    {
                    AS126=(Token)match(input,AS,FOLLOW_AS_in_updateDetails3103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS126);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateDetails3107); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateDetails3113); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET127=(Token)match(input,SET,FOLLOW_SET_in_updateDetails3119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET127);
            pushFollow(FOLLOW_onSetAssignment_in_updateDetails3121);
            onSetAssignment128=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment128.getTree());
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);
                if ( (LA44_0==COMMA) ) {
                    alt44=1;
                }
                switch (alt44) {
            	case 1 :
            	    {
            	    COMMA129=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateDetails3124); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA129);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateDetails3126);
            	    onSetAssignment130=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment130.getTree());
            	    }
            	    break;
            	default :
            	    break loop44;
                }
            } while (true);
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( (LA45_0==WHERE) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    {
                    WHERE131=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateDetails3134); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE131);
                    pushFollow(FOLLOW_whereClause_in_updateDetails3136);
                    whereClause132=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause132.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE, "UPDATE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE133=null;
        Token INTO134=null;
        Token AS135=null;
        Token WHERE136=null;
        EsperEPL2GrammarParser.whereClause_return whereClause137 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem138 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE133_tree=null;
        CommonTree INTO134_tree=null;
        CommonTree AS135_tree=null;
        CommonTree WHERE136_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE133=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr3171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE133);
            int alt46=2;
            int LA46_0 = input.LA(1);
            if ( (LA46_0==INTO) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    {
                    INTO134=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr3173); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO134);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3178); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt47=3;
            int LA47_0 = input.LA(1);
            if ( (LA47_0==AS) ) {
                alt47=1;
            }
            else if ( (LA47_0==IDENT) ) {
                alt47=2;
            }
            switch (alt47) {
                case 1 :
                    {
                    AS135=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr3181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS135);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3185); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt48=2;
            int LA48_0 = input.LA(1);
            if ( (LA48_0==WHERE) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    {
                    WHERE136=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr3198); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE136);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr3200);
                    whereClause137=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause137.getTree());
                    }
                    break;
            }
            int cnt49=0;
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);
                if ( (LA49_0==WHEN) ) {
                    alt49=1;
                }
                switch (alt49) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr3208);
            	    mergeItem138=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem138.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt49 >= 1 ) break loop49;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(49, input);
                        throw eee;
                }
                cnt49++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched139 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched140 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==WHEN) ) {
                int LA50_1 = input.LA(2);
                if ( (LA50_1==MATCHED) ) {
                    alt50=1;
                }
                else if ( (LA50_1==NOT_EXPR) ) {
                    alt50=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 50, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);
                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem3242);
                    mergeMatched139=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched139.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem3246);
                    mergeUnmatched140=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched140.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN141=null;
        Token MATCHED142=null;
        Token AND_EXPR143=null;
        EsperEPL2GrammarParser.expression_return expression144 = null;
        EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem145 = null;
        CommonTree WHEN141_tree=null;
        CommonTree MATCHED142_tree=null;
        CommonTree AND_EXPR143_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeMatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatchedItem");
        try {
            {
            WHEN141=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched3259); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN141);
            MATCHED142=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched3261); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED142);
            int alt51=2;
            int LA51_0 = input.LA(1);
            if ( (LA51_0==AND_EXPR) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    {
                    AND_EXPR143=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched3264); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR143);
                    pushFollow(FOLLOW_expression_in_mergeMatched3266);
                    expression144=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression144.getTree());
                    }
                    break;
            }
            int cnt52=0;
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);
                if ( (LA52_0==THEN) ) {
                    alt52=1;
                }
                switch (alt52) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatchedItem_in_mergeMatched3270);
            	    mergeMatchedItem145=mergeMatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatchedItem.add(mergeMatchedItem145.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt52 >= 1 ) break loop52;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(52, input);
                        throw eee;
                }
                cnt52++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_MAT, "MERGE_MAT"), root_1);
                if ( !(stream_mergeMatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeMatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatchedItem.nextTree());
                }
                stream_mergeMatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatchedItem_return retval = new EsperEPL2GrammarParser.mergeMatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token d=null;
        Token THEN146=null;
        Token SET147=null;
        Token COMMA149=null;
        Token WHERE151=null;
        Token WHERE153=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment148 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment150 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause152 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause154 = null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert155 = null;
        CommonTree u_tree=null;
        CommonTree d_tree=null;
        CommonTree THEN146_tree=null;
        CommonTree SET147_tree=null;
        CommonTree COMMA149_tree=null;
        CommonTree WHERE151_tree=null;
        CommonTree WHERE153_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_mergeInsert=new RewriteRuleSubtreeStream(adaptor,"rule mergeInsert");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            THEN146=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatchedItem3296); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN146);
            int alt56=3;
            switch ( input.LA(1) ) {
            case UPDATE:
                {
                alt56=1;
                }
                break;
            case DELETE:
                {
                alt56=2;
                }
                break;
            case INSERT:
                {
                alt56=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);
                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    {
                    {
                    u=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatchedItem3311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(u);
                    SET147=(Token)match(input,SET,FOLLOW_SET_in_mergeMatchedItem3313); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET147);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3315);
                    onSetAssignment148=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment148.getTree());
                    loop53:
                    do {
                        int alt53=2;
                        int LA53_0 = input.LA(1);
                        if ( (LA53_0==COMMA) ) {
                            alt53=1;
                        }
                        switch (alt53) {
                    	case 1 :
                    	    {
                    	    COMMA149=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatchedItem3318); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA149);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3320);
                    	    onSetAssignment150=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment150.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop53;
                        }
                    } while (true);
                    }
                    int alt54=2;
                    int LA54_0 = input.LA(1);
                    if ( (LA54_0==WHERE) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            {
                            WHERE151=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3326); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE151);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3328);
                            whereClause152=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause152.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatchedItem3340); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    int alt55=2;
                    int LA55_0 = input.LA(1);
                    if ( (LA55_0==WHERE) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            {
                            WHERE153=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3343); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE153);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3345);
                            whereClause154=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause154.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_mergeInsert_in_mergeMatchedItem3356);
                    mergeInsert155=mergeInsert();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mergeInsert.add(mergeInsert155.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_DEL, "MERGE_DEL"), root_1);
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_1, (CommonTree)adaptor.create(INT_TYPE, "dummy"));
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (u != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_mergeInsert.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN156=null;
        Token NOT_EXPR157=null;
        Token MATCHED158=null;
        Token AND_EXPR159=null;
        EsperEPL2GrammarParser.expression_return expression160 = null;
        EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem161 = null;
        CommonTree WHEN156_tree=null;
        CommonTree NOT_EXPR157_tree=null;
        CommonTree MATCHED158_tree=null;
        CommonTree AND_EXPR159_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeUnmatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatchedItem");
        try {
            {
            WHEN156=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched3413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN156);
            NOT_EXPR157=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched3415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR157);
            MATCHED158=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched3417); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED158);
            int alt57=2;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==AND_EXPR) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    {
                    AND_EXPR159=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched3420); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR159);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched3422);
                    expression160=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression160.getTree());
                    }
                    break;
            }
            int cnt58=0;
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);
                if ( (LA58_0==THEN) ) {
                    alt58=1;
                }
                switch (alt58) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3426);
            	    mergeUnmatchedItem161=mergeUnmatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatchedItem.add(mergeUnmatchedItem161.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt58 >= 1 ) break loop58;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(58, input);
                        throw eee;
                }
                cnt58++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UNM, "MERGE_UNM"), root_1);
                if ( !(stream_mergeUnmatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeUnmatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatchedItem.nextTree());
                }
                stream_mergeUnmatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatchedItem_return retval = new EsperEPL2GrammarParser.mergeUnmatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token THEN162=null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert163 = null;
        CommonTree THEN162_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            THEN162=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatchedItem3453); if (state.failed) return retval;
            pushFollow(FOLLOW_mergeInsert_in_mergeUnmatchedItem3456);
            mergeInsert163=mergeInsert();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeInsert163.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeInsert_return mergeInsert() throws RecognitionException {
        EsperEPL2GrammarParser.mergeInsert_return retval = new EsperEPL2GrammarParser.mergeInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT164=null;
        Token INTO165=null;
        Token LPAREN167=null;
        Token RPAREN169=null;
        Token SELECT170=null;
        Token WHERE172=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier166 = null;
        EsperEPL2GrammarParser.columnList_return columnList168 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList171 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause173 = null;
        CommonTree INSERT164_tree=null;
        CommonTree INTO165_tree=null;
        CommonTree LPAREN167_tree=null;
        CommonTree RPAREN169_tree=null;
        CommonTree SELECT170_tree=null;
        CommonTree WHERE172_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            INSERT164=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeInsert3471); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT164);
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==INTO) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    INTO165=(Token)match(input,INTO,FOLLOW_INTO_in_mergeInsert3474); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO165);
                    pushFollow(FOLLOW_classIdentifier_in_mergeInsert3476);
                    classIdentifier166=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier166.getTree());
                    }
                    break;
            }
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==LPAREN) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    LPAREN167=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeInsert3481); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN167);
                    pushFollow(FOLLOW_columnList_in_mergeInsert3483);
                    columnList168=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList168.getTree());
                    RPAREN169=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeInsert3485); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN169);
                    }
                    break;
            }
            SELECT170=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeInsert3489); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT170);
            pushFollow(FOLLOW_selectionList_in_mergeInsert3491);
            selectionList171=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList171.getTree());
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==WHERE) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    WHERE172=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeInsert3494); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE172);
                    pushFollow(FOLLOW_whereClause_in_mergeInsert3496);
                    whereClause173=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause173.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token INSERT174=null;
        Token SELECT176=null;
        Token AND_EXPR177=null;
        Token DISTINCT178=null;
        Token WHERE181=null;
        Token GROUP183=null;
        Token BY184=null;
        Token HAVING186=null;
        Token ORDER188=null;
        Token BY189=null;
        Token ROW_LIMIT_EXPR191=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr175 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList179 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom180 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause182 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr185 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause187 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr190 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit192 = null;
        CommonTree d_tree=null;
        CommonTree INSERT174_tree=null;
        CommonTree SELECT176_tree=null;
        CommonTree AND_EXPR177_tree=null;
        CommonTree DISTINCT178_tree=null;
        CommonTree WHERE181_tree=null;
        CommonTree GROUP183_tree=null;
        CommonTree BY184_tree=null;
        CommonTree HAVING186_tree=null;
        CommonTree ORDER188_tree=null;
        CommonTree BY189_tree=null;
        CommonTree ROW_LIMIT_EXPR191_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt62=2;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==INSERT) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    INSERT174=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr3542); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT174);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr3544);
                    insertIntoExpr175=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr175.getTree());
                    }
                    break;
            }
            SELECT176=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr3552); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT176);
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==AND_EXPR||LA64_0==DELETE) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    int alt63=2;
                    int LA63_0 = input.LA(1);
                    if ( (LA63_0==AND_EXPR) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            {
                            AND_EXPR177=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_onSelectExpr3555); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR177);
                            }
                            break;
                    }
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_onSelectExpr3560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    }
                    break;
            }
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==DISTINCT) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    DISTINCT178=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr3564); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT178);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr3567);
            selectionList179=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList179.getTree());
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==FROM) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr3571);
                    onExprFrom180=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom180.getTree());
                    }
                    break;
            }
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==WHERE) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    WHERE181=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr3577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE181);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr3579);
                    whereClause182=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause182.getTree());
                    }
                    break;
            }
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==GROUP) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    GROUP183=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr3588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP183);
                    BY184=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3590); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY184);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr3592);
                    groupByListExpr185=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr185.getTree());
                    }
                    break;
            }
            int alt69=2;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==HAVING) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    HAVING186=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr3599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING186);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr3601);
                    havingClause187=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause187.getTree());
                    }
                    break;
            }
            int alt70=2;
            int LA70_0 = input.LA(1);
            if ( (LA70_0==ORDER) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    ORDER188=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr3608); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER188);
                    BY189=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3610); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY189);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr3612);
                    orderByListExpr190=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr190.getTree());
                    }
                    break;
            }
            int alt71=2;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==ROW_LIMIT_EXPR) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR191=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3619); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR191);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr3621);
                    rowLimit192=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit192.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE193=null;
        Token AS194=null;
        Token SET195=null;
        Token COMMA197=null;
        Token WHERE199=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment196 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment198 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause200 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE193_tree=null;
        CommonTree AS194_tree=null;
        CommonTree SET195_tree=null;
        CommonTree COMMA197_tree=null;
        CommonTree WHERE199_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE193=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr3685); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE193);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt72=3;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==AS) ) {
                alt72=1;
            }
            else if ( (LA72_0==IDENT) ) {
                alt72=2;
            }
            switch (alt72) {
                case 1 :
                    {
                    AS194=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr3695); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS194);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3699); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3705); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET195=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr3711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET195);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3713);
            onSetAssignment196=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment196.getTree());
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);
                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }
                switch (alt73) {
            	case 1 :
            	    {
            	    COMMA197=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr3716); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA197);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3718);
            	    onSetAssignment198=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment198.getTree());
            	    }
            	    break;
            	default :
            	    break loop73;
                }
            } while (true);
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==WHERE) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    WHERE199=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr3725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE199);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr3727);
                    whereClause200=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause200.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT201=null;
        Token SELECT203=null;
        Token WHERE205=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr202 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList204 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause206 = null;
        CommonTree INSERT201_tree=null;
        CommonTree SELECT203_tree=null;
        CommonTree WHERE205_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT201=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT201);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3780);
            insertIntoExpr202=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr202.getTree());
            SELECT203=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3784); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT203);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3786);
            selectionList204=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList204.getTree());
            int alt75=2;
            int LA75_0 = input.LA(1);
            if ( (LA75_0==WHERE) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    {
                    WHERE205=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3791); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE205);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3793);
                    whereClause206=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause206.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT207=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT207_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT207=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT207);
            int alt76=2;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==FIRST) ) {
                alt76=1;
            }
            else if ( (LA76_0==ALL) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);
                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3829); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE208=null;
        Token WHERE210=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom209 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause211 = null;
        CommonTree DELETE208_tree=null;
        CommonTree WHERE210_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE208=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3877); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE208);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3881);
            onExprFrom209=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom209.getTree());
            int alt77=2;
            int LA77_0 = input.LA(1);
            if ( (LA77_0==WHERE) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    WHERE210=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3886); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE210);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3888);
                    whereClause211=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause211.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET212=null;
        Token COMMA214=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment213 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment215 = null;
        CommonTree SET212_tree=null;
        CommonTree COMMA214_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET212=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET212);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3930);
            onSetAssignment213=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment213.getTree());
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);
                if ( (LA78_0==COMMA) ) {
                    alt78=1;
                }
                switch (alt78) {
            	case 1 :
            	    {
            	    COMMA214=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3933); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA214);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3935);
            	    onSetAssignment215=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment215.getTree());
            	    }
            	    break;
            	default :
            	    break loop78;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expression_return expression216 = null;
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_onSetAssignment3960);
            expression216=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression216.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM217=null;
        Token AS218=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM217_tree=null;
        CommonTree AS218_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM217=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM217);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3987); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt79=3;
            int LA79_0 = input.LA(1);
            if ( (LA79_0==AS) ) {
                alt79=1;
            }
            else if ( (LA79_0==IDENT) ) {
                alt79=2;
            }
            switch (alt79) {
                case 1 :
                    {
                    AS218=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS218);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3994); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom4000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE219=null;
        Token WINDOW220=null;
        Token DOT221=null;
        Token DOT223=null;
        Token AS225=null;
        Token LPAREN227=null;
        Token RPAREN229=null;
        Token WHERE230=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression222 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression224 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter226 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList228 = null;
        EsperEPL2GrammarParser.expression_return expression231 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE219_tree=null;
        CommonTree WINDOW220_tree=null;
        CommonTree DOT221_tree=null;
        CommonTree DOT223_tree=null;
        CommonTree AS225_tree=null;
        CommonTree LPAREN227_tree=null;
        CommonTree RPAREN229_tree=null;
        CommonTree WHERE230_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE219=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr4028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE219);
            WINDOW220=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr4030); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW220);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr4034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt81=2;
            int LA81_0 = input.LA(1);
            if ( (LA81_0==DOT) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    {
                    DOT221=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr4037); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT221);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr4039);
                    viewExpression222=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression222.getTree());
                    loop80:
                    do {
                        int alt80=2;
                        int LA80_0 = input.LA(1);
                        if ( (LA80_0==DOT) ) {
                            alt80=1;
                        }
                        switch (alt80) {
                    	case 1 :
                    	    {
                    	    DOT223=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr4042); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT223);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr4044);
                    	    viewExpression224=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression224.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop80;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt82=3;
            int LA82_0 = input.LA(1);
            if ( (LA82_0==RETAINUNION) ) {
                alt82=1;
            }
            else if ( (LA82_0==RETAININTERSECTION) ) {
                alt82=2;
            }
            switch (alt82) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr4053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr4057); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt83=2;
            int LA83_0 = input.LA(1);
            if ( (LA83_0==AS) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    {
                    AS225=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr4061); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS225);
                    }
                    break;
            }
            int alt84=2;
            int LA84_0 = input.LA(1);
            if ( (LA84_0==SELECT||LA84_0==EVENTS||LA84_0==IDENT||LA84_0==TICKED_STRING_LITERAL) ) {
                alt84=1;
            }
            else if ( (LA84_0==LPAREN) ) {
                alt84=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);
                throw nvae;
            }
            switch (alt84) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr4076);
                    createWindowExprModelAfter226=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter226.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN227=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr4091); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN227);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr4093);
                    createColumnList228=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList228.getTree());
                    RPAREN229=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr4095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN229);
                    }
                    break;
            }
            int alt86=2;
            int LA86_0 = input.LA(1);
            if ( (LA86_0==INSERT) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr4112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt85=2;
                    int LA85_0 = input.LA(1);
                    if ( (LA85_0==WHERE) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            {
                            WHERE230=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr4115); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE230);
                            pushFollow(FOLLOW_expression_in_createWindowExpr4117);
                            expression231=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression231.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT232=null;
        Token FROM234=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList233 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier235 = null;
        CommonTree SELECT232_tree=null;
        CommonTree FROM234_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt87=2;
            int LA87_0 = input.LA(1);
            if ( (LA87_0==SELECT) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    {
                    SELECT232=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter4204); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter4207);
                    createSelectionList233=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList233.getTree());
                    FROM234=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter4209); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter4214);
            classIdentifier235=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier235.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token n=null;
        Token w=null;
        Token CREATE236=null;
        Token INDEX237=null;
        Token ON238=null;
        Token LPAREN239=null;
        Token RPAREN241=null;
        EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList240 = null;
        CommonTree u_tree=null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE236_tree=null;
        CommonTree INDEX237_tree=null;
        CommonTree ON238_tree=null;
        CommonTree LPAREN239_tree=null;
        CommonTree RPAREN241_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createIndexColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumnList");
        try {
            {
            CREATE236=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr4227); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE236);
            int alt88=2;
            int LA88_0 = input.LA(1);
            if ( (LA88_0==IDENT) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    {
                    u=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(u);
                    }
                    break;
            }
            INDEX237=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr4236); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX237);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON238=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr4242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON238);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN239=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr4248); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN239);
            pushFollow(FOLLOW_createIndexColumnList_in_createIndexExpr4250);
            createIndexColumnList240=createIndexColumnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumnList.add(createIndexColumnList240.getTree());
            RPAREN241=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr4252); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN241);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_createIndexColumnList.nextTree());
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumnList_return retval = new EsperEPL2GrammarParser.createIndexColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA243=null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn242 = null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn244 = null;
        CommonTree COMMA243_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createIndexColumn=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumn");
        try {
            {
            pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList4285);
            createIndexColumn242=createIndexColumn();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn242.getTree());
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);
                if ( (LA89_0==COMMA) ) {
                    alt89=1;
                }
                switch (alt89) {
            	case 1 :
            	    {
            	    COMMA243=(Token)match(input,COMMA,FOLLOW_COMMA_in_createIndexColumnList4288); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA243);
            	    pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList4290);
            	    createIndexColumn244=createIndexColumn();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn244.getTree());
            	    }
            	    break;
            	default :
            	    break loop89;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                if ( !(stream_createIndexColumn.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createIndexColumn.hasNext() ) {
                    adaptor.addChild(root_1, stream_createIndexColumn.nextTree());
                }
                stream_createIndexColumn.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumn_return retval = new EsperEPL2GrammarParser.createIndexColumn_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT245=null;
        Token IDENT246=null;
        CommonTree IDENT245_tree=null;
        CommonTree IDENT246_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            IDENT245=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4317); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT245);
            int alt90=2;
            int LA90_0 = input.LA(1);
            if ( (LA90_0==IDENT) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    {
                    IDENT246=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4319); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT246);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token arr=null;
        Token n=null;
        Token CREATE247=null;
        Token VARIABLE248=null;
        Token RBRACK250=null;
        Token EQUALS251=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier249 = null;
        EsperEPL2GrammarParser.expression_return expression252 = null;
        CommonTree c_tree=null;
        CommonTree arr_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE247_tree=null;
        CommonTree VARIABLE248_tree=null;
        CommonTree RBRACK250_tree=null;
        CommonTree EQUALS251_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE247=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr4344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE247);
            int alt91=2;
            int LA91_0 = input.LA(1);
            if ( (LA91_0==IDENT) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    {
                    c=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr4348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(c);
                    }
                    break;
            }
            VARIABLE248=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr4351); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE248);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr4353);
            classIdentifier249=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier249.getTree());
            int alt92=2;
            int LA92_0 = input.LA(1);
            if ( (LA92_0==LBRACK) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    {
                    arr=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createVariableExpr4358); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(arr);
                    RBRACK250=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createVariableExpr4360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK250);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr4366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt93=2;
            int LA93_0 = input.LA(1);
            if ( (LA93_0==EQUALS) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    {
                    EQUALS251=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr4369); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS251);
                    pushFollow(FOLLOW_expression_in_createVariableExpr4371);
                    expression252=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression252.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_arr=new RewriteRuleTokenStream(adaptor,"token arr",arr);
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                if ( stream_arr.hasNext() ) {
                    adaptor.addChild(root_1, stream_arr.nextNode());
                }
                stream_arr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA254=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement253 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement255 = null;
        CommonTree COMMA254_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList4421);
            createColumnListElement253=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement253.getTree());
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);
                if ( (LA94_0==COMMA) ) {
                    alt94=1;
                }
                switch (alt94) {
            	case 1 :
            	    {
            	    COMMA254=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList4424); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA254);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList4426);
            	    createColumnListElement255=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement255.getTree());
            	    }
            	    break;
            	default :
            	    break loop94;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token b=null;
        Token RBRACK258=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy256 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier257 = null;
        CommonTree b_tree=null;
        CommonTree RBRACK258_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4454);
            classIdentifierNonGreedy256=classIdentifierNonGreedy();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy256.getTree());
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement4457);
            classIdentifier257=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier257.getTree());
            int alt95=2;
            int LA95_0 = input.LA(1);
            if ( (LA95_0==LBRACK) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement4462); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK258=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement4464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK258);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA260=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement259 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement261 = null;
        CommonTree COMMA260_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4507);
            createSelectionListElement259=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement259.getTree());
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);
                if ( (LA96_0==COMMA) ) {
                    alt96=1;
                }
                switch (alt96) {
            	case 1 :
            	    {
            	    COMMA260=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList4510); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA260);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4512);
            	    createSelectionListElement261=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement261.getTree());
            	    }
            	    break;
            	default :
            	    break loop96;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS263=null;
        Token AS265=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty262 = null;
        EsperEPL2GrammarParser.constant_return constant264 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS263_tree=null;
        CommonTree AS265_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt98=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt98=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case CONTEXT:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt98=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt98=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);
                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement4541); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement4553);
                    eventProperty262=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty262.getTree());
                    int alt97=2;
                    int LA97_0 = input.LA(1);
                    if ( (LA97_0==AS) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            {
                            AS263=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4556); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS263);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4560); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement4581);
                    constant264=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant264.getTree());
                    AS265=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS265);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token CREATE266=null;
        EsperEPL2GrammarParser.createSchemaDef_return createSchemaDef267 = null;
        CommonTree keyword_tree=null;
        CommonTree CREATE266_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleSubtreeStream stream_createSchemaDef=new RewriteRuleSubtreeStream(adaptor,"rule createSchemaDef");
        try {
            {
            CREATE266=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr4612); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE266);
            int alt99=2;
            int LA99_0 = input.LA(1);
            if ( (LA99_0==IDENT) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            pushFollow(FOLLOW_createSchemaDef_in_createSchemaExpr4619);
            createSchemaDef267=createSchemaDef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSchemaDef.add(createSchemaDef267.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_createSchemaDef.nextTree());
                if ( stream_keyword.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyword.nextNode());
                }
                stream_keyword.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaDef_return createSchemaDef() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaDef_return retval = new EsperEPL2GrammarParser.createSchemaDef_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token SCHEMA268=null;
        Token AS269=null;
        Token LPAREN271=null;
        Token RPAREN273=null;
        EsperEPL2GrammarParser.variantList_return variantList270 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList272 = null;
        EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual274 = null;
        CommonTree name_tree=null;
        CommonTree SCHEMA268_tree=null;
        CommonTree AS269_tree=null;
        CommonTree LPAREN271_tree=null;
        CommonTree RPAREN273_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_createSchemaQual=new RewriteRuleSubtreeStream(adaptor,"rule createSchemaQual");
        try {
            {
            SCHEMA268=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaDef4644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA268);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaDef4648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt100=2;
            int LA100_0 = input.LA(1);
            if ( (LA100_0==AS) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    {
                    AS269=(Token)match(input,AS,FOLLOW_AS_in_createSchemaDef4650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS269);
                    }
                    break;
            }
            int alt102=2;
            int LA102_0 = input.LA(1);
            if ( (LA102_0==EVENTS||LA102_0==IDENT||LA102_0==STAR||LA102_0==TICKED_STRING_LITERAL) ) {
                alt102=1;
            }
            else if ( (LA102_0==LPAREN) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);
                throw nvae;
            }
            switch (alt102) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaDef4663);
                    variantList270=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList270.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN271=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaDef4674); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN271);
                    int alt101=2;
                    int LA101_0 = input.LA(1);
                    if ( (LA101_0==EVENTS||LA101_0==IDENT||LA101_0==TICKED_STRING_LITERAL) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaDef4676);
                            createColumnList272=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList272.getTree());
                            }
                            break;
                    }
                    RPAREN273=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaDef4679); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN273);
                    }
                    break;
            }
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);
                if ( (LA103_0==IDENT) ) {
                    alt103=1;
                }
                switch (alt103) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_createSchemaQual_in_createSchemaDef4688);
            	    createSchemaQual274=createSchemaQual();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSchemaQual.add(createSchemaQual274.getTree());
            	    }
            	    break;
            	default :
            	    break loop103;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_DEF, "CREATE_SCHEMA_DEF"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                while ( stream_createSchemaQual.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSchemaQual.nextTree());
                }
                stream_createSchemaQual.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fafDelete_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fafDelete_return fafDelete() throws RecognitionException {
        EsperEPL2GrammarParser.fafDelete_return retval = new EsperEPL2GrammarParser.fafDelete_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token i=null;
        Token DELETE275=null;
        Token FROM276=null;
        Token AS277=null;
        Token WHERE278=null;
        EsperEPL2GrammarParser.whereClause_return whereClause279 = null;
        CommonTree name_tree=null;
        CommonTree i_tree=null;
        CommonTree DELETE275_tree=null;
        CommonTree FROM276_tree=null;
        CommonTree AS277_tree=null;
        CommonTree WHERE278_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            DELETE275=(Token)match(input,DELETE,FOLLOW_DELETE_in_fafDelete4724); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE275);
            FROM276=(Token)match(input,FROM,FOLLOW_FROM_in_fafDelete4726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM276);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_fafDelete4730); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt104=3;
            int LA104_0 = input.LA(1);
            if ( (LA104_0==AS) ) {
                alt104=1;
            }
            else if ( (LA104_0==IDENT) ) {
                alt104=2;
            }
            switch (alt104) {
                case 1 :
                    {
                    AS277=(Token)match(input,AS,FOLLOW_AS_in_fafDelete4733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS277);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_fafDelete4737); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_fafDelete4743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt105=2;
            int LA105_0 = input.LA(1);
            if ( (LA105_0==WHERE) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    {
                    WHERE278=(Token)match(input,WHERE,FOLLOW_WHERE_in_fafDelete4748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE278);
                    pushFollow(FOLLOW_whereClause_in_fafDelete4750);
                    whereClause279=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause279.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_DELETE.nextNode(), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fafUpdate_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fafUpdate_return fafUpdate() throws RecognitionException {
        EsperEPL2GrammarParser.fafUpdate_return retval = new EsperEPL2GrammarParser.fafUpdate_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token UPDATE280=null;
        EsperEPL2GrammarParser.updateDetails_return updateDetails281 = null;
        CommonTree UPDATE280_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleSubtreeStream stream_updateDetails=new RewriteRuleSubtreeStream(adaptor,"rule updateDetails");
        try {
            {
            UPDATE280=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_fafUpdate4781); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE280);
            pushFollow(FOLLOW_updateDetails_in_fafUpdate4783);
            updateDetails281=updateDetails();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_updateDetails.add(updateDetails281.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_UPDATE.nextNode(), root_1);
                adaptor.addChild(root_1, stream_updateDetails.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createDataflow_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createDataflow_return createDataflow() throws RecognitionException {
        EsperEPL2GrammarParser.createDataflow_return retval = new EsperEPL2GrammarParser.createDataflow_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CREATE282=null;
        Token DATAFLOW283=null;
        Token AS284=null;
        EsperEPL2GrammarParser.gopList_return gopList285 = null;
        CommonTree name_tree=null;
        CommonTree CREATE282_tree=null;
        CommonTree DATAFLOW283_tree=null;
        CommonTree AS284_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_DATAFLOW=new RewriteRuleTokenStream(adaptor,"token DATAFLOW");
        RewriteRuleSubtreeStream stream_gopList=new RewriteRuleSubtreeStream(adaptor,"rule gopList");
        try {
            {
            CREATE282=(Token)match(input,CREATE,FOLLOW_CREATE_in_createDataflow4804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE282);
            DATAFLOW283=(Token)match(input,DATAFLOW,FOLLOW_DATAFLOW_in_createDataflow4806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DATAFLOW.add(DATAFLOW283);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createDataflow4810); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt106=2;
            int LA106_0 = input.LA(1);
            if ( (LA106_0==AS) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    {
                    AS284=(Token)match(input,AS,FOLLOW_AS_in_createDataflow4812); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS284);
                    }
                    break;
            }
            pushFollow(FOLLOW_gopList_in_createDataflow4815);
            gopList285=gopList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopList.add(gopList285.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_DATAFLOW, "CREATE_DATAFLOW"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_gopList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopList_return gopList() throws RecognitionException {
        EsperEPL2GrammarParser.gopList_return retval = new EsperEPL2GrammarParser.gopList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.gop_return gop286 = null;
        EsperEPL2GrammarParser.gop_return gop287 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_gop_in_gopList4840);
            gop286=gop();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, gop286.getTree());
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);
                if ( (LA107_0==CREATE||LA107_0==SELECT||LA107_0==IDENT||LA107_0==ATCHAR) ) {
                    alt107=1;
                }
                switch (alt107) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_gop_in_gopList4842);
            	    gop287=gop();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, gop287.getTree());
            	    }
            	    break;
            	default :
            	    break loop107;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gop_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gop_return gop() throws RecognitionException {
        EsperEPL2GrammarParser.gop_return retval = new EsperEPL2GrammarParser.gop_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token opName=null;
        Token s=null;
        Token LCURLY291=null;
        Token COMMA293=null;
        Token RCURLY294=null;
        Token COMMA296=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum288 = null;
        EsperEPL2GrammarParser.gopParams_return gopParams289 = null;
        EsperEPL2GrammarParser.gopOut_return gopOut290 = null;
        EsperEPL2GrammarParser.gopDetail_return gopDetail292 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr295 = null;
        CommonTree opName_tree=null;
        CommonTree s_tree=null;
        CommonTree LCURLY291_tree=null;
        CommonTree COMMA293_tree=null;
        CommonTree RCURLY294_tree=null;
        CommonTree COMMA296_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_gopOut=new RewriteRuleSubtreeStream(adaptor,"rule gopOut");
        RewriteRuleSubtreeStream stream_gopDetail=new RewriteRuleSubtreeStream(adaptor,"rule gopDetail");
        RewriteRuleSubtreeStream stream_gopParams=new RewriteRuleSubtreeStream(adaptor,"rule gopParams");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        try {
            int alt114=2;
            int LA114_0 = input.LA(1);
            if ( (LA114_0==SELECT||LA114_0==IDENT||LA114_0==ATCHAR) ) {
                alt114=1;
            }
            else if ( (LA114_0==CREATE) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);
                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    {
                    loop108:
                    do {
                        int alt108=2;
                        int LA108_0 = input.LA(1);
                        if ( (LA108_0==ATCHAR) ) {
                            alt108=1;
                        }
                        switch (alt108) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_annotationEnum_in_gop4855);
                    	    annotationEnum288=annotationEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum288.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop108;
                        }
                    } while (true);
                    int alt109=2;
                    int LA109_0 = input.LA(1);
                    if ( (LA109_0==IDENT) ) {
                        alt109=1;
                    }
                    else if ( (LA109_0==SELECT) ) {
                        alt109=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 109, 0, input);
                        throw nvae;
                    }
                    switch (alt109) {
                        case 1 :
                            {
                            opName=(Token)match(input,IDENT,FOLLOW_IDENT_in_gop4861); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(opName);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,SELECT,FOLLOW_SELECT_in_gop4867); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SELECT.add(s);
                            }
                            break;
                    }
                    int alt110=2;
                    int LA110_0 = input.LA(1);
                    if ( (LA110_0==LPAREN) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_gopParams_in_gop4870);
                            gopParams289=gopParams();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_gopParams.add(gopParams289.getTree());
                            }
                            break;
                    }
                    int alt111=2;
                    int LA111_0 = input.LA(1);
                    if ( (LA111_0==FOLLOWED_BY) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_gopOut_in_gop4873);
                            gopOut290=gopOut();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_gopOut.add(gopOut290.getTree());
                            }
                            break;
                    }
                    LCURLY291=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_gop4876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY291);
                    int alt112=2;
                    int LA112_0 = input.LA(1);
                    if ( (LA112_0==SELECT||LA112_0==IDENT) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_gopDetail_in_gop4878);
                            gopDetail292=gopDetail();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_gopDetail.add(gopDetail292.getTree());
                            }
                            break;
                    }
                    int alt113=2;
                    int LA113_0 = input.LA(1);
                    if ( (LA113_0==COMMA) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            {
                            COMMA293=(Token)match(input,COMMA,FOLLOW_COMMA_in_gop4881); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA293);
                            }
                            break;
                    }
                    RCURLY294=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_gop4884); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY294);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
                    RewriteRuleTokenStream stream_opName=new RewriteRuleTokenStream(adaptor,"token opName",opName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOP, "GOP"), root_1);
                        if ( stream_opName.hasNext() ) {
                            adaptor.addChild(root_1, stream_opName.nextNode());
                        }
                        stream_opName.reset();
                        if ( stream_s.hasNext() ) {
                            adaptor.addChild(root_1, stream_s.nextNode());
                        }
                        stream_s.reset();
                        if ( stream_gopParams.hasNext() ) {
                            adaptor.addChild(root_1, stream_gopParams.nextTree());
                        }
                        stream_gopParams.reset();
                        if ( stream_gopOut.hasNext() ) {
                            adaptor.addChild(root_1, stream_gopOut.nextTree());
                        }
                        stream_gopOut.reset();
                        if ( stream_gopDetail.hasNext() ) {
                            adaptor.addChild(root_1, stream_gopDetail.nextTree());
                        }
                        stream_gopDetail.reset();
                        while ( stream_annotationEnum.hasNext() ) {
                            adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                        }
                        stream_annotationEnum.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createSchemaExpr_in_gop4917);
                    createSchemaExpr295=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr295.getTree());
                    COMMA296=(Token)match(input,COMMA,FOLLOW_COMMA_in_gop4919); if (state.failed) return retval;
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParams_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParams_return gopParams() throws RecognitionException {
        EsperEPL2GrammarParser.gopParams_return retval = new EsperEPL2GrammarParser.gopParams_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN297=null;
        Token RPAREN299=null;
        EsperEPL2GrammarParser.gopParamsItemList_return gopParamsItemList298 = null;
        CommonTree LPAREN297_tree=null;
        CommonTree RPAREN299_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_gopParamsItemList=new RewriteRuleSubtreeStream(adaptor,"rule gopParamsItemList");
        try {
            {
            LPAREN297=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gopParams4933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN297);
            pushFollow(FOLLOW_gopParamsItemList_in_gopParams4935);
            gopParamsItemList298=gopParamsItemList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopParamsItemList.add(gopParamsItemList298.getTree());
            RPAREN299=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gopParams4937); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN299);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPPARAM, "GOPPARAM"), root_1);
                adaptor.addChild(root_1, stream_gopParamsItemList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItemList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItemList_return gopParamsItemList() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItemList_return retval = new EsperEPL2GrammarParser.gopParamsItemList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA301=null;
        EsperEPL2GrammarParser.gopParamsItem_return gopParamsItem300 = null;
        EsperEPL2GrammarParser.gopParamsItem_return gopParamsItem302 = null;
        CommonTree COMMA301_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_gopParamsItem_in_gopParamsItemList4959);
            gopParamsItem300=gopParamsItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, gopParamsItem300.getTree());
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);
                if ( (LA115_0==COMMA) ) {
                    alt115=1;
                }
                switch (alt115) {
            	case 1 :
            	    {
            	    COMMA301=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopParamsItemList4962); if (state.failed) return retval;
            	    pushFollow(FOLLOW_gopParamsItem_in_gopParamsItemList4965);
            	    gopParamsItem302=gopParamsItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, gopParamsItem302.getTree());
            	    }
            	    break;
            	default :
            	    break loop115;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItem_return gopParamsItem() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItem_return retval = new EsperEPL2GrammarParser.gopParamsItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.classIdentifier_return n = null;
        EsperEPL2GrammarParser.gopParamsItemMany_return gopParamsItemMany303 = null;
        EsperEPL2GrammarParser.gopParamsItemAs_return gopParamsItemAs304 = null;
        RewriteRuleSubtreeStream stream_gopParamsItemMany=new RewriteRuleSubtreeStream(adaptor,"rule gopParamsItemMany");
        RewriteRuleSubtreeStream stream_gopParamsItemAs=new RewriteRuleSubtreeStream(adaptor,"rule gopParamsItemAs");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            int alt116=2;
            int LA116_0 = input.LA(1);
            if ( (LA116_0==EVENTS||LA116_0==IDENT||LA116_0==TICKED_STRING_LITERAL) ) {
                alt116=1;
            }
            else if ( (LA116_0==LPAREN) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);
                throw nvae;
            }
            switch (alt116) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifier_in_gopParamsItem4984);
                    n=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(n.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_gopParamsItemMany_in_gopParamsItem4988);
                    gopParamsItemMany303=gopParamsItemMany();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopParamsItemMany.add(gopParamsItemMany303.getTree());
                    }
                    break;
            }
            int alt117=2;
            int LA117_0 = input.LA(1);
            if ( (LA117_0==AS) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopParamsItemAs_in_gopParamsItem4991);
                    gopParamsItemAs304=gopParamsItemAs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopParamsItemAs.add(gopParamsItemAs304.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPPARAMITM, "GOPPARAMITM"), root_1);
                if ( stream_n.hasNext() ) {
                    adaptor.addChild(root_1, stream_n.nextTree());
                }
                stream_n.reset();
                if ( stream_gopParamsItemMany.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopParamsItemMany.nextTree());
                }
                stream_gopParamsItemMany.reset();
                if ( stream_gopParamsItemAs.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopParamsItemAs.nextTree());
                }
                stream_gopParamsItemAs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItemMany_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItemMany_return gopParamsItemMany() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItemMany_return retval = new EsperEPL2GrammarParser.gopParamsItemMany_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN305=null;
        Token COMMA307=null;
        Token RPAREN309=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier306 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier308 = null;
        CommonTree LPAREN305_tree=null;
        CommonTree COMMA307_tree=null;
        CommonTree RPAREN309_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN305=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gopParamsItemMany5021); if (state.failed) return retval;
            pushFollow(FOLLOW_classIdentifier_in_gopParamsItemMany5024);
            classIdentifier306=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier306.getTree());
            {
            COMMA307=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopParamsItemMany5027); if (state.failed) return retval;
            pushFollow(FOLLOW_classIdentifier_in_gopParamsItemMany5030);
            classIdentifier308=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier308.getTree());
            }
            RPAREN309=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gopParamsItemMany5033); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItemAs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItemAs_return gopParamsItemAs() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItemAs_return retval = new EsperEPL2GrammarParser.gopParamsItemAs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token AS310=null;
        CommonTree a_tree=null;
        CommonTree AS310_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            AS310=(Token)match(input,AS,FOLLOW_AS_in_gopParamsItemAs5045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS310);
            a=(Token)match(input,IDENT,FOLLOW_IDENT_in_gopParamsItemAs5049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(a);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AS.nextNode(), root_1);
                adaptor.addChild(root_1, stream_a.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOut_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOut_return gopOut() throws RecognitionException {
        EsperEPL2GrammarParser.gopOut_return retval = new EsperEPL2GrammarParser.gopOut_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FOLLOWED_BY311=null;
        Token COMMA313=null;
        EsperEPL2GrammarParser.gopOutItem_return gopOutItem312 = null;
        EsperEPL2GrammarParser.gopOutItem_return gopOutItem314 = null;
        CommonTree FOLLOWED_BY311_tree=null;
        CommonTree COMMA313_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_gopOutItem=new RewriteRuleSubtreeStream(adaptor,"rule gopOutItem");
        try {
            {
            FOLLOWED_BY311=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_gopOut5071); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(FOLLOWED_BY311);
            pushFollow(FOLLOW_gopOutItem_in_gopOut5073);
            gopOutItem312=gopOutItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopOutItem.add(gopOutItem312.getTree());
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);
                if ( (LA118_0==COMMA) ) {
                    alt118=1;
                }
                switch (alt118) {
            	case 1 :
            	    {
            	    COMMA313=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopOut5076); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA313);
            	    pushFollow(FOLLOW_gopOutItem_in_gopOut5078);
            	    gopOutItem314=gopOutItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_gopOutItem.add(gopOutItem314.getTree());
            	    }
            	    break;
            	default :
            	    break loop118;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPOUT, "GOPOUT"), root_1);
                if ( !(stream_gopOutItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_gopOutItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopOutItem.nextTree());
                }
                stream_gopOutItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutItem_return gopOutItem() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutItem_return retval = new EsperEPL2GrammarParser.gopOutItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.classIdentifier_return n = null;
        EsperEPL2GrammarParser.gopOutTypeList_return gopOutTypeList315 = null;
        RewriteRuleSubtreeStream stream_gopOutTypeList=new RewriteRuleSubtreeStream(adaptor,"rule gopOutTypeList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifier_in_gopOutItem5104);
            n=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(n.getTree());
            int alt119=2;
            int LA119_0 = input.LA(1);
            if ( (LA119_0==LT) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopOutTypeList_in_gopOutItem5106);
                    gopOutTypeList315=gopOutTypeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopOutTypeList.add(gopOutTypeList315.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPOUTITM, "GOPOUTITM"), root_1);
                adaptor.addChild(root_1, stream_n.nextTree());
                if ( stream_gopOutTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopOutTypeList.nextTree());
                }
                stream_gopOutTypeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutTypeList_return gopOutTypeList() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutTypeList_return retval = new EsperEPL2GrammarParser.gopOutTypeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LT316=null;
        Token COMMA318=null;
        Token GT320=null;
        EsperEPL2GrammarParser.gopOutTypeParam_return gopOutTypeParam317 = null;
        EsperEPL2GrammarParser.gopOutTypeParam_return gopOutTypeParam319 = null;
        CommonTree LT316_tree=null;
        CommonTree COMMA318_tree=null;
        CommonTree GT320_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LT316=(Token)match(input,LT,FOLLOW_LT_in_gopOutTypeList5133); if (state.failed) return retval;
            pushFollow(FOLLOW_gopOutTypeParam_in_gopOutTypeList5136);
            gopOutTypeParam317=gopOutTypeParam();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, gopOutTypeParam317.getTree());
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);
                if ( (LA120_0==COMMA) ) {
                    alt120=1;
                }
                switch (alt120) {
            	case 1 :
            	    {
            	    COMMA318=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopOutTypeList5139); if (state.failed) return retval;
            	    pushFollow(FOLLOW_gopOutTypeParam_in_gopOutTypeList5142);
            	    gopOutTypeParam319=gopOutTypeParam();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, gopOutTypeParam319.getTree());
            	    }
            	    break;
            	default :
            	    break loop120;
                }
            } while (true);
            GT320=(Token)match(input,GT,FOLLOW_GT_in_gopOutTypeList5146); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutTypeParam_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutTypeParam_return gopOutTypeParam() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutTypeParam_return retval = new EsperEPL2GrammarParser.gopOutTypeParam_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        EsperEPL2GrammarParser.gopOutTypeItem_return gopOutTypeItem321 = null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleSubtreeStream stream_gopOutTypeItem=new RewriteRuleSubtreeStream(adaptor,"rule gopOutTypeItem");
        try {
            {
            int alt121=2;
            int LA121_0 = input.LA(1);
            if ( (LA121_0==EVENTS||LA121_0==IDENT||LA121_0==TICKED_STRING_LITERAL) ) {
                alt121=1;
            }
            else if ( (LA121_0==QUESTION) ) {
                alt121=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);
                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopOutTypeItem_in_gopOutTypeParam5160);
                    gopOutTypeItem321=gopOutTypeItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopOutTypeItem.add(gopOutTypeItem321.getTree());
                    }
                    break;
                case 2 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_gopOutTypeParam5166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPOUTTYP, "GOPOUTTYP"), root_1);
                if ( stream_gopOutTypeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopOutTypeItem.nextTree());
                }
                stream_gopOutTypeItem.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutTypeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutTypeItem_return gopOutTypeItem() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutTypeItem_return retval = new EsperEPL2GrammarParser.gopOutTypeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier322 = null;
        EsperEPL2GrammarParser.gopOutTypeList_return gopOutTypeList323 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_classIdentifier_in_gopOutTypeItem5193);
            classIdentifier322=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier322.getTree());
            int alt122=2;
            int LA122_0 = input.LA(1);
            if ( (LA122_0==LT) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopOutTypeList_in_gopOutTypeItem5195);
                    gopOutTypeList323=gopOutTypeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gopOutTypeList323.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopDetail_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopDetail_return gopDetail() throws RecognitionException {
        EsperEPL2GrammarParser.gopDetail_return retval = new EsperEPL2GrammarParser.gopDetail_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA325=null;
        EsperEPL2GrammarParser.gopConfig_return gopConfig324 = null;
        EsperEPL2GrammarParser.gopConfig_return gopConfig326 = null;
        CommonTree COMMA325_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_gopConfig=new RewriteRuleSubtreeStream(adaptor,"rule gopConfig");
        try {
            {
            pushFollow(FOLLOW_gopConfig_in_gopDetail5207);
            gopConfig324=gopConfig();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopConfig.add(gopConfig324.getTree());
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);
                if ( (LA123_0==COMMA) ) {
                    int LA123_1 = input.LA(2);
                    if ( (LA123_1==SELECT||LA123_1==IDENT) ) {
                        alt123=1;
                    }
                }
                switch (alt123) {
            	case 1 :
            	    {
            	    COMMA325=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopDetail5210); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA325);
            	    pushFollow(FOLLOW_gopConfig_in_gopDetail5212);
            	    gopConfig326=gopConfig();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_gopConfig.add(gopConfig326.getTree());
            	    }
            	    break;
            	default :
            	    break loop123;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPCFG, "GOPCFG"), root_1);
                if ( !(stream_gopConfig.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_gopConfig.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopConfig.nextTree());
                }
                stream_gopConfig.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopConfig_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopConfig_return gopConfig() throws RecognitionException {
        EsperEPL2GrammarParser.gopConfig_return retval = new EsperEPL2GrammarParser.gopConfig_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token SELECT327=null;
        Token COLON328=null;
        Token EQUALS329=null;
        Token LPAREN330=null;
        Token RPAREN332=null;
        Token COLON333=null;
        Token EQUALS334=null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr331 = null;
        EsperEPL2GrammarParser.expression_return expression335 = null;
        EsperEPL2GrammarParser.jsonobject_return jsonobject336 = null;
        EsperEPL2GrammarParser.jsonarray_return jsonarray337 = null;
        CommonTree n_tree=null;
        CommonTree SELECT327_tree=null;
        CommonTree COLON328_tree=null;
        CommonTree EQUALS329_tree=null;
        CommonTree LPAREN330_tree=null;
        CommonTree RPAREN332_tree=null;
        CommonTree COLON333_tree=null;
        CommonTree EQUALS334_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_selectExpr=new RewriteRuleSubtreeStream(adaptor,"rule selectExpr");
        RewriteRuleSubtreeStream stream_jsonarray=new RewriteRuleSubtreeStream(adaptor,"rule jsonarray");
        RewriteRuleSubtreeStream stream_jsonobject=new RewriteRuleSubtreeStream(adaptor,"rule jsonobject");
        try {
            int alt127=2;
            int LA127_0 = input.LA(1);
            if ( (LA127_0==SELECT) ) {
                alt127=1;
            }
            else if ( (LA127_0==IDENT) ) {
                alt127=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);
                throw nvae;
            }
            switch (alt127) {
                case 1 :
                    {
                    SELECT327=(Token)match(input,SELECT,FOLLOW_SELECT_in_gopConfig5236); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT327);
                    int alt124=2;
                    int LA124_0 = input.LA(1);
                    if ( (LA124_0==COLON) ) {
                        alt124=1;
                    }
                    else if ( (LA124_0==EQUALS) ) {
                        alt124=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 0, input);
                        throw nvae;
                    }
                    switch (alt124) {
                        case 1 :
                            {
                            COLON328=(Token)match(input,COLON,FOLLOW_COLON_in_gopConfig5239); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON328);
                            }
                            break;
                        case 2 :
                            {
                            EQUALS329=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_gopConfig5241); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS329);
                            }
                            break;
                    }
                    LPAREN330=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gopConfig5244); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN330);
                    pushFollow(FOLLOW_selectExpr_in_gopConfig5246);
                    selectExpr331=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectExpr.add(selectExpr331.getTree());
                    RPAREN332=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gopConfig5248); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN332);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPCFGEPL, "GOPCFGEPL"), root_1);
                        adaptor.addChild(root_1, stream_selectExpr.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    n=(Token)match(input,IDENT,FOLLOW_IDENT_in_gopConfig5265); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(n);
                    int alt125=2;
                    int LA125_0 = input.LA(1);
                    if ( (LA125_0==COLON) ) {
                        alt125=1;
                    }
                    else if ( (LA125_0==EQUALS) ) {
                        alt125=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 0, input);
                        throw nvae;
                    }
                    switch (alt125) {
                        case 1 :
                            {
                            COLON333=(Token)match(input,COLON,FOLLOW_COLON_in_gopConfig5268); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON333);
                            }
                            break;
                        case 2 :
                            {
                            EQUALS334=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_gopConfig5270); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS334);
                            }
                            break;
                    }
                    int alt126=3;
                    switch ( input.LA(1) ) {
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case ISTREAM:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case FOR:
                    case WHILE:
                    case USING:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case QUESTION:
                    case PLUS:
                    case STRING_LITERAL:
                    case QUOTED_STRING_LITERAL:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt126=1;
                        }
                        break;
                    case LCURLY:
                        {
                        switch ( input.LA(2) ) {
                        case STRING_LITERAL:
                            {
                            int LA126_78 = input.LA(3);
                            if ( (LA126_78==COLON) ) {
                                alt126=2;
                            }
                            else if ( ((LA126_78>=IN_SET && LA126_78<=REGEXP)||(LA126_78>=OR_EXPR && LA126_78<=NOT_EXPR)||LA126_78==IS||LA126_78==RCURLY||LA126_78==COMMA||(LA126_78>=EQUALS && LA126_78<=STAR)||(LA126_78>=LT && LA126_78<=GT)||(LA126_78>=BOR && LA126_78<=PLUS)||(LA126_78>=BAND && LA126_78<=MOD)) ) {
                                alt126=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 78, input);
                                throw nvae;
                            }
                            }
                            break;
                        case QUOTED_STRING_LITERAL:
                            {
                            int LA126_79 = input.LA(3);
                            if ( (LA126_79==COLON) ) {
                                alt126=2;
                            }
                            else if ( ((LA126_79>=IN_SET && LA126_79<=REGEXP)||(LA126_79>=OR_EXPR && LA126_79<=NOT_EXPR)||LA126_79==IS||LA126_79==RCURLY||LA126_79==COMMA||(LA126_79>=EQUALS && LA126_79<=STAR)||(LA126_79>=LT && LA126_79<=GT)||(LA126_79>=BOR && LA126_79<=PLUS)||(LA126_79>=BAND && LA126_79<=MOD)) ) {
                                alt126=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 79, input);
                                throw nvae;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA126_80 = input.LA(3);
                            if ( ((LA126_80>=IN_SET && LA126_80<=REGEXP)||(LA126_80>=OR_EXPR && LA126_80<=NOT_EXPR)||LA126_80==IS||LA126_80==LBRACK||LA126_80==LPAREN||LA126_80==RCURLY||(LA126_80>=COMMA && LA126_80<=STAR)||(LA126_80>=LT && LA126_80<=PLUS)||(LA126_80>=BAND && LA126_80<=MOD)||LA126_80==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_80==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 80, input);
                                throw nvae;
                            }
                            }
                            break;
                        case TICKED_STRING_LITERAL:
                            {
                            int LA126_81 = input.LA(3);
                            if ( (LA126_81==COLON) ) {
                                alt126=2;
                            }
                            else if ( ((LA126_81>=IN_SET && LA126_81<=REGEXP)||(LA126_81>=OR_EXPR && LA126_81<=NOT_EXPR)||LA126_81==IS||LA126_81==LBRACK||LA126_81==LPAREN||LA126_81==RCURLY||(LA126_81>=COMMA && LA126_81<=STAR)||(LA126_81>=LT && LA126_81<=PLUS)||(LA126_81>=BAND && LA126_81<=MOD)||LA126_81==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 81, input);
                                throw nvae;
                            }
                            }
                            break;
                        case AT:
                            {
                            int LA126_82 = input.LA(3);
                            if ( ((LA126_82>=IN_SET && LA126_82<=REGEXP)||(LA126_82>=OR_EXPR && LA126_82<=NOT_EXPR)||LA126_82==IS||LA126_82==LBRACK||LA126_82==LPAREN||LA126_82==RCURLY||(LA126_82>=COMMA && LA126_82<=STAR)||(LA126_82>=LT && LA126_82<=PLUS)||(LA126_82>=BAND && LA126_82<=MOD)||LA126_82==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_82==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 82, input);
                                throw nvae;
                            }
                            }
                            break;
                        case COUNT:
                            {
                            int LA126_83 = input.LA(3);
                            if ( ((LA126_83>=IN_SET && LA126_83<=REGEXP)||(LA126_83>=OR_EXPR && LA126_83<=NOT_EXPR)||LA126_83==IS||LA126_83==LBRACK||LA126_83==LPAREN||LA126_83==RCURLY||(LA126_83>=COMMA && LA126_83<=STAR)||(LA126_83>=LT && LA126_83<=PLUS)||(LA126_83>=BAND && LA126_83<=MOD)||LA126_83==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_83==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 83, input);
                                throw nvae;
                            }
                            }
                            break;
                        case ESCAPE:
                            {
                            int LA126_84 = input.LA(3);
                            if ( (LA126_84==COLON) ) {
                                alt126=2;
                            }
                            else if ( ((LA126_84>=IN_SET && LA126_84<=REGEXP)||(LA126_84>=OR_EXPR && LA126_84<=NOT_EXPR)||LA126_84==IS||LA126_84==LBRACK||LA126_84==LPAREN||LA126_84==RCURLY||(LA126_84>=COMMA && LA126_84<=STAR)||(LA126_84>=LT && LA126_84<=PLUS)||(LA126_84>=BAND && LA126_84<=MOD)||LA126_84==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 84, input);
                                throw nvae;
                            }
                            }
                            break;
                        case EVERY_EXPR:
                            {
                            int LA126_85 = input.LA(3);
                            if ( ((LA126_85>=IN_SET && LA126_85<=REGEXP)||(LA126_85>=OR_EXPR && LA126_85<=NOT_EXPR)||LA126_85==IS||LA126_85==LBRACK||LA126_85==LPAREN||LA126_85==RCURLY||(LA126_85>=COMMA && LA126_85<=STAR)||(LA126_85>=LT && LA126_85<=PLUS)||(LA126_85>=BAND && LA126_85<=MOD)||LA126_85==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_85==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 85, input);
                                throw nvae;
                            }
                            }
                            break;
                        case SUM:
                            {
                            int LA126_86 = input.LA(3);
                            if ( ((LA126_86>=IN_SET && LA126_86<=REGEXP)||(LA126_86>=OR_EXPR && LA126_86<=NOT_EXPR)||LA126_86==IS||LA126_86==LBRACK||LA126_86==LPAREN||LA126_86==RCURLY||(LA126_86>=COMMA && LA126_86<=STAR)||(LA126_86>=LT && LA126_86<=PLUS)||(LA126_86>=BAND && LA126_86<=MOD)||LA126_86==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_86==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 86, input);
                                throw nvae;
                            }
                            }
                            break;
                        case AVG:
                            {
                            int LA126_87 = input.LA(3);
                            if ( ((LA126_87>=IN_SET && LA126_87<=REGEXP)||(LA126_87>=OR_EXPR && LA126_87<=NOT_EXPR)||LA126_87==IS||LA126_87==LBRACK||LA126_87==LPAREN||LA126_87==RCURLY||(LA126_87>=COMMA && LA126_87<=STAR)||(LA126_87>=LT && LA126_87<=PLUS)||(LA126_87>=BAND && LA126_87<=MOD)||LA126_87==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_87==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 87, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MAX:
                            {
                            int LA126_88 = input.LA(3);
                            if ( ((LA126_88>=IN_SET && LA126_88<=REGEXP)||(LA126_88>=OR_EXPR && LA126_88<=NOT_EXPR)||LA126_88==IS||LA126_88==LBRACK||LA126_88==LPAREN||LA126_88==RCURLY||(LA126_88>=COMMA && LA126_88<=STAR)||(LA126_88>=LT && LA126_88<=PLUS)||(LA126_88>=BAND && LA126_88<=MOD)||LA126_88==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_88==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 88, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MIN:
                            {
                            int LA126_89 = input.LA(3);
                            if ( (LA126_89==COLON) ) {
                                alt126=2;
                            }
                            else if ( ((LA126_89>=IN_SET && LA126_89<=REGEXP)||(LA126_89>=OR_EXPR && LA126_89<=NOT_EXPR)||LA126_89==IS||LA126_89==LBRACK||LA126_89==LPAREN||LA126_89==RCURLY||(LA126_89>=COMMA && LA126_89<=STAR)||(LA126_89>=LT && LA126_89<=PLUS)||(LA126_89>=BAND && LA126_89<=MOD)||LA126_89==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 89, input);
                                throw nvae;
                            }
                            }
                            break;
                        case COALESCE:
                            {
                            int LA126_90 = input.LA(3);
                            if ( ((LA126_90>=IN_SET && LA126_90<=REGEXP)||(LA126_90>=OR_EXPR && LA126_90<=NOT_EXPR)||LA126_90==IS||LA126_90==LBRACK||LA126_90==LPAREN||LA126_90==RCURLY||(LA126_90>=COMMA && LA126_90<=STAR)||(LA126_90>=LT && LA126_90<=PLUS)||(LA126_90>=BAND && LA126_90<=MOD)||LA126_90==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_90==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 90, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MEDIAN:
                            {
                            int LA126_91 = input.LA(3);
                            if ( ((LA126_91>=IN_SET && LA126_91<=REGEXP)||(LA126_91>=OR_EXPR && LA126_91<=NOT_EXPR)||LA126_91==IS||LA126_91==LBRACK||LA126_91==LPAREN||LA126_91==RCURLY||(LA126_91>=COMMA && LA126_91<=STAR)||(LA126_91>=LT && LA126_91<=PLUS)||(LA126_91>=BAND && LA126_91<=MOD)||LA126_91==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_91==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 91, input);
                                throw nvae;
                            }
                            }
                            break;
                        case STDDEV:
                            {
                            int LA126_92 = input.LA(3);
                            if ( ((LA126_92>=IN_SET && LA126_92<=REGEXP)||(LA126_92>=OR_EXPR && LA126_92<=NOT_EXPR)||LA126_92==IS||LA126_92==LBRACK||LA126_92==LPAREN||LA126_92==RCURLY||(LA126_92>=COMMA && LA126_92<=STAR)||(LA126_92>=LT && LA126_92<=PLUS)||(LA126_92>=BAND && LA126_92<=MOD)||LA126_92==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_92==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 92, input);
                                throw nvae;
                            }
                            }
                            break;
                        case AVEDEV:
                            {
                            int LA126_93 = input.LA(3);
                            if ( ((LA126_93>=IN_SET && LA126_93<=REGEXP)||(LA126_93>=OR_EXPR && LA126_93<=NOT_EXPR)||LA126_93==IS||LA126_93==LBRACK||LA126_93==LPAREN||LA126_93==RCURLY||(LA126_93>=COMMA && LA126_93<=STAR)||(LA126_93>=LT && LA126_93<=PLUS)||(LA126_93>=BAND && LA126_93<=MOD)||LA126_93==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_93==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 93, input);
                                throw nvae;
                            }
                            }
                            break;
                        case EVENTS:
                            {
                            int LA126_94 = input.LA(3);
                            if ( ((LA126_94>=IN_SET && LA126_94<=REGEXP)||(LA126_94>=OR_EXPR && LA126_94<=NOT_EXPR)||LA126_94==IS||LA126_94==LBRACK||LA126_94==LPAREN||LA126_94==RCURLY||(LA126_94>=COMMA && LA126_94<=STAR)||(LA126_94>=LT && LA126_94<=PLUS)||(LA126_94>=BAND && LA126_94<=MOD)||LA126_94==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_94==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 94, input);
                                throw nvae;
                            }
                            }
                            break;
                        case FIRST:
                            {
                            int LA126_95 = input.LA(3);
                            if ( ((LA126_95>=IN_SET && LA126_95<=REGEXP)||(LA126_95>=OR_EXPR && LA126_95<=NOT_EXPR)||LA126_95==IS||LA126_95==LBRACK||LA126_95==LPAREN||LA126_95==RCURLY||(LA126_95>=COMMA && LA126_95<=STAR)||(LA126_95>=LT && LA126_95<=PLUS)||(LA126_95>=BAND && LA126_95<=MOD)||LA126_95==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_95==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 95, input);
                                throw nvae;
                            }
                            }
                            break;
                        case LAST:
                            {
                            int LA126_96 = input.LA(3);
                            if ( ((LA126_96>=IN_SET && LA126_96<=REGEXP)||(LA126_96>=OR_EXPR && LA126_96<=NOT_EXPR)||LA126_96==IS||LA126_96==LBRACK||LA126_96==LPAREN||LA126_96==RCURLY||(LA126_96>=COMMA && LA126_96<=STAR)||(LA126_96>=LT && LA126_96<=PLUS)||(LA126_96>=BAND && LA126_96<=MOD)||LA126_96==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_96==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 96, input);
                                throw nvae;
                            }
                            }
                            break;
                        case WHILE:
                            {
                            int LA126_97 = input.LA(3);
                            if ( (LA126_97==COLON) ) {
                                alt126=2;
                            }
                            else if ( ((LA126_97>=IN_SET && LA126_97<=REGEXP)||(LA126_97>=OR_EXPR && LA126_97<=NOT_EXPR)||LA126_97==IS||LA126_97==LBRACK||LA126_97==LPAREN||LA126_97==RCURLY||(LA126_97>=COMMA && LA126_97<=STAR)||(LA126_97>=LT && LA126_97<=PLUS)||(LA126_97>=BAND && LA126_97<=MOD)||LA126_97==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 97, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MERGE:
                            {
                            int LA126_98 = input.LA(3);
                            if ( ((LA126_98>=IN_SET && LA126_98<=REGEXP)||(LA126_98>=OR_EXPR && LA126_98<=NOT_EXPR)||LA126_98==IS||LA126_98==LBRACK||LA126_98==LPAREN||LA126_98==RCURLY||(LA126_98>=COMMA && LA126_98<=STAR)||(LA126_98>=LT && LA126_98<=PLUS)||(LA126_98>=BAND && LA126_98<=MOD)||LA126_98==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_98==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 98, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MATCHED:
                            {
                            int LA126_99 = input.LA(3);
                            if ( ((LA126_99>=IN_SET && LA126_99<=REGEXP)||(LA126_99>=OR_EXPR && LA126_99<=NOT_EXPR)||LA126_99==IS||LA126_99==LBRACK||LA126_99==LPAREN||LA126_99==RCURLY||(LA126_99>=COMMA && LA126_99<=STAR)||(LA126_99>=LT && LA126_99<=PLUS)||(LA126_99>=BAND && LA126_99<=MOD)||LA126_99==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_99==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 99, input);
                                throw nvae;
                            }
                            }
                            break;
                        case UNIDIRECTIONAL:
                            {
                            int LA126_100 = input.LA(3);
                            if ( ((LA126_100>=IN_SET && LA126_100<=REGEXP)||(LA126_100>=OR_EXPR && LA126_100<=NOT_EXPR)||LA126_100==IS||LA126_100==LBRACK||LA126_100==LPAREN||LA126_100==RCURLY||(LA126_100>=COMMA && LA126_100<=STAR)||(LA126_100>=LT && LA126_100<=PLUS)||(LA126_100>=BAND && LA126_100<=MOD)||LA126_100==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_100==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 100, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RETAINUNION:
                            {
                            int LA126_101 = input.LA(3);
                            if ( (LA126_101==COLON) ) {
                                alt126=2;
                            }
                            else if ( ((LA126_101>=IN_SET && LA126_101<=REGEXP)||(LA126_101>=OR_EXPR && LA126_101<=NOT_EXPR)||LA126_101==IS||LA126_101==LBRACK||LA126_101==LPAREN||LA126_101==RCURLY||(LA126_101>=COMMA && LA126_101<=STAR)||(LA126_101>=LT && LA126_101<=PLUS)||(LA126_101>=BAND && LA126_101<=MOD)||LA126_101==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 101, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RETAININTERSECTION:
                            {
                            int LA126_102 = input.LA(3);
                            if ( ((LA126_102>=IN_SET && LA126_102<=REGEXP)||(LA126_102>=OR_EXPR && LA126_102<=NOT_EXPR)||LA126_102==IS||LA126_102==LBRACK||LA126_102==LPAREN||LA126_102==RCURLY||(LA126_102>=COMMA && LA126_102<=STAR)||(LA126_102>=LT && LA126_102<=PLUS)||(LA126_102>=BAND && LA126_102<=MOD)||LA126_102==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_102==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 102, input);
                                throw nvae;
                            }
                            }
                            break;
                        case UNTIL:
                            {
                            int LA126_103 = input.LA(3);
                            if ( ((LA126_103>=IN_SET && LA126_103<=REGEXP)||(LA126_103>=OR_EXPR && LA126_103<=NOT_EXPR)||LA126_103==IS||LA126_103==LBRACK||LA126_103==LPAREN||LA126_103==RCURLY||(LA126_103>=COMMA && LA126_103<=STAR)||(LA126_103>=LT && LA126_103<=PLUS)||(LA126_103>=BAND && LA126_103<=MOD)||LA126_103==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_103==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 103, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PATTERN:
                            {
                            int LA126_104 = input.LA(3);
                            if ( ((LA126_104>=IN_SET && LA126_104<=REGEXP)||(LA126_104>=OR_EXPR && LA126_104<=NOT_EXPR)||LA126_104==IS||LA126_104==LBRACK||LA126_104==LPAREN||LA126_104==RCURLY||(LA126_104>=COMMA && LA126_104<=STAR)||(LA126_104>=LT && LA126_104<=PLUS)||(LA126_104>=BAND && LA126_104<=MOD)||LA126_104==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_104==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 104, input);
                                throw nvae;
                            }
                            }
                            break;
                        case SQL:
                            {
                            int LA126_105 = input.LA(3);
                            if ( (LA126_105==COLON) ) {
                                alt126=2;
                            }
                            else if ( ((LA126_105>=IN_SET && LA126_105<=REGEXP)||(LA126_105>=OR_EXPR && LA126_105<=NOT_EXPR)||LA126_105==IS||LA126_105==LBRACK||LA126_105==LPAREN||LA126_105==RCURLY||(LA126_105>=COMMA && LA126_105<=STAR)||(LA126_105>=LT && LA126_105<=PLUS)||(LA126_105>=BAND && LA126_105<=MOD)||LA126_105==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 105, input);
                                throw nvae;
                            }
                            }
                            break;
                        case METADATASQL:
                            {
                            int LA126_106 = input.LA(3);
                            if ( ((LA126_106>=IN_SET && LA126_106<=REGEXP)||(LA126_106>=OR_EXPR && LA126_106<=NOT_EXPR)||LA126_106==IS||LA126_106==LBRACK||LA126_106==LPAREN||LA126_106==RCURLY||(LA126_106>=COMMA && LA126_106<=STAR)||(LA126_106>=LT && LA126_106<=PLUS)||(LA126_106>=BAND && LA126_106<=MOD)||LA126_106==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_106==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 106, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PREVIOUS:
                            {
                            int LA126_107 = input.LA(3);
                            if ( ((LA126_107>=IN_SET && LA126_107<=REGEXP)||(LA126_107>=OR_EXPR && LA126_107<=NOT_EXPR)||LA126_107==IS||LA126_107==LBRACK||LA126_107==LPAREN||LA126_107==RCURLY||(LA126_107>=COMMA && LA126_107<=STAR)||(LA126_107>=LT && LA126_107<=PLUS)||(LA126_107>=BAND && LA126_107<=MOD)||LA126_107==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_107==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 107, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PREVIOUSTAIL:
                            {
                            int LA126_108 = input.LA(3);
                            if ( ((LA126_108>=IN_SET && LA126_108<=REGEXP)||(LA126_108>=OR_EXPR && LA126_108<=NOT_EXPR)||LA126_108==IS||LA126_108==LBRACK||LA126_108==LPAREN||LA126_108==RCURLY||(LA126_108>=COMMA && LA126_108<=STAR)||(LA126_108>=LT && LA126_108<=PLUS)||(LA126_108>=BAND && LA126_108<=MOD)||LA126_108==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_108==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 108, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PRIOR:
                            {
                            int LA126_109 = input.LA(3);
                            if ( ((LA126_109>=IN_SET && LA126_109<=REGEXP)||(LA126_109>=OR_EXPR && LA126_109<=NOT_EXPR)||LA126_109==IS||LA126_109==LBRACK||LA126_109==LPAREN||LA126_109==RCURLY||(LA126_109>=COMMA && LA126_109<=STAR)||(LA126_109>=LT && LA126_109<=PLUS)||(LA126_109>=BAND && LA126_109<=MOD)||LA126_109==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_109==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 109, input);
                                throw nvae;
                            }
                            }
                            break;
                        case WEEKDAY:
                            {
                            int LA126_110 = input.LA(3);
                            if ( ((LA126_110>=IN_SET && LA126_110<=REGEXP)||(LA126_110>=OR_EXPR && LA126_110<=NOT_EXPR)||LA126_110==IS||LA126_110==LBRACK||LA126_110==LPAREN||LA126_110==RCURLY||(LA126_110>=COMMA && LA126_110<=STAR)||(LA126_110>=LT && LA126_110<=PLUS)||(LA126_110>=BAND && LA126_110<=MOD)||LA126_110==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_110==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 110, input);
                                throw nvae;
                            }
                            }
                            break;
                        case LW:
                            {
                            int LA126_111 = input.LA(3);
                            if ( ((LA126_111>=IN_SET && LA126_111<=REGEXP)||(LA126_111>=OR_EXPR && LA126_111<=NOT_EXPR)||LA126_111==IS||LA126_111==LBRACK||LA126_111==LPAREN||LA126_111==RCURLY||(LA126_111>=COMMA && LA126_111<=STAR)||(LA126_111>=LT && LA126_111<=PLUS)||(LA126_111>=BAND && LA126_111<=MOD)||LA126_111==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_111==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 111, input);
                                throw nvae;
                            }
                            }
                            break;
                        case INSTANCEOF:
                            {
                            int LA126_112 = input.LA(3);
                            if ( ((LA126_112>=IN_SET && LA126_112<=REGEXP)||(LA126_112>=OR_EXPR && LA126_112<=NOT_EXPR)||LA126_112==IS||LA126_112==LBRACK||LA126_112==LPAREN||LA126_112==RCURLY||(LA126_112>=COMMA && LA126_112<=STAR)||(LA126_112>=LT && LA126_112<=PLUS)||(LA126_112>=BAND && LA126_112<=MOD)||LA126_112==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_112==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 112, input);
                                throw nvae;
                            }
                            }
                            break;
                        case TYPEOF:
                            {
                            int LA126_113 = input.LA(3);
                            if ( ((LA126_113>=IN_SET && LA126_113<=REGEXP)||(LA126_113>=OR_EXPR && LA126_113<=NOT_EXPR)||LA126_113==IS||LA126_113==LBRACK||LA126_113==LPAREN||LA126_113==RCURLY||(LA126_113>=COMMA && LA126_113<=STAR)||(LA126_113>=LT && LA126_113<=PLUS)||(LA126_113>=BAND && LA126_113<=MOD)||LA126_113==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_113==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 113, input);
                                throw nvae;
                            }
                            }
                            break;
                        case CAST:
                            {
                            int LA126_114 = input.LA(3);
                            if ( ((LA126_114>=IN_SET && LA126_114<=REGEXP)||(LA126_114>=OR_EXPR && LA126_114<=NOT_EXPR)||LA126_114==IS||LA126_114==LBRACK||LA126_114==LPAREN||LA126_114==RCURLY||(LA126_114>=COMMA && LA126_114<=STAR)||(LA126_114>=LT && LA126_114<=PLUS)||(LA126_114>=BAND && LA126_114<=MOD)||LA126_114==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_114==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 114, input);
                                throw nvae;
                            }
                            }
                            break;
                        case SNAPSHOT:
                            {
                            int LA126_115 = input.LA(3);
                            if ( (LA126_115==COLON) ) {
                                alt126=2;
                            }
                            else if ( ((LA126_115>=IN_SET && LA126_115<=REGEXP)||(LA126_115>=OR_EXPR && LA126_115<=NOT_EXPR)||LA126_115==IS||LA126_115==LBRACK||LA126_115==LPAREN||LA126_115==RCURLY||(LA126_115>=COMMA && LA126_115<=STAR)||(LA126_115>=LT && LA126_115<=PLUS)||(LA126_115>=BAND && LA126_115<=MOD)||LA126_115==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 115, input);
                                throw nvae;
                            }
                            }
                            break;
                        case VARIABLE:
                            {
                            int LA126_116 = input.LA(3);
                            if ( ((LA126_116>=IN_SET && LA126_116<=REGEXP)||(LA126_116>=OR_EXPR && LA126_116<=NOT_EXPR)||LA126_116==IS||LA126_116==LBRACK||LA126_116==LPAREN||LA126_116==RCURLY||(LA126_116>=COMMA && LA126_116<=STAR)||(LA126_116>=LT && LA126_116<=PLUS)||(LA126_116>=BAND && LA126_116<=MOD)||LA126_116==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_116==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 116, input);
                                throw nvae;
                            }
                            }
                            break;
                        case INDEX:
                            {
                            int LA126_117 = input.LA(3);
                            if ( (LA126_117==COLON) ) {
                                alt126=2;
                            }
                            else if ( ((LA126_117>=IN_SET && LA126_117<=REGEXP)||(LA126_117>=OR_EXPR && LA126_117<=NOT_EXPR)||LA126_117==IS||LA126_117==LBRACK||LA126_117==LPAREN||LA126_117==RCURLY||(LA126_117>=COMMA && LA126_117<=STAR)||(LA126_117>=LT && LA126_117<=PLUS)||(LA126_117>=BAND && LA126_117<=MOD)||LA126_117==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 117, input);
                                throw nvae;
                            }
                            }
                            break;
                        case WINDOW:
                            {
                            int LA126_118 = input.LA(3);
                            if ( ((LA126_118>=IN_SET && LA126_118<=REGEXP)||(LA126_118>=OR_EXPR && LA126_118<=NOT_EXPR)||LA126_118==IS||LA126_118==LBRACK||LA126_118==LPAREN||LA126_118==RCURLY||(LA126_118>=COMMA && LA126_118<=STAR)||(LA126_118>=LT && LA126_118<=PLUS)||(LA126_118>=BAND && LA126_118<=MOD)||LA126_118==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_118==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 118, input);
                                throw nvae;
                            }
                            }
                            break;
                        case LEFT:
                            {
                            int LA126_119 = input.LA(3);
                            if ( ((LA126_119>=IN_SET && LA126_119<=REGEXP)||(LA126_119>=OR_EXPR && LA126_119<=NOT_EXPR)||LA126_119==IS||LA126_119==LBRACK||LA126_119==LPAREN||LA126_119==RCURLY||(LA126_119>=COMMA && LA126_119<=STAR)||(LA126_119>=LT && LA126_119<=PLUS)||(LA126_119>=BAND && LA126_119<=MOD)||LA126_119==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_119==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 119, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RIGHT:
                            {
                            int LA126_120 = input.LA(3);
                            if ( ((LA126_120>=IN_SET && LA126_120<=REGEXP)||(LA126_120>=OR_EXPR && LA126_120<=NOT_EXPR)||LA126_120==IS||LA126_120==LBRACK||LA126_120==LPAREN||LA126_120==RCURLY||(LA126_120>=COMMA && LA126_120<=STAR)||(LA126_120>=LT && LA126_120<=PLUS)||(LA126_120>=BAND && LA126_120<=MOD)||LA126_120==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_120==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 120, input);
                                throw nvae;
                            }
                            }
                            break;
                        case OUTER:
                            {
                            int LA126_121 = input.LA(3);
                            if ( ((LA126_121>=IN_SET && LA126_121<=REGEXP)||(LA126_121>=OR_EXPR && LA126_121<=NOT_EXPR)||LA126_121==IS||LA126_121==LBRACK||LA126_121==LPAREN||LA126_121==RCURLY||(LA126_121>=COMMA && LA126_121<=STAR)||(LA126_121>=LT && LA126_121<=PLUS)||(LA126_121>=BAND && LA126_121<=MOD)||LA126_121==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_121==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 121, input);
                                throw nvae;
                            }
                            }
                            break;
                        case FULL:
                            {
                            int LA126_122 = input.LA(3);
                            if ( (LA126_122==COLON) ) {
                                alt126=2;
                            }
                            else if ( ((LA126_122>=IN_SET && LA126_122<=REGEXP)||(LA126_122>=OR_EXPR && LA126_122<=NOT_EXPR)||LA126_122==IS||LA126_122==LBRACK||LA126_122==LPAREN||LA126_122==RCURLY||(LA126_122>=COMMA && LA126_122<=STAR)||(LA126_122>=LT && LA126_122<=PLUS)||(LA126_122>=BAND && LA126_122<=MOD)||LA126_122==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 122, input);
                                throw nvae;
                            }
                            }
                            break;
                        case JOIN:
                            {
                            int LA126_123 = input.LA(3);
                            if ( ((LA126_123>=IN_SET && LA126_123<=REGEXP)||(LA126_123>=OR_EXPR && LA126_123<=NOT_EXPR)||LA126_123==IS||LA126_123==LBRACK||LA126_123==LPAREN||LA126_123==RCURLY||(LA126_123>=COMMA && LA126_123<=STAR)||(LA126_123>=LT && LA126_123<=PLUS)||(LA126_123>=BAND && LA126_123<=MOD)||LA126_123==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_123==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 123, input);
                                throw nvae;
                            }
                            }
                            break;
                        case DEFINE:
                            {
                            int LA126_124 = input.LA(3);
                            if ( ((LA126_124>=IN_SET && LA126_124<=REGEXP)||(LA126_124>=OR_EXPR && LA126_124<=NOT_EXPR)||LA126_124==IS||LA126_124==LBRACK||LA126_124==LPAREN||LA126_124==RCURLY||(LA126_124>=COMMA && LA126_124<=STAR)||(LA126_124>=LT && LA126_124<=PLUS)||(LA126_124>=BAND && LA126_124<=MOD)||LA126_124==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_124==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 124, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PARTITION:
                            {
                            int LA126_125 = input.LA(3);
                            if ( ((LA126_125>=IN_SET && LA126_125<=REGEXP)||(LA126_125>=OR_EXPR && LA126_125<=NOT_EXPR)||LA126_125==IS||LA126_125==LBRACK||LA126_125==LPAREN||LA126_125==RCURLY||(LA126_125>=COMMA && LA126_125<=STAR)||(LA126_125>=LT && LA126_125<=PLUS)||(LA126_125>=BAND && LA126_125<=MOD)||LA126_125==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_125==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 125, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MATCHES:
                            {
                            int LA126_126 = input.LA(3);
                            if ( (LA126_126==COLON) ) {
                                alt126=2;
                            }
                            else if ( ((LA126_126>=IN_SET && LA126_126<=REGEXP)||(LA126_126>=OR_EXPR && LA126_126<=NOT_EXPR)||LA126_126==IS||LA126_126==LBRACK||LA126_126==LPAREN||LA126_126==RCURLY||(LA126_126>=COMMA && LA126_126<=STAR)||(LA126_126>=LT && LA126_126<=PLUS)||(LA126_126>=BAND && LA126_126<=MOD)||LA126_126==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 126, input);
                                throw nvae;
                            }
                            }
                            break;
                        case CONTEXT:
                            {
                            int LA126_127 = input.LA(3);
                            if ( ((LA126_127>=IN_SET && LA126_127<=REGEXP)||(LA126_127>=OR_EXPR && LA126_127<=NOT_EXPR)||LA126_127==IS||LA126_127==LBRACK||LA126_127==LPAREN||LA126_127==RCURLY||(LA126_127>=COMMA && LA126_127<=STAR)||(LA126_127>=LT && LA126_127<=PLUS)||(LA126_127>=BAND && LA126_127<=MOD)||LA126_127==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_127==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 127, input);
                                throw nvae;
                            }
                            }
                            break;
                        case FOR:
                            {
                            int LA126_128 = input.LA(3);
                            if ( ((LA126_128>=IN_SET && LA126_128<=REGEXP)||(LA126_128>=OR_EXPR && LA126_128<=NOT_EXPR)||LA126_128==IS||LA126_128==LBRACK||LA126_128==LPAREN||LA126_128==RCURLY||(LA126_128>=COMMA && LA126_128<=STAR)||(LA126_128>=LT && LA126_128<=PLUS)||(LA126_128>=BAND && LA126_128<=MOD)||LA126_128==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_128==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 128, input);
                                throw nvae;
                            }
                            }
                            break;
                        case USING:
                            {
                            int LA126_129 = input.LA(3);
                            if ( ((LA126_129>=IN_SET && LA126_129<=REGEXP)||(LA126_129>=OR_EXPR && LA126_129<=NOT_EXPR)||LA126_129==IS||LA126_129==LBRACK||LA126_129==LPAREN||LA126_129==RCURLY||(LA126_129>=COMMA && LA126_129<=STAR)||(LA126_129>=LT && LA126_129<=PLUS)||(LA126_129>=BAND && LA126_129<=MOD)||LA126_129==ESCAPECHAR) ) {
                                alt126=1;
                            }
                            else if ( (LA126_129==COLON) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 129, input);
                                throw nvae;
                            }
                            }
                            break;
                        case BETWEEN:
                        case NOT_EXPR:
                        case WHERE:
                        case CASE:
                        case ISTREAM:
                        case PREVIOUSCOUNT:
                        case PREVIOUSWINDOW:
                        case EXISTS:
                        case CURRENT_TIMESTAMP:
                        case SET:
                        case BOOLEAN_TRUE:
                        case BOOLEAN_FALSE:
                        case VALUE_NULL:
                        case AFTER:
                        case NEWKW:
                        case NUM_DOUBLE:
                        case LPAREN:
                        case LCURLY:
                        case RCURLY:
                        case QUESTION:
                        case PLUS:
                        case MINUS:
                        case NUM_INT:
                        case NUM_LONG:
                        case NUM_FLOAT:
                            {
                            alt126=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 126, 74, input);
                            throw nvae;
                        }
                        }
                        break;
                    case LBRACK:
                        {
                        alt126=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 126, 0, input);
                        throw nvae;
                    }
                    switch (alt126) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expression_in_gopConfig5274);
                            expression335=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression335.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_jsonobject_in_gopConfig5278);
                            jsonobject336=jsonobject();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_jsonobject.add(jsonobject336.getTree());
                            }
                            break;
                        case 3 :
                            {
                            pushFollow(FOLLOW_jsonarray_in_gopConfig5282);
                            jsonarray337=jsonarray();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_jsonarray.add(jsonarray337.getTree());
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPCFGITM, "GOPCFGITM"), root_1);
                        adaptor.addChild(root_1, stream_n.nextNode());
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        if ( stream_jsonobject.hasNext() ) {
                            adaptor.addChild(root_1, stream_jsonobject.nextTree());
                        }
                        stream_jsonobject.reset();
                        if ( stream_jsonarray.hasNext() ) {
                            adaptor.addChild(root_1, stream_jsonarray.nextTree());
                        }
                        stream_jsonarray.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamFilterExpression_return streamFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamFilterExpression_return retval = new EsperEPL2GrammarParser.streamFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT338=null;
        Token DOT339=null;
        Token DOT341=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression340 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression342 = null;
        CommonTree IDENT338_tree=null;
        CommonTree DOT339_tree=null;
        CommonTree DOT341_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT338=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamFilterExpression5315); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT338_tree = (CommonTree)adaptor.create(IDENT338);
            adaptor.addChild(root_0, IDENT338_tree);
            }
            int alt129=2;
            int LA129_0 = input.LA(1);
            if ( (LA129_0==DOT) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    {
                    DOT339=(Token)match(input,DOT,FOLLOW_DOT_in_streamFilterExpression5318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT339_tree = (CommonTree)adaptor.create(DOT339);
                    adaptor.addChild(root_0, DOT339_tree);
                    }
                    pushFollow(FOLLOW_viewExpression_in_streamFilterExpression5320);
                    viewExpression340=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, viewExpression340.getTree());
                    loop128:
                    do {
                        int alt128=2;
                        int LA128_0 = input.LA(1);
                        if ( (LA128_0==DOT) ) {
                            alt128=1;
                        }
                        switch (alt128) {
                    	case 1 :
                    	    {
                    	    DOT341=(Token)match(input,DOT,FOLLOW_DOT_in_streamFilterExpression5323); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT341_tree = (CommonTree)adaptor.create(DOT341);
                    	    adaptor.addChild(root_0, DOT341_tree);
                    	    }
                    	    pushFollow(FOLLOW_viewExpression_in_streamFilterExpression5325);
                    	    viewExpression342=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, viewExpression342.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop128;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextExpr_return createContextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createContextExpr_return retval = new EsperEPL2GrammarParser.createContextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CREATE343=null;
        Token CONTEXT344=null;
        Token AS345=null;
        EsperEPL2GrammarParser.createContextDetail_return createContextDetail346 = null;
        CommonTree name_tree=null;
        CommonTree CREATE343_tree=null;
        CommonTree CONTEXT344_tree=null;
        CommonTree AS345_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        RewriteRuleSubtreeStream stream_createContextDetail=new RewriteRuleSubtreeStream(adaptor,"rule createContextDetail");
        try {
            {
            CREATE343=(Token)match(input,CREATE,FOLLOW_CREATE_in_createContextExpr5341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE343);
            CONTEXT344=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_createContextExpr5343); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT344);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextExpr5347); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt130=2;
            int LA130_0 = input.LA(1);
            if ( (LA130_0==AS) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    {
                    AS345=(Token)match(input,AS,FOLLOW_AS_in_createContextExpr5349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS345);
                    }
                    break;
            }
            pushFollow(FOLLOW_createContextDetail_in_createContextExpr5352);
            createContextDetail346=createContextDetail();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createContextDetail.add(createContextDetail346.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX, "CREATE_CTX"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_createContextDetail.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createExpressionExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createExpressionExpr_return createExpressionExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createExpressionExpr_return retval = new EsperEPL2GrammarParser.createExpressionExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CREATE347=null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl348 = null;
        CommonTree CREATE347_tree=null;
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleSubtreeStream stream_expressionDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionDecl");
        try {
            {
            CREATE347=(Token)match(input,CREATE,FOLLOW_CREATE_in_createExpressionExpr5377); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE347);
            pushFollow(FOLLOW_expressionDecl_in_createExpressionExpr5379);
            expressionDecl348=expressionDecl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionDecl.add(expressionDecl348.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_EXPR, "CREATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expressionDecl.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextDetail_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextDetail_return createContextDetail() throws RecognitionException {
        EsperEPL2GrammarParser.createContextDetail_return retval = new EsperEPL2GrammarParser.createContextDetail_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA351=null;
        Token COMMA353=null;
        EsperEPL2GrammarParser.createContextChoice_return createContextChoice349 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested350 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested352 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested354 = null;
        CommonTree COMMA351_tree=null;
        CommonTree COMMA353_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_contextContextNested=new RewriteRuleSubtreeStream(adaptor,"rule contextContextNested");
        try {
            int alt132=2;
            int LA132_0 = input.LA(1);
            if ( (LA132_0==COALESCE||LA132_0==GROUP||LA132_0==PARTITION||LA132_0==START||LA132_0==INITIATED) ) {
                alt132=1;
            }
            else if ( (LA132_0==CONTEXT) ) {
                alt132=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);
                throw nvae;
            }
            switch (alt132) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createContextChoice_in_createContextDetail5400);
                    createContextChoice349=createContextChoice();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextChoice349.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_contextContextNested_in_createContextDetail5405);
                    contextContextNested350=contextContextNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested350.getTree());
                    COMMA351=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail5407); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA351);
                    pushFollow(FOLLOW_contextContextNested_in_createContextDetail5409);
                    contextContextNested352=contextContextNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested352.getTree());
                    loop131:
                    do {
                        int alt131=2;
                        int LA131_0 = input.LA(1);
                        if ( (LA131_0==COMMA) ) {
                            alt131=1;
                        }
                        switch (alt131) {
                    	case 1 :
                    	    {
                    	    COMMA353=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail5412); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA353);
                    	    pushFollow(FOLLOW_contextContextNested_in_createContextDetail5414);
                    	    contextContextNested354=contextContextNested();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested354.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop131;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_NESTED, "CREATE_CTX_NESTED"), root_1);
                        if ( !(stream_contextContextNested.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_contextContextNested.hasNext() ) {
                            adaptor.addChild(root_1, stream_contextContextNested.nextTree());
                        }
                        stream_contextContextNested.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class contextContextNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.contextContextNested_return contextContextNested() throws RecognitionException {
        EsperEPL2GrammarParser.contextContextNested_return retval = new EsperEPL2GrammarParser.contextContextNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CONTEXT355=null;
        Token AS356=null;
        EsperEPL2GrammarParser.createContextChoice_return createContextChoice357 = null;
        CommonTree name_tree=null;
        CommonTree CONTEXT355_tree=null;
        CommonTree AS356_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        RewriteRuleSubtreeStream stream_createContextChoice=new RewriteRuleSubtreeStream(adaptor,"rule createContextChoice");
        try {
            {
            CONTEXT355=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextContextNested5440); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT355);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_contextContextNested5444); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt133=2;
            int LA133_0 = input.LA(1);
            if ( (LA133_0==AS) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    {
                    AS356=(Token)match(input,AS,FOLLOW_AS_in_contextContextNested5446); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS356);
                    }
                    break;
            }
            pushFollow(FOLLOW_createContextChoice_in_contextContextNested5449);
            createContextChoice357=createContextChoice();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createContextChoice.add(createContextChoice357.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX, "CREATE_CTX"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_createContextChoice.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextChoice_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextChoice_return createContextChoice() throws RecognitionException {
        EsperEPL2GrammarParser.createContextChoice_return retval = new EsperEPL2GrammarParser.createContextChoice_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token g=null;
        Token p=null;
        Token START358=null;
        Token ATCHAR359=null;
        Token END361=null;
        Token INITIATED363=null;
        Token BY364=null;
        Token ATCHAR365=null;
        Token AND_EXPR366=null;
        Token TERMINATED368=null;
        Token BY369=null;
        Token PARTITION371=null;
        Token BY372=null;
        Token COMMA374=null;
        Token COMMA377=null;
        Token FROM379=null;
        Token COALESCE381=null;
        Token BY382=null;
        Token COMMA384=null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint360 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint362 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint367 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint370 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem373 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem375 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem376 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem378 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression380 = null;
        EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem383 = null;
        EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem385 = null;
        EsperEPL2GrammarParser.number_return number386 = null;
        CommonTree i_tree=null;
        CommonTree g_tree=null;
        CommonTree p_tree=null;
        CommonTree START358_tree=null;
        CommonTree ATCHAR359_tree=null;
        CommonTree END361_tree=null;
        CommonTree INITIATED363_tree=null;
        CommonTree BY364_tree=null;
        CommonTree ATCHAR365_tree=null;
        CommonTree AND_EXPR366_tree=null;
        CommonTree TERMINATED368_tree=null;
        CommonTree BY369_tree=null;
        CommonTree PARTITION371_tree=null;
        CommonTree BY372_tree=null;
        CommonTree COMMA374_tree=null;
        CommonTree COMMA377_tree=null;
        CommonTree FROM379_tree=null;
        CommonTree COALESCE381_tree=null;
        CommonTree BY382_tree=null;
        CommonTree COMMA384_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_INITIATED=new RewriteRuleTokenStream(adaptor,"token INITIATED");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_START=new RewriteRuleTokenStream(adaptor,"token START");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COALESCE=new RewriteRuleTokenStream(adaptor,"token COALESCE");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_createContextRangePoint=new RewriteRuleSubtreeStream(adaptor,"rule createContextRangePoint");
        RewriteRuleSubtreeStream stream_createContextPartitionItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextPartitionItem");
        RewriteRuleSubtreeStream stream_createContextCoalesceItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextCoalesceItem");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_createContextGroupItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextGroupItem");
        try {
            int alt144=5;
            switch ( input.LA(1) ) {
            case START:
                {
                alt144=1;
                }
                break;
            case INITIATED:
                {
                alt144=2;
                }
                break;
            case PARTITION:
                {
                alt144=3;
                }
                break;
            case GROUP:
                {
                alt144=4;
                }
                break;
            case COALESCE:
                {
                alt144=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);
                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    {
                    START358=(Token)match(input,START,FOLLOW_START_in_createContextChoice5474); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_START.add(START358);
                    int alt134=2;
                    int LA134_0 = input.LA(1);
                    if ( (LA134_0==ATCHAR) ) {
                        alt134=1;
                    }
                    else if ( (LA134_0==EVENTS||LA134_0==PATTERN||LA134_0==AFTER||(LA134_0>=IDENT && LA134_0<=LPAREN)||LA134_0==TICKED_STRING_LITERAL) ) {
                        alt134=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 134, 0, input);
                        throw nvae;
                    }
                    switch (alt134) {
                        case 1 :
                            {
                            ATCHAR359=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_createContextChoice5477); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR359);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice5481); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5485);
                            createContextRangePoint360=createContextRangePoint();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint360.getTree());
                            }
                            break;
                    }
                    END361=(Token)match(input,END,FOLLOW_END_in_createContextChoice5488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END361);
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5490);
                    createContextRangePoint362=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint362.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_FIXED, "CREATE_CTX_FIXED"), root_1);
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        if ( !(stream_createContextRangePoint.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextRangePoint.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        }
                        stream_createContextRangePoint.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    INITIATED363=(Token)match(input,INITIATED,FOLLOW_INITIATED_in_createContextChoice5510); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INITIATED.add(INITIATED363);
                    int alt135=2;
                    int LA135_0 = input.LA(1);
                    if ( (LA135_0==BY) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            {
                            BY364=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5513); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY364);
                            }
                            break;
                    }
                    int alt136=2;
                    int LA136_0 = input.LA(1);
                    if ( (LA136_0==ATCHAR) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            {
                            ATCHAR365=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_createContextChoice5518); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR365);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice5522); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            AND_EXPR366=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_createContextChoice5524); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR366);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5528);
                    createContextRangePoint367=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint367.getTree());
                    TERMINATED368=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_createContextChoice5530); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED368);
                    int alt137=2;
                    int LA137_0 = input.LA(1);
                    if ( (LA137_0==BY) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            {
                            BY369=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5533); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY369);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5537);
                    createContextRangePoint370=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint370.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_INIT, "CREATE_CTX_INIT"), root_1);
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    PARTITION371=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_createContextChoice5558); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION371);
                    int alt138=2;
                    int LA138_0 = input.LA(1);
                    if ( (LA138_0==BY) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            {
                            BY372=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5561); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY372);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextPartitionItem_in_createContextChoice5565);
                    createContextPartitionItem373=createContextPartitionItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem373.getTree());
                    loop139:
                    do {
                        int alt139=2;
                        int LA139_0 = input.LA(1);
                        if ( (LA139_0==COMMA) ) {
                            int LA139_3 = input.LA(2);
                            if ( (LA139_3==CONTEXT) ) {
                                int LA139_4 = input.LA(3);
                                if ( (LA139_4==AND_EXPR||LA139_4==FROM||LA139_4==LBRACK||LA139_4==LPAREN||(LA139_4>=COMMA && LA139_4<=DOT)||LA139_4==QUESTION||LA139_4==ESCAPECHAR) ) {
                                    alt139=1;
                                }
                            }
                            else if ( (LA139_3==WINDOW||LA139_3==ESCAPE||LA139_3==EVERY_EXPR||(LA139_3>=SUM && LA139_3<=COUNT)||LA139_3==OUTER||(LA139_3>=JOIN && LA139_3<=FULL)||(LA139_3>=EVENTS && LA139_3<=LAST)||(LA139_3>=UNIDIRECTIONAL && LA139_3<=PREVIOUSTAIL)||LA139_3==PRIOR||(LA139_3>=WEEKDAY && LA139_3<=CAST)||LA139_3==SNAPSHOT||(LA139_3>=VARIABLE && LA139_3<=INDEX)||(LA139_3>=DEFINE && LA139_3<=MATCHES)||(LA139_3>=FOR && LA139_3<=MATCHED)||LA139_3==IDENT||LA139_3==TICKED_STRING_LITERAL) ) {
                                alt139=1;
                            }
                        }
                        switch (alt139) {
                    	case 1 :
                    	    {
                    	    COMMA374=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice5568); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA374);
                    	    pushFollow(FOLLOW_createContextPartitionItem_in_createContextChoice5570);
                    	    createContextPartitionItem375=createContextPartitionItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem375.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop139;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_PART, "CREATE_CTX_PART"), root_1);
                        if ( !(stream_createContextPartitionItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextPartitionItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextPartitionItem.nextTree());
                        }
                        stream_createContextPartitionItem.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createContextGroupItem_in_createContextChoice5589);
                    createContextGroupItem376=createContextGroupItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem376.getTree());
                    loop140:
                    do {
                        int alt140=2;
                        int LA140_0 = input.LA(1);
                        if ( (LA140_0==COMMA) ) {
                            alt140=1;
                        }
                        switch (alt140) {
                    	case 1 :
                    	    {
                    	    COMMA377=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice5592); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA377);
                    	    pushFollow(FOLLOW_createContextGroupItem_in_createContextChoice5594);
                    	    createContextGroupItem378=createContextGroupItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem378.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop140;
                        }
                    } while (true);
                    FROM379=(Token)match(input,FROM,FOLLOW_FROM_in_createContextChoice5598); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM379);
                    pushFollow(FOLLOW_eventFilterExpression_in_createContextChoice5600);
                    eventFilterExpression380=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression380.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CAT, "CREATE_CTX_CAT"), root_1);
                        if ( !(stream_createContextGroupItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextGroupItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextGroupItem.nextTree());
                        }
                        stream_createContextGroupItem.reset();
                        adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    COALESCE381=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_createContextChoice5618); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COALESCE.add(COALESCE381);
                    int alt141=2;
                    int LA141_0 = input.LA(1);
                    if ( (LA141_0==BY) ) {
                        alt141=1;
                    }
                    switch (alt141) {
                        case 1 :
                            {
                            BY382=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5621); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY382);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextCoalesceItem_in_createContextChoice5625);
                    createContextCoalesceItem383=createContextCoalesceItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextCoalesceItem.add(createContextCoalesceItem383.getTree());
                    loop142:
                    do {
                        int alt142=2;
                        int LA142_0 = input.LA(1);
                        if ( (LA142_0==COMMA) ) {
                            alt142=1;
                        }
                        switch (alt142) {
                    	case 1 :
                    	    {
                    	    COMMA384=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice5628); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA384);
                    	    pushFollow(FOLLOW_createContextCoalesceItem_in_createContextChoice5630);
                    	    createContextCoalesceItem385=createContextCoalesceItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextCoalesceItem.add(createContextCoalesceItem385.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop142;
                        }
                    } while (true);
                    g=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice5636); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(g);
                    pushFollow(FOLLOW_number_in_createContextChoice5638);
                    number386=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number386.getTree());
                    int alt143=2;
                    int LA143_0 = input.LA(1);
                    if ( (LA143_0==IDENT) ) {
                        alt143=1;
                    }
                    switch (alt143) {
                        case 1 :
                            {
                            p=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice5643); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(p);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_COAL, "CREATE_CTX_COAL"), root_1);
                        if ( !(stream_createContextCoalesceItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextCoalesceItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextCoalesceItem.nextTree());
                        }
                        stream_createContextCoalesceItem.reset();
                        adaptor.addChild(root_1, stream_g.nextNode());
                        adaptor.addChild(root_1, stream_number.nextTree());
                        if ( stream_p.hasNext() ) {
                            adaptor.addChild(root_1, stream_p.nextNode());
                        }
                        stream_p.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextRangePoint_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint() throws RecognitionException {
        EsperEPL2GrammarParser.createContextRangePoint_return retval = new EsperEPL2GrammarParser.createContextRangePoint_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR389=null;
        Token AFTER391=null;
        EsperEPL2GrammarParser.createContextFilter_return createContextFilter387 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression388 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet390 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod392 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR389_tree=null;
        CommonTree AFTER391_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            int alt146=4;
            switch ( input.LA(1) ) {
            case EVENTS:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt146=1;
                }
                break;
            case PATTERN:
                {
                alt146=2;
                }
                break;
            case LPAREN:
                {
                alt146=3;
                }
                break;
            case AFTER:
                {
                alt146=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);
                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createContextFilter_in_createContextRangePoint5677);
                    createContextFilter387=createContextFilter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextFilter387.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_createContextRangePoint5684);
                    patternInclusionExpression388=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression388.getTree());
                    int alt145=2;
                    int LA145_0 = input.LA(1);
                    if ( (LA145_0==ATCHAR) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            {
                            ATCHAR389=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_createContextRangePoint5687); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR389);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextRangePoint5691); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_PATTERN, "CREATE_CTX_PATTERN"), root_1);
                        adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_createContextRangePoint5710);
                    crontabLimitParameterSet390=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, crontabLimitParameterSet390.getTree());
                    }
                    break;
                case 4 :
                    {
                    AFTER391=(Token)match(input,AFTER,FOLLOW_AFTER_in_createContextRangePoint5715); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(AFTER391);
                    pushFollow(FOLLOW_timePeriod_in_createContextRangePoint5717);
                    timePeriod392=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod392.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_timePeriod.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextFilter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextFilter_return createContextFilter() throws RecognitionException {
        EsperEPL2GrammarParser.createContextFilter_return retval = new EsperEPL2GrammarParser.createContextFilter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS394=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression393 = null;
        CommonTree i_tree=null;
        CommonTree AS394_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_createContextFilter5738);
            eventFilterExpression393=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression393.getTree());
            int alt148=2;
            int LA148_0 = input.LA(1);
            if ( (LA148_0==AS||LA148_0==IDENT) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    {
                    int alt147=2;
                    int LA147_0 = input.LA(1);
                    if ( (LA147_0==AS) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            {
                            AS394=(Token)match(input,AS,FOLLOW_AS_in_createContextFilter5741); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS394);
                            }
                            break;
                    }
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextFilter5746); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextPartitionItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextPartitionItem_return retval = new EsperEPL2GrammarParser.createContextPartitionItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR396=null;
        Token COMMA397=null;
        Token FROM399=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty395 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty398 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression400 = null;
        CommonTree AND_EXPR396_tree=null;
        CommonTree COMMA397_tree=null;
        CommonTree FROM399_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem5773);
            eventProperty395=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty395.getTree());
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);
                if ( (LA150_0==AND_EXPR||LA150_0==COMMA) ) {
                    alt150=1;
                }
                switch (alt150) {
            	case 1 :
            	    {
            	    int alt149=2;
            	    int LA149_0 = input.LA(1);
            	    if ( (LA149_0==AND_EXPR) ) {
            	        alt149=1;
            	    }
            	    else if ( (LA149_0==COMMA) ) {
            	        alt149=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 149, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt149) {
            	        case 1 :
            	            {
            	            AND_EXPR396=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_createContextPartitionItem5777); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR396);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            COMMA397=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextPartitionItem5779); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_COMMA.add(COMMA397);
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem5782);
            	    eventProperty398=eventProperty();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty398.getTree());
            	    }
            	    break;
            	default :
            	    break loop150;
                }
            } while (true);
            FROM399=(Token)match(input,FROM,FOLLOW_FROM_in_createContextPartitionItem5786); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM399);
            pushFollow(FOLLOW_eventFilterExpression_in_createContextPartitionItem5788);
            eventFilterExpression400=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression400.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_eventProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventProperty.nextTree());
                }
                stream_eventProperty.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextCoalesceItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextCoalesceItem_return retval = new EsperEPL2GrammarParser.createContextCoalesceItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FROM402=null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass401 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression403 = null;
        CommonTree FROM402_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionNoClass_in_createContextCoalesceItem5814);
            libFunctionNoClass401=libFunctionNoClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass401.getTree());
            FROM402=(Token)match(input,FROM,FOLLOW_FROM_in_createContextCoalesceItem5816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM402);
            pushFollow(FOLLOW_eventFilterExpression_in_createContextCoalesceItem5818);
            eventFilterExpression403=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression403.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COALESCE, "COALESCE"), root_1);
                adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextGroupItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextGroupItem_return retval = new EsperEPL2GrammarParser.createContextGroupItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token GROUP404=null;
        Token BY405=null;
        Token AS407=null;
        EsperEPL2GrammarParser.expression_return expression406 = null;
        CommonTree i_tree=null;
        CommonTree GROUP404_tree=null;
        CommonTree BY405_tree=null;
        CommonTree AS407_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            GROUP404=(Token)match(input,GROUP,FOLLOW_GROUP_in_createContextGroupItem5842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GROUP.add(GROUP404);
            int alt151=2;
            int LA151_0 = input.LA(1);
            if ( (LA151_0==BY) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    {
                    BY405=(Token)match(input,BY,FOLLOW_BY_in_createContextGroupItem5844); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY405);
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_createContextGroupItem5847);
            expression406=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression406.getTree());
            AS407=(Token)match(input,AS,FOLLOW_AS_in_createContextGroupItem5849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS407);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextGroupItem5853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CATITEM, "CREATE_CTX_CATITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaQual_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaQual_return retval = new EsperEPL2GrammarParser.createSchemaQual_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.columnList_return columnList408 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaQual5883); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_columnList_in_createSchemaQual5885);
            columnList408=columnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList408.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA410=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement409 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement411 = null;
        CommonTree COMMA410_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList5911);
            variantListElement409=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement409.getTree());
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);
                if ( (LA152_0==COMMA) ) {
                    int LA152_4 = input.LA(2);
                    if ( (LA152_4==EVENTS||LA152_4==STAR||LA152_4==TICKED_STRING_LITERAL) ) {
                        alt152=1;
                    }
                    else if ( (LA152_4==IDENT) ) {
                        int LA152_6 = input.LA(3);
                        if ( (LA152_6==EOF||LA152_6==FOR||LA152_6==IDENT||(LA152_6>=COMMA && LA152_6<=DOT)) ) {
                            alt152=1;
                        }
                    }
                }
                switch (alt152) {
            	case 1 :
            	    {
            	    COMMA410=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList5914); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA410);
            	    pushFollow(FOLLOW_variantListElement_in_variantList5916);
            	    variantListElement411=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement411.getTree());
            	    }
            	    break;
            	default :
            	    break loop152;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR412=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier413 = null;
        CommonTree STAR412_tree=null;
        try {
            int alt153=2;
            int LA153_0 = input.LA(1);
            if ( (LA153_0==STAR) ) {
                alt153=1;
            }
            else if ( (LA153_0==EVENTS||LA153_0==IDENT||LA153_0==TICKED_STRING_LITERAL) ) {
                alt153=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);
                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR412=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement5943); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR412_tree = (CommonTree)adaptor.create(STAR412);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR412_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement5949);
                    classIdentifier413=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier413.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token INTO414=null;
        Token LPAREN416=null;
        Token RPAREN418=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier415 = null;
        EsperEPL2GrammarParser.columnList_return columnList417 = null;
        CommonTree s_tree=null;
        CommonTree INTO414_tree=null;
        CommonTree LPAREN416_tree=null;
        CommonTree RPAREN418_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt154=4;
            switch ( input.LA(1) ) {
                case ISTREAM:
                    {
                    alt154=1;
                    }
                    break;
                case RSTREAM:
                    {
                    alt154=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt154=3;
                    }
                    break;
            }
            switch (alt154) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr5974); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr5980); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_insertIntoExpr5986); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            INTO414=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr5990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO414);
            pushFollow(FOLLOW_classIdentifier_in_insertIntoExpr5992);
            classIdentifier415=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier415.getTree());
            int alt155=2;
            int LA155_0 = input.LA(1);
            if ( (LA155_0==LPAREN) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    {
                    LPAREN416=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr5995); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN416);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr5997);
                    columnList417=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList417.getTree());
                    RPAREN418=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr5999); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN418);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT419=null;
        Token COMMA420=null;
        Token IDENT421=null;
        CommonTree IDENT419_tree=null;
        CommonTree COMMA420_tree=null;
        CommonTree IDENT421_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT419=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList6032); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT419);
            loop156:
            do {
                int alt156=2;
                int LA156_0 = input.LA(1);
                if ( (LA156_0==COMMA) ) {
                    int LA156_4 = input.LA(2);
                    if ( (LA156_4==IDENT) ) {
                        int LA156_6 = input.LA(3);
                        if ( (LA156_6==EOF||LA156_6==FOR||LA156_6==IDENT||LA156_6==RPAREN||LA156_6==COMMA) ) {
                            alt156=1;
                        }
                    }
                }
                switch (alt156) {
            	case 1 :
            	    {
            	    COMMA420=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList6035); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA420);
            	    IDENT421=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList6037); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT421);
            	    }
            	    break;
            	default :
            	    break loop156;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression422 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin423 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList424 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause6075);
            streamExpression422=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression422.getTree());
            int alt157=2;
            int LA157_0 = input.LA(1);
            if ( (LA157_0==EOF||LA157_0==WHERE||(LA157_0>=GROUP && LA157_0<=HAVING)||LA157_0==OUTPUT||LA157_0==ORDER||LA157_0==ROW_LIMIT_EXPR||LA157_0==MATCH_RECOGNIZE||LA157_0==FOR||LA157_0==RPAREN||LA157_0==COMMA) ) {
                alt157=1;
            }
            else if ( ((LA157_0>=INNER && LA157_0<=FULL)) ) {
                alt157=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);
                throw nvae;
            }
            switch (alt157) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause6078);
                    regularJoin423=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin423.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause6082);
                    outerJoinList424=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList424.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA425=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression426 = null;
        CommonTree COMMA425_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);
                if ( (LA158_0==COMMA) ) {
                    alt158=1;
                }
                switch (alt158) {
            	case 1 :
            	    {
            	    COMMA425=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin6096); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin6099);
            	    streamExpression426=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression426.getTree());
            	    }
            	    break;
            	default :
            	    break loop158;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin427 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin428 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList6113);
            outerJoin427=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin427.getTree());
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);
                if ( ((LA159_0>=INNER && LA159_0<=FULL)) ) {
                    alt159=1;
                }
                switch (alt159) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList6116);
            	    outerJoin428=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin428.getTree());
            	    }
            	    break;
            	default :
            	    break loop159;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER429=null;
        Token JOIN430=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression431 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent432 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER429_tree=null;
        CommonTree JOIN430_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt162=2;
            int LA162_0 = input.LA(1);
            if ( ((LA162_0>=JOIN && LA162_0<=FULL)) ) {
                alt162=1;
            }
            else if ( (LA162_0==INNER) ) {
                alt162=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);
                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    {
                    int alt161=2;
                    int LA161_0 = input.LA(1);
                    if ( ((LA161_0>=LEFT && LA161_0<=FULL)) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            {
                            int alt160=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt160=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt160=2;
                                }
                                break;
                            case FULL:
                                {
                                alt160=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 160, 0, input);
                                throw nvae;
                            }
                            switch (alt160) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin6159); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin6163); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin6167); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER429=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin6170); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER429);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin6191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN430=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin6205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN430);
            pushFollow(FOLLOW_streamExpression_in_outerJoin6207);
            streamExpression431=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression431.getTree());
            int alt163=2;
            int LA163_0 = input.LA(1);
            if ( (LA163_0==ON) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outerJoinIdent_in_outerJoin6209);
                    outerJoinIdent432=outerJoinIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent432.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON433=null;
        Token AND_EXPR435=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair434 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair436 = null;
        CommonTree ON433_tree=null;
        CommonTree AND_EXPR435_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON433=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent6287); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent6290);
            outerJoinIdentPair434=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair434.getTree());
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);
                if ( (LA164_0==AND_EXPR) ) {
                    alt164=1;
                }
                switch (alt164) {
            	case 1 :
            	    {
            	    AND_EXPR435=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent6293); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent6296);
            	    outerJoinIdentPair436=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair436.getTree());
            	    }
            	    break;
            	default :
            	    break loop164;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS438=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty437 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty439 = null;
        CommonTree EQUALS438_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair6311);
            eventProperty437=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty437.getTree());
            EQUALS438=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair6313); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair6316);
            eventProperty439=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty439.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression440 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause6338);
            evalOrExpression440=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression440.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList441 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt165=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt165=1;
                    }
                    break;
                case ISTREAM:
                    {
                    int LA165_2 = input.LA(2);
                    if ( (LA165_2==LPAREN) ) {
                        int LA165_81 = input.LA(3);
                        if ( (LA165_81==WINDOW||LA165_81==BETWEEN||LA165_81==ESCAPE||(LA165_81>=NOT_EXPR && LA165_81<=EVERY_EXPR)||LA165_81==WHERE||(LA165_81>=SUM && LA165_81<=CASE)||LA165_81==OUTER||(LA165_81>=JOIN && LA165_81<=FULL)||(LA165_81>=EVENTS && LA165_81<=LAST)||LA165_81==ISTREAM||(LA165_81>=UNIDIRECTIONAL && LA165_81<=CURRENT_TIMESTAMP)||(LA165_81>=SNAPSHOT && LA165_81<=INDEX)||(LA165_81>=BOOLEAN_TRUE && LA165_81<=VALUE_NULL)||(LA165_81>=DEFINE && LA165_81<=MATCHED)||LA165_81==NEWKW||LA165_81==CONTEXT||LA165_81==NUM_DOUBLE||(LA165_81>=IDENT && LA165_81<=LPAREN)||LA165_81==LCURLY||LA165_81==QUESTION||(LA165_81>=PLUS && LA165_81<=QUOTED_STRING_LITERAL)||LA165_81==MINUS||LA165_81==NUM_INT||(LA165_81>=TICKED_STRING_LITERAL && LA165_81<=NUM_FLOAT)) ) {
                            alt165=2;
                        }
                    }
                    else if ( (LA165_2==WINDOW||LA165_2==BETWEEN||LA165_2==ESCAPE||(LA165_2>=NOT_EXPR && LA165_2<=EVERY_EXPR)||LA165_2==WHERE||(LA165_2>=SUM && LA165_2<=COUNT)||LA165_2==CASE||LA165_2==OUTER||(LA165_2>=JOIN && LA165_2<=FULL)||LA165_2==DISTINCT||(LA165_2>=EVENTS && LA165_2<=LAST)||LA165_2==ISTREAM||(LA165_2>=UNIDIRECTIONAL && LA165_2<=CURRENT_TIMESTAMP)||(LA165_2>=SNAPSHOT && LA165_2<=INDEX)||(LA165_2>=BOOLEAN_TRUE && LA165_2<=VALUE_NULL)||(LA165_2>=DEFINE && LA165_2<=MATCHED)||LA165_2==NEWKW||LA165_2==CONTEXT||LA165_2==NUM_DOUBLE||LA165_2==IDENT||LA165_2==LCURLY||LA165_2==STAR||LA165_2==QUESTION||(LA165_2>=PLUS && LA165_2<=QUOTED_STRING_LITERAL)||LA165_2==MINUS||LA165_2==NUM_INT||(LA165_2>=TICKED_STRING_LITERAL && LA165_2<=NUM_FLOAT)) ) {
                        alt165=2;
                    }
                    }
                    break;
                case IRSTREAM:
                    {
                    alt165=3;
                    }
                    break;
            }
            switch (alt165) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause6374); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause6380); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause6386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt166=2;
            int LA166_0 = input.LA(1);
            if ( (LA166_0==DISTINCT) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause6392); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause6395);
            selectionList441=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList441.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA443=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement442 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement444 = null;
        CommonTree COMMA443_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList6426);
            selectionListElement442=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement442.getTree());
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);
                if ( (LA167_0==COMMA) ) {
                    alt167=1;
                }
                switch (alt167) {
            	case 1 :
            	    {
            	    COMMA443=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList6429); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList6432);
            	    selectionListElement444=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement444.getTree());
            	    }
            	    break;
            	default :
            	    break loop167;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector445 = null;
        EsperEPL2GrammarParser.selectionListElementExpr_return selectionListElementExpr446 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            int alt168=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt168=1;
                }
                break;
            case IDENT:
                {
                int LA168_2 = input.LA(2);
                if ( (LA168_2==DOT) ) {
                    int LA168_78 = input.LA(3);
                    if ( (LA168_78==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt168=2;
                    }
                    else if ( (LA168_78==WINDOW||LA168_78==BETWEEN||LA168_78==ESCAPE||LA168_78==EVERY_EXPR||LA168_78==WHERE||(LA168_78>=SUM && LA168_78<=COUNT)||LA168_78==OUTER||(LA168_78>=JOIN && LA168_78<=FULL)||(LA168_78>=EVENTS && LA168_78<=LAST)||(LA168_78>=UNIDIRECTIONAL && LA168_78<=PREVIOUSTAIL)||LA168_78==PRIOR||(LA168_78>=WEEKDAY && LA168_78<=CAST)||(LA168_78>=SNAPSHOT && LA168_78<=INDEX)||(LA168_78>=DEFINE && LA168_78<=MATCHED)||LA168_78==CONTEXT||LA168_78==IDENT||LA168_78==TICKED_STRING_LITERAL) ) {
                        alt168=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 168, 78, input);
                        throw nvae;
                    }
                }
                else if ( (LA168_2==EOF||(LA168_2>=IN_SET && LA168_2<=REGEXP)||(LA168_2>=OR_EXPR && LA168_2<=NOT_EXPR)||(LA168_2>=WHERE && LA168_2<=AS)||(LA168_2>=WHEN && LA168_2<=THEN)||LA168_2==FROM||LA168_2==IS||(LA168_2>=GROUP && LA168_2<=HAVING)||LA168_2==OUTPUT||LA168_2==INSERT||LA168_2==ORDER||LA168_2==ROW_LIMIT_EXPR||LA168_2==MATCH_RECOGNIZE||LA168_2==FOR||LA168_2==LBRACK||(LA168_2>=LPAREN && LA168_2<=RPAREN)||(LA168_2>=ATCHAR && LA168_2<=COMMA)||(LA168_2>=EQUALS && LA168_2<=STAR)||(LA168_2>=LT && LA168_2<=PLUS)||(LA168_2>=BAND && LA168_2<=MOD)||LA168_2==ESCAPECHAR) ) {
                    alt168=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 168, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case ISTREAM:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case QUESTION:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt168=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);
                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement6450); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement6468);
                    streamSelector445=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector445.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_selectionListElementExpr_in_selectionListElement6473);
                    selectionListElementExpr446=selectionListElementExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElementExpr446.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElementExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElementExpr_return selectionListElementExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElementExpr_return retval = new EsperEPL2GrammarParser.selectionListElementExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AS449=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.expression_return expression447 = null;
        EsperEPL2GrammarParser.selectionListElementAnno_return selectionListElementAnno448 = null;
        CommonTree AS449_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        RewriteRuleSubtreeStream stream_selectionListElementAnno=new RewriteRuleSubtreeStream(adaptor,"rule selectionListElementAnno");
         String identifier = null; 
        try {
            {
            pushFollow(FOLLOW_expression_in_selectionListElementExpr6495);
            expression447=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression447.getTree());
            int alt169=2;
            int LA169_0 = input.LA(1);
            if ( (LA169_0==ATCHAR) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectionListElementAnno_in_selectionListElementExpr6500);
                    selectionListElementAnno448=selectionListElementAnno();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectionListElementAnno.add(selectionListElementAnno448.getTree());
                    }
                    break;
            }
            int alt170=2;
            int LA170_0 = input.LA(1);
            if ( (LA170_0==AS) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    {
                    AS449=(Token)match(input,AS,FOLLOW_AS_in_selectionListElementExpr6506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS449);
                    pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElementExpr6510);
                    i=keywordAllowedIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                    if ( state.backtracking==0 ) {
                       identifier = i.getTree().toString(); 
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (identifier != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                if ( stream_selectionListElementAnno.hasNext() ) {
                    adaptor.addChild(root_1, stream_selectionListElementAnno.nextTree());
                }
                stream_selectionListElementAnno.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_selectionListElementAnno.hasNext() ) {
                    adaptor.addChild(root_1, stream_selectionListElementAnno.nextTree());
                }
                stream_selectionListElementAnno.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElementAnno_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElementAnno_return selectionListElementAnno() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElementAnno_return retval = new EsperEPL2GrammarParser.selectionListElementAnno_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR450=null;
        CommonTree i_tree=null;
        CommonTree ATCHAR450_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            ATCHAR450=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_selectionListElementAnno6558); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR450);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_selectionListElementAnno6562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT451=null;
        Token STAR452=null;
        Token AS453=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT451_tree=null;
        CommonTree STAR452_tree=null;
        CommonTree AS453_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector6588); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT451=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector6590); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT451);
            STAR452=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector6592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR452);
            int alt171=2;
            int LA171_0 = input.LA(1);
            if ( (LA171_0==AS) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    {
                    AS453=(Token)match(input,AS,FOLLOW_AS_in_streamSelector6595); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS453);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector6599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT458=null;
        Token DOT460=null;
        Token AS462=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression454 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression455 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression456 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression457 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression459 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression461 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT458_tree=null;
        CommonTree DOT460_tree=null;
        CommonTree AS462_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt172=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA172_1 = input.LA(2);
                if ( (LA172_1==EOF||(LA172_1>=WHERE && LA172_1<=AS)||(LA172_1>=INNER && LA172_1<=ON)||(LA172_1>=GROUP && LA172_1<=HAVING)||LA172_1==OUTPUT||LA172_1==ORDER||(LA172_1>=UNIDIRECTIONAL && LA172_1<=RETAININTERSECTION)||LA172_1==ROW_LIMIT_EXPR||LA172_1==MATCH_RECOGNIZE||LA172_1==FOR||LA172_1==LBRACK||(LA172_1>=IDENT && LA172_1<=RPAREN)||(LA172_1>=COMMA && LA172_1<=EQUALS)) ) {
                    alt172=1;
                }
                else if ( (LA172_1==COLON) ) {
                    alt172=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 172, 1, input);
                    throw nvae;
                }
                }
                break;
            case EVENTS:
            case TICKED_STRING_LITERAL:
                {
                alt172=1;
                }
                break;
            case PATTERN:
                {
                alt172=2;
                }
                break;
            case SQL:
                {
                alt172=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);
                throw nvae;
            }
            switch (alt172) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression6629);
                    eventFilterExpression454=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression454.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression6633);
                    patternInclusionExpression455=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression455.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression6637);
                    databaseJoinExpression456=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression456.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression6641);
                    methodJoinExpression457=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression457.getTree());
                    }
                    break;
            }
            int alt174=2;
            int LA174_0 = input.LA(1);
            if ( (LA174_0==DOT) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    {
                    DOT458=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression6648); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT458);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression6650);
                    viewExpression459=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression459.getTree());
                    loop173:
                    do {
                        int alt173=2;
                        int LA173_0 = input.LA(1);
                        if ( (LA173_0==DOT) ) {
                            alt173=1;
                        }
                        switch (alt173) {
                    	case 1 :
                    	    {
                    	    DOT460=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression6653); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT460);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression6655);
                    	    viewExpression461=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression461.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop173;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt175=3;
            int LA175_0 = input.LA(1);
            if ( (LA175_0==AS) ) {
                alt175=1;
            }
            else if ( (LA175_0==IDENT) ) {
                alt175=2;
            }
            switch (alt175) {
                case 1 :
                    {
                    AS462=(Token)match(input,AS,FOLLOW_AS_in_streamExpression6662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS462);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression6666); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression6672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt176=2;
            int LA176_0 = input.LA(1);
            if ( (LA176_0==UNIDIRECTIONAL) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression6679); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt177=3;
            int LA177_0 = input.LA(1);
            if ( (LA177_0==RETAINUNION) ) {
                alt177=1;
            }
            else if ( (LA177_0==RETAININTERSECTION) ) {
                alt177=2;
            }
            switch (alt177) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression6686); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression6690); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR463=null;
        Token LPAREN464=null;
        Token RPAREN466=null;
        EsperEPL2GrammarParser.expressionList_return expressionList465 = null;
        CommonTree i_tree=null;
        CommonTree FOR463_tree=null;
        CommonTree LPAREN464_tree=null;
        CommonTree RPAREN466_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR463=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr6746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR463);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr6750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt179=2;
            int LA179_0 = input.LA(1);
            if ( (LA179_0==LPAREN) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    {
                    LPAREN464=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr6753); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN464);
                    int alt178=2;
                    int LA178_0 = input.LA(1);
                    if ( (LA178_0==WINDOW||LA178_0==BETWEEN||LA178_0==ESCAPE||(LA178_0>=NOT_EXPR && LA178_0<=EVERY_EXPR)||LA178_0==WHERE||(LA178_0>=SUM && LA178_0<=COUNT)||LA178_0==CASE||LA178_0==OUTER||(LA178_0>=JOIN && LA178_0<=FULL)||(LA178_0>=EVENTS && LA178_0<=LAST)||LA178_0==ISTREAM||(LA178_0>=UNIDIRECTIONAL && LA178_0<=CURRENT_TIMESTAMP)||(LA178_0>=SNAPSHOT && LA178_0<=INDEX)||(LA178_0>=BOOLEAN_TRUE && LA178_0<=VALUE_NULL)||(LA178_0>=DEFINE && LA178_0<=MATCHED)||LA178_0==NEWKW||LA178_0==CONTEXT||LA178_0==NUM_DOUBLE||(LA178_0>=IDENT && LA178_0<=LPAREN)||LA178_0==LCURLY||LA178_0==QUESTION||(LA178_0>=PLUS && LA178_0<=QUOTED_STRING_LITERAL)||LA178_0==MINUS||LA178_0==NUM_INT||(LA178_0>=TICKED_STRING_LITERAL && LA178_0<=NUM_FLOAT)) ) {
                        alt178=1;
                    }
                    switch (alt178) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr6755);
                            expressionList465=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList465.getTree());
                            }
                            break;
                    }
                    RPAREN466=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr6758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN466);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE467=null;
        Token LPAREN468=null;
        Token RPAREN476=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy469 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures470 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection471 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip472 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern473 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval474 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine475 = null;
        CommonTree MATCH_RECOGNIZE467_tree=null;
        CommonTree LPAREN468_tree=null;
        CommonTree RPAREN476_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE467=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog6794); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE467);
            LPAREN468=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog6808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN468);
            int alt180=2;
            int LA180_0 = input.LA(1);
            if ( (LA180_0==PARTITION) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog6814);
                    matchRecogPartitionBy469=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy469.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog6821);
            matchRecogMeasures470=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures470.getTree());
            int alt181=2;
            int LA181_0 = input.LA(1);
            if ( (LA181_0==ALL) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog6826);
                    matchRecogMatchesSelection471=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection471.getTree());
                    }
                    break;
            }
            int alt182=2;
            int LA182_0 = input.LA(1);
            if ( (LA182_0==AFTER) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog6832);
                    matchRecogMatchesAfterSkip472=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip472.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog6838);
            matchRecogPattern473=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern473.getTree());
            int alt183=2;
            int LA183_0 = input.LA(1);
            if ( (LA183_0==IDENT) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog6844);
                    matchRecogMatchesInterval474=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval474.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog6850);
            matchRecogDefine475=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine475.getTree());
            RPAREN476=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog6857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN476);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION477=null;
        Token BY478=null;
        Token COMMA480=null;
        EsperEPL2GrammarParser.expression_return expression479 = null;
        EsperEPL2GrammarParser.expression_return expression481 = null;
        CommonTree PARTITION477_tree=null;
        CommonTree BY478_tree=null;
        CommonTree COMMA480_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION477=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy6894); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION477);
            BY478=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy6896); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY478);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy6898);
            expression479=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression479.getTree());
            loop184:
            do {
                int alt184=2;
                int LA184_0 = input.LA(1);
                if ( (LA184_0==COMMA) ) {
                    alt184=1;
                }
                switch (alt184) {
            	case 1 :
            	    {
            	    COMMA480=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy6901); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA480);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy6903);
            	    expression481=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression481.getTree());
            	    }
            	    break;
            	default :
            	    break loop184;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES482=null;
        Token COMMA484=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem483 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem485 = null;
        CommonTree MEASURES482_tree=null;
        CommonTree COMMA484_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES482=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures6932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES482);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures6934);
            matchRecogMeasureItem483=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem483.getTree());
            loop185:
            do {
                int alt185=2;
                int LA185_0 = input.LA(1);
                if ( (LA185_0==COMMA) ) {
                    alt185=1;
                }
                switch (alt185) {
            	case 1 :
            	    {
            	    COMMA484=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures6937); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA484);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures6939);
            	    matchRecogMeasureItem485=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem485.getTree());
            	    }
            	    break;
            	default :
            	    break loop185;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS487=null;
        EsperEPL2GrammarParser.expression_return expression486 = null;
        CommonTree i_tree=null;
        CommonTree AS487_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem6964);
            expression486=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression486.getTree());
            int alt187=2;
            int LA187_0 = input.LA(1);
            if ( (LA187_0==AS) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    {
                    AS487=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem6967); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS487);
                    int alt186=2;
                    int LA186_0 = input.LA(1);
                    if ( (LA186_0==IDENT) ) {
                        alt186=1;
                    }
                    switch (alt186) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem6972); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL488=null;
        Token MATCHES489=null;
        CommonTree ALL488_tree=null;
        CommonTree MATCHES489_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL488=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection7003); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL488_tree = (CommonTree)adaptor.create(ALL488);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL488_tree, root_0);
            }
            MATCHES489=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection7006); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN490=null;
        Token LPAREN491=null;
        Token RPAREN493=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration492 = null;
        CommonTree PATTERN490_tree=null;
        CommonTree LPAREN491_tree=null;
        CommonTree RPAREN493_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN490=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern7021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN490);
            LPAREN491=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern7023); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN491);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern7025);
            matchRecogPatternAlteration492=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration492.getTree());
            RPAREN493=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern7027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN493);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER494=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER494_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER494=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip7049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER494);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip7053);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip7057);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip7061);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip7065);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip7069);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod495 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval7105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval7107);
            timePeriod495=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod495.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat496 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat497 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration7133);
            matchRecogPatternConcat496=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat496.getTree());
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);
                if ( (LA188_0==BOR) ) {
                    alt188=1;
                }
                switch (alt188) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration7138); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration7140);
            	    matchRecogPatternConcat497=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat497.getTree());
            	    }
            	    break;
            	default :
            	    break loop188;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary498 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt189=0;
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);
                if ( ((LA189_0>=IDENT && LA189_0<=LPAREN)) ) {
                    alt189=1;
                }
                switch (alt189) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat7173);
            	    matchRecogPatternUnary498=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary498.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt189 >= 1 ) break loop189;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(189, input);
                        throw eee;
                }
                cnt189++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested499 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom500 = null;
        try {
            int alt190=2;
            int LA190_0 = input.LA(1);
            if ( (LA190_0==LPAREN) ) {
                alt190=1;
            }
            else if ( (LA190_0==IDENT) ) {
                alt190=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);
                throw nvae;
            }
            switch (alt190) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary7198);
                    matchRecogPatternNested499=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested499.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary7204);
                    matchRecogPatternAtom500=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom500.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN501=null;
        Token RPAREN503=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration502 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN501_tree=null;
        CommonTree RPAREN503_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN501=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested7216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN501);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested7218);
            matchRecogPatternAlteration502=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration502.getTree());
            RPAREN503=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested7220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN503);
            int alt191=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt191=1;
                    }
                    break;
                case PLUS:
                    {
                    alt191=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt191=3;
                    }
                    break;
            }
            switch (alt191) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested7225); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested7231); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested7237); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom7276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt194=2;
            int LA194_0 = input.LA(1);
            if ( (LA194_0==STAR||LA194_0==QUESTION||LA194_0==PLUS) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    {
                    int alt192=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt192=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt192=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt192=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 192, 0, input);
                        throw nvae;
                    }
                    switch (alt192) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom7282); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom7288); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom7294); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt193=2;
                    int LA193_0 = input.LA(1);
                    if ( (LA193_0==QUESTION) ) {
                        alt193=1;
                    }
                    switch (alt193) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom7300); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE504=null;
        Token COMMA506=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem505 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem507 = null;
        CommonTree DEFINE504_tree=null;
        CommonTree COMMA506_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE504=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine7344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE504);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine7346);
            matchRecogDefineItem505=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem505.getTree());
            loop195:
            do {
                int alt195=2;
                int LA195_0 = input.LA(1);
                if ( (LA195_0==COMMA) ) {
                    alt195=1;
                }
                switch (alt195) {
            	case 1 :
            	    {
            	    COMMA506=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine7349); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA506);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine7351);
            	    matchRecogDefineItem507=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem507.getTree());
            	    }
            	    break;
            	default :
            	    break loop195;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS508=null;
        EsperEPL2GrammarParser.expression_return expression509 = null;
        CommonTree i_tree=null;
        CommonTree AS508_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem7378); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS508=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem7380); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS508);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem7382);
            expression509=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression509.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN510=null;
        Token LBRACK511=null;
        Token RBRACK513=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression512 = null;
        CommonTree PATTERN510_tree=null;
        CommonTree LBRACK511_tree=null;
        CommonTree RBRACK513_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN510=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression7407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN510);
            LBRACK511=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression7409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK511);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression7411);
            patternExpression512=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression512.getTree());
            RBRACK513=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression7413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK513);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL514=null;
        Token COLON515=null;
        Token LBRACK516=null;
        Token METADATASQL517=null;
        Token RBRACK518=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL514_tree=null;
        CommonTree COLON515_tree=null;
        CommonTree LBRACK516_tree=null;
        CommonTree METADATASQL517_tree=null;
        CommonTree RBRACK518_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL514=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression7446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL514);
            COLON515=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression7448); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON515);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression7452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK516=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression7454); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK516);
            int alt196=2;
            int LA196_0 = input.LA(1);
            if ( (LA196_0==STRING_LITERAL) ) {
                alt196=1;
            }
            else if ( (LA196_0==QUOTED_STRING_LITERAL) ) {
                alt196=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);
                throw nvae;
            }
            switch (alt196) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression7459); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression7465); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt198=2;
            int LA198_0 = input.LA(1);
            if ( (LA198_0==METADATASQL) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    {
                    METADATASQL517=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression7469); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL517);
                    int alt197=2;
                    int LA197_0 = input.LA(1);
                    if ( (LA197_0==STRING_LITERAL) ) {
                        alt197=1;
                    }
                    else if ( (LA197_0==QUOTED_STRING_LITERAL) ) {
                        alt197=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 197, 0, input);
                        throw nvae;
                    }
                    switch (alt197) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression7474); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression7480); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK518=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression7485); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK518);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON519=null;
        Token LPAREN521=null;
        Token RPAREN523=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier520 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList522 = null;
        CommonTree i_tree=null;
        CommonTree COLON519_tree=null;
        CommonTree LPAREN521_tree=null;
        CommonTree RPAREN523_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression7536); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON519=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression7538); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON519);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression7540);
            classIdentifier520=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier520.getTree());
            int alt200=2;
            int LA200_0 = input.LA(1);
            if ( (LA200_0==LPAREN) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    {
                    LPAREN521=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression7543); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN521);
                    int alt199=2;
                    int LA199_0 = input.LA(1);
                    if ( (LA199_0==WINDOW||LA199_0==BETWEEN||LA199_0==ESCAPE||(LA199_0>=NOT_EXPR && LA199_0<=EVERY_EXPR)||LA199_0==WHERE||(LA199_0>=SUM && LA199_0<=COUNT)||LA199_0==CASE||LA199_0==OUTER||(LA199_0>=JOIN && LA199_0<=FULL)||(LA199_0>=EVENTS && LA199_0<=LAST)||LA199_0==ISTREAM||(LA199_0>=UNIDIRECTIONAL && LA199_0<=CURRENT_TIMESTAMP)||(LA199_0>=SNAPSHOT && LA199_0<=INDEX)||(LA199_0>=BOOLEAN_TRUE && LA199_0<=VALUE_NULL)||(LA199_0>=DEFINE && LA199_0<=MATCHED)||LA199_0==NEWKW||LA199_0==CONTEXT||LA199_0==NUM_DOUBLE||(LA199_0>=IDENT && LA199_0<=LPAREN)||LA199_0==LCURLY||LA199_0==QUESTION||(LA199_0>=PLUS && LA199_0<=QUOTED_STRING_LITERAL)||LA199_0==MINUS||LA199_0==NUM_INT||(LA199_0>=TICKED_STRING_LITERAL && LA199_0<=NUM_FLOAT)) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression7545);
                            expressionList522=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList522.getTree());
                            }
                            break;
                    }
                    RPAREN523=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression7548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN523);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON524=null;
        Token LPAREN525=null;
        Token RPAREN527=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList526 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON524_tree=null;
        CommonTree LPAREN525_tree=null;
        CommonTree RPAREN527_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression7601); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON524=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression7603); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON524);
            int alt201=2;
            int LA201_0 = input.LA(1);
            if ( (LA201_0==IDENT) ) {
                alt201=1;
            }
            else if ( (LA201_0==MERGE) ) {
                alt201=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);
                throw nvae;
            }
            switch (alt201) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression7608); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression7612); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN525=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression7615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN525);
            int alt202=2;
            int LA202_0 = input.LA(1);
            if ( (LA202_0==WINDOW||LA202_0==BETWEEN||LA202_0==ESCAPE||(LA202_0>=NOT_EXPR && LA202_0<=EVERY_EXPR)||LA202_0==WHERE||(LA202_0>=SUM && LA202_0<=COUNT)||LA202_0==CASE||LA202_0==OUTER||(LA202_0>=JOIN && LA202_0<=FULL)||(LA202_0>=EVENTS && LA202_0<=LAST)||LA202_0==ISTREAM||(LA202_0>=UNIDIRECTIONAL && LA202_0<=CURRENT_TIMESTAMP)||(LA202_0>=SNAPSHOT && LA202_0<=INDEX)||(LA202_0>=BOOLEAN_TRUE && LA202_0<=VALUE_NULL)||(LA202_0>=DEFINE && LA202_0<=MATCHED)||LA202_0==NEWKW||LA202_0==CONTEXT||LA202_0==NUM_DOUBLE||LA202_0==LBRACK||(LA202_0>=IDENT && LA202_0<=LPAREN)||LA202_0==LCURLY||LA202_0==STAR||LA202_0==QUESTION||(LA202_0>=PLUS && LA202_0<=QUOTED_STRING_LITERAL)||LA202_0==MINUS||LA202_0==NUM_INT||(LA202_0>=TICKED_STRING_LITERAL && LA202_0<=NUM_FLOAT)) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression7617);
                    expressionWithTimeList526=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList526.getTree());
                    }
                    break;
            }
            RPAREN527=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression7620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN527);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA529=null;
        EsperEPL2GrammarParser.expression_return expression528 = null;
        EsperEPL2GrammarParser.expression_return expression530 = null;
        CommonTree COMMA529_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr7680);
            expression528=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression528.getTree());
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);
                if ( (LA203_0==COMMA) ) {
                    alt203=1;
                }
                switch (alt203) {
            	case 1 :
            	    {
            	    COMMA529=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr7683); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA529);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr7685);
            	    expression530=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression530.getTree());
            	    }
            	    break;
            	default :
            	    break loop203;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA532=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement531 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement533 = null;
        CommonTree COMMA532_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr7720);
            orderByListElement531=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement531.getTree());
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);
                if ( (LA204_0==COMMA) ) {
                    alt204=1;
                }
                switch (alt204) {
            	case 1 :
            	    {
            	    COMMA532=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr7723); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA532);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr7725);
            	    orderByListElement533=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement533.getTree());
            	    }
            	    break;
            	default :
            	    break loop204;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression534 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement7750);
            expression534=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression534.getTree());
            int alt205=3;
            int LA205_0 = input.LA(1);
            if ( (LA205_0==ASC) ) {
                alt205=1;
            }
            else if ( (LA205_0==DESC) ) {
                alt205=2;
            }
            switch (alt205) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement7755); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement7759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression535 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause7797);
            evalOrExpression535=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression535.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token t=null;
        Token THEN541=null;
        Token TERMINATED543=null;
        Token AND_EXPR544=null;
        Token THEN546=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter536 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod537 = null;
        EsperEPL2GrammarParser.number_return number538 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet539 = null;
        EsperEPL2GrammarParser.expression_return expression540 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr542 = null;
        EsperEPL2GrammarParser.expression_return expression545 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr547 = null;
        EsperEPL2GrammarParser.outputLimitAndTerm_return outputLimitAndTerm548 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree t_tree=null;
        CommonTree THEN541_tree=null;
        CommonTree TERMINATED543_tree=null;
        CommonTree AND_EXPR544_tree=null;
        CommonTree THEN546_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_outputLimitAndTerm=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAndTerm");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt206=2;
            int LA206_0 = input.LA(1);
            if ( (LA206_0==AFTER) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit7835);
                    outputLimitAfter536=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter536.getTree());
                    }
                    break;
            }
            int alt207=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt207=1;
                    }
                    break;
                case FIRST:
                    {
                    alt207=2;
                    }
                    break;
                case LAST:
                    {
                    alt207=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt207=4;
                    }
                    break;
            }
            switch (alt207) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit7850); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit7854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit7858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit7862); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt213=5;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt213=1;
                }
                break;
            case AT:
                {
                alt213=2;
                }
                break;
            case WHEN:
                {
                int LA213_3 = input.LA(2);
                if ( (LA213_3==TERMINATED) ) {
                    alt213=4;
                }
                else if ( (LA213_3==WINDOW||LA213_3==BETWEEN||LA213_3==ESCAPE||(LA213_3>=NOT_EXPR && LA213_3<=EVERY_EXPR)||LA213_3==WHERE||(LA213_3>=SUM && LA213_3<=COUNT)||LA213_3==CASE||LA213_3==OUTER||(LA213_3>=JOIN && LA213_3<=FULL)||(LA213_3>=EVENTS && LA213_3<=LAST)||LA213_3==ISTREAM||(LA213_3>=UNIDIRECTIONAL && LA213_3<=CURRENT_TIMESTAMP)||(LA213_3>=SNAPSHOT && LA213_3<=INDEX)||(LA213_3>=BOOLEAN_TRUE && LA213_3<=VALUE_NULL)||(LA213_3>=DEFINE && LA213_3<=MATCHED)||LA213_3==NEWKW||LA213_3==CONTEXT||LA213_3==NUM_DOUBLE||(LA213_3>=IDENT && LA213_3<=LPAREN)||LA213_3==LCURLY||LA213_3==QUESTION||(LA213_3>=PLUS && LA213_3<=QUOTED_STRING_LITERAL)||LA213_3==MINUS||LA213_3==NUM_INT||(LA213_3>=TICKED_STRING_LITERAL && LA213_3<=NUM_FLOAT)) ) {
                    alt213=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 213, 3, input);
                    throw nvae;
                }
                }
                break;
            case EOF:
            case AND_EXPR:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
            case RPAREN:
                {
                alt213=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);
                throw nvae;
            }
            switch (alt213) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit7893); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt209=2;
                    int LA209_0 = input.LA(1);
                    if ( (LA209_0==MINUS) && (synpred2_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_0==PLUS) && (synpred2_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else if ( (LA209_0==NUM_INT) ) {
                        int LA209_3 = input.LA(2);
                        if ( (LA209_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==EVENTS) ) {
                            alt209=2;
                        }
                        else if ( (LA209_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_3==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA209_0==NUM_LONG) ) {
                        int LA209_4 = input.LA(2);
                        if ( (LA209_4==EVENTS) ) {
                            alt209=2;
                        }
                        else if ( (LA209_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA209_0==NUM_FLOAT) ) {
                        int LA209_5 = input.LA(2);
                        if ( (LA209_5==EVENTS) ) {
                            alt209=2;
                        }
                        else if ( (LA209_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_5==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA209_0==NUM_DOUBLE) ) {
                        int LA209_6 = input.LA(2);
                        if ( (LA209_6==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==EVENTS) ) {
                            alt209=2;
                        }
                        else if ( (LA209_6==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_6==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 6, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA209_0==IDENT) ) {
                        int LA209_7 = input.LA(2);
                        if ( (LA209_7==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==EVENTS) ) {
                            alt209=2;
                        }
                        else if ( (LA209_7==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else if ( (LA209_7==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt209=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 7, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA209_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt209=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 209, 0, input);
                        throw nvae;
                    }
                    switch (alt209) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit7919);
                            timePeriod537=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod537.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt208=2;
                            int LA208_0 = input.LA(1);
                            if ( (LA208_0==NUM_DOUBLE||LA208_0==NUM_INT||(LA208_0>=NUM_LONG && LA208_0<=NUM_FLOAT)) ) {
                                alt208=1;
                            }
                            else if ( (LA208_0==IDENT) ) {
                                alt208=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 208, 0, input);
                                throw nvae;
                            }
                            switch (alt208) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit7930);
                                    number538=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number538.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit7936); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit7942); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit7973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit7975);
                    crontabLimitParameterSet539=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet539.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit7992); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit7994);
                    expression540=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression540.getTree());
                    int alt210=2;
                    int LA210_0 = input.LA(1);
                    if ( (LA210_0==THEN) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            {
                            THEN541=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit7997); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN541);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit7999);
                            onSetExpr542=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr542.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    t=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit8019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(t);
                    TERMINATED543=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimit8021); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED543);
                    int alt211=2;
                    int LA211_0 = input.LA(1);
                    if ( (LA211_0==AND_EXPR) ) {
                        int LA211_1 = input.LA(2);
                        if ( (LA211_1==WINDOW||LA211_1==BETWEEN||LA211_1==ESCAPE||(LA211_1>=NOT_EXPR && LA211_1<=EVERY_EXPR)||LA211_1==WHERE||(LA211_1>=SUM && LA211_1<=COUNT)||LA211_1==CASE||LA211_1==OUTER||(LA211_1>=JOIN && LA211_1<=FULL)||(LA211_1>=EVENTS && LA211_1<=LAST)||LA211_1==ISTREAM||(LA211_1>=UNIDIRECTIONAL && LA211_1<=CURRENT_TIMESTAMP)||(LA211_1>=SNAPSHOT && LA211_1<=INDEX)||(LA211_1>=BOOLEAN_TRUE && LA211_1<=VALUE_NULL)||(LA211_1>=DEFINE && LA211_1<=MATCHED)||LA211_1==NEWKW||LA211_1==CONTEXT||LA211_1==NUM_DOUBLE||(LA211_1>=IDENT && LA211_1<=LPAREN)||LA211_1==LCURLY||LA211_1==QUESTION||(LA211_1>=PLUS && LA211_1<=QUOTED_STRING_LITERAL)||LA211_1==MINUS||LA211_1==NUM_INT||(LA211_1>=TICKED_STRING_LITERAL && LA211_1<=NUM_FLOAT)) ) {
                            alt211=1;
                        }
                    }
                    switch (alt211) {
                        case 1 :
                            {
                            AND_EXPR544=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimit8024); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR544);
                            pushFollow(FOLLOW_expression_in_outputLimit8026);
                            expression545=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression545.getTree());
                            }
                            break;
                    }
                    int alt212=2;
                    int LA212_0 = input.LA(1);
                    if ( (LA212_0==THEN) ) {
                        alt212=1;
                    }
                    switch (alt212) {
                        case 1 :
                            {
                            THEN546=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit8031); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN546);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit8033);
                            onSetExpr547=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr547.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    }
                    break;
            }
            int alt214=2;
            int LA214_0 = input.LA(1);
            if ( (LA214_0==AND_EXPR) ) {
                alt214=1;
            }
            switch (alt214) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAndTerm_in_outputLimit8066);
                    outputLimitAndTerm548=outputLimitAndTerm();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAndTerm.add(outputLimitAndTerm548.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (t != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TERM_LIMIT_EXPR, "TERM_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_TERMINATED.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAndTerm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAndTerm_return outputLimitAndTerm() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAndTerm_return retval = new EsperEPL2GrammarParser.outputLimitAndTerm_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR549=null;
        Token WHEN550=null;
        Token TERMINATED551=null;
        Token AND_EXPR552=null;
        Token THEN554=null;
        EsperEPL2GrammarParser.expression_return expression553 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr555 = null;
        CommonTree AND_EXPR549_tree=null;
        CommonTree WHEN550_tree=null;
        CommonTree TERMINATED551_tree=null;
        CommonTree AND_EXPR552_tree=null;
        CommonTree THEN554_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        try {
            {
            AND_EXPR549=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimitAndTerm8240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR549);
            WHEN550=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimitAndTerm8242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN550);
            TERMINATED551=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimitAndTerm8244); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED551);
            int alt215=2;
            int LA215_0 = input.LA(1);
            if ( (LA215_0==AND_EXPR) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    {
                    AND_EXPR552=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimitAndTerm8247); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR552);
                    pushFollow(FOLLOW_expression_in_outputLimitAndTerm8249);
                    expression553=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression553.getTree());
                    }
                    break;
            }
            int alt216=2;
            int LA216_0 = input.LA(1);
            if ( (LA216_0==THEN) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    {
                    THEN554=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimitAndTerm8254); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THEN.add(THEN554);
                    pushFollow(FOLLOW_onSetExpr_in_outputLimitAndTerm8256);
                    onSetExpr555=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr555.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_TERMINATED.nextNode(), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS558=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod556 = null;
        EsperEPL2GrammarParser.number_return number557 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS558_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter8286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt217=2;
            switch ( input.LA(1) ) {
            case IDENT:
            case QUESTION:
            case PLUS:
            case MINUS:
                {
                alt217=1;
                }
                break;
            case NUM_INT:
                {
                int LA217_3 = input.LA(2);
                if ( (LA217_3==MIN||(LA217_3>=TIMEPERIOD_YEAR && LA217_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt217=1;
                }
                else if ( (LA217_3==EVENTS) ) {
                    alt217=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 217, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA217_4 = input.LA(2);
                if ( (LA217_4==MIN||(LA217_4>=TIMEPERIOD_YEAR && LA217_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt217=1;
                }
                else if ( (LA217_4==EVENTS) ) {
                    alt217=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 217, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA217_5 = input.LA(2);
                if ( (LA217_5==EVENTS) ) {
                    alt217=2;
                }
                else if ( (LA217_5==MIN||(LA217_5>=TIMEPERIOD_YEAR && LA217_5<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt217=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 217, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA217_6 = input.LA(2);
                if ( (LA217_6==EVENTS) ) {
                    alt217=2;
                }
                else if ( (LA217_6==MIN||(LA217_6>=TIMEPERIOD_YEAR && LA217_6<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt217=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 217, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);
                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter8289);
                    timePeriod556=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod556.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter8293);
                    number557=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number557.getTree());
                    EVENTS558=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter8295); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS558);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt218=2;
            int LA218_0 = input.LA(1);
            if ( (LA218_0==NUM_DOUBLE||LA218_0==PLUS||LA218_0==MINUS||LA218_0==NUM_INT||(LA218_0>=NUM_LONG && LA218_0<=NUM_FLOAT)) ) {
                alt218=1;
            }
            else if ( (LA218_0==IDENT) ) {
                alt218=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);
                throw nvae;
            }
            switch (alt218) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit8341);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit8347); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt221=2;
            int LA221_0 = input.LA(1);
            if ( (LA221_0==OFFSET||LA221_0==COMMA) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    {
                    int alt219=2;
                    int LA219_0 = input.LA(1);
                    if ( (LA219_0==COMMA) ) {
                        alt219=1;
                    }
                    else if ( (LA219_0==OFFSET) ) {
                        alt219=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 219, 0, input);
                        throw nvae;
                    }
                    switch (alt219) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit8354); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit8360); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt220=2;
                    int LA220_0 = input.LA(1);
                    if ( (LA220_0==NUM_DOUBLE||LA220_0==PLUS||LA220_0==MINUS||LA220_0==NUM_INT||(LA220_0>=NUM_LONG && LA220_0<=NUM_FLOAT)) ) {
                        alt220=1;
                    }
                    else if ( (LA220_0==IDENT) ) {
                        alt220=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 220, 0, input);
                        throw nvae;
                    }
                    switch (alt220) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit8366);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit8372); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN559=null;
        Token RPAREN561=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList560 = null;
        CommonTree LPAREN559_tree=null;
        CommonTree RPAREN561_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            LPAREN559=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet8424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN559);
            pushFollow(FOLLOW_expressionWithTimeList_in_crontabLimitParameterSet8426);
            expressionWithTimeList560=expressionWithTimeList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList560.getTree());
            RPAREN561=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet8428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN561);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN562=null;
        Token THEN564=null;
        EsperEPL2GrammarParser.expression_return expression563 = null;
        EsperEPL2GrammarParser.expression_return expression565 = null;
        CommonTree WHEN562_tree=null;
        CommonTree THEN564_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN562=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause8457); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause8460);
            expression563=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression563.getTree());
            THEN564=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause8462); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause8465);
            expression565=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression565.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE566=null;
        EsperEPL2GrammarParser.expression_return expression567 = null;
        CommonTree ELSE566_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE566=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause8478); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause8481);
            expression567=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression567.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression568 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression8494);
            caseExpression568=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression568.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE569=null;
        Token END572=null;
        Token CASE573=null;
        Token END577=null;
        EsperEPL2GrammarParser.whenClause_return whenClause570 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause571 = null;
        EsperEPL2GrammarParser.expression_return expression574 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause575 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause576 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression578 = null;
        CommonTree CASE569_tree=null;
        CommonTree END572_tree=null;
        CommonTree CASE573_tree=null;
        CommonTree END577_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt226=3;
            int LA226_0 = input.LA(1);
            if ( (LA226_0==CASE) ) {
                int LA226_1 = input.LA(2);
                if ( (LA226_1==WINDOW||LA226_1==BETWEEN||LA226_1==ESCAPE||(LA226_1>=NOT_EXPR && LA226_1<=EVERY_EXPR)||LA226_1==WHERE||(LA226_1>=SUM && LA226_1<=COUNT)||LA226_1==CASE||LA226_1==OUTER||(LA226_1>=JOIN && LA226_1<=FULL)||(LA226_1>=EVENTS && LA226_1<=LAST)||LA226_1==ISTREAM||(LA226_1>=UNIDIRECTIONAL && LA226_1<=CURRENT_TIMESTAMP)||(LA226_1>=SNAPSHOT && LA226_1<=INDEX)||(LA226_1>=BOOLEAN_TRUE && LA226_1<=VALUE_NULL)||(LA226_1>=DEFINE && LA226_1<=MATCHED)||LA226_1==NEWKW||LA226_1==CONTEXT||LA226_1==NUM_DOUBLE||(LA226_1>=IDENT && LA226_1<=LPAREN)||LA226_1==LCURLY||LA226_1==QUESTION||(LA226_1>=PLUS && LA226_1<=QUOTED_STRING_LITERAL)||LA226_1==MINUS||LA226_1==NUM_INT||(LA226_1>=TICKED_STRING_LITERAL && LA226_1<=NUM_FLOAT)) ) {
                    alt226=2;
                }
                else if ( (LA226_1==WHEN) ) {
                    alt226=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 226, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA226_0==WINDOW||LA226_0==BETWEEN||LA226_0==ESCAPE||(LA226_0>=NOT_EXPR && LA226_0<=EVERY_EXPR)||LA226_0==WHERE||(LA226_0>=SUM && LA226_0<=COUNT)||LA226_0==OUTER||(LA226_0>=JOIN && LA226_0<=FULL)||(LA226_0>=EVENTS && LA226_0<=LAST)||LA226_0==ISTREAM||(LA226_0>=UNIDIRECTIONAL && LA226_0<=CURRENT_TIMESTAMP)||(LA226_0>=SNAPSHOT && LA226_0<=INDEX)||(LA226_0>=BOOLEAN_TRUE && LA226_0<=VALUE_NULL)||(LA226_0>=DEFINE && LA226_0<=MATCHED)||LA226_0==NEWKW||LA226_0==CONTEXT||LA226_0==NUM_DOUBLE||(LA226_0>=IDENT && LA226_0<=LPAREN)||LA226_0==LCURLY||LA226_0==QUESTION||(LA226_0>=PLUS && LA226_0<=QUOTED_STRING_LITERAL)||LA226_0==MINUS||LA226_0==NUM_INT||(LA226_0>=TICKED_STRING_LITERAL && LA226_0<=NUM_FLOAT)) ) {
                alt226=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);
                throw nvae;
            }
            switch (alt226) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE569=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression8508); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE569_tree = (CommonTree)adaptor.create(CASE569);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE569_tree, root_0);
                    }
                    int cnt222=0;
                    loop222:
                    do {
                        int alt222=2;
                        int LA222_0 = input.LA(1);
                        if ( (LA222_0==WHEN) ) {
                            alt222=1;
                        }
                        switch (alt222) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression8511);
                    	    whenClause570=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause570.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt222 >= 1 ) break loop222;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(222, input);
                                throw eee;
                        }
                        cnt222++;
                    } while (true);
                    int alt223=2;
                    int LA223_0 = input.LA(1);
                    if ( (LA223_0==ELSE) ) {
                        alt223=1;
                    }
                    switch (alt223) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression8514);
                            elseClause571=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause571.getTree());
                            }
                            break;
                    }
                    END572=(Token)match(input,END,FOLLOW_END_in_caseExpression8517); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE573=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression8528); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE573);
                    pushFollow(FOLLOW_expression_in_caseExpression8530);
                    expression574=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression574.getTree());
                    int cnt224=0;
                    loop224:
                    do {
                        int alt224=2;
                        int LA224_0 = input.LA(1);
                        if ( (LA224_0==WHEN) ) {
                            alt224=1;
                        }
                        switch (alt224) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression8532);
                    	    whenClause575=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause575.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt224 >= 1 ) break loop224;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(224, input);
                                throw eee;
                        }
                        cnt224++;
                    } while (true);
                    int alt225=2;
                    int LA225_0 = input.LA(1);
                    if ( (LA225_0==ELSE) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression8535);
                            elseClause576=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause576.getTree());
                            }
                            break;
                    }
                    END577=(Token)match(input,END,FOLLOW_END_in_caseExpression8538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END577);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression8562);
                    evalOrExpression578=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression578.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression579 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression580 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression8573);
            evalAndExpression579=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression579.getTree());
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);
                if ( (LA227_0==OR_EXPR) ) {
                    alt227=1;
                }
                switch (alt227) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression8578); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression8580);
            	    evalAndExpression580=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression580.getTree());
            	    }
            	    break;
            	default :
            	    break loop227;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression581 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression582 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression8612);
            bitWiseExpression581=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression581.getTree());
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);
                if ( (LA228_0==AND_EXPR) ) {
                    int LA228_16 = input.LA(2);
                    if ( (LA228_16==WINDOW||LA228_16==BETWEEN||LA228_16==ESCAPE||(LA228_16>=NOT_EXPR && LA228_16<=EVERY_EXPR)||LA228_16==WHERE||(LA228_16>=SUM && LA228_16<=COUNT)||LA228_16==OUTER||(LA228_16>=JOIN && LA228_16<=FULL)||(LA228_16>=EVENTS && LA228_16<=LAST)||LA228_16==ISTREAM||(LA228_16>=UNIDIRECTIONAL && LA228_16<=CURRENT_TIMESTAMP)||(LA228_16>=SNAPSHOT && LA228_16<=INDEX)||(LA228_16>=BOOLEAN_TRUE && LA228_16<=VALUE_NULL)||(LA228_16>=DEFINE && LA228_16<=MATCHED)||LA228_16==NEWKW||LA228_16==CONTEXT||LA228_16==NUM_DOUBLE||(LA228_16>=IDENT && LA228_16<=LPAREN)||LA228_16==LCURLY||LA228_16==QUESTION||(LA228_16>=PLUS && LA228_16<=QUOTED_STRING_LITERAL)||LA228_16==MINUS||LA228_16==NUM_INT||(LA228_16>=TICKED_STRING_LITERAL && LA228_16<=NUM_FLOAT)) ) {
                        alt228=1;
                    }
                }
                switch (alt228) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression8617); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression8619);
            	    bitWiseExpression582=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression582.getTree());
            	    }
            	    break;
            	default :
            	    break loop228;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND584=null;
        Token BOR585=null;
        Token BXOR586=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression583 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression587 = null;
        CommonTree BAND584_tree=null;
        CommonTree BOR585_tree=null;
        CommonTree BXOR586_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression8651);
            negatedExpression583=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression583.getTree());
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);
                if ( (LA230_0==BOR||(LA230_0>=BAND && LA230_0<=BXOR)) ) {
                    alt230=1;
                }
                switch (alt230) {
            	case 1 :
            	    {
            	    int alt229=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt229=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt229=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt229=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 229, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt229) {
            	        case 1 :
            	            {
            	            BAND584=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression8656); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND584_tree = (CommonTree)adaptor.create(BAND584);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND584_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR585=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression8659); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR585_tree = (CommonTree)adaptor.create(BOR585);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR585_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR586=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression8662); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR586_tree = (CommonTree)adaptor.create(BXOR586);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR586_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression8666);
            	    negatedExpression587=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression587.getTree());
            	    }
            	    break;
            	default :
            	    break loop230;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR589=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression588 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression590 = null;
        CommonTree NOT_EXPR589_tree=null;
        try {
            int alt231=2;
            int LA231_0 = input.LA(1);
            if ( (LA231_0==WINDOW||LA231_0==BETWEEN||LA231_0==ESCAPE||LA231_0==EVERY_EXPR||LA231_0==WHERE||(LA231_0>=SUM && LA231_0<=COUNT)||LA231_0==OUTER||(LA231_0>=JOIN && LA231_0<=FULL)||(LA231_0>=EVENTS && LA231_0<=LAST)||LA231_0==ISTREAM||(LA231_0>=UNIDIRECTIONAL && LA231_0<=CURRENT_TIMESTAMP)||(LA231_0>=SNAPSHOT && LA231_0<=INDEX)||(LA231_0>=BOOLEAN_TRUE && LA231_0<=VALUE_NULL)||(LA231_0>=DEFINE && LA231_0<=MATCHED)||LA231_0==NEWKW||LA231_0==CONTEXT||LA231_0==NUM_DOUBLE||(LA231_0>=IDENT && LA231_0<=LPAREN)||LA231_0==LCURLY||LA231_0==QUESTION||(LA231_0>=PLUS && LA231_0<=QUOTED_STRING_LITERAL)||LA231_0==MINUS||LA231_0==NUM_INT||(LA231_0>=TICKED_STRING_LITERAL && LA231_0<=NUM_FLOAT)) ) {
                alt231=1;
            }
            else if ( (LA231_0==NOT_EXPR) ) {
                alt231=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);
                throw nvae;
            }
            switch (alt231) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression8681);
                    evalEqualsExpression588=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression588.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR589=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression8687); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR589_tree = (CommonTree)adaptor.create(NOT_EXPR589);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR589_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression8690);
                    evalEqualsExpression590=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression590.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR592=null;
        Token LPAREN594=null;
        Token RPAREN596=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression591 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression593 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList595 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression597 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR592_tree=null;
        CommonTree LPAREN594_tree=null;
        CommonTree RPAREN596_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression8703);
            evalRelationalExpression591=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression591.getTree());
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);
                if ( (LA237_0==IS||LA237_0==EQUALS||(LA237_0>=SQL_NE && LA237_0<=NOT_EQUAL)) ) {
                    alt237=1;
                }
                switch (alt237) {
            	case 1 :
            	    {
            	    int alt232=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt232=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA232_2 = input.LA(2);
            	        if ( (LA232_2==NOT_EXPR) ) {
            	            alt232=3;
            	        }
            	        else if ( (LA232_2==WINDOW||LA232_2==BETWEEN||LA232_2==ESCAPE||LA232_2==EVERY_EXPR||LA232_2==WHERE||(LA232_2>=SUM && LA232_2<=COUNT)||LA232_2==OUTER||(LA232_2>=JOIN && LA232_2<=FULL)||(LA232_2>=ALL && LA232_2<=SOME)||(LA232_2>=EVENTS && LA232_2<=LAST)||LA232_2==ISTREAM||(LA232_2>=UNIDIRECTIONAL && LA232_2<=CURRENT_TIMESTAMP)||(LA232_2>=SNAPSHOT && LA232_2<=INDEX)||(LA232_2>=BOOLEAN_TRUE && LA232_2<=VALUE_NULL)||(LA232_2>=DEFINE && LA232_2<=MATCHED)||LA232_2==NEWKW||LA232_2==CONTEXT||LA232_2==NUM_DOUBLE||(LA232_2>=IDENT && LA232_2<=LPAREN)||LA232_2==LCURLY||LA232_2==QUESTION||(LA232_2>=PLUS && LA232_2<=QUOTED_STRING_LITERAL)||LA232_2==MINUS||LA232_2==NUM_INT||(LA232_2>=TICKED_STRING_LITERAL && LA232_2<=NUM_FLOAT)) ) {
            	            alt232=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 232, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt232=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt232=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 232, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt232) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression8716); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression8734); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression8748); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR592=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression8750); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR592);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression8764); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression8778); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt236=2;
            	    int LA236_0 = input.LA(1);
            	    if ( (LA236_0==WINDOW||LA236_0==BETWEEN||LA236_0==ESCAPE||LA236_0==EVERY_EXPR||LA236_0==WHERE||(LA236_0>=SUM && LA236_0<=COUNT)||LA236_0==OUTER||(LA236_0>=JOIN && LA236_0<=FULL)||(LA236_0>=EVENTS && LA236_0<=LAST)||LA236_0==ISTREAM||(LA236_0>=UNIDIRECTIONAL && LA236_0<=CURRENT_TIMESTAMP)||(LA236_0>=SNAPSHOT && LA236_0<=INDEX)||(LA236_0>=BOOLEAN_TRUE && LA236_0<=VALUE_NULL)||(LA236_0>=DEFINE && LA236_0<=MATCHED)||LA236_0==NEWKW||LA236_0==CONTEXT||LA236_0==NUM_DOUBLE||(LA236_0>=IDENT && LA236_0<=LPAREN)||LA236_0==LCURLY||LA236_0==QUESTION||(LA236_0>=PLUS && LA236_0<=QUOTED_STRING_LITERAL)||LA236_0==MINUS||LA236_0==NUM_INT||(LA236_0>=TICKED_STRING_LITERAL && LA236_0<=NUM_FLOAT)) ) {
            	        alt236=1;
            	    }
            	    else if ( ((LA236_0>=ALL && LA236_0<=SOME)) ) {
            	        alt236=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 236, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt236) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression8808);
            	            evalRelationalExpression593=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression593.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt233=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt233=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt233=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt233=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 233, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt233) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression8825); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression8831); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression8837); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt235=2;
            	            int LA235_0 = input.LA(1);
            	            if ( (LA235_0==LPAREN) ) {
            	                int LA235_1 = input.LA(2);
            	                if ( (LA235_1==SELECT) ) {
            	                    alt235=2;
            	                }
            	                else if ( (LA235_1==WINDOW||LA235_1==BETWEEN||LA235_1==ESCAPE||(LA235_1>=NOT_EXPR && LA235_1<=EVERY_EXPR)||LA235_1==WHERE||(LA235_1>=SUM && LA235_1<=COUNT)||LA235_1==CASE||LA235_1==OUTER||(LA235_1>=JOIN && LA235_1<=FULL)||(LA235_1>=EVENTS && LA235_1<=LAST)||LA235_1==ISTREAM||(LA235_1>=UNIDIRECTIONAL && LA235_1<=CURRENT_TIMESTAMP)||(LA235_1>=SNAPSHOT && LA235_1<=INDEX)||(LA235_1>=BOOLEAN_TRUE && LA235_1<=VALUE_NULL)||(LA235_1>=DEFINE && LA235_1<=MATCHED)||LA235_1==NEWKW||LA235_1==CONTEXT||LA235_1==NUM_DOUBLE||(LA235_1>=IDENT && LA235_1<=RPAREN)||LA235_1==LCURLY||LA235_1==QUESTION||(LA235_1>=PLUS && LA235_1<=QUOTED_STRING_LITERAL)||LA235_1==MINUS||LA235_1==NUM_INT||(LA235_1>=TICKED_STRING_LITERAL && LA235_1<=NUM_FLOAT)) ) {
            	                    alt235=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 235, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 235, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt235) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN594=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression8843); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN594);
            	                    int alt234=2;
            	                    int LA234_0 = input.LA(1);
            	                    if ( (LA234_0==WINDOW||LA234_0==BETWEEN||LA234_0==ESCAPE||(LA234_0>=NOT_EXPR && LA234_0<=EVERY_EXPR)||LA234_0==WHERE||(LA234_0>=SUM && LA234_0<=COUNT)||LA234_0==CASE||LA234_0==OUTER||(LA234_0>=JOIN && LA234_0<=FULL)||(LA234_0>=EVENTS && LA234_0<=LAST)||LA234_0==ISTREAM||(LA234_0>=UNIDIRECTIONAL && LA234_0<=CURRENT_TIMESTAMP)||(LA234_0>=SNAPSHOT && LA234_0<=INDEX)||(LA234_0>=BOOLEAN_TRUE && LA234_0<=VALUE_NULL)||(LA234_0>=DEFINE && LA234_0<=MATCHED)||LA234_0==NEWKW||LA234_0==CONTEXT||LA234_0==NUM_DOUBLE||(LA234_0>=IDENT && LA234_0<=LPAREN)||LA234_0==LCURLY||LA234_0==QUESTION||(LA234_0>=PLUS && LA234_0<=QUOTED_STRING_LITERAL)||LA234_0==MINUS||LA234_0==NUM_INT||(LA234_0>=TICKED_STRING_LITERAL && LA234_0<=NUM_FLOAT)) ) {
            	                        alt234=1;
            	                    }
            	                    switch (alt234) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression8845);
            	                            expressionList595=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList595.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN596=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression8848); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN596);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression8853);
            	                    subSelectGroupExpression597=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression597.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop237;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && eq != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && is != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_IS_EXPR, "EVAL_IS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && isnot != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_ISNOT_EXPR, "EVAL_ISNOT_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (sqlne != null || ne != null || isnot != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN600=null;
        Token RPAREN602=null;
        Token COMMA606=null;
        Token IN_SET608=null;
        Token BETWEEN610=null;
        Token LIKE612=null;
        Token ESCAPE614=null;
        Token REGEXP616=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr598 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr599 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList601 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression603 = null;
        EsperEPL2GrammarParser.expression_return expression604 = null;
        EsperEPL2GrammarParser.expression_return expression605 = null;
        EsperEPL2GrammarParser.expression_return expression607 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery609 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList611 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr613 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant615 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr617 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN600_tree=null;
        CommonTree RPAREN602_tree=null;
        CommonTree COMMA606_tree=null;
        CommonTree IN_SET608_tree=null;
        CommonTree BETWEEN610_tree=null;
        CommonTree LIKE612_tree=null;
        CommonTree ESCAPE614_tree=null;
        CommonTree REGEXP616_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression9013);
            concatenationExpr598=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr598.getTree());
            int alt251=2;
            int LA251_0 = input.LA(1);
            if ( (LA251_0==EOF||(LA251_0>=OR_EXPR && LA251_0<=AND_EXPR)||(LA251_0>=WHERE && LA251_0<=AS)||(LA251_0>=ELSE && LA251_0<=FROM)||LA251_0==IS||(LA251_0>=GROUP && LA251_0<=HAVING)||LA251_0==ALL||LA251_0==OUTPUT||LA251_0==INSERT||(LA251_0>=ORDER && LA251_0<=DESC)||LA251_0==PATTERN||(LA251_0>=TIMEPERIOD_SEC && LA251_0<=TIMEPERIOD_SECONDS)||LA251_0==ROW_LIMIT_EXPR||(LA251_0>=MATCH_RECOGNIZE && LA251_0<=MEASURES)||(LA251_0>=AFTER && LA251_0<=FOR)||LA251_0==RBRACK||(LA251_0>=RPAREN && LA251_0<=COLON)||LA251_0==RCURLY||(LA251_0>=ATCHAR && LA251_0<=COMMA)||LA251_0==EQUALS||(LA251_0>=LT && LA251_0<=GT)||LA251_0==BOR||(LA251_0>=BAND && LA251_0<=GE)||LA251_0==FOLLOWMAX_END) ) {
                alt251=1;
            }
            else if ( ((LA251_0>=IN_SET && LA251_0<=REGEXP)||LA251_0==NOT_EXPR) ) {
                alt251=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 0, input);
                throw nvae;
            }
            switch (alt251) {
                case 1 :
                    {
                    {
                    loop243:
                    do {
                        int alt243=2;
                        int LA243_0 = input.LA(1);
                        if ( ((LA243_0>=LT && LA243_0<=GT)||(LA243_0>=LE && LA243_0<=GE)) ) {
                            alt243=1;
                        }
                        switch (alt243) {
                    	case 1 :
                    	    {
                    	    int alt238=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt238=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt238=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt238=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt238=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 238, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt238) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression9045); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression9049); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression9053); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression9057); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt242=2;
                    	    int LA242_0 = input.LA(1);
                    	    if ( (LA242_0==WINDOW||LA242_0==BETWEEN||LA242_0==ESCAPE||LA242_0==EVERY_EXPR||LA242_0==WHERE||(LA242_0>=SUM && LA242_0<=COUNT)||LA242_0==OUTER||(LA242_0>=JOIN && LA242_0<=FULL)||(LA242_0>=EVENTS && LA242_0<=LAST)||LA242_0==ISTREAM||(LA242_0>=UNIDIRECTIONAL && LA242_0<=CURRENT_TIMESTAMP)||(LA242_0>=SNAPSHOT && LA242_0<=INDEX)||(LA242_0>=BOOLEAN_TRUE && LA242_0<=VALUE_NULL)||(LA242_0>=DEFINE && LA242_0<=MATCHED)||LA242_0==NEWKW||LA242_0==CONTEXT||LA242_0==NUM_DOUBLE||(LA242_0>=IDENT && LA242_0<=LPAREN)||LA242_0==LCURLY||LA242_0==QUESTION||(LA242_0>=PLUS && LA242_0<=QUOTED_STRING_LITERAL)||LA242_0==MINUS||LA242_0==NUM_INT||(LA242_0>=TICKED_STRING_LITERAL && LA242_0<=NUM_FLOAT)) ) {
                    	        alt242=1;
                    	    }
                    	    else if ( ((LA242_0>=ALL && LA242_0<=SOME)) ) {
                    	        alt242=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 242, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt242) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression9081);
                    	            concatenationExpr599=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr599.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt239=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt239=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt239=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt239=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 239, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt239) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression9098); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression9104); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression9110); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt241=2;
                    	            int LA241_0 = input.LA(1);
                    	            if ( (LA241_0==LPAREN) ) {
                    	                int LA241_1 = input.LA(2);
                    	                if ( (LA241_1==SELECT) ) {
                    	                    alt241=2;
                    	                }
                    	                else if ( (LA241_1==WINDOW||LA241_1==BETWEEN||LA241_1==ESCAPE||(LA241_1>=NOT_EXPR && LA241_1<=EVERY_EXPR)||LA241_1==WHERE||(LA241_1>=SUM && LA241_1<=COUNT)||LA241_1==CASE||LA241_1==OUTER||(LA241_1>=JOIN && LA241_1<=FULL)||(LA241_1>=EVENTS && LA241_1<=LAST)||LA241_1==ISTREAM||(LA241_1>=UNIDIRECTIONAL && LA241_1<=CURRENT_TIMESTAMP)||(LA241_1>=SNAPSHOT && LA241_1<=INDEX)||(LA241_1>=BOOLEAN_TRUE && LA241_1<=VALUE_NULL)||(LA241_1>=DEFINE && LA241_1<=MATCHED)||LA241_1==NEWKW||LA241_1==CONTEXT||LA241_1==NUM_DOUBLE||(LA241_1>=IDENT && LA241_1<=RPAREN)||LA241_1==LCURLY||LA241_1==QUESTION||(LA241_1>=PLUS && LA241_1<=QUOTED_STRING_LITERAL)||LA241_1==MINUS||LA241_1==NUM_INT||(LA241_1>=TICKED_STRING_LITERAL && LA241_1<=NUM_FLOAT)) ) {
                    	                    alt241=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 241, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 241, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt241) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN600=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression9116); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN600);
                    	                    int alt240=2;
                    	                    int LA240_0 = input.LA(1);
                    	                    if ( (LA240_0==WINDOW||LA240_0==BETWEEN||LA240_0==ESCAPE||(LA240_0>=NOT_EXPR && LA240_0<=EVERY_EXPR)||LA240_0==WHERE||(LA240_0>=SUM && LA240_0<=COUNT)||LA240_0==CASE||LA240_0==OUTER||(LA240_0>=JOIN && LA240_0<=FULL)||(LA240_0>=EVENTS && LA240_0<=LAST)||LA240_0==ISTREAM||(LA240_0>=UNIDIRECTIONAL && LA240_0<=CURRENT_TIMESTAMP)||(LA240_0>=SNAPSHOT && LA240_0<=INDEX)||(LA240_0>=BOOLEAN_TRUE && LA240_0<=VALUE_NULL)||(LA240_0>=DEFINE && LA240_0<=MATCHED)||LA240_0==NEWKW||LA240_0==CONTEXT||LA240_0==NUM_DOUBLE||(LA240_0>=IDENT && LA240_0<=LPAREN)||LA240_0==LCURLY||LA240_0==QUESTION||(LA240_0>=PLUS && LA240_0<=QUOTED_STRING_LITERAL)||LA240_0==MINUS||LA240_0==NUM_INT||(LA240_0>=TICKED_STRING_LITERAL && LA240_0<=NUM_FLOAT)) ) {
                    	                        alt240=1;
                    	                    }
                    	                    switch (alt240) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression9118);
                    	                            expressionList601=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList601.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN602=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression9121); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN602);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression9126);
                    	                    subSelectGroupExpression603=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression603.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop243;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt244=2;
                    int LA244_0 = input.LA(1);
                    if ( (LA244_0==NOT_EXPR) ) {
                        alt244=1;
                    }
                    switch (alt244) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression9222); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt250=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA250_1 = input.LA(2);
                        if ( (LA250_1==LPAREN) ) {
                            int LA250_5 = input.LA(3);
                            if ( (LA250_5==SELECT) ) {
                                alt250=2;
                            }
                            else if ( (LA250_5==WINDOW||LA250_5==BETWEEN||LA250_5==ESCAPE||(LA250_5>=NOT_EXPR && LA250_5<=EVERY_EXPR)||LA250_5==WHERE||(LA250_5>=SUM && LA250_5<=COUNT)||LA250_5==CASE||LA250_5==OUTER||(LA250_5>=JOIN && LA250_5<=FULL)||(LA250_5>=EVENTS && LA250_5<=LAST)||LA250_5==ISTREAM||(LA250_5>=UNIDIRECTIONAL && LA250_5<=CURRENT_TIMESTAMP)||(LA250_5>=SNAPSHOT && LA250_5<=INDEX)||(LA250_5>=BOOLEAN_TRUE && LA250_5<=VALUE_NULL)||(LA250_5>=DEFINE && LA250_5<=MATCHED)||LA250_5==NEWKW||LA250_5==CONTEXT||LA250_5==NUM_DOUBLE||(LA250_5>=IDENT && LA250_5<=LPAREN)||LA250_5==LCURLY||LA250_5==QUESTION||(LA250_5>=PLUS && LA250_5<=QUOTED_STRING_LITERAL)||LA250_5==MINUS||LA250_5==NUM_INT||(LA250_5>=TICKED_STRING_LITERAL && LA250_5<=NUM_FLOAT)) ) {
                                alt250=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_1==LBRACK) ) {
                            alt250=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt250=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt250=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt250=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 0, input);
                        throw nvae;
                    }
                    switch (alt250) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression9249); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt245=2;
                            int LA245_0 = input.LA(1);
                            if ( (LA245_0==LPAREN) ) {
                                alt245=1;
                            }
                            else if ( (LA245_0==LBRACK) ) {
                                alt245=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 245, 0, input);
                                throw nvae;
                            }
                            switch (alt245) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression9261); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression9267); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression9270);
                            expression604=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression604.getTree());
                            int alt247=2;
                            int LA247_0 = input.LA(1);
                            if ( (LA247_0==COLON) ) {
                                alt247=1;
                            }
                            else if ( (LA247_0==RBRACK||LA247_0==RPAREN||LA247_0==COMMA) ) {
                                alt247=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 247, 0, input);
                                throw nvae;
                            }
                            switch (alt247) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression9292); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression9295);
                                    expression605=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression605.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop246:
                                    do {
                                        int alt246=2;
                                        int LA246_0 = input.LA(1);
                                        if ( (LA246_0==COMMA) ) {
                                            alt246=1;
                                        }
                                        switch (alt246) {
                                    	case 1 :
                                    	    {
                                    	    COMMA606=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression9321); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA606);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression9323);
                                    	    expression607=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression607.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop246;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt248=2;
                            int LA248_0 = input.LA(1);
                            if ( (LA248_0==RPAREN) ) {
                                alt248=1;
                            }
                            else if ( (LA248_0==RBRACK) ) {
                                alt248=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 248, 0, input);
                                throw nvae;
                            }
                            switch (alt248) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression9349); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression9355); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET608=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression9478); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET608);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression9480);
                            inSubSelectQuery609=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery609.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN610=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression9526); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN610);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression9528);
                            betweenList611=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList611.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE612=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression9578); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE612);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression9580);
                            concatenationExpr613=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr613.getTree());
                            int alt249=2;
                            int LA249_0 = input.LA(1);
                            if ( (LA249_0==ESCAPE) ) {
                                alt249=1;
                            }
                            switch (alt249) {
                                case 1 :
                                    {
                                    ESCAPE614=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression9583); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE614);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression9585);
                                    stringconstant615=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant615.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP616=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression9637); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP616);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression9639);
                            concatenationExpr617=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr617.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr618 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery9701);
            subQueryExpr618=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr618.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR621=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression619 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression620 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression622 = null;
        CommonTree c_tree=null;
        CommonTree LOR621_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr9726);
            additiveExpression619=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression619.getTree());
            int alt253=2;
            int LA253_0 = input.LA(1);
            if ( (LA253_0==LOR) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr9732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr9734);
                    additiveExpression620=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression620.getTree());
                    loop252:
                    do {
                        int alt252=2;
                        int LA252_0 = input.LA(1);
                        if ( (LA252_0==LOR) ) {
                            alt252=1;
                        }
                        switch (alt252) {
                    	case 1 :
                    	    {
                    	    LOR621=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr9738); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR621);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr9740);
                    	    additiveExpression622=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression622.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop252;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS624=null;
        Token MINUS625=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression623 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression626 = null;
        CommonTree PLUS624_tree=null;
        CommonTree MINUS625_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression9781);
            multiplyExpression623=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression623.getTree());
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);
                if ( (LA255_0==PLUS||LA255_0==MINUS) ) {
                    alt255=1;
                }
                switch (alt255) {
            	case 1 :
            	    {
            	    int alt254=2;
            	    int LA254_0 = input.LA(1);
            	    if ( (LA254_0==PLUS) ) {
            	        alt254=1;
            	    }
            	    else if ( (LA254_0==MINUS) ) {
            	        alt254=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 254, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt254) {
            	        case 1 :
            	            {
            	            PLUS624=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression9786); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS624_tree = (CommonTree)adaptor.create(PLUS624);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS624_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS625=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression9789); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS625_tree = (CommonTree)adaptor.create(MINUS625);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS625_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression9793);
            	    multiplyExpression626=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression626.getTree());
            	    }
            	    break;
            	default :
            	    break loop255;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR628=null;
        Token DIV629=null;
        Token MOD630=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression627 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression631 = null;
        CommonTree STAR628_tree=null;
        CommonTree DIV629_tree=null;
        CommonTree MOD630_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression9807);
            unaryExpression627=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression627.getTree());
            loop257:
            do {
                int alt257=2;
                int LA257_0 = input.LA(1);
                if ( (LA257_0==STAR||(LA257_0>=DIV && LA257_0<=MOD)) ) {
                    alt257=1;
                }
                switch (alt257) {
            	case 1 :
            	    {
            	    int alt256=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt256=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt256=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt256=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 256, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt256) {
            	        case 1 :
            	            {
            	            STAR628=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression9812); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR628_tree = (CommonTree)adaptor.create(STAR628);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR628_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV629=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression9815); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV629_tree = (CommonTree)adaptor.create(DIV629);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV629_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD630=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression9818); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD630_tree = (CommonTree)adaptor.create(MOD630);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD630_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression9822);
            	    unaryExpression631=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression631.getTree());
            	    }
            	    break;
            	default :
            	    break loop257;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS632=null;
        Token LPAREN636=null;
        Token RPAREN638=null;
        Token NEWKW648=null;
        Token LCURLY649=null;
        Token COMMA651=null;
        Token RCURLY653=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty633 = null;
        EsperEPL2GrammarParser.constant_return constant634 = null;
        EsperEPL2GrammarParser.substitution_return substitution635 = null;
        EsperEPL2GrammarParser.expression_return expression637 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass639 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass640 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction641 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc642 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression643 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression644 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass645 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass646 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression647 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign650 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign652 = null;
        CommonTree d_tree=null;
        CommonTree MINUS632_tree=null;
        CommonTree LPAREN636_tree=null;
        CommonTree RPAREN638_tree=null;
        CommonTree NEWKW648_tree=null;
        CommonTree LCURLY649_tree=null;
        CommonTree COMMA651_tree=null;
        CommonTree RCURLY653_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_NEWKW=new RewriteRuleTokenStream(adaptor,"token NEWKW");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_newAssign=new RewriteRuleSubtreeStream(adaptor,"rule newAssign");
        RewriteRuleSubtreeStream stream_subSelectExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt263=10;
            alt263 = dfa263.predict(input);
            switch (alt263) {
                case 1 :
                    {
                    MINUS632=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression9837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS632);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression9839);
                    eventProperty633=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty633.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression9852);
                    constant634=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant634.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression9857);
                    substitution635=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution635.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN636=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression9862); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN636);
                    pushFollow(FOLLOW_expression_in_unaryExpression9864);
                    expression637=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression637.getTree());
                    RPAREN638=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression9866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN638);
                    int alt259=2;
                    int LA259_0 = input.LA(1);
                    if ( (LA259_0==DOT) ) {
                        alt259=1;
                    }
                    switch (alt259) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9871); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9873);
                            libFunctionNoClass639=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass639.getTree());
                            loop258:
                            do {
                                int alt258=2;
                                int LA258_0 = input.LA(1);
                                if ( (LA258_0==DOT) ) {
                                    alt258=1;
                                }
                                switch (alt258) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9878); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9880);
                            	    libFunctionNoClass640=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass640.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop258;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression9917);
                    eventPropertyOrLibFunction641=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction641.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression9929);
                    builtinFunc642=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc642.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression9935);
                    arrayExpression643=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression643.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression9940);
                    subSelectExpression644=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelectExpression.add(subSelectExpression644.getTree());
                    int alt261=2;
                    int LA261_0 = input.LA(1);
                    if ( (LA261_0==DOT) ) {
                        alt261=1;
                    }
                    switch (alt261) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9945); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9947);
                            libFunctionNoClass645=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass645.getTree());
                            loop260:
                            do {
                                int alt260=2;
                                int LA260_0 = input.LA(1);
                                if ( (LA260_0==DOT) ) {
                                    alt260=1;
                                }
                                switch (alt260) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9952); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9954);
                            	    libFunctionNoClass646=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass646.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop260;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_subSelectExpression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_subSelectExpression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression9991);
                    existsSubSelectExpression647=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression647.getTree());
                    }
                    break;
                case 10 :
                    {
                    NEWKW648=(Token)match(input,NEWKW,FOLLOW_NEWKW_in_unaryExpression9996); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NEWKW.add(NEWKW648);
                    LCURLY649=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_unaryExpression9998); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY649);
                    pushFollow(FOLLOW_newAssign_in_unaryExpression10000);
                    newAssign650=newAssign();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newAssign.add(newAssign650.getTree());
                    loop262:
                    do {
                        int alt262=2;
                        int LA262_0 = input.LA(1);
                        if ( (LA262_0==COMMA) ) {
                            alt262=1;
                        }
                        switch (alt262) {
                    	case 1 :
                    	    {
                    	    COMMA651=(Token)match(input,COMMA,FOLLOW_COMMA_in_unaryExpression10003); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA651);
                    	    pushFollow(FOLLOW_newAssign_in_unaryExpression10005);
                    	    newAssign652=newAssign();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_newAssign.add(newAssign652.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop262;
                        }
                    } while (true);
                    RCURLY653=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_unaryExpression10009); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY653);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NEWKW.nextNode(), root_1);
                        while ( stream_newAssign.hasNext() ) {
                            adaptor.addChild(root_1, stream_newAssign.nextTree());
                        }
                        stream_newAssign.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class newAssign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.newAssign_return newAssign() throws RecognitionException {
        EsperEPL2GrammarParser.newAssign_return retval = new EsperEPL2GrammarParser.newAssign_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS655=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty654 = null;
        EsperEPL2GrammarParser.expression_return expression656 = null;
        CommonTree EQUALS655_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_newAssign10031);
            eventProperty654=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty654.getTree());
            int alt264=2;
            int LA264_0 = input.LA(1);
            if ( (LA264_0==EQUALS) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    {
                    EQUALS655=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_newAssign10034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS655);
                    pushFollow(FOLLOW_expression_in_newAssign10036);
                    expression656=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression656.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEW_ITEM, "NEW_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr657 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression10064);
            subQueryExpr657=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr657.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr658 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression10086);
            subQueryExpr658=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr658.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS659=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr660 = null;
        CommonTree EXISTS659_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS659=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression10108); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS659);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression10110);
            subQueryExpr660=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr660.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN661=null;
        Token SELECT662=null;
        Token DISTINCT663=null;
        Token FROM665=null;
        Token WHERE667=null;
        Token RPAREN669=null;
        EsperEPL2GrammarParser.selectionList_return selectionList664 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr666 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause668 = null;
        CommonTree LPAREN661_tree=null;
        CommonTree SELECT662_tree=null;
        CommonTree DISTINCT663_tree=null;
        CommonTree FROM665_tree=null;
        CommonTree WHERE667_tree=null;
        CommonTree RPAREN669_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN661=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr10143); if (state.failed) return retval;
            SELECT662=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr10149); if (state.failed) return retval;
            int alt265=2;
            int LA265_0 = input.LA(1);
            if ( (LA265_0==DISTINCT) ) {
                alt265=1;
            }
            switch (alt265) {
                case 1 :
                    {
                    DISTINCT663=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr10152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT663_tree = (CommonTree)adaptor.create(DISTINCT663);
                    adaptor.addChild(root_0, DISTINCT663_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr10155);
            selectionList664=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList664.getTree());
            FROM665=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr10162); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr10165);
            subSelectFilterExpr666=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr666.getTree());
            int alt266=2;
            int LA266_0 = input.LA(1);
            if ( (LA266_0==WHERE) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    {
                    WHERE667=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr10173); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr10176);
                    whereClause668=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause668.getTree());
                    }
                    break;
            }
            RPAREN669=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr10185); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT671=null;
        Token DOT673=null;
        Token AS675=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression670 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression672 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression674 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT671_tree=null;
        CommonTree DOT673_tree=null;
        CommonTree AS675_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr10209);
            eventFilterExpression670=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression670.getTree());
            int alt268=2;
            int LA268_0 = input.LA(1);
            if ( (LA268_0==DOT) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    {
                    DOT671=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr10214); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT671);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr10216);
                    viewExpression672=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression672.getTree());
                    loop267:
                    do {
                        int alt267=2;
                        int LA267_0 = input.LA(1);
                        if ( (LA267_0==DOT) ) {
                            alt267=1;
                        }
                        switch (alt267) {
                    	case 1 :
                    	    {
                    	    DOT673=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr10219); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT673);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr10221);
                    	    viewExpression674=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression674.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop267;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt269=3;
            int LA269_0 = input.LA(1);
            if ( (LA269_0==AS) ) {
                alt269=1;
            }
            else if ( (LA269_0==IDENT) ) {
                alt269=2;
            }
            switch (alt269) {
                case 1 :
                    {
                    AS675=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr10228); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS675);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr10232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr10238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt270=3;
            int LA270_0 = input.LA(1);
            if ( (LA270_0==RETAINUNION) ) {
                alt270=1;
            }
            else if ( (LA270_0==RETAININTERSECTION) ) {
                alt270=2;
            }
            switch (alt270) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr10245); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr10249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LCURLY676=null;
        Token COMMA678=null;
        Token RCURLY680=null;
        EsperEPL2GrammarParser.expression_return expression677 = null;
        EsperEPL2GrammarParser.expression_return expression679 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass681 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass682 = null;
        CommonTree d_tree=null;
        CommonTree LCURLY676_tree=null;
        CommonTree COMMA678_tree=null;
        CommonTree RCURLY680_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LCURLY676=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression10289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY676);
            int alt272=2;
            int LA272_0 = input.LA(1);
            if ( (LA272_0==WINDOW||LA272_0==BETWEEN||LA272_0==ESCAPE||(LA272_0>=NOT_EXPR && LA272_0<=EVERY_EXPR)||LA272_0==WHERE||(LA272_0>=SUM && LA272_0<=COUNT)||LA272_0==CASE||LA272_0==OUTER||(LA272_0>=JOIN && LA272_0<=FULL)||(LA272_0>=EVENTS && LA272_0<=LAST)||LA272_0==ISTREAM||(LA272_0>=UNIDIRECTIONAL && LA272_0<=CURRENT_TIMESTAMP)||(LA272_0>=SNAPSHOT && LA272_0<=INDEX)||(LA272_0>=BOOLEAN_TRUE && LA272_0<=VALUE_NULL)||(LA272_0>=DEFINE && LA272_0<=MATCHED)||LA272_0==NEWKW||LA272_0==CONTEXT||LA272_0==NUM_DOUBLE||(LA272_0>=IDENT && LA272_0<=LPAREN)||LA272_0==LCURLY||LA272_0==QUESTION||(LA272_0>=PLUS && LA272_0<=QUOTED_STRING_LITERAL)||LA272_0==MINUS||LA272_0==NUM_INT||(LA272_0>=TICKED_STRING_LITERAL && LA272_0<=NUM_FLOAT)) ) {
                alt272=1;
            }
            switch (alt272) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression10292);
                    expression677=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression677.getTree());
                    loop271:
                    do {
                        int alt271=2;
                        int LA271_0 = input.LA(1);
                        if ( (LA271_0==COMMA) ) {
                            alt271=1;
                        }
                        switch (alt271) {
                    	case 1 :
                    	    {
                    	    COMMA678=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression10295); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA678);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression10297);
                    	    expression679=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression679.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop271;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY680=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression10304); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY680);
            int alt274=2;
            int LA274_0 = input.LA(1);
            if ( (LA274_0==DOT) ) {
                alt274=1;
            }
            switch (alt274) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression10309); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression10311);
                    libFunctionNoClass681=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass681.getTree());
                    loop273:
                    do {
                        int alt273=2;
                        int LA273_0 = input.LA(1);
                        if ( (LA273_0==DOT) ) {
                            alt273=1;
                        }
                        switch (alt273) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression10316); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression10318);
                    	    libFunctionNoClass682=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass682.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop273;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_2);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token SUM683=null;
        Token LPAREN684=null;
        Token ALL685=null;
        Token DISTINCT686=null;
        Token RPAREN689=null;
        Token AVG690=null;
        Token LPAREN691=null;
        Token ALL692=null;
        Token DISTINCT693=null;
        Token RPAREN696=null;
        Token COUNT697=null;
        Token LPAREN698=null;
        Token ALL699=null;
        Token DISTINCT700=null;
        Token STAR702=null;
        Token RPAREN704=null;
        Token MEDIAN705=null;
        Token LPAREN706=null;
        Token ALL707=null;
        Token DISTINCT708=null;
        Token RPAREN711=null;
        Token STDDEV712=null;
        Token LPAREN713=null;
        Token ALL714=null;
        Token DISTINCT715=null;
        Token RPAREN718=null;
        Token AVEDEV719=null;
        Token LPAREN720=null;
        Token ALL721=null;
        Token DISTINCT722=null;
        Token RPAREN725=null;
        Token COALESCE729=null;
        Token LPAREN730=null;
        Token COMMA732=null;
        Token COMMA734=null;
        Token RPAREN736=null;
        Token PREVIOUS737=null;
        Token LPAREN738=null;
        Token COMMA740=null;
        Token RPAREN742=null;
        Token PREVIOUSTAIL745=null;
        Token LPAREN746=null;
        Token COMMA748=null;
        Token RPAREN750=null;
        Token PREVIOUSCOUNT753=null;
        Token LPAREN754=null;
        Token RPAREN756=null;
        Token PREVIOUSWINDOW757=null;
        Token LPAREN758=null;
        Token RPAREN760=null;
        Token PRIOR763=null;
        Token LPAREN764=null;
        Token NUM_INT765=null;
        Token COMMA766=null;
        Token RPAREN768=null;
        Token INSTANCEOF769=null;
        Token LPAREN770=null;
        Token COMMA772=null;
        Token COMMA774=null;
        Token RPAREN776=null;
        Token TYPEOF777=null;
        Token LPAREN778=null;
        Token RPAREN780=null;
        Token CAST781=null;
        Token LPAREN782=null;
        Token COMMA784=null;
        Token AS785=null;
        Token RPAREN787=null;
        Token EXISTS790=null;
        Token LPAREN791=null;
        Token RPAREN793=null;
        Token CURRENT_TIMESTAMP794=null;
        Token LPAREN795=null;
        Token RPAREN796=null;
        Token ISTREAM799=null;
        Token LPAREN800=null;
        Token RPAREN801=null;
        EsperEPL2GrammarParser.expression_return expression687 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr688 = null;
        EsperEPL2GrammarParser.expression_return expression694 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr695 = null;
        EsperEPL2GrammarParser.expression_return expression701 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr703 = null;
        EsperEPL2GrammarParser.expression_return expression709 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr710 = null;
        EsperEPL2GrammarParser.expression_return expression716 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr717 = null;
        EsperEPL2GrammarParser.expression_return expression723 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr724 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation726 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation727 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation728 = null;
        EsperEPL2GrammarParser.expression_return expression731 = null;
        EsperEPL2GrammarParser.expression_return expression733 = null;
        EsperEPL2GrammarParser.expression_return expression735 = null;
        EsperEPL2GrammarParser.expression_return expression739 = null;
        EsperEPL2GrammarParser.expression_return expression741 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass743 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass744 = null;
        EsperEPL2GrammarParser.expression_return expression747 = null;
        EsperEPL2GrammarParser.expression_return expression749 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass751 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass752 = null;
        EsperEPL2GrammarParser.expression_return expression755 = null;
        EsperEPL2GrammarParser.expression_return expression759 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass761 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass762 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty767 = null;
        EsperEPL2GrammarParser.expression_return expression771 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier773 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier775 = null;
        EsperEPL2GrammarParser.expression_return expression779 = null;
        EsperEPL2GrammarParser.expression_return expression783 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier786 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass788 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass789 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty792 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass797 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass798 = null;
        CommonTree d_tree=null;
        CommonTree SUM683_tree=null;
        CommonTree LPAREN684_tree=null;
        CommonTree ALL685_tree=null;
        CommonTree DISTINCT686_tree=null;
        CommonTree RPAREN689_tree=null;
        CommonTree AVG690_tree=null;
        CommonTree LPAREN691_tree=null;
        CommonTree ALL692_tree=null;
        CommonTree DISTINCT693_tree=null;
        CommonTree RPAREN696_tree=null;
        CommonTree COUNT697_tree=null;
        CommonTree LPAREN698_tree=null;
        CommonTree ALL699_tree=null;
        CommonTree DISTINCT700_tree=null;
        CommonTree STAR702_tree=null;
        CommonTree RPAREN704_tree=null;
        CommonTree MEDIAN705_tree=null;
        CommonTree LPAREN706_tree=null;
        CommonTree ALL707_tree=null;
        CommonTree DISTINCT708_tree=null;
        CommonTree RPAREN711_tree=null;
        CommonTree STDDEV712_tree=null;
        CommonTree LPAREN713_tree=null;
        CommonTree ALL714_tree=null;
        CommonTree DISTINCT715_tree=null;
        CommonTree RPAREN718_tree=null;
        CommonTree AVEDEV719_tree=null;
        CommonTree LPAREN720_tree=null;
        CommonTree ALL721_tree=null;
        CommonTree DISTINCT722_tree=null;
        CommonTree RPAREN725_tree=null;
        CommonTree COALESCE729_tree=null;
        CommonTree LPAREN730_tree=null;
        CommonTree COMMA732_tree=null;
        CommonTree COMMA734_tree=null;
        CommonTree RPAREN736_tree=null;
        CommonTree PREVIOUS737_tree=null;
        CommonTree LPAREN738_tree=null;
        CommonTree COMMA740_tree=null;
        CommonTree RPAREN742_tree=null;
        CommonTree PREVIOUSTAIL745_tree=null;
        CommonTree LPAREN746_tree=null;
        CommonTree COMMA748_tree=null;
        CommonTree RPAREN750_tree=null;
        CommonTree PREVIOUSCOUNT753_tree=null;
        CommonTree LPAREN754_tree=null;
        CommonTree RPAREN756_tree=null;
        CommonTree PREVIOUSWINDOW757_tree=null;
        CommonTree LPAREN758_tree=null;
        CommonTree RPAREN760_tree=null;
        CommonTree PRIOR763_tree=null;
        CommonTree LPAREN764_tree=null;
        CommonTree NUM_INT765_tree=null;
        CommonTree COMMA766_tree=null;
        CommonTree RPAREN768_tree=null;
        CommonTree INSTANCEOF769_tree=null;
        CommonTree LPAREN770_tree=null;
        CommonTree COMMA772_tree=null;
        CommonTree COMMA774_tree=null;
        CommonTree RPAREN776_tree=null;
        CommonTree TYPEOF777_tree=null;
        CommonTree LPAREN778_tree=null;
        CommonTree RPAREN780_tree=null;
        CommonTree CAST781_tree=null;
        CommonTree LPAREN782_tree=null;
        CommonTree COMMA784_tree=null;
        CommonTree AS785_tree=null;
        CommonTree RPAREN787_tree=null;
        CommonTree EXISTS790_tree=null;
        CommonTree LPAREN791_tree=null;
        CommonTree RPAREN793_tree=null;
        CommonTree CURRENT_TIMESTAMP794_tree=null;
        CommonTree LPAREN795_tree=null;
        CommonTree RPAREN796_tree=null;
        CommonTree ISTREAM799_tree=null;
        CommonTree LPAREN800_tree=null;
        CommonTree RPAREN801_tree=null;
        RewriteRuleTokenStream stream_CAST=new RewriteRuleTokenStream(adaptor,"token CAST");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PREVIOUSTAIL=new RewriteRuleTokenStream(adaptor,"token PREVIOUSTAIL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_CURRENT_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token CURRENT_TIMESTAMP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PREVIOUS=new RewriteRuleTokenStream(adaptor,"token PREVIOUS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_PREVIOUSWINDOW=new RewriteRuleTokenStream(adaptor,"token PREVIOUSWINDOW");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            int alt304=21;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt304=1;
                }
                break;
            case AVG:
                {
                alt304=2;
                }
                break;
            case COUNT:
                {
                alt304=3;
                }
                break;
            case MEDIAN:
                {
                alt304=4;
                }
                break;
            case STDDEV:
                {
                alt304=5;
                }
                break;
            case AVEDEV:
                {
                alt304=6;
                }
                break;
            case FIRST:
                {
                alt304=7;
                }
                break;
            case LAST:
                {
                alt304=8;
                }
                break;
            case WINDOW:
                {
                alt304=9;
                }
                break;
            case COALESCE:
                {
                alt304=10;
                }
                break;
            case PREVIOUS:
                {
                alt304=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt304=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt304=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt304=14;
                }
                break;
            case PRIOR:
                {
                alt304=15;
                }
                break;
            case INSTANCEOF:
                {
                alt304=16;
                }
                break;
            case TYPEOF:
                {
                alt304=17;
                }
                break;
            case CAST:
                {
                alt304=18;
                }
                break;
            case EXISTS:
                {
                alt304=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt304=20;
                }
                break;
            case ISTREAM:
                {
                alt304=21;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 304, 0, input);
                throw nvae;
            }
            switch (alt304) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM683=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc10367); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM683_tree = (CommonTree)adaptor.create(SUM683);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM683_tree, root_0);
                    }
                    LPAREN684=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10370); if (state.failed) return retval;
                    int alt275=3;
                    int LA275_0 = input.LA(1);
                    if ( (LA275_0==ALL) ) {
                        alt275=1;
                    }
                    else if ( (LA275_0==DISTINCT) ) {
                        alt275=2;
                    }
                    switch (alt275) {
                        case 1 :
                            {
                            ALL685=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10374); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT686=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10379); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT686_tree = (CommonTree)adaptor.create(DISTINCT686);
                            adaptor.addChild(root_0, DISTINCT686_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10383);
                    expression687=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression687.getTree());
                    int alt276=2;
                    int LA276_0 = input.LA(1);
                    if ( (LA276_0==COMMA) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10385);
                            aggregationFilterExpr688=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr688.getTree());
                            }
                            break;
                    }
                    RPAREN689=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10388); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG690=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc10394); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG690_tree = (CommonTree)adaptor.create(AVG690);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG690_tree, root_0);
                    }
                    LPAREN691=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10397); if (state.failed) return retval;
                    int alt277=3;
                    int LA277_0 = input.LA(1);
                    if ( (LA277_0==ALL) ) {
                        alt277=1;
                    }
                    else if ( (LA277_0==DISTINCT) ) {
                        alt277=2;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            ALL692=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10401); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT693=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10406); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT693_tree = (CommonTree)adaptor.create(DISTINCT693);
                            adaptor.addChild(root_0, DISTINCT693_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10410);
                    expression694=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression694.getTree());
                    int alt278=2;
                    int LA278_0 = input.LA(1);
                    if ( (LA278_0==COMMA) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10412);
                            aggregationFilterExpr695=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr695.getTree());
                            }
                            break;
                    }
                    RPAREN696=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10415); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT697=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc10421); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT697_tree = (CommonTree)adaptor.create(COUNT697);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT697_tree, root_0);
                    }
                    LPAREN698=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10424); if (state.failed) return retval;
                    int alt280=2;
                    int LA280_0 = input.LA(1);
                    if ( (LA280_0==WINDOW||LA280_0==BETWEEN||LA280_0==ESCAPE||(LA280_0>=NOT_EXPR && LA280_0<=EVERY_EXPR)||LA280_0==WHERE||(LA280_0>=SUM && LA280_0<=COUNT)||LA280_0==CASE||LA280_0==OUTER||(LA280_0>=JOIN && LA280_0<=FULL)||(LA280_0>=DISTINCT && LA280_0<=ALL)||(LA280_0>=EVENTS && LA280_0<=LAST)||LA280_0==ISTREAM||(LA280_0>=UNIDIRECTIONAL && LA280_0<=CURRENT_TIMESTAMP)||(LA280_0>=SNAPSHOT && LA280_0<=INDEX)||(LA280_0>=BOOLEAN_TRUE && LA280_0<=VALUE_NULL)||(LA280_0>=DEFINE && LA280_0<=MATCHED)||LA280_0==NEWKW||LA280_0==CONTEXT||LA280_0==NUM_DOUBLE||(LA280_0>=IDENT && LA280_0<=LPAREN)||LA280_0==LCURLY||LA280_0==QUESTION||(LA280_0>=PLUS && LA280_0<=QUOTED_STRING_LITERAL)||LA280_0==MINUS||LA280_0==NUM_INT||(LA280_0>=TICKED_STRING_LITERAL && LA280_0<=NUM_FLOAT)) ) {
                        alt280=1;
                    }
                    else if ( (LA280_0==STAR) ) {
                        alt280=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 280, 0, input);
                        throw nvae;
                    }
                    switch (alt280) {
                        case 1 :
                            {
                            {
                            int alt279=3;
                            int LA279_0 = input.LA(1);
                            if ( (LA279_0==ALL) ) {
                                alt279=1;
                            }
                            else if ( (LA279_0==DISTINCT) ) {
                                alt279=2;
                            }
                            switch (alt279) {
                                case 1 :
                                    {
                                    ALL699=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10436); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT700=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10441); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT700_tree = (CommonTree)adaptor.create(DISTINCT700);
                                    adaptor.addChild(root_0, DISTINCT700_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc10445);
                            expression701=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression701.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR702=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc10456); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    int alt281=2;
                    int LA281_0 = input.LA(1);
                    if ( (LA281_0==COMMA) ) {
                        alt281=1;
                    }
                    switch (alt281) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10467);
                            aggregationFilterExpr703=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr703.getTree());
                            }
                            break;
                    }
                    RPAREN704=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10470); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN705=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc10476); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN705_tree = (CommonTree)adaptor.create(MEDIAN705);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN705_tree, root_0);
                    }
                    LPAREN706=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10479); if (state.failed) return retval;
                    int alt282=3;
                    int LA282_0 = input.LA(1);
                    if ( (LA282_0==ALL) ) {
                        alt282=1;
                    }
                    else if ( (LA282_0==DISTINCT) ) {
                        alt282=2;
                    }
                    switch (alt282) {
                        case 1 :
                            {
                            ALL707=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10483); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT708=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10488); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT708_tree = (CommonTree)adaptor.create(DISTINCT708);
                            adaptor.addChild(root_0, DISTINCT708_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10492);
                    expression709=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression709.getTree());
                    int alt283=2;
                    int LA283_0 = input.LA(1);
                    if ( (LA283_0==COMMA) ) {
                        alt283=1;
                    }
                    switch (alt283) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10494);
                            aggregationFilterExpr710=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr710.getTree());
                            }
                            break;
                    }
                    RPAREN711=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10497); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV712=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc10503); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV712_tree = (CommonTree)adaptor.create(STDDEV712);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV712_tree, root_0);
                    }
                    LPAREN713=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10506); if (state.failed) return retval;
                    int alt284=3;
                    int LA284_0 = input.LA(1);
                    if ( (LA284_0==ALL) ) {
                        alt284=1;
                    }
                    else if ( (LA284_0==DISTINCT) ) {
                        alt284=2;
                    }
                    switch (alt284) {
                        case 1 :
                            {
                            ALL714=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10510); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT715=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10515); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT715_tree = (CommonTree)adaptor.create(DISTINCT715);
                            adaptor.addChild(root_0, DISTINCT715_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10519);
                    expression716=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression716.getTree());
                    int alt285=2;
                    int LA285_0 = input.LA(1);
                    if ( (LA285_0==COMMA) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10521);
                            aggregationFilterExpr717=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr717.getTree());
                            }
                            break;
                    }
                    RPAREN718=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10524); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV719=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc10530); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV719_tree = (CommonTree)adaptor.create(AVEDEV719);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV719_tree, root_0);
                    }
                    LPAREN720=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10533); if (state.failed) return retval;
                    int alt286=3;
                    int LA286_0 = input.LA(1);
                    if ( (LA286_0==ALL) ) {
                        alt286=1;
                    }
                    else if ( (LA286_0==DISTINCT) ) {
                        alt286=2;
                    }
                    switch (alt286) {
                        case 1 :
                            {
                            ALL721=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10537); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT722=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10542); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT722_tree = (CommonTree)adaptor.create(DISTINCT722);
                            adaptor.addChild(root_0, DISTINCT722_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10546);
                    expression723=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression723.getTree());
                    int alt287=2;
                    int LA287_0 = input.LA(1);
                    if ( (LA287_0==COMMA) ) {
                        alt287=1;
                    }
                    switch (alt287) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10548);
                            aggregationFilterExpr724=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr724.getTree());
                            }
                            break;
                    }
                    RPAREN725=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10551); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc10557);
                    firstAggregation726=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation726.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc10562);
                    lastAggregation727=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation727.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc10567);
                    windowAggregation728=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation728.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE729=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc10572); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE729_tree = (CommonTree)adaptor.create(COALESCE729);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE729_tree, root_0);
                    }
                    LPAREN730=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10575); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10578);
                    expression731=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression731.getTree());
                    COMMA732=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10580); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10583);
                    expression733=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression733.getTree());
                    loop288:
                    do {
                        int alt288=2;
                        int LA288_0 = input.LA(1);
                        if ( (LA288_0==COMMA) ) {
                            alt288=1;
                        }
                        switch (alt288) {
                    	case 1 :
                    	    {
                    	    COMMA734=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10586); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc10589);
                    	    expression735=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression735.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop288;
                        }
                    } while (true);
                    RPAREN736=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10593); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    PREVIOUS737=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc10599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUS.add(PREVIOUS737);
                    LPAREN738=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10601); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN738);
                    pushFollow(FOLLOW_expression_in_builtinFunc10603);
                    expression739=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression739.getTree());
                    int alt289=2;
                    int LA289_0 = input.LA(1);
                    if ( (LA289_0==COMMA) ) {
                        alt289=1;
                    }
                    switch (alt289) {
                        case 1 :
                            {
                            COMMA740=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10606); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA740);
                            pushFollow(FOLLOW_expression_in_builtinFunc10608);
                            expression741=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression741.getTree());
                            }
                            break;
                    }
                    RPAREN742=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10612); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN742);
                    int alt291=2;
                    int LA291_0 = input.LA(1);
                    if ( (LA291_0==DOT) ) {
                        alt291=1;
                    }
                    switch (alt291) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10617); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10619);
                            libFunctionNoClass743=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass743.getTree());
                            loop290:
                            do {
                                int alt290=2;
                                int LA290_0 = input.LA(1);
                                if ( (LA290_0==DOT) ) {
                                    alt290=1;
                                }
                                switch (alt290) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10624); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10626);
                            	    libFunctionNoClass744=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass744.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop290;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    {
                    PREVIOUSTAIL745=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc10673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSTAIL.add(PREVIOUSTAIL745);
                    LPAREN746=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10675); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN746);
                    pushFollow(FOLLOW_expression_in_builtinFunc10677);
                    expression747=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression747.getTree());
                    int alt292=2;
                    int LA292_0 = input.LA(1);
                    if ( (LA292_0==COMMA) ) {
                        alt292=1;
                    }
                    switch (alt292) {
                        case 1 :
                            {
                            COMMA748=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10680); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA748);
                            pushFollow(FOLLOW_expression_in_builtinFunc10682);
                            expression749=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression749.getTree());
                            }
                            break;
                    }
                    RPAREN750=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10686); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN750);
                    int alt294=2;
                    int LA294_0 = input.LA(1);
                    if ( (LA294_0==DOT) ) {
                        alt294=1;
                    }
                    switch (alt294) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10691); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10693);
                            libFunctionNoClass751=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass751.getTree());
                            loop293:
                            do {
                                int alt293=2;
                                int LA293_0 = input.LA(1);
                                if ( (LA293_0==DOT) ) {
                                    alt293=1;
                                }
                                switch (alt293) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10698); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10700);
                            	    libFunctionNoClass752=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass752.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop293;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT753=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc10747); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT753_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT753);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT753_tree, root_0);
                    }
                    LPAREN754=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10750); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10753);
                    expression755=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression755.getTree());
                    RPAREN756=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10755); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    PREVIOUSWINDOW757=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc10761); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSWINDOW.add(PREVIOUSWINDOW757);
                    LPAREN758=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN758);
                    pushFollow(FOLLOW_expression_in_builtinFunc10765);
                    expression759=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression759.getTree());
                    RPAREN760=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10767); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN760);
                    int alt296=2;
                    int LA296_0 = input.LA(1);
                    if ( (LA296_0==DOT) ) {
                        alt296=1;
                    }
                    switch (alt296) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10772); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10774);
                            libFunctionNoClass761=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass761.getTree());
                            loop295:
                            do {
                                int alt295=2;
                                int LA295_0 = input.LA(1);
                                if ( (LA295_0==DOT) ) {
                                    alt295=1;
                                }
                                switch (alt295) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10779); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10781);
                            	    libFunctionNoClass762=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass762.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop295;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR763=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc10826); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR763_tree = (CommonTree)adaptor.create(PRIOR763);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR763_tree, root_0);
                    }
                    LPAREN764=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10829); if (state.failed) return retval;
                    NUM_INT765=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc10832); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT765_tree = (CommonTree)adaptor.create(NUM_INT765);
                    adaptor.addChild(root_0, NUM_INT765_tree);
                    }
                    COMMA766=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10834); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc10837);
                    eventProperty767=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty767.getTree());
                    RPAREN768=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10839); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF769=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc10849); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF769_tree = (CommonTree)adaptor.create(INSTANCEOF769);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF769_tree, root_0);
                    }
                    LPAREN770=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10852); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10855);
                    expression771=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression771.getTree());
                    COMMA772=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10857); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc10860);
                    classIdentifier773=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier773.getTree());
                    loop297:
                    do {
                        int alt297=2;
                        int LA297_0 = input.LA(1);
                        if ( (LA297_0==COMMA) ) {
                            alt297=1;
                        }
                        switch (alt297) {
                    	case 1 :
                    	    {
                    	    COMMA774=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10863); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc10866);
                    	    classIdentifier775=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier775.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop297;
                        }
                    } while (true);
                    RPAREN776=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10870); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF777=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc10876); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF777_tree = (CommonTree)adaptor.create(TYPEOF777);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF777_tree, root_0);
                    }
                    LPAREN778=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10879); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10882);
                    expression779=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression779.getTree());
                    RPAREN780=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10884); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    CAST781=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc10890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CAST.add(CAST781);
                    LPAREN782=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN782);
                    pushFollow(FOLLOW_expression_in_builtinFunc10894);
                    expression783=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression783.getTree());
                    int alt298=2;
                    int LA298_0 = input.LA(1);
                    if ( (LA298_0==COMMA) ) {
                        alt298=1;
                    }
                    else if ( (LA298_0==AS) ) {
                        alt298=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 298, 0, input);
                        throw nvae;
                    }
                    switch (alt298) {
                        case 1 :
                            {
                            COMMA784=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10897); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA784);
                            }
                            break;
                        case 2 :
                            {
                            AS785=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc10901); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS785);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc10904);
                    classIdentifier786=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier786.getTree());
                    RPAREN787=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN787);
                    int alt300=2;
                    int LA300_0 = input.LA(1);
                    if ( (LA300_0==DOT) ) {
                        alt300=1;
                    }
                    switch (alt300) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10911); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10913);
                            libFunctionNoClass788=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass788.getTree());
                            loop299:
                            do {
                                int alt299=2;
                                int LA299_0 = input.LA(1);
                                if ( (LA299_0==DOT) ) {
                                    alt299=1;
                                }
                                switch (alt299) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10918); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10920);
                            	    libFunctionNoClass789=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass789.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop299;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_2, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS790=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc10965); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS790_tree = (CommonTree)adaptor.create(EXISTS790);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS790_tree, root_0);
                    }
                    LPAREN791=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10968); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc10971);
                    eventProperty792=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty792.getTree());
                    RPAREN793=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10973); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    CURRENT_TIMESTAMP794=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc10979); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURRENT_TIMESTAMP.add(CURRENT_TIMESTAMP794);
                    int alt301=2;
                    int LA301_0 = input.LA(1);
                    if ( (LA301_0==LPAREN) ) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            {
                            LPAREN795=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10982); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN795);
                            RPAREN796=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10984); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN796);
                            }
                            break;
                    }
                    int alt303=2;
                    int LA303_0 = input.LA(1);
                    if ( (LA303_0==DOT) ) {
                        alt303=1;
                    }
                    switch (alt303) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10991); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10993);
                            libFunctionNoClass797=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass797.getTree());
                            loop302:
                            do {
                                int alt302=2;
                                int LA302_0 = input.LA(1);
                                if ( (LA302_0==DOT) ) {
                                    alt302=1;
                                }
                                switch (alt302) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10998); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc11000);
                            	    libFunctionNoClass798=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass798.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop302;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_2);
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ISTREAM799=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_builtinFunc11037); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ISTREAM799_tree = (CommonTree)adaptor.create(ISTREAM799);
                    root_0 = (CommonTree)adaptor.becomeRoot(ISTREAM799_tree, root_0);
                    }
                    LPAREN800=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc11040); if (state.failed) return retval;
                    RPAREN801=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc11043); if (state.failed) return retval;
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token FIRST802=null;
        Token LPAREN803=null;
        Token COMMA805=null;
        Token RPAREN807=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr804 = null;
        EsperEPL2GrammarParser.expression_return expression806 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass808 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass809 = null;
        CommonTree d_tree=null;
        CommonTree FIRST802_tree=null;
        CommonTree LPAREN803_tree=null;
        CommonTree COMMA805_tree=null;
        CommonTree RPAREN807_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            FIRST802=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation11056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST802);
            LPAREN803=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation11058); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN803);
            int alt306=2;
            int LA306_0 = input.LA(1);
            if ( (LA306_0==WINDOW||LA306_0==BETWEEN||LA306_0==ESCAPE||(LA306_0>=NOT_EXPR && LA306_0<=EVERY_EXPR)||LA306_0==WHERE||(LA306_0>=SUM && LA306_0<=COUNT)||LA306_0==CASE||LA306_0==OUTER||(LA306_0>=JOIN && LA306_0<=FULL)||(LA306_0>=EVENTS && LA306_0<=LAST)||LA306_0==ISTREAM||(LA306_0>=UNIDIRECTIONAL && LA306_0<=CURRENT_TIMESTAMP)||(LA306_0>=SNAPSHOT && LA306_0<=INDEX)||(LA306_0>=BOOLEAN_TRUE && LA306_0<=VALUE_NULL)||(LA306_0>=DEFINE && LA306_0<=MATCHED)||LA306_0==NEWKW||LA306_0==CONTEXT||LA306_0==NUM_DOUBLE||(LA306_0>=IDENT && LA306_0<=LPAREN)||LA306_0==LCURLY||LA306_0==STAR||LA306_0==QUESTION||(LA306_0>=PLUS && LA306_0<=QUOTED_STRING_LITERAL)||LA306_0==MINUS||LA306_0==NUM_INT||(LA306_0>=TICKED_STRING_LITERAL && LA306_0<=NUM_FLOAT)) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_firstAggregation11061);
                    accessAggExpr804=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr804.getTree());
                    int alt305=2;
                    int LA305_0 = input.LA(1);
                    if ( (LA305_0==COMMA) ) {
                        alt305=1;
                    }
                    switch (alt305) {
                        case 1 :
                            {
                            COMMA805=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation11064); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA805);
                            pushFollow(FOLLOW_expression_in_firstAggregation11066);
                            expression806=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression806.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN807=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation11072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN807);
            int alt308=2;
            int LA308_0 = input.LA(1);
            if ( (LA308_0==DOT) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation11077); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation11079);
                    libFunctionNoClass808=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass808.getTree());
                    loop307:
                    do {
                        int alt307=2;
                        int LA307_0 = input.LA(1);
                        if ( (LA307_0==DOT) ) {
                            alt307=1;
                        }
                        switch (alt307) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation11084); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation11086);
                    	    libFunctionNoClass809=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass809.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop307;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LAST810=null;
        Token LPAREN811=null;
        Token COMMA813=null;
        Token RPAREN815=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr812 = null;
        EsperEPL2GrammarParser.expression_return expression814 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass816 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass817 = null;
        CommonTree d_tree=null;
        CommonTree LAST810_tree=null;
        CommonTree LPAREN811_tree=null;
        CommonTree COMMA813_tree=null;
        CommonTree RPAREN815_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LAST810=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation11141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST810);
            LPAREN811=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation11143); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN811);
            int alt310=2;
            int LA310_0 = input.LA(1);
            if ( (LA310_0==WINDOW||LA310_0==BETWEEN||LA310_0==ESCAPE||(LA310_0>=NOT_EXPR && LA310_0<=EVERY_EXPR)||LA310_0==WHERE||(LA310_0>=SUM && LA310_0<=COUNT)||LA310_0==CASE||LA310_0==OUTER||(LA310_0>=JOIN && LA310_0<=FULL)||(LA310_0>=EVENTS && LA310_0<=LAST)||LA310_0==ISTREAM||(LA310_0>=UNIDIRECTIONAL && LA310_0<=CURRENT_TIMESTAMP)||(LA310_0>=SNAPSHOT && LA310_0<=INDEX)||(LA310_0>=BOOLEAN_TRUE && LA310_0<=VALUE_NULL)||(LA310_0>=DEFINE && LA310_0<=MATCHED)||LA310_0==NEWKW||LA310_0==CONTEXT||LA310_0==NUM_DOUBLE||(LA310_0>=IDENT && LA310_0<=LPAREN)||LA310_0==LCURLY||LA310_0==STAR||LA310_0==QUESTION||(LA310_0>=PLUS && LA310_0<=QUOTED_STRING_LITERAL)||LA310_0==MINUS||LA310_0==NUM_INT||(LA310_0>=TICKED_STRING_LITERAL && LA310_0<=NUM_FLOAT)) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_lastAggregation11146);
                    accessAggExpr812=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr812.getTree());
                    int alt309=2;
                    int LA309_0 = input.LA(1);
                    if ( (LA309_0==COMMA) ) {
                        alt309=1;
                    }
                    switch (alt309) {
                        case 1 :
                            {
                            COMMA813=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation11149); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA813);
                            pushFollow(FOLLOW_expression_in_lastAggregation11151);
                            expression814=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression814.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN815=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation11157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN815);
            int alt312=2;
            int LA312_0 = input.LA(1);
            if ( (LA312_0==DOT) ) {
                alt312=1;
            }
            switch (alt312) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation11162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation11164);
                    libFunctionNoClass816=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass816.getTree());
                    loop311:
                    do {
                        int alt311=2;
                        int LA311_0 = input.LA(1);
                        if ( (LA311_0==DOT) ) {
                            alt311=1;
                        }
                        switch (alt311) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation11169); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation11171);
                    	    libFunctionNoClass817=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass817.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop311;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token WINDOW818=null;
        Token LPAREN819=null;
        Token RPAREN821=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr820 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass822 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass823 = null;
        CommonTree d_tree=null;
        CommonTree WINDOW818_tree=null;
        CommonTree LPAREN819_tree=null;
        CommonTree RPAREN821_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            WINDOW818=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation11227); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW818);
            LPAREN819=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation11229); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN819);
            int alt313=2;
            int LA313_0 = input.LA(1);
            if ( (LA313_0==WINDOW||LA313_0==BETWEEN||LA313_0==ESCAPE||(LA313_0>=NOT_EXPR && LA313_0<=EVERY_EXPR)||LA313_0==WHERE||(LA313_0>=SUM && LA313_0<=COUNT)||LA313_0==CASE||LA313_0==OUTER||(LA313_0>=JOIN && LA313_0<=FULL)||(LA313_0>=EVENTS && LA313_0<=LAST)||LA313_0==ISTREAM||(LA313_0>=UNIDIRECTIONAL && LA313_0<=CURRENT_TIMESTAMP)||(LA313_0>=SNAPSHOT && LA313_0<=INDEX)||(LA313_0>=BOOLEAN_TRUE && LA313_0<=VALUE_NULL)||(LA313_0>=DEFINE && LA313_0<=MATCHED)||LA313_0==NEWKW||LA313_0==CONTEXT||LA313_0==NUM_DOUBLE||(LA313_0>=IDENT && LA313_0<=LPAREN)||LA313_0==LCURLY||LA313_0==STAR||LA313_0==QUESTION||(LA313_0>=PLUS && LA313_0<=QUOTED_STRING_LITERAL)||LA313_0==MINUS||LA313_0==NUM_INT||(LA313_0>=TICKED_STRING_LITERAL && LA313_0<=NUM_FLOAT)) ) {
                alt313=1;
            }
            switch (alt313) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_windowAggregation11231);
                    accessAggExpr820=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr820.getTree());
                    }
                    break;
            }
            RPAREN821=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation11234); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN821);
            int alt315=2;
            int LA315_0 = input.LA(1);
            if ( (LA315_0==DOT) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation11239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation11241);
                    libFunctionNoClass822=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass822.getTree());
                    loop314:
                    do {
                        int alt314=2;
                        int LA314_0 = input.LA(1);
                        if ( (LA314_0==DOT) ) {
                            alt314=1;
                        }
                        switch (alt314) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation11246); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation11248);
                    	    libFunctionNoClass823=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass823.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop314;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector824 = null;
        EsperEPL2GrammarParser.expression_return expression825 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyStreamSelector=new RewriteRuleSubtreeStream(adaptor,"rule propertyStreamSelector");
        try {
            int alt316=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt316=1;
                }
                break;
            case IDENT:
                {
                int LA316_2 = input.LA(2);
                if ( (LA316_2==DOT) ) {
                    int LA316_78 = input.LA(3);
                    if ( (LA316_78==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt316=2;
                    }
                    else if ( (LA316_78==WINDOW||LA316_78==BETWEEN||LA316_78==ESCAPE||LA316_78==EVERY_EXPR||LA316_78==WHERE||(LA316_78>=SUM && LA316_78<=COUNT)||LA316_78==OUTER||(LA316_78>=JOIN && LA316_78<=FULL)||(LA316_78>=EVENTS && LA316_78<=LAST)||(LA316_78>=UNIDIRECTIONAL && LA316_78<=PREVIOUSTAIL)||LA316_78==PRIOR||(LA316_78>=WEEKDAY && LA316_78<=CAST)||(LA316_78>=SNAPSHOT && LA316_78<=INDEX)||(LA316_78>=DEFINE && LA316_78<=MATCHED)||LA316_78==CONTEXT||LA316_78==IDENT||LA316_78==TICKED_STRING_LITERAL) ) {
                        alt316=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 316, 78, input);
                        throw nvae;
                    }
                }
                else if ( ((LA316_2>=IN_SET && LA316_2<=REGEXP)||(LA316_2>=OR_EXPR && LA316_2<=NOT_EXPR)||LA316_2==IS||LA316_2==LBRACK||(LA316_2>=LPAREN && LA316_2<=RPAREN)||LA316_2==COMMA||(LA316_2>=EQUALS && LA316_2<=STAR)||(LA316_2>=LT && LA316_2<=PLUS)||(LA316_2>=BAND && LA316_2<=MOD)||LA316_2==ESCAPECHAR) ) {
                    alt316=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 316, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case ISTREAM:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case QUESTION:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt316=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 316, 0, input);
                throw nvae;
            }
            switch (alt316) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr11305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr11325);
                    propertyStreamSelector824=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyStreamSelector.add(propertyStreamSelector824.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_propertyStreamSelector.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_accessAggExpr11338);
                    expression825=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression825.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class aggregationFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.aggregationFilterExpr_return retval = new EsperEPL2GrammarParser.aggregationFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA826=null;
        EsperEPL2GrammarParser.expression_return expression827 = null;
        CommonTree COMMA826_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            COMMA826=(Token)match(input,COMMA,FOLLOW_COMMA_in_aggregationFilterExpr11357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA826);
            pushFollow(FOLLOW_expression_in_aggregationFilterExpr11359);
            expression827=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression827.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGG_FILTER_EXPR, "AGG_FILTER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty828 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction829 = null;
        try {
            int alt317=2;
            alt317 = dfa317.predict(input);
            switch (alt317) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction11387);
                    eventProperty828=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty828.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction11392);
                    libFunction829=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction829.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT831=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass830 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass832 = null;
        CommonTree DOT831_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction11404);
            libFunctionWithClass830=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass830.getTree());
            loop318:
            do {
                int alt318=2;
                int LA318_0 = input.LA(1);
                if ( (LA318_0==DOT) ) {
                    alt318=1;
                }
                switch (alt318) {
            	case 1 :
            	    {
            	    DOT831=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction11407); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT831);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction11409);
            	    libFunctionNoClass832=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass832.getTree());
            	    }
            	    break;
            	default :
            	    break loop318;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token DOT834=null;
        Token RPAREN837=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy833 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent835 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs836 = null;
        CommonTree l_tree=null;
        CommonTree DOT834_tree=null;
        CommonTree RPAREN837_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt319=2;
            switch ( input.LA(1) ) {
                case IDENT:
                    {
                    int LA319_1 = input.LA(2);
                    if ( (LA319_1==DOT) ) {
                        alt319=1;
                    }
                    }
                    break;
                case EVENTS:
                    {
                    alt319=1;
                    }
                    break;
                case TICKED_STRING_LITERAL:
                    {
                    int LA319_3 = input.LA(2);
                    if ( (LA319_3==DOT) ) {
                        alt319=1;
                    }
                    }
                    break;
            }
            switch (alt319) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass11442);
                    classIdentifierNonGreedy833=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy833.getTree());
                    DOT834=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass11444); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT834);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass11448);
            funcIdent835=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent835.getTree());
            l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass11452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(l);
            int alt320=2;
            int LA320_0 = input.LA(1);
            if ( (LA320_0==WINDOW||LA320_0==BETWEEN||LA320_0==ESCAPE||(LA320_0>=NOT_EXPR && LA320_0<=EVERY_EXPR)||LA320_0==WHERE||(LA320_0>=SUM && LA320_0<=COUNT)||LA320_0==CASE||LA320_0==OUTER||(LA320_0>=JOIN && LA320_0<=FULL)||(LA320_0>=DISTINCT && LA320_0<=ALL)||(LA320_0>=EVENTS && LA320_0<=LAST)||LA320_0==ISTREAM||(LA320_0>=UNIDIRECTIONAL && LA320_0<=CURRENT_TIMESTAMP)||(LA320_0>=SNAPSHOT && LA320_0<=INDEX)||(LA320_0>=BOOLEAN_TRUE && LA320_0<=VALUE_NULL)||(LA320_0>=DEFINE && LA320_0<=MATCHED)||LA320_0==NEWKW||LA320_0==CONTEXT||LA320_0==NUM_DOUBLE||LA320_0==LBRACK||(LA320_0>=IDENT && LA320_0<=LPAREN)||LA320_0==LCURLY||LA320_0==STAR||LA320_0==QUESTION||(LA320_0>=PLUS && LA320_0<=QUOTED_STRING_LITERAL)||LA320_0==MINUS||LA320_0==NUM_INT||(LA320_0>=TICKED_STRING_LITERAL && LA320_0<=NUM_FLOAT)) ) {
                alt320=1;
            }
            switch (alt320) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass11455);
                    libFunctionArgs836=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs836.getTree());
                    }
                    break;
            }
            RPAREN837=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass11459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN837);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token RPAREN840=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent838 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs839 = null;
        CommonTree l_tree=null;
        CommonTree RPAREN840_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass11492);
            funcIdent838=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent838.getTree());
            int alt322=2;
            int LA322_0 = input.LA(1);
            if ( (LA322_0==LPAREN) ) {
                alt322=1;
            }
            switch (alt322) {
                case 1 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass11497); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    int alt321=2;
                    int LA321_0 = input.LA(1);
                    if ( (LA321_0==WINDOW||LA321_0==BETWEEN||LA321_0==ESCAPE||(LA321_0>=NOT_EXPR && LA321_0<=EVERY_EXPR)||LA321_0==WHERE||(LA321_0>=SUM && LA321_0<=COUNT)||LA321_0==CASE||LA321_0==OUTER||(LA321_0>=JOIN && LA321_0<=FULL)||(LA321_0>=DISTINCT && LA321_0<=ALL)||(LA321_0>=EVENTS && LA321_0<=LAST)||LA321_0==ISTREAM||(LA321_0>=UNIDIRECTIONAL && LA321_0<=CURRENT_TIMESTAMP)||(LA321_0>=SNAPSHOT && LA321_0<=INDEX)||(LA321_0>=BOOLEAN_TRUE && LA321_0<=VALUE_NULL)||(LA321_0>=DEFINE && LA321_0<=MATCHED)||LA321_0==NEWKW||LA321_0==CONTEXT||LA321_0==NUM_DOUBLE||LA321_0==LBRACK||(LA321_0>=IDENT && LA321_0<=LPAREN)||LA321_0==LCURLY||LA321_0==STAR||LA321_0==QUESTION||(LA321_0>=PLUS && LA321_0<=QUOTED_STRING_LITERAL)||LA321_0==MINUS||LA321_0==NUM_INT||(LA321_0>=TICKED_STRING_LITERAL && LA321_0<=NUM_FLOAT)) ) {
                        alt321=1;
                    }
                    switch (alt321) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass11500);
                            libFunctionArgs839=libFunctionArgs();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs839.getTree());
                            }
                            break;
                    }
                    RPAREN840=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass11504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN840);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        Token w=null;
        Token s=null;
        Token after=null;
        Token between=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent841 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree w_tree=null;
        CommonTree s_tree=null;
        CommonTree after_tree=null;
        CommonTree between_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        try {
            int alt323=7;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt323=1;
                }
                break;
            case MAX:
                {
                alt323=2;
                }
                break;
            case MIN:
                {
                alt323=3;
                }
                break;
            case WHERE:
                {
                alt323=4;
                }
                break;
            case SET:
                {
                alt323=5;
                }
                break;
            case AFTER:
                {
                alt323=6;
                }
                break;
            case BETWEEN:
                {
                alt323=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 323, 0, input);
                throw nvae;
            }
            switch (alt323) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent11536);
                    escapableIdent841=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent841.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent11543); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent11555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_funcIdent11567); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, w));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,SET,FOLLOW_SET_in_funcIdent11579); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    {
                    after=(Token)match(input,AFTER,FOLLOW_AFTER_in_funcIdent11591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(after);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, after));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    {
                    between=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_funcIdent11602); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BETWEEN.add(between);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, between));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL842=null;
        Token DISTINCT843=null;
        Token COMMA845=null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem844 = null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem846 = null;
        CommonTree ALL842_tree=null;
        CommonTree DISTINCT843_tree=null;
        CommonTree COMMA845_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt324=3;
            int LA324_0 = input.LA(1);
            if ( (LA324_0==ALL) ) {
                alt324=1;
            }
            else if ( (LA324_0==DISTINCT) ) {
                alt324=2;
            }
            switch (alt324) {
                case 1 :
                    {
                    ALL842=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs11619); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT843=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs11624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT843_tree = (CommonTree)adaptor.create(DISTINCT843);
                    adaptor.addChild(root_0, DISTINCT843_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs11628);
            libFunctionArgItem844=libFunctionArgItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem844.getTree());
            loop325:
            do {
                int alt325=2;
                int LA325_0 = input.LA(1);
                if ( (LA325_0==COMMA) ) {
                    alt325=1;
                }
                switch (alt325) {
            	case 1 :
            	    {
            	    COMMA845=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs11631); if (state.failed) return retval;
            	    pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs11634);
            	    libFunctionArgItem846=libFunctionArgItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem846.getTree());
            	    }
            	    break;
            	default :
            	    break loop325;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgItem_return retval = new EsperEPL2GrammarParser.libFunctionArgItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl847 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime848 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt326=2;
            int LA326_0 = input.LA(1);
            if ( (LA326_0==IDENT) ) {
                int LA326_1 = input.LA(2);
                if ( (LA326_1==GOES) ) {
                    alt326=1;
                }
            }
            else if ( (LA326_0==LPAREN) ) {
                int LA326_2 = input.LA(2);
                if ( (LA326_2==IDENT) ) {
                    int LA326_150 = input.LA(3);
                    if ( (LA326_150==COMMA) ) {
                        alt326=1;
                    }
                    else if ( (LA326_150==RPAREN) ) {
                        int LA326_214 = input.LA(4);
                        if ( (LA326_214==GOES) ) {
                            alt326=1;
                        }
                    }
                }
            }
            switch (alt326) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_libFunctionArgItem11648);
                    expressionLambdaDecl847=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionLambdaDecl847.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionWithTime_in_libFunctionArgItem11651);
            expressionWithTime848=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime848.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR850=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr849 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr851 = null;
        CommonTree AND_EXPR850_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList11662);
            concatenationExpr849=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr849.getTree());
            AND_EXPR850=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList11664); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList11667);
            concatenationExpr851=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr851.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression852 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression11695);
            followedByExpression852=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression852.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression853 = null;
        EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat854 = null;
        RewriteRuleSubtreeStream stream_followedByRepeat=new RewriteRuleSubtreeStream(adaptor,"rule followedByRepeat");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
         boolean fb = false; 
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression11714);
            orExpression853=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression853.getTree());
            loop327:
            do {
                int alt327=2;
                int LA327_0 = input.LA(1);
                if ( (LA327_0==FOLLOWED_BY||LA327_0==FOLLOWMAX_BEGIN) ) {
                    alt327=1;
                }
                switch (alt327) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_followedByRepeat_in_followedByExpression11717);
            	    followedByRepeat854=followedByRepeat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_followedByRepeat.add(followedByRepeat854.getTree());
            	    if ( state.backtracking==0 ) {
            	       fb = true; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop327;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (fb == true) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_2);
                adaptor.addChild(root_2, stream_orExpression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_followedByRepeat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_followedByRepeat.hasNext() ) {
                    adaptor.addChild(root_1, stream_followedByRepeat.nextTree());
                }
                stream_followedByRepeat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByRepeat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat() throws RecognitionException {
        EsperEPL2GrammarParser.followedByRepeat_return retval = new EsperEPL2GrammarParser.followedByRepeat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token g=null;
        Token FOLLOWMAX_END856=null;
        EsperEPL2GrammarParser.expression_return expression855 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression857 = null;
        CommonTree f_tree=null;
        CommonTree g_tree=null;
        CommonTree FOLLOWMAX_END856_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleTokenStream stream_FOLLOWMAX_END=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_END");
        RewriteRuleTokenStream stream_FOLLOWMAX_BEGIN=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_BEGIN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            int alt328=2;
            int LA328_0 = input.LA(1);
            if ( (LA328_0==FOLLOWED_BY) ) {
                alt328=1;
            }
            else if ( (LA328_0==FOLLOWMAX_BEGIN) ) {
                alt328=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 328, 0, input);
                throw nvae;
            }
            switch (alt328) {
                case 1 :
                    {
                    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByRepeat11770); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
                    }
                    break;
                case 2 :
                    {
                    {
                    g=(Token)match(input,FOLLOWMAX_BEGIN,FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat11777); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_BEGIN.add(g);
                    pushFollow(FOLLOW_expression_in_followedByRepeat11779);
                    expression855=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression855.getTree());
                    FOLLOWMAX_END856=(Token)match(input,FOLLOWMAX_END,FOLLOW_FOLLOWMAX_END_in_followedByRepeat11781); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_END.add(FOLLOWMAX_END856);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_orExpression_in_followedByRepeat11785);
            orExpression857=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression857.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_orExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression858 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression859 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression11814);
            andExpression858=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression858.getTree());
            loop329:
            do {
                int alt329=2;
                int LA329_0 = input.LA(1);
                if ( (LA329_0==OR_EXPR) ) {
                    alt329=1;
                }
                switch (alt329) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression11819); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression11821);
            	    andExpression859=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression859.getTree());
            	    }
            	    break;
            	default :
            	    break loop329;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression860 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression861 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression11853);
            matchUntilExpression860=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression860.getTree());
            loop330:
            do {
                int alt330=2;
                int LA330_0 = input.LA(1);
                if ( (LA330_0==AND_EXPR) ) {
                    alt330=1;
                }
                switch (alt330) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression11858); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression11860);
            	    matchUntilExpression861=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression861.getTree());
            	    }
            	    break;
            	default :
            	    break loop330;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression862 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression863 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt331=2;
            int LA331_0 = input.LA(1);
            if ( (LA331_0==LBRACK) ) {
                alt331=1;
            }
            switch (alt331) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression11895);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression11899);
            qualifyExpression862=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression862.getTree());
            int alt332=2;
            int LA332_0 = input.LA(1);
            if ( (LA332_0==UNTIL) ) {
                alt332=1;
            }
            switch (alt332) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression11904); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression11906);
                    qualifyExpression863=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression863.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList864 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix865 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt335=2;
            int LA335_0 = input.LA(1);
            if ( ((LA335_0>=NOT_EXPR && LA335_0<=EVERY_DISTINCT_EXPR)) ) {
                alt335=1;
            }
            switch (alt335) {
                case 1 :
                    {
                    int alt333=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt333=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt333=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt333=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 333, 0, input);
                        throw nvae;
                    }
                    switch (alt333) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression11971); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression11977); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression11983); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression11985);
                            distinctExpressionList864=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList864.getTree());
                            }
                            break;
                    }
                    int alt334=2;
                    int LA334_0 = input.LA(1);
                    if ( (LA334_0==LBRACK) ) {
                        alt334=1;
                    }
                    switch (alt334) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression11991);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression12000);
            guardPostFix865=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix865.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN866=null;
        Token COMMA868=null;
        Token RPAREN870=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom867 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom869 = null;
        CommonTree LPAREN866_tree=null;
        CommonTree COMMA868_tree=null;
        CommonTree RPAREN870_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN866=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList12115); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN866);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList12117);
            distinctExpressionAtom867=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom867.getTree());
            loop336:
            do {
                int alt336=2;
                int LA336_0 = input.LA(1);
                if ( (LA336_0==COMMA) ) {
                    alt336=1;
                }
                switch (alt336) {
            	case 1 :
            	    {
            	    COMMA868=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList12120); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA868);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList12122);
            	    distinctExpressionAtom869=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom869.getTree());
            	    }
            	    break;
            	default :
            	    break loop336;
                }
            } while (true);
            RPAREN870=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList12126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN870);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime871 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_distinctExpressionAtom12149);
            expressionWithTime871=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime871.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN874=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression872 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression873 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression875 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression876 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN874_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt337=2;
            int LA337_0 = input.LA(1);
            if ( (LA337_0==EVENTS||LA337_0==IDENT||LA337_0==TICKED_STRING_LITERAL) ) {
                alt337=1;
            }
            else if ( (LA337_0==LPAREN) ) {
                alt337=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 337, 0, input);
                throw nvae;
            }
            switch (alt337) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix12164);
                    atomicExpression872=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression872.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix12170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix12172);
                    patternExpression873=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression873.getTree());
                    RPAREN874=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix12174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN874);
                    }
                    break;
            }
            int alt338=3;
            int LA338_0 = input.LA(1);
            if ( (LA338_0==WHERE) ) {
                alt338=1;
            }
            else if ( (LA338_0==WHILE) ) {
                alt338=2;
            }
            switch (alt338) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix12181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix12183);
                    guardWhereExpression875=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression875.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix12191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix12193);
                    guardWhileExpression876=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression876.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression877 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression878 = null;
        try {
            int alt339=2;
            int LA339_0 = input.LA(1);
            if ( (LA339_0==IDENT) ) {
                int LA339_1 = input.LA(2);
                if ( (LA339_1==COLON) ) {
                    alt339=1;
                }
                else if ( (LA339_1==EOF||(LA339_1>=OR_EXPR && LA339_1<=AND_EXPR)||LA339_1==WHERE||LA339_1==UNTIL||LA339_1==WHILE||(LA339_1>=LBRACK && LA339_1<=RBRACK)||(LA339_1>=LPAREN && LA339_1<=RPAREN)||LA339_1==ATCHAR||(LA339_1>=DOT && LA339_1<=EQUALS)||LA339_1==FOLLOWED_BY||LA339_1==FOLLOWMAX_BEGIN) ) {
                    alt339=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 339, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA339_0==EVENTS||LA339_0==TICKED_STRING_LITERAL) ) {
                alt339=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 339, 0, input);
                throw nvae;
            }
            switch (alt339) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression12255);
                    observerExpression877=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression877.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression12259);
                    patternFilterExpression878=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression878.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON879=null;
        Token LPAREN880=null;
        Token RPAREN882=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList881 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON879_tree=null;
        CommonTree LPAREN880_tree=null;
        CommonTree RPAREN882_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression12274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON879=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression12276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON879);
            int alt340=2;
            int LA340_0 = input.LA(1);
            if ( (LA340_0==IDENT) ) {
                alt340=1;
            }
            else if ( (LA340_0==AT) ) {
                alt340=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 340, 0, input);
                throw nvae;
            }
            switch (alt340) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression12281); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression12287); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN880=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression12290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN880);
            int alt341=2;
            int LA341_0 = input.LA(1);
            if ( (LA341_0==WINDOW||LA341_0==BETWEEN||LA341_0==ESCAPE||(LA341_0>=NOT_EXPR && LA341_0<=EVERY_EXPR)||LA341_0==WHERE||(LA341_0>=SUM && LA341_0<=COUNT)||LA341_0==CASE||LA341_0==OUTER||(LA341_0>=JOIN && LA341_0<=FULL)||(LA341_0>=EVENTS && LA341_0<=LAST)||LA341_0==ISTREAM||(LA341_0>=UNIDIRECTIONAL && LA341_0<=CURRENT_TIMESTAMP)||(LA341_0>=SNAPSHOT && LA341_0<=INDEX)||(LA341_0>=BOOLEAN_TRUE && LA341_0<=VALUE_NULL)||(LA341_0>=DEFINE && LA341_0<=MATCHED)||LA341_0==NEWKW||LA341_0==CONTEXT||LA341_0==NUM_DOUBLE||LA341_0==LBRACK||(LA341_0>=IDENT && LA341_0<=LPAREN)||LA341_0==LCURLY||LA341_0==STAR||LA341_0==QUESTION||(LA341_0>=PLUS && LA341_0<=QUOTED_STRING_LITERAL)||LA341_0==MINUS||LA341_0==NUM_INT||(LA341_0>=TICKED_STRING_LITERAL && LA341_0<=NUM_FLOAT)) ) {
                alt341=1;
            }
            switch (alt341) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression12292);
                    expressionWithTimeList881=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList881.getTree());
                    }
                    break;
            }
            RPAREN882=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression12295); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN882);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT883=null;
        Token COLON884=null;
        Token IDENT885=null;
        Token LPAREN886=null;
        Token RPAREN888=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList887 = null;
        CommonTree IDENT883_tree=null;
        CommonTree COLON884_tree=null;
        CommonTree IDENT885_tree=null;
        CommonTree LPAREN886_tree=null;
        CommonTree RPAREN888_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT883=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression12344); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT883_tree = (CommonTree)adaptor.create(IDENT883);
            adaptor.addChild(root_0, IDENT883_tree);
            }
            COLON884=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression12346); if (state.failed) return retval;
            IDENT885=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression12349); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT885_tree = (CommonTree)adaptor.create(IDENT885);
            adaptor.addChild(root_0, IDENT885_tree);
            }
            LPAREN886=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression12351); if (state.failed) return retval;
            int alt342=2;
            int LA342_0 = input.LA(1);
            if ( (LA342_0==WINDOW||LA342_0==BETWEEN||LA342_0==ESCAPE||(LA342_0>=NOT_EXPR && LA342_0<=EVERY_EXPR)||LA342_0==WHERE||(LA342_0>=SUM && LA342_0<=COUNT)||LA342_0==CASE||LA342_0==OUTER||(LA342_0>=JOIN && LA342_0<=FULL)||(LA342_0>=EVENTS && LA342_0<=LAST)||LA342_0==ISTREAM||(LA342_0>=UNIDIRECTIONAL && LA342_0<=CURRENT_TIMESTAMP)||(LA342_0>=SNAPSHOT && LA342_0<=INDEX)||(LA342_0>=BOOLEAN_TRUE && LA342_0<=VALUE_NULL)||(LA342_0>=DEFINE && LA342_0<=MATCHED)||LA342_0==NEWKW||LA342_0==CONTEXT||LA342_0==NUM_DOUBLE||LA342_0==LBRACK||(LA342_0>=IDENT && LA342_0<=LPAREN)||LA342_0==LCURLY||LA342_0==STAR||LA342_0==QUESTION||(LA342_0>=PLUS && LA342_0<=QUOTED_STRING_LITERAL)||LA342_0==MINUS||LA342_0==NUM_INT||(LA342_0>=TICKED_STRING_LITERAL && LA342_0<=NUM_FLOAT)) ) {
                alt342=1;
            }
            switch (alt342) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression12355);
                    expressionWithTimeList887=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList887.getTree());
                    }
                    break;
            }
            RPAREN888=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression12359); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN889=null;
        Token RPAREN891=null;
        EsperEPL2GrammarParser.expression_return expression890 = null;
        CommonTree LPAREN889_tree=null;
        CommonTree RPAREN891_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN889=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression12372); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression12375);
            expression890=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression890.getTree());
            RPAREN891=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression12377); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK892=null;
        Token RBRACK896=null;
        EsperEPL2GrammarParser.expression_return expression893 = null;
        EsperEPL2GrammarParser.expression_return expression894 = null;
        EsperEPL2GrammarParser.expression_return expression895 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK892_tree=null;
        CommonTree RBRACK896_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK892=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange12398); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK892);
            int alt345=2;
            int LA345_0 = input.LA(1);
            if ( (LA345_0==WINDOW||LA345_0==BETWEEN||LA345_0==ESCAPE||(LA345_0>=NOT_EXPR && LA345_0<=EVERY_EXPR)||LA345_0==WHERE||(LA345_0>=SUM && LA345_0<=COUNT)||LA345_0==CASE||LA345_0==OUTER||(LA345_0>=JOIN && LA345_0<=FULL)||(LA345_0>=EVENTS && LA345_0<=LAST)||LA345_0==ISTREAM||(LA345_0>=UNIDIRECTIONAL && LA345_0<=CURRENT_TIMESTAMP)||(LA345_0>=SNAPSHOT && LA345_0<=INDEX)||(LA345_0>=BOOLEAN_TRUE && LA345_0<=VALUE_NULL)||(LA345_0>=DEFINE && LA345_0<=MATCHED)||LA345_0==NEWKW||LA345_0==CONTEXT||LA345_0==NUM_DOUBLE||(LA345_0>=IDENT && LA345_0<=LPAREN)||LA345_0==LCURLY||LA345_0==QUESTION||(LA345_0>=PLUS && LA345_0<=QUOTED_STRING_LITERAL)||LA345_0==MINUS||LA345_0==NUM_INT||(LA345_0>=TICKED_STRING_LITERAL && LA345_0<=NUM_FLOAT)) ) {
                alt345=1;
            }
            else if ( (LA345_0==COLON) ) {
                alt345=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 345, 0, input);
                throw nvae;
            }
            switch (alt345) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange12405);
                    expression893=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression893.getTree());
                    int alt344=2;
                    int LA344_0 = input.LA(1);
                    if ( (LA344_0==COLON) ) {
                        alt344=1;
                    }
                    switch (alt344) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange12410); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt343=2;
                            int LA343_0 = input.LA(1);
                            if ( (LA343_0==WINDOW||LA343_0==BETWEEN||LA343_0==ESCAPE||(LA343_0>=NOT_EXPR && LA343_0<=EVERY_EXPR)||LA343_0==WHERE||(LA343_0>=SUM && LA343_0<=COUNT)||LA343_0==CASE||LA343_0==OUTER||(LA343_0>=JOIN && LA343_0<=FULL)||(LA343_0>=EVENTS && LA343_0<=LAST)||LA343_0==ISTREAM||(LA343_0>=UNIDIRECTIONAL && LA343_0<=CURRENT_TIMESTAMP)||(LA343_0>=SNAPSHOT && LA343_0<=INDEX)||(LA343_0>=BOOLEAN_TRUE && LA343_0<=VALUE_NULL)||(LA343_0>=DEFINE && LA343_0<=MATCHED)||LA343_0==NEWKW||LA343_0==CONTEXT||LA343_0==NUM_DOUBLE||(LA343_0>=IDENT && LA343_0<=LPAREN)||LA343_0==LCURLY||LA343_0==QUESTION||(LA343_0>=PLUS && LA343_0<=QUOTED_STRING_LITERAL)||LA343_0==MINUS||LA343_0==NUM_INT||(LA343_0>=TICKED_STRING_LITERAL && LA343_0<=NUM_FLOAT)) ) {
                                alt343=1;
                            }
                            switch (alt343) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange12413);
                                    expression894=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression894.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange12433); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange12435);
                    expression895=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression895.getTree());
                    }
                    break;
            }
            RBRACK896=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange12446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK896);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS897=null;
        Token LPAREN899=null;
        Token RPAREN901=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier898 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList900 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression902 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS897_tree=null;
        CommonTree LPAREN899_tree=null;
        CommonTree RPAREN901_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt346=2;
            int LA346_0 = input.LA(1);
            if ( (LA346_0==IDENT) ) {
                int LA346_1 = input.LA(2);
                if ( (LA346_1==EQUALS) ) {
                    alt346=1;
                }
            }
            switch (alt346) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression12533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS897=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression12535); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS897);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression12544);
            classIdentifier898=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier898.getTree());
            int alt348=2;
            int LA348_0 = input.LA(1);
            if ( (LA348_0==LPAREN) ) {
                alt348=1;
            }
            switch (alt348) {
                case 1 :
                    {
                    LPAREN899=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression12555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN899);
                    int alt347=2;
                    int LA347_0 = input.LA(1);
                    if ( (LA347_0==WINDOW||LA347_0==BETWEEN||LA347_0==ESCAPE||(LA347_0>=NOT_EXPR && LA347_0<=EVERY_EXPR)||LA347_0==WHERE||(LA347_0>=SUM && LA347_0<=COUNT)||LA347_0==CASE||LA347_0==OUTER||(LA347_0>=JOIN && LA347_0<=FULL)||(LA347_0>=EVENTS && LA347_0<=LAST)||LA347_0==ISTREAM||(LA347_0>=UNIDIRECTIONAL && LA347_0<=CURRENT_TIMESTAMP)||(LA347_0>=SNAPSHOT && LA347_0<=INDEX)||(LA347_0>=BOOLEAN_TRUE && LA347_0<=VALUE_NULL)||(LA347_0>=DEFINE && LA347_0<=MATCHED)||LA347_0==NEWKW||LA347_0==CONTEXT||LA347_0==NUM_DOUBLE||(LA347_0>=IDENT && LA347_0<=LPAREN)||LA347_0==LCURLY||LA347_0==QUESTION||(LA347_0>=PLUS && LA347_0<=QUOTED_STRING_LITERAL)||LA347_0==MINUS||LA347_0==NUM_INT||(LA347_0>=TICKED_STRING_LITERAL && LA347_0<=NUM_FLOAT)) ) {
                        alt347=1;
                    }
                    switch (alt347) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression12557);
                            expressionList900=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList900.getTree());
                            }
                            break;
                    }
                    RPAREN901=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression12560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN901);
                    }
                    break;
            }
            int alt349=2;
            int LA349_0 = input.LA(1);
            if ( (LA349_0==LBRACK) ) {
                alt349=1;
            }
            switch (alt349) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression12572);
                    propertyExpression902=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression902.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic903 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic904 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression12617);
            propertyExpressionAtomic903=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic903.getTree());
            loop350:
            do {
                int alt350=2;
                int LA350_0 = input.LA(1);
                if ( (LA350_0==LBRACK) ) {
                    alt350=1;
                }
                switch (alt350) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression12620);
            	    propertyExpressionAtomic904=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic904.getTree());
            	    }
            	    break;
            	default :
            	    break loop350;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK905=null;
        Token AS909=null;
        Token IDENT910=null;
        Token WHERE911=null;
        Token RBRACK913=null;
        EsperEPL2GrammarParser.propertyExpressionSelect_return propertyExpressionSelect906 = null;
        EsperEPL2GrammarParser.expression_return expression907 = null;
        EsperEPL2GrammarParser.propertyExpressionAnnotation_return propertyExpressionAnnotation908 = null;
        EsperEPL2GrammarParser.expression_return expression912 = null;
        CommonTree LBRACK905_tree=null;
        CommonTree AS909_tree=null;
        CommonTree IDENT910_tree=null;
        CommonTree WHERE911_tree=null;
        CommonTree RBRACK913_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyExpressionAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAnnotation");
        RewriteRuleSubtreeStream stream_propertyExpressionSelect=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionSelect");
        try {
            {
            LBRACK905=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic12650); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK905);
            int alt351=2;
            int LA351_0 = input.LA(1);
            if ( (LA351_0==SELECT) ) {
                alt351=1;
            }
            switch (alt351) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpressionSelect_in_propertyExpressionAtomic12652);
                    propertyExpressionSelect906=propertyExpressionSelect();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpressionSelect.add(propertyExpressionSelect906.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_propertyExpressionAtomic12655);
            expression907=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression907.getTree());
            int alt352=2;
            int LA352_0 = input.LA(1);
            if ( (LA352_0==ATCHAR) ) {
                alt352=1;
            }
            switch (alt352) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpressionAnnotation_in_propertyExpressionAtomic12657);
                    propertyExpressionAnnotation908=propertyExpressionAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpressionAnnotation.add(propertyExpressionAnnotation908.getTree());
                    }
                    break;
            }
            int alt353=2;
            int LA353_0 = input.LA(1);
            if ( (LA353_0==AS) ) {
                alt353=1;
            }
            switch (alt353) {
                case 1 :
                    {
                    AS909=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic12661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS909);
                    IDENT910=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic12663); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT910);
                    }
                    break;
            }
            int alt354=2;
            int LA354_0 = input.LA(1);
            if ( (LA354_0==WHERE) ) {
                alt354=1;
            }
            switch (alt354) {
                case 1 :
                    {
                    WHERE911=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic12668); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE911);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic12670);
                    expression912=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression912.getTree());
                    }
                    break;
            }
            RBRACK913=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic12674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK913);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertyExpressionSelect.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionSelect.nextTree());
                }
                stream_propertyExpressionSelect.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_propertyExpressionAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAnnotation.nextTree());
                }
                stream_propertyExpressionAnnotation.reset();
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionSelect_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionSelect_return propertyExpressionSelect() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionSelect_return retval = new EsperEPL2GrammarParser.propertyExpressionSelect_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT914=null;
        Token FROM916=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList915 = null;
        CommonTree SELECT914_tree=null;
        CommonTree FROM916_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        try {
            {
            SELECT914=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionSelect12732); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT914);
            pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionSelect12734);
            propertySelectionList915=propertySelectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList915.getTree());
            FROM916=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionSelect12736); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM916);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_SELECT.nextNode(), root_1);
                adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAnnotation_return propertyExpressionAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAnnotation_return retval = new EsperEPL2GrammarParser.propertyExpressionAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token v=null;
        Token ATCHAR917=null;
        Token LPAREN918=null;
        Token RPAREN919=null;
        CommonTree n_tree=null;
        CommonTree v_tree=null;
        CommonTree ATCHAR917_tree=null;
        CommonTree LPAREN918_tree=null;
        CommonTree RPAREN919_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        try {
            {
            ATCHAR917=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_propertyExpressionAnnotation12759); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR917);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAnnotation12763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            {
            LPAREN918=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_propertyExpressionAnnotation12766); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN918);
            v=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAnnotation12770); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(v);
            RPAREN919=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_propertyExpressionAnnotation12772); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN919);
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_v=new RewriteRuleTokenStream(adaptor,"token v",v);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_v.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA921=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement920 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement922 = null;
        CommonTree COMMA921_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList12802);
            propertySelectionListElement920=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement920.getTree());
            loop355:
            do {
                int alt355=2;
                int LA355_0 = input.LA(1);
                if ( (LA355_0==COMMA) ) {
                    alt355=1;
                }
                switch (alt355) {
            	case 1 :
            	    {
            	    COMMA921=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList12805); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList12808);
            	    propertySelectionListElement922=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement922.getTree());
            	    }
            	    break;
            	default :
            	    break loop355;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS925=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector923 = null;
        EsperEPL2GrammarParser.expression_return expression924 = null;
        CommonTree s_tree=null;
        CommonTree AS925_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt357=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt357=1;
                }
                break;
            case IDENT:
                {
                int LA357_2 = input.LA(2);
                if ( (LA357_2==DOT) ) {
                    int LA357_78 = input.LA(3);
                    if ( (LA357_78==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt357=2;
                    }
                    else if ( (LA357_78==WINDOW||LA357_78==BETWEEN||LA357_78==ESCAPE||LA357_78==EVERY_EXPR||LA357_78==WHERE||(LA357_78>=SUM && LA357_78<=COUNT)||LA357_78==OUTER||(LA357_78>=JOIN && LA357_78<=FULL)||(LA357_78>=EVENTS && LA357_78<=LAST)||(LA357_78>=UNIDIRECTIONAL && LA357_78<=PREVIOUSTAIL)||LA357_78==PRIOR||(LA357_78>=WEEKDAY && LA357_78<=CAST)||(LA357_78>=SNAPSHOT && LA357_78<=INDEX)||(LA357_78>=DEFINE && LA357_78<=MATCHED)||LA357_78==CONTEXT||LA357_78==IDENT||LA357_78==TICKED_STRING_LITERAL) ) {
                        alt357=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 357, 78, input);
                        throw nvae;
                    }
                }
                else if ( ((LA357_2>=IN_SET && LA357_2<=REGEXP)||(LA357_2>=OR_EXPR && LA357_2<=NOT_EXPR)||LA357_2==AS||LA357_2==FROM||LA357_2==IS||LA357_2==LBRACK||LA357_2==LPAREN||LA357_2==COMMA||(LA357_2>=EQUALS && LA357_2<=STAR)||(LA357_2>=LT && LA357_2<=PLUS)||(LA357_2>=BAND && LA357_2<=MOD)||LA357_2==ESCAPECHAR) ) {
                    alt357=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 357, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case ISTREAM:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case QUESTION:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt357=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 357, 0, input);
                throw nvae;
            }
            switch (alt357) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement12834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement12850);
                    propertyStreamSelector923=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector923.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement12855);
                    expression924=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression924.getTree());
                    int alt356=2;
                    int LA356_0 = input.LA(1);
                    if ( (LA356_0==AS) ) {
                        alt356=1;
                    }
                    switch (alt356) {
                        case 1 :
                            {
                            AS925=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement12858); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS925);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement12862);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT926=null;
        Token STAR927=null;
        Token AS928=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT926_tree=null;
        CommonTree STAR927_tree=null;
        CommonTree AS928_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector12906); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT926=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector12908); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT926);
            STAR927=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector12910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR927);
            int alt358=2;
            int LA358_0 = input.LA(1);
            if ( (LA358_0==AS) ) {
                alt358=1;
            }
            switch (alt358) {
                case 1 :
                    {
                    AS928=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector12913); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS928);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector12917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS929=null;
        Token LPAREN931=null;
        Token RPAREN933=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier930 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList932 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression934 = null;
        EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation935 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS929_tree=null;
        CommonTree LPAREN931_tree=null;
        CommonTree RPAREN933_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        RewriteRuleSubtreeStream stream_patternFilterAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule patternFilterAnnotation");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt359=2;
            int LA359_0 = input.LA(1);
            if ( (LA359_0==IDENT) ) {
                int LA359_1 = input.LA(2);
                if ( (LA359_1==EQUALS) ) {
                    alt359=1;
                }
            }
            switch (alt359) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression12964); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS929=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression12966); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS929);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression12975);
            classIdentifier930=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier930.getTree());
            int alt361=2;
            int LA361_0 = input.LA(1);
            if ( (LA361_0==LPAREN) ) {
                alt361=1;
            }
            switch (alt361) {
                case 1 :
                    {
                    LPAREN931=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression12986); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN931);
                    int alt360=2;
                    int LA360_0 = input.LA(1);
                    if ( (LA360_0==WINDOW||LA360_0==BETWEEN||LA360_0==ESCAPE||(LA360_0>=NOT_EXPR && LA360_0<=EVERY_EXPR)||LA360_0==WHERE||(LA360_0>=SUM && LA360_0<=COUNT)||LA360_0==CASE||LA360_0==OUTER||(LA360_0>=JOIN && LA360_0<=FULL)||(LA360_0>=EVENTS && LA360_0<=LAST)||LA360_0==ISTREAM||(LA360_0>=UNIDIRECTIONAL && LA360_0<=CURRENT_TIMESTAMP)||(LA360_0>=SNAPSHOT && LA360_0<=INDEX)||(LA360_0>=BOOLEAN_TRUE && LA360_0<=VALUE_NULL)||(LA360_0>=DEFINE && LA360_0<=MATCHED)||LA360_0==NEWKW||LA360_0==CONTEXT||LA360_0==NUM_DOUBLE||(LA360_0>=IDENT && LA360_0<=LPAREN)||LA360_0==LCURLY||LA360_0==QUESTION||(LA360_0>=PLUS && LA360_0<=QUOTED_STRING_LITERAL)||LA360_0==MINUS||LA360_0==NUM_INT||(LA360_0>=TICKED_STRING_LITERAL && LA360_0<=NUM_FLOAT)) ) {
                        alt360=1;
                    }
                    switch (alt360) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression12988);
                            expressionList932=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList932.getTree());
                            }
                            break;
                    }
                    RPAREN933=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression12991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN933);
                    }
                    break;
            }
            int alt362=2;
            int LA362_0 = input.LA(1);
            if ( (LA362_0==LBRACK) ) {
                alt362=1;
            }
            switch (alt362) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression13003);
                    propertyExpression934=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression934.getTree());
                    }
                    break;
            }
            int alt363=2;
            int LA363_0 = input.LA(1);
            if ( (LA363_0==ATCHAR) ) {
                alt363=1;
            }
            switch (alt363) {
                case 1 :
                    {
                    pushFollow(FOLLOW_patternFilterAnnotation_in_patternFilterExpression13014);
                    patternFilterAnnotation935=patternFilterAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternFilterAnnotation.add(patternFilterAnnotation935.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_patternFilterAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternFilterAnnotation.nextTree());
                }
                stream_patternFilterAnnotation.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterAnnotation_return retval = new EsperEPL2GrammarParser.patternFilterAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR936=null;
        Token LPAREN937=null;
        Token RPAREN939=null;
        EsperEPL2GrammarParser.number_return number938 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR936_tree=null;
        CommonTree LPAREN937_tree=null;
        CommonTree RPAREN939_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            ATCHAR936=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_patternFilterAnnotation13066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR936);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterAnnotation13070); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt364=2;
            int LA364_0 = input.LA(1);
            if ( (LA364_0==LPAREN) ) {
                alt364=1;
            }
            switch (alt364) {
                case 1 :
                    {
                    LPAREN937=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterAnnotation13073); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN937);
                    pushFollow(FOLLOW_number_in_patternFilterAnnotation13075);
                    number938=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number938.getTree());
                    RPAREN939=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterAnnotation13077); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN939);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT940=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT940_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier13113);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop365:
            do {
                int alt365=2;
                int LA365_0 = input.LA(1);
                if ( (LA365_0==DOT) ) {
                    int LA365_28 = input.LA(2);
                    if ( (LA365_28==IDENT) ) {
                        int LA365_54 = input.LA(3);
                        if ( (LA365_54==EOF||LA365_54==CREATE||(LA365_54>=OR_EXPR && LA365_54<=AS)||LA365_54==SELECT||LA365_54==END||(LA365_54>=INNER && LA365_54<=ON)||(LA365_54>=GROUP && LA365_54<=HAVING)||(LA365_54>=OUTPUT && LA365_54<=EVENTS)||LA365_54==INSERT||LA365_54==ORDER||(LA365_54>=UNIDIRECTIONAL && LA365_54<=RETAININTERSECTION)||LA365_54==DELETE||LA365_54==SET||LA365_54==UNTIL||LA365_54==ROW_LIMIT_EXPR||(LA365_54>=UPDATE && LA365_54<=MATCH_RECOGNIZE)||(LA365_54>=FOR && LA365_54<=WHILE)||LA365_54==MERGE||LA365_54==EXPRESSIONDECL||LA365_54==CONTEXT||LA365_54==TERMINATED||(LA365_54>=LBRACK && LA365_54<=RPAREN)||(LA365_54>=LCURLY && LA365_54<=RCURLY)||(LA365_54>=ATCHAR && LA365_54<=DOT)||(LA365_54>=FOLLOWED_BY && LA365_54<=GT)||LA365_54==FOLLOWMAX_BEGIN||LA365_54==TICKED_STRING_LITERAL) ) {
                            alt365=1;
                        }
                    }
                    else if ( (LA365_28==EVENTS||LA365_28==TICKED_STRING_LITERAL) ) {
                        alt365=1;
                    }
                }
                switch (alt365) {
            	case 1 :
            	    {
            	    DOT940=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier13132); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT940);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier13136);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop365;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT941=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT941_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy13181);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);
                if ( (LA366_0==EVENTS||LA366_0==IDENT||LA366_0==TICKED_STRING_LITERAL) ) {
                    alt366=2;
                }
                else if ( (LA366_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA366_5 = input.LA(3);
                        if ( (LA366_5==LPAREN) ) {
                            alt366=2;
                        }
                        else if ( (LA366_5==EVENTS||LA366_5==IDENT||LA366_5==DOT||LA366_5==TICKED_STRING_LITERAL) ) {
                            alt366=1;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA366_6 = input.LA(3);
                        if ( (LA366_6==LPAREN) ) {
                            alt366=2;
                        }
                        else if ( (LA366_6==EVENTS||LA366_6==IDENT||LA366_6==DOT||LA366_6==TICKED_STRING_LITERAL) ) {
                            alt366=1;
                        }
                        }
                        break;
                    case BETWEEN:
                    case WHERE:
                    case MAX:
                    case MIN:
                    case SET:
                    case AFTER:
                        {
                        alt366=2;
                        }
                        break;
                    case EVENTS:
                        {
                        alt366=1;
                        }
                        break;
                    }
                }
                switch (alt366) {
            	case 1 :
            	    {
            	    DOT941=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy13216); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT941);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy13220);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop366;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA943=null;
        EsperEPL2GrammarParser.expression_return expression942 = null;
        EsperEPL2GrammarParser.expression_return expression944 = null;
        CommonTree COMMA943_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList13262);
            expression942=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression942.getTree());
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);
                if ( (LA367_0==COMMA) ) {
                    alt367=1;
                }
                switch (alt367) {
            	case 1 :
            	    {
            	    COMMA943=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList13265); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList13268);
            	    expression944=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression944.getTree());
            	    }
            	    break;
            	default :
            	    break loop367;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA946=null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast945 = null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast947 = null;
        CommonTree COMMA946_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList13296);
            expressionWithTimeInclLast945=expressionWithTimeInclLast();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast945.getTree());
            loop368:
            do {
                int alt368=2;
                int LA368_0 = input.LA(1);
                if ( (LA368_0==COMMA) ) {
                    alt368=1;
                }
                switch (alt368) {
            	case 1 :
            	    {
            	    COMMA946=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList13299); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList13302);
            	    expressionWithTimeInclLast947=expressionWithTimeInclLast();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast947.getTree());
            	    }
            	    break;
            	default :
            	    break loop368;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand948 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod949 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable950 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand951 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand952 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator953 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator954 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList955 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar956 = null;
        try {
            int alt369=9;
            int LA369_0 = input.LA(1);
            if ( (LA369_0==LW) ) {
                int LA369_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt369=1;
                }
                else if ( (synpred9_EsperEPL2Grammar()) ) {
                    alt369=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA369_0==MINUS) ) {
                int LA369_2 = input.LA(2);
                if ( (LA369_2==NUM_INT) ) {
                    int LA369_116 = input.LA(3);
                    if ( (LA369_116==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==TIMEPERIOD_SECONDS) ) {
                        int LA369_510 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 510, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_116==TIMEPERIOD_SECOND) ) {
                        int LA369_511 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 511, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_116==TIMEPERIOD_SEC) ) {
                        int LA369_512 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 512, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_116==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_116==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_116==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 116, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_2==NUM_LONG) ) {
                    int LA369_117 = input.LA(3);
                    if ( (LA369_117==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==TIMEPERIOD_SECONDS) ) {
                        int LA369_559 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 559, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_117==TIMEPERIOD_SECOND) ) {
                        int LA369_560 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 560, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_117==TIMEPERIOD_SEC) ) {
                        int LA369_561 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 561, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_117==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_117==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_117==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 117, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_2==NUM_FLOAT) ) {
                    int LA369_118 = input.LA(3);
                    if ( (LA369_118==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==TIMEPERIOD_SECONDS) ) {
                        int LA369_604 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 604, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_118==TIMEPERIOD_SECOND) ) {
                        int LA369_605 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 605, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_118==TIMEPERIOD_SEC) ) {
                        int LA369_606 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 606, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_118==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_118==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_118==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 118, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_2==NUM_DOUBLE) ) {
                    int LA369_119 = input.LA(3);
                    if ( (LA369_119==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==TIMEPERIOD_SECONDS) ) {
                        int LA369_650 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 650, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_119==TIMEPERIOD_SECOND) ) {
                        int LA369_651 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 651, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_119==TIMEPERIOD_SEC) ) {
                        int LA369_652 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 652, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_119==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_119==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_119==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 119, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_2==IDENT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==AT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==COUNT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==SUM) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==AVG) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==MAX) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==FIRST) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==LAST) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==WHILE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==MERGE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==SQL) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==LW) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==CAST) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==INDEX) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==LEFT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==OUTER) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==FULL) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==JOIN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==FOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_2==USING) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA369_0==PLUS) ) {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    int LA369_170 = input.LA(3);
                    if ( (LA369_170==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==TIMEPERIOD_SECONDS) ) {
                        int LA369_698 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 698, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_170==TIMEPERIOD_SECOND) ) {
                        int LA369_699 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 699, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_170==TIMEPERIOD_SEC) ) {
                        int LA369_700 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 700, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_170==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_170==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_170==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 170, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    int LA369_171 = input.LA(3);
                    if ( (LA369_171==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==TIMEPERIOD_SECONDS) ) {
                        int LA369_747 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 747, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_171==TIMEPERIOD_SECOND) ) {
                        int LA369_748 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 748, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_171==TIMEPERIOD_SEC) ) {
                        int LA369_749 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 749, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_171==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_171==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_171==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 171, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    int LA369_172 = input.LA(3);
                    if ( (LA369_172==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==TIMEPERIOD_SECONDS) ) {
                        int LA369_792 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 792, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_172==TIMEPERIOD_SECOND) ) {
                        int LA369_793 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 793, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_172==TIMEPERIOD_SEC) ) {
                        int LA369_794 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 794, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_172==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_172==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_172==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 172, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    int LA369_173 = input.LA(3);
                    if ( (LA369_173==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==TIMEPERIOD_SECONDS) ) {
                        int LA369_838 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 838, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_173==TIMEPERIOD_SECOND) ) {
                        int LA369_839 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 839, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_173==TIMEPERIOD_SEC) ) {
                        int LA369_840 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt369=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt369=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 840, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA369_173==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt369=3;
                    }
                    else if ( (LA369_173==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else if ( (LA369_173==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt369=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 173, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA369_0==NUM_INT) ) {
                int LA369_4 = input.LA(2);
                if ( (LA369_4==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt369=6;
                }
                else if ( (LA369_4==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==TIMEPERIOD_SECONDS) ) {
                    int LA369_203 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 203, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_4==TIMEPERIOD_SECOND) ) {
                    int LA369_204 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 204, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_4==TIMEPERIOD_SEC) ) {
                    int LA369_205 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 205, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_4==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_4==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt369=4;
                }
                else if ( (LA369_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt369=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA369_0==NUM_LONG) ) {
                int LA369_5 = input.LA(2);
                if ( (LA369_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt369=7;
                }
                else if ( (LA369_5==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==TIMEPERIOD_SECONDS) ) {
                    int LA369_255 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 255, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_5==TIMEPERIOD_SECOND) ) {
                    int LA369_256 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 256, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_5==TIMEPERIOD_SEC) ) {
                    int LA369_257 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 257, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_5==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_5==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt369=4;
                }
                else if ( (LA369_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt369=6;
                }
                else if ( (LA369_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA369_0==NUM_FLOAT) ) {
                int LA369_6 = input.LA(2);
                if ( (LA369_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==TIMEPERIOD_SECONDS) ) {
                    int LA369_302 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 302, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_6==TIMEPERIOD_SECOND) ) {
                    int LA369_303 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 303, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_6==TIMEPERIOD_SEC) ) {
                    int LA369_304 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 304, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_6==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_6==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt369=7;
                }
                else if ( (LA369_6==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt369=4;
                }
                else if ( (LA369_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_6==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt369=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA369_0==NUM_DOUBLE) ) {
                int LA369_7 = input.LA(2);
                if ( (LA369_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt369=7;
                }
                else if ( (LA369_7==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==TIMEPERIOD_SECONDS) ) {
                    int LA369_352 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 352, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_7==TIMEPERIOD_SECOND) ) {
                    int LA369_353 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 353, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_7==TIMEPERIOD_SEC) ) {
                    int LA369_354 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 354, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_7==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_7==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt369=6;
                }
                else if ( (LA369_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt369=4;
                }
                else if ( (LA369_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_7==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA369_0==IDENT) ) {
                int LA369_8 = input.LA(2);
                if ( (LA369_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==DOT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==TIMEPERIOD_SECONDS) ) {
                    int LA369_380 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 380, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_8==TIMEPERIOD_SECOND) ) {
                    int LA369_381 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 381, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_8==TIMEPERIOD_SEC) ) {
                    int LA369_382 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 382, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt369=7;
                }
                else if ( (LA369_8==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt369=6;
                }
                else if ( (LA369_8==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt369=4;
                }
                else if ( (LA369_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==LBRACK) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==QUESTION) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_8==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_8==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA369_0==QUESTION) ) {
                int LA369_9 = input.LA(2);
                if ( (LA369_9==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt369=4;
                }
                else if ( (LA369_9==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==TIMEPERIOD_SECONDS) ) {
                    int LA369_456 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 456, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_9==TIMEPERIOD_SECOND) ) {
                    int LA369_457 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 457, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_9==TIMEPERIOD_SEC) ) {
                    int LA369_458 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt369=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt369=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 458, input);
                        throw nvae;
                    }
                }
                else if ( (LA369_9==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt369=3;
                }
                else if ( (LA369_9==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt369=6;
                }
                else if ( (LA369_9==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt369=7;
                }
                else if ( (LA369_9==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else if ( (LA369_9==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt369=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA369_0==CASE) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==AT) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==COUNT) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==SUM) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==AVG) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==MAX) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==MIN) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==FIRST) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==LAST) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==WHILE) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==MERGE) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==SQL) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==CAST) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==INDEX) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==LEFT) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==OUTER) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==FULL) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==JOIN) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==FOR) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==USING) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==WHERE) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==SET) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==AFTER) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==PREVIOUSCOUNT) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==PREVIOUSWINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==ISTREAM) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==NEWKW) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt369=3;
            }
            else if ( (LA369_0==STAR) ) {
                int LA369_77 = input.LA(2);
                if ( (LA369_77==DIV) && (synpred11_EsperEPL2Grammar())) {
                    alt369=5;
                }
                else if ( (LA369_77==RPAREN||LA369_77==COMMA) ) {
                    alt369=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 369, 77, input);
                    throw nvae;
                }
            }
            else if ( (LA369_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {
                alt369=8;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 369, 0, input);
                throw nvae;
            }
            switch (alt369) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime13331);
                    lastWeekdayOperand948=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand948.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime13342);
                    timePeriod949=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod949.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime13353);
                    expressionQualifyable950=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable950.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime13364);
                    rangeOperand951=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand951.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime13376);
                    frequencyOperand952=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand952.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime13387);
                    lastOperator953=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator953.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime13399);
                    weekDayOperator954=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator954.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime13411);
                    numericParameterList955=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList955.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime13416);
                    numberSetStar956=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar956.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeInclLast_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return retval = new EsperEPL2GrammarParser.expressionWithTimeInclLast_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand957 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime958 = null;
        try {
            int alt370=2;
            int LA370_0 = input.LA(1);
            if ( (LA370_0==LAST) ) {
                int LA370_1 = input.LA(2);
                if ( (synpred15_EsperEPL2Grammar()) ) {
                    alt370=1;
                }
                else if ( (true) ) {
                    alt370=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 370, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA370_0==WINDOW||LA370_0==BETWEEN||LA370_0==ESCAPE||(LA370_0>=NOT_EXPR && LA370_0<=EVERY_EXPR)||LA370_0==WHERE||(LA370_0>=SUM && LA370_0<=COUNT)||LA370_0==CASE||LA370_0==OUTER||(LA370_0>=JOIN && LA370_0<=FULL)||(LA370_0>=EVENTS && LA370_0<=FIRST)||LA370_0==ISTREAM||(LA370_0>=UNIDIRECTIONAL && LA370_0<=CURRENT_TIMESTAMP)||(LA370_0>=SNAPSHOT && LA370_0<=INDEX)||(LA370_0>=BOOLEAN_TRUE && LA370_0<=VALUE_NULL)||(LA370_0>=DEFINE && LA370_0<=MATCHED)||LA370_0==NEWKW||LA370_0==CONTEXT||LA370_0==NUM_DOUBLE||LA370_0==LBRACK||(LA370_0>=IDENT && LA370_0<=LPAREN)||LA370_0==LCURLY||LA370_0==STAR||LA370_0==QUESTION||(LA370_0>=PLUS && LA370_0<=QUOTED_STRING_LITERAL)||LA370_0==MINUS||LA370_0==NUM_INT||(LA370_0>=TICKED_STRING_LITERAL && LA370_0<=NUM_FLOAT)) ) {
                alt370=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 370, 0, input);
                throw nvae;
            }
            switch (alt370) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTimeInclLast13436);
                    lastOperand957=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand957.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeInclLast13441);
                    expressionWithTime958=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime958.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression959 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable13452);
            expression959=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression959.getTree());
            int alt371=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt371=1;
                    }
                    break;
                case DESC:
                    {
                    alt371=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt371=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt371=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt371=5;
                    }
                    break;
            }
            switch (alt371) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable13457); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable13461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable13465); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable13469); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable13473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR960=null;
        CommonTree STAR960_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR960=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar13530); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR960);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW961=null;
        CommonTree LW961_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW961=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand13550); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW961_tree = (CommonTree)adaptor.create(LW961);
            root_0 = (CommonTree)adaptor.becomeRoot(LW961_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST962=null;
        CommonTree LAST962_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST962=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand13563); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST962_tree = (CommonTree)adaptor.create(LAST962);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST962_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR963=null;
        Token DIV964=null;
        EsperEPL2GrammarParser.number_return number965 = null;
        EsperEPL2GrammarParser.substitution_return substitution966 = null;
        CommonTree i_tree=null;
        CommonTree STAR963_tree=null;
        CommonTree DIV964_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR963=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand13575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR963);
            DIV964=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand13577); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV964);
            int alt372=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt372=1;
                }
                break;
            case IDENT:
                {
                alt372=2;
                }
                break;
            case QUESTION:
                {
                alt372=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 372, 0, input);
                throw nvae;
            }
            switch (alt372) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand13580);
                    number965=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number965.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand13584); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand13586);
                    substitution966=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution966.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON969=null;
        EsperEPL2GrammarParser.number_return number967 = null;
        EsperEPL2GrammarParser.substitution_return substitution968 = null;
        EsperEPL2GrammarParser.number_return number970 = null;
        EsperEPL2GrammarParser.substitution_return substitution971 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON969_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt373=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt373=1;
                }
                break;
            case IDENT:
                {
                alt373=2;
                }
                break;
            case QUESTION:
                {
                alt373=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 373, 0, input);
                throw nvae;
            }
            switch (alt373) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand13635);
                    number967=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number967.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand13639); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand13641);
                    substitution968=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution968.getTree());
                    }
                    break;
            }
            COLON969=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand13644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON969);
            int alt374=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt374=1;
                }
                break;
            case IDENT:
                {
                alt374=2;
                }
                break;
            case QUESTION:
                {
                alt374=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 374, 0, input);
                throw nvae;
            }
            switch (alt374) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand13647);
                    number970=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number970.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand13651); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand13653);
                    substitution971=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution971.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST974=null;
        EsperEPL2GrammarParser.number_return number972 = null;
        EsperEPL2GrammarParser.substitution_return substitution973 = null;
        CommonTree i_tree=null;
        CommonTree LAST974_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt375=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt375=1;
                }
                break;
            case IDENT:
                {
                alt375=2;
                }
                break;
            case QUESTION:
                {
                alt375=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 375, 0, input);
                throw nvae;
            }
            switch (alt375) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator13767);
                    number972=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number972.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator13771); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator13773);
                    substitution973=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution973.getTree());
                    }
                    break;
            }
            LAST974=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator13776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST974);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY977=null;
        EsperEPL2GrammarParser.number_return number975 = null;
        EsperEPL2GrammarParser.substitution_return substitution976 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY977_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt376=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt376=1;
                }
                break;
            case IDENT:
                {
                alt376=2;
                }
                break;
            case QUESTION:
                {
                alt376=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 376, 0, input);
                throw nvae;
            }
            switch (alt376) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator13824);
                    number975=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number975.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator13828); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator13830);
                    substitution976=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution976.getTree());
                    }
                    break;
            }
            WEEKDAY977=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator13833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY977);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK978=null;
        Token COMMA980=null;
        Token RBRACK982=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter979 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter981 = null;
        CommonTree LBRACK978_tree=null;
        CommonTree COMMA980_tree=null;
        CommonTree RBRACK982_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK978=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList13880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK978);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList13882);
            numericListParameter979=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter979.getTree());
            loop377:
            do {
                int alt377=2;
                int LA377_0 = input.LA(1);
                if ( (LA377_0==COMMA) ) {
                    alt377=1;
                }
                switch (alt377) {
            	case 1 :
            	    {
            	    COMMA980=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList13885); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA980);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList13887);
            	    numericListParameter981=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter981.getTree());
            	    }
            	    break;
            	default :
            	    break loop377;
                }
            } while (true);
            RBRACK982=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList13891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK982);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand983 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand984 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant985 = null;
        try {
            int alt378=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA378_1 = input.LA(2);
                if ( (LA378_1==RBRACK||LA378_1==COMMA) ) {
                    alt378=3;
                }
                else if ( (LA378_1==COLON) ) {
                    alt378=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 378, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA378_2 = input.LA(2);
                if ( (LA378_2==RBRACK||LA378_2==COMMA) ) {
                    alt378=3;
                }
                else if ( (LA378_2==COLON) ) {
                    alt378=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 378, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA378_3 = input.LA(2);
                if ( (LA378_3==COLON) ) {
                    alt378=1;
                }
                else if ( (LA378_3==RBRACK||LA378_3==COMMA) ) {
                    alt378=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 378, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA378_4 = input.LA(2);
                if ( (LA378_4==COLON) ) {
                    alt378=1;
                }
                else if ( (LA378_4==RBRACK||LA378_4==COMMA) ) {
                    alt378=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 378, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt378=1;
                }
                break;
            case STAR:
                {
                alt378=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt378=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 378, 0, input);
                throw nvae;
            }
            switch (alt378) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter13913);
                    rangeOperand983=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand983.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter13919);
                    frequencyOperand984=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand984.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter13924);
                    numberconstant985=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant985.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT987=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic986 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic988 = null;
        CommonTree DOT987_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty13940);
            eventPropertyAtomic986=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic986.getTree());
            loop379:
            do {
                int alt379=2;
                int LA379_0 = input.LA(1);
                if ( (LA379_0==DOT) ) {
                    alt379=1;
                }
                switch (alt379) {
            	case 1 :
            	    {
            	    DOT987=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty13943); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT987);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty13945);
            	    eventPropertyAtomic988=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic988.getTree());
            	    }
            	    break;
            	default :
            	    break loop379;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK990=null;
        Token RPAREN991=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent989 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK990_tree=null;
        CommonTree RPAREN991_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic13971);
            eventPropertyIdent989=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent989.getTree());
            int alt383=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt383=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt383=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt383=3;
                    }
                    break;
            }
            switch (alt383) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic13980); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic13984); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK990=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic13986); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK990);
                    int alt380=2;
                    int LA380_0 = input.LA(1);
                    if ( (LA380_0==QUESTION) ) {
                        alt380=1;
                    }
                    switch (alt380) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13991); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic14005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt381=2;
                    int LA381_0 = input.LA(1);
                    if ( (LA381_0==STRING_LITERAL) ) {
                        alt381=1;
                    }
                    else if ( (LA381_0==QUOTED_STRING_LITERAL) ) {
                        alt381=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 381, 0, input);
                        throw nvae;
                    }
                    switch (alt381) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic14010); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic14016); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN991=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic14019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN991);
                    int alt382=2;
                    int LA382_0 = input.LA(1);
                    if ( (LA382_0==QUESTION) ) {
                        alt382=1;
                    }
                    switch (alt382) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic14024); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic14038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR992=null;
        Token DOT993=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR992_tree=null;
        CommonTree DOT993_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent14161);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop385:
            do {
                int alt385=2;
                int LA385_0 = input.LA(1);
                if ( (LA385_0==ESCAPECHAR) ) {
                    alt385=1;
                }
                switch (alt385) {
            	case 1 :
            	    {
            	    ESCAPECHAR992=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent14173); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR992);
            	    DOT993=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent14175); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT993);
            	    int alt384=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case USING:
            	        case MERGE:
            	        case MATCHED:
            	        case CONTEXT:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt384=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA384_5 = input.LA(2);
            	            if ( (LA384_5==EOF||(LA384_5>=IN_SET && LA384_5<=NOT_EXPR)||(LA384_5>=WHERE && LA384_5<=AS)||(LA384_5>=ELSE && LA384_5<=FROM)||(LA384_5>=INNER && LA384_5<=FULL)||LA384_5==IS||(LA384_5>=GROUP && LA384_5<=HAVING)||LA384_5==ALL||LA384_5==OUTPUT||LA384_5==INSERT||(LA384_5>=ORDER && LA384_5<=DESC)||LA384_5==PATTERN||(LA384_5>=TIMEPERIOD_SEC && LA384_5<=TIMEPERIOD_SECONDS)||LA384_5==ROW_LIMIT_EXPR||(LA384_5>=MATCH_RECOGNIZE && LA384_5<=MEASURES)||(LA384_5>=AFTER && LA384_5<=FOR)||(LA384_5>=LBRACK && LA384_5<=RBRACK)||(LA384_5>=LPAREN && LA384_5<=COLON)||LA384_5==RCURLY||(LA384_5>=ATCHAR && LA384_5<=STAR)||(LA384_5>=LT && LA384_5<=PLUS)||(LA384_5>=BAND && LA384_5<=MOD)||(LA384_5>=FOLLOWMAX_END && LA384_5<=ESCAPECHAR)) ) {
            	                alt384=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA384_25 = input.LA(2);
            	            if ( (LA384_25==LPAREN) ) {
            	                int LA384_180 = input.LA(3);
            	                if ( ((LA384_180>=STRING_LITERAL && LA384_180<=QUOTED_STRING_LITERAL)) ) {
            	                    alt384=1;
            	                }
            	            }
            	            else if ( (LA384_25==EOF||(LA384_25>=IN_SET && LA384_25<=NOT_EXPR)||(LA384_25>=WHERE && LA384_25<=AS)||(LA384_25>=ELSE && LA384_25<=FROM)||(LA384_25>=INNER && LA384_25<=FULL)||LA384_25==IS||(LA384_25>=GROUP && LA384_25<=HAVING)||LA384_25==ALL||LA384_25==OUTPUT||LA384_25==INSERT||(LA384_25>=ORDER && LA384_25<=DESC)||LA384_25==PATTERN||(LA384_25>=TIMEPERIOD_SEC && LA384_25<=TIMEPERIOD_SECONDS)||LA384_25==ROW_LIMIT_EXPR||(LA384_25>=MATCH_RECOGNIZE && LA384_25<=MEASURES)||(LA384_25>=AFTER && LA384_25<=FOR)||(LA384_25>=LBRACK && LA384_25<=RBRACK)||(LA384_25>=RPAREN && LA384_25<=COLON)||LA384_25==RCURLY||(LA384_25>=ATCHAR && LA384_25<=STAR)||(LA384_25>=LT && LA384_25<=PLUS)||(LA384_25>=BAND && LA384_25<=MOD)||(LA384_25>=FOLLOWMAX_END && LA384_25<=ESCAPECHAR)) ) {
            	                alt384=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA384_40 = input.LA(2);
            	            if ( (LA384_40==EOF||(LA384_40>=IN_SET && LA384_40<=NOT_EXPR)||(LA384_40>=WHERE && LA384_40<=AS)||(LA384_40>=ELSE && LA384_40<=FROM)||(LA384_40>=INNER && LA384_40<=FULL)||LA384_40==IS||(LA384_40>=GROUP && LA384_40<=HAVING)||LA384_40==ALL||LA384_40==OUTPUT||LA384_40==INSERT||(LA384_40>=ORDER && LA384_40<=DESC)||LA384_40==PATTERN||(LA384_40>=TIMEPERIOD_SEC && LA384_40<=TIMEPERIOD_SECONDS)||LA384_40==ROW_LIMIT_EXPR||(LA384_40>=MATCH_RECOGNIZE && LA384_40<=MEASURES)||(LA384_40>=AFTER && LA384_40<=FOR)||(LA384_40>=LBRACK && LA384_40<=RBRACK)||(LA384_40>=LPAREN && LA384_40<=COLON)||LA384_40==RCURLY||(LA384_40>=ATCHAR && LA384_40<=STAR)||(LA384_40>=LT && LA384_40<=PLUS)||(LA384_40>=BAND && LA384_40<=MOD)||(LA384_40>=FOLLOWMAX_END && LA384_40<=ESCAPECHAR)) ) {
            	                alt384=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA384_41 = input.LA(2);
            	            if ( (LA384_41==EOF||(LA384_41>=IN_SET && LA384_41<=NOT_EXPR)||(LA384_41>=WHERE && LA384_41<=AS)||(LA384_41>=ELSE && LA384_41<=FROM)||(LA384_41>=INNER && LA384_41<=FULL)||LA384_41==IS||(LA384_41>=GROUP && LA384_41<=HAVING)||LA384_41==ALL||LA384_41==OUTPUT||LA384_41==INSERT||(LA384_41>=ORDER && LA384_41<=DESC)||LA384_41==PATTERN||(LA384_41>=TIMEPERIOD_SEC && LA384_41<=TIMEPERIOD_SECONDS)||LA384_41==ROW_LIMIT_EXPR||(LA384_41>=MATCH_RECOGNIZE && LA384_41<=MEASURES)||(LA384_41>=AFTER && LA384_41<=FOR)||(LA384_41>=LBRACK && LA384_41<=RBRACK)||(LA384_41>=LPAREN && LA384_41<=COLON)||LA384_41==RCURLY||(LA384_41>=ATCHAR && LA384_41<=STAR)||(LA384_41>=LT && LA384_41<=PLUS)||(LA384_41>=BAND && LA384_41<=MOD)||(LA384_41>=FOLLOWMAX_END && LA384_41<=ESCAPECHAR)) ) {
            	                alt384=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA384_43 = input.LA(2);
            	            if ( (LA384_43==EOF||(LA384_43>=IN_SET && LA384_43<=NOT_EXPR)||(LA384_43>=WHERE && LA384_43<=AS)||(LA384_43>=ELSE && LA384_43<=FROM)||(LA384_43>=INNER && LA384_43<=FULL)||LA384_43==IS||(LA384_43>=GROUP && LA384_43<=HAVING)||LA384_43==ALL||LA384_43==OUTPUT||LA384_43==INSERT||(LA384_43>=ORDER && LA384_43<=DESC)||LA384_43==PATTERN||(LA384_43>=TIMEPERIOD_SEC && LA384_43<=TIMEPERIOD_SECONDS)||LA384_43==ROW_LIMIT_EXPR||(LA384_43>=MATCH_RECOGNIZE && LA384_43<=MEASURES)||(LA384_43>=AFTER && LA384_43<=FOR)||(LA384_43>=LBRACK && LA384_43<=RBRACK)||(LA384_43>=LPAREN && LA384_43<=COLON)||LA384_43==RCURLY||(LA384_43>=ATCHAR && LA384_43<=STAR)||(LA384_43>=LT && LA384_43<=PLUS)||(LA384_43>=BAND && LA384_43<=MOD)||(LA384_43>=FOLLOWMAX_END && LA384_43<=ESCAPECHAR)) ) {
            	                alt384=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA384_44 = input.LA(2);
            	            if ( (LA384_44==PATTERN) ) {
            	                int LA384_454 = input.LA(3);
            	                if ( (LA384_454==LPAREN) ) {
            	                    alt384=1;
            	                }
            	            }
            	            else if ( (LA384_44==EOF||(LA384_44>=IN_SET && LA384_44<=NOT_EXPR)||(LA384_44>=WHERE && LA384_44<=AS)||(LA384_44>=ELSE && LA384_44<=FROM)||(LA384_44>=INNER && LA384_44<=FULL)||LA384_44==IS||(LA384_44>=GROUP && LA384_44<=HAVING)||LA384_44==ALL||LA384_44==OUTPUT||LA384_44==INSERT||(LA384_44>=ORDER && LA384_44<=DESC)||(LA384_44>=TIMEPERIOD_SEC && LA384_44<=TIMEPERIOD_SECONDS)||LA384_44==ROW_LIMIT_EXPR||(LA384_44>=MATCH_RECOGNIZE && LA384_44<=MEASURES)||(LA384_44>=AFTER && LA384_44<=FOR)||(LA384_44>=LBRACK && LA384_44<=RBRACK)||(LA384_44>=LPAREN && LA384_44<=COLON)||LA384_44==RCURLY||(LA384_44>=ATCHAR && LA384_44<=STAR)||(LA384_44>=LT && LA384_44<=PLUS)||(LA384_44>=BAND && LA384_44<=MOD)||(LA384_44>=FOLLOWMAX_END && LA384_44<=ESCAPECHAR)) ) {
            	                alt384=1;
            	            }
            	            }
            	            break;
            	        case FOR:
            	            {
            	            int LA384_49 = input.LA(2);
            	            if ( (LA384_49==EOF||(LA384_49>=IN_SET && LA384_49<=NOT_EXPR)||(LA384_49>=WHERE && LA384_49<=AS)||(LA384_49>=ELSE && LA384_49<=FROM)||(LA384_49>=INNER && LA384_49<=FULL)||LA384_49==IS||(LA384_49>=GROUP && LA384_49<=HAVING)||LA384_49==ALL||LA384_49==OUTPUT||LA384_49==INSERT||(LA384_49>=ORDER && LA384_49<=DESC)||LA384_49==PATTERN||(LA384_49>=TIMEPERIOD_SEC && LA384_49<=TIMEPERIOD_SECONDS)||LA384_49==ROW_LIMIT_EXPR||(LA384_49>=MATCH_RECOGNIZE && LA384_49<=MEASURES)||(LA384_49>=AFTER && LA384_49<=FOR)||(LA384_49>=LBRACK && LA384_49<=RBRACK)||(LA384_49>=LPAREN && LA384_49<=COLON)||LA384_49==RCURLY||(LA384_49>=ATCHAR && LA384_49<=STAR)||(LA384_49>=LT && LA384_49<=PLUS)||(LA384_49>=BAND && LA384_49<=MOD)||(LA384_49>=FOLLOWMAX_END && LA384_49<=ESCAPECHAR)) ) {
            	                alt384=1;
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt384) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent14179);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop385;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT994=null;
        Token COUNT995=null;
        Token ESCAPE996=null;
        Token EVERY_EXPR997=null;
        Token SUM998=null;
        Token AVG999=null;
        Token MAX1000=null;
        Token MIN1001=null;
        Token COALESCE1002=null;
        Token MEDIAN1003=null;
        Token STDDEV1004=null;
        Token AVEDEV1005=null;
        Token EVENTS1006=null;
        Token FIRST1007=null;
        Token LAST1008=null;
        Token WHILE1009=null;
        Token MERGE1010=null;
        Token MATCHED1011=null;
        Token UNIDIRECTIONAL1012=null;
        Token RETAINUNION1013=null;
        Token RETAININTERSECTION1014=null;
        Token UNTIL1015=null;
        Token PATTERN1016=null;
        Token SQL1017=null;
        Token METADATASQL1018=null;
        Token PREVIOUS1019=null;
        Token PREVIOUSTAIL1020=null;
        Token PRIOR1021=null;
        Token WEEKDAY1022=null;
        Token LW1023=null;
        Token INSTANCEOF1024=null;
        Token TYPEOF1025=null;
        Token CAST1026=null;
        Token SNAPSHOT1027=null;
        Token VARIABLE1028=null;
        Token INDEX1029=null;
        Token WINDOW1030=null;
        Token LEFT1031=null;
        Token RIGHT1032=null;
        Token OUTER1033=null;
        Token FULL1034=null;
        Token JOIN1035=null;
        Token DEFINE1036=null;
        Token PARTITION1037=null;
        Token MATCHES1038=null;
        Token CONTEXT1039=null;
        Token FOR1040=null;
        Token USING1041=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT994_tree=null;
        CommonTree COUNT995_tree=null;
        CommonTree ESCAPE996_tree=null;
        CommonTree EVERY_EXPR997_tree=null;
        CommonTree SUM998_tree=null;
        CommonTree AVG999_tree=null;
        CommonTree MAX1000_tree=null;
        CommonTree MIN1001_tree=null;
        CommonTree COALESCE1002_tree=null;
        CommonTree MEDIAN1003_tree=null;
        CommonTree STDDEV1004_tree=null;
        CommonTree AVEDEV1005_tree=null;
        CommonTree EVENTS1006_tree=null;
        CommonTree FIRST1007_tree=null;
        CommonTree LAST1008_tree=null;
        CommonTree WHILE1009_tree=null;
        CommonTree MERGE1010_tree=null;
        CommonTree MATCHED1011_tree=null;
        CommonTree UNIDIRECTIONAL1012_tree=null;
        CommonTree RETAINUNION1013_tree=null;
        CommonTree RETAININTERSECTION1014_tree=null;
        CommonTree UNTIL1015_tree=null;
        CommonTree PATTERN1016_tree=null;
        CommonTree SQL1017_tree=null;
        CommonTree METADATASQL1018_tree=null;
        CommonTree PREVIOUS1019_tree=null;
        CommonTree PREVIOUSTAIL1020_tree=null;
        CommonTree PRIOR1021_tree=null;
        CommonTree WEEKDAY1022_tree=null;
        CommonTree LW1023_tree=null;
        CommonTree INSTANCEOF1024_tree=null;
        CommonTree TYPEOF1025_tree=null;
        CommonTree CAST1026_tree=null;
        CommonTree SNAPSHOT1027_tree=null;
        CommonTree VARIABLE1028_tree=null;
        CommonTree INDEX1029_tree=null;
        CommonTree WINDOW1030_tree=null;
        CommonTree LEFT1031_tree=null;
        CommonTree RIGHT1032_tree=null;
        CommonTree OUTER1033_tree=null;
        CommonTree FULL1034_tree=null;
        CommonTree JOIN1035_tree=null;
        CommonTree DEFINE1036_tree=null;
        CommonTree PARTITION1037_tree=null;
        CommonTree MATCHES1038_tree=null;
        CommonTree CONTEXT1039_tree=null;
        CommonTree FOR1040_tree=null;
        CommonTree USING1041_tree=null;
        try {
            int alt386=50;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt386=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt386=2;
                }
                break;
            case AT:
                {
                alt386=3;
                }
                break;
            case COUNT:
                {
                alt386=4;
                }
                break;
            case ESCAPE:
                {
                alt386=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt386=6;
                }
                break;
            case SUM:
                {
                alt386=7;
                }
                break;
            case AVG:
                {
                alt386=8;
                }
                break;
            case MAX:
                {
                alt386=9;
                }
                break;
            case MIN:
                {
                alt386=10;
                }
                break;
            case COALESCE:
                {
                alt386=11;
                }
                break;
            case MEDIAN:
                {
                alt386=12;
                }
                break;
            case STDDEV:
                {
                alt386=13;
                }
                break;
            case AVEDEV:
                {
                alt386=14;
                }
                break;
            case EVENTS:
                {
                alt386=15;
                }
                break;
            case FIRST:
                {
                alt386=16;
                }
                break;
            case LAST:
                {
                alt386=17;
                }
                break;
            case WHILE:
                {
                alt386=18;
                }
                break;
            case MERGE:
                {
                alt386=19;
                }
                break;
            case MATCHED:
                {
                alt386=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt386=21;
                }
                break;
            case RETAINUNION:
                {
                alt386=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt386=23;
                }
                break;
            case UNTIL:
                {
                alt386=24;
                }
                break;
            case PATTERN:
                {
                alt386=25;
                }
                break;
            case SQL:
                {
                alt386=26;
                }
                break;
            case METADATASQL:
                {
                alt386=27;
                }
                break;
            case PREVIOUS:
                {
                alt386=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt386=29;
                }
                break;
            case PRIOR:
                {
                alt386=30;
                }
                break;
            case WEEKDAY:
                {
                alt386=31;
                }
                break;
            case LW:
                {
                alt386=32;
                }
                break;
            case INSTANCEOF:
                {
                alt386=33;
                }
                break;
            case TYPEOF:
                {
                alt386=34;
                }
                break;
            case CAST:
                {
                alt386=35;
                }
                break;
            case SNAPSHOT:
                {
                alt386=36;
                }
                break;
            case VARIABLE:
                {
                alt386=37;
                }
                break;
            case INDEX:
                {
                alt386=38;
                }
                break;
            case WINDOW:
                {
                alt386=39;
                }
                break;
            case LEFT:
                {
                alt386=40;
                }
                break;
            case RIGHT:
                {
                alt386=41;
                }
                break;
            case OUTER:
                {
                alt386=42;
                }
                break;
            case FULL:
                {
                alt386=43;
                }
                break;
            case JOIN:
                {
                alt386=44;
                }
                break;
            case DEFINE:
                {
                alt386=45;
                }
                break;
            case PARTITION:
                {
                alt386=46;
                }
                break;
            case MATCHES:
                {
                alt386=47;
                }
                break;
            case CONTEXT:
                {
                alt386=48;
                }
                break;
            case FOR:
                {
                alt386=49;
                }
                break;
            case USING:
                {
                alt386=50;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 386, 0, input);
                throw nvae;
            }
            switch (alt386) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent14218); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent14227); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i2.getText(); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT994=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent14234); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT994_tree = (CommonTree)adaptor.create(AT994);
                    adaptor.addChild(root_0, AT994_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT995=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent14241); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT995_tree = (CommonTree)adaptor.create(COUNT995);
                    adaptor.addChild(root_0, COUNT995_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE996=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent14248); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE996_tree = (CommonTree)adaptor.create(ESCAPE996);
                    adaptor.addChild(root_0, ESCAPE996_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR997=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent14259); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR997_tree = (CommonTree)adaptor.create(EVERY_EXPR997);
                    adaptor.addChild(root_0, EVERY_EXPR997_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM998=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent14266); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM998_tree = (CommonTree)adaptor.create(SUM998);
                    adaptor.addChild(root_0, SUM998_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG999=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent14273); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG999_tree = (CommonTree)adaptor.create(AVG999);
                    adaptor.addChild(root_0, AVG999_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX1000=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent14280); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX1000_tree = (CommonTree)adaptor.create(MAX1000);
                    adaptor.addChild(root_0, MAX1000_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN1001=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent14287); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN1001_tree = (CommonTree)adaptor.create(MIN1001);
                    adaptor.addChild(root_0, MIN1001_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE1002=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent14294); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE1002_tree = (CommonTree)adaptor.create(COALESCE1002);
                    adaptor.addChild(root_0, COALESCE1002_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN1003=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent14301); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN1003_tree = (CommonTree)adaptor.create(MEDIAN1003);
                    adaptor.addChild(root_0, MEDIAN1003_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV1004=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent14308); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV1004_tree = (CommonTree)adaptor.create(STDDEV1004);
                    adaptor.addChild(root_0, STDDEV1004_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV1005=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent14315); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV1005_tree = (CommonTree)adaptor.create(AVEDEV1005);
                    adaptor.addChild(root_0, AVEDEV1005_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS1006=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent14322); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS1006_tree = (CommonTree)adaptor.create(EVENTS1006);
                    adaptor.addChild(root_0, EVENTS1006_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST1007=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent14329); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST1007_tree = (CommonTree)adaptor.create(FIRST1007);
                    adaptor.addChild(root_0, FIRST1007_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST1008=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent14336); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST1008_tree = (CommonTree)adaptor.create(LAST1008);
                    adaptor.addChild(root_0, LAST1008_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE1009=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent14343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE1009_tree = (CommonTree)adaptor.create(WHILE1009);
                    adaptor.addChild(root_0, WHILE1009_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE1010=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent14350); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE1010_tree = (CommonTree)adaptor.create(MERGE1010);
                    adaptor.addChild(root_0, MERGE1010_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED1011=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent14357); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED1011_tree = (CommonTree)adaptor.create(MATCHED1011);
                    adaptor.addChild(root_0, MATCHED1011_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL1012=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent14364); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL1012_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL1012);
                    adaptor.addChild(root_0, UNIDIRECTIONAL1012_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION1013=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent14371); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION1013_tree = (CommonTree)adaptor.create(RETAINUNION1013);
                    adaptor.addChild(root_0, RETAINUNION1013_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION1014=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent14378); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION1014_tree = (CommonTree)adaptor.create(RETAININTERSECTION1014);
                    adaptor.addChild(root_0, RETAININTERSECTION1014_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL1015=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent14385); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL1015_tree = (CommonTree)adaptor.create(UNTIL1015);
                    adaptor.addChild(root_0, UNTIL1015_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN1016=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent14392); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN1016_tree = (CommonTree)adaptor.create(PATTERN1016);
                    adaptor.addChild(root_0, PATTERN1016_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL1017=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent14399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL1017_tree = (CommonTree)adaptor.create(SQL1017);
                    adaptor.addChild(root_0, SQL1017_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL1018=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent14406); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL1018_tree = (CommonTree)adaptor.create(METADATASQL1018);
                    adaptor.addChild(root_0, METADATASQL1018_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS1019=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent14413); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS1019_tree = (CommonTree)adaptor.create(PREVIOUS1019);
                    adaptor.addChild(root_0, PREVIOUS1019_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL1020=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent14420); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL1020_tree = (CommonTree)adaptor.create(PREVIOUSTAIL1020);
                    adaptor.addChild(root_0, PREVIOUSTAIL1020_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR1021=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent14427); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR1021_tree = (CommonTree)adaptor.create(PRIOR1021);
                    adaptor.addChild(root_0, PRIOR1021_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY1022=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent14434); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY1022_tree = (CommonTree)adaptor.create(WEEKDAY1022);
                    adaptor.addChild(root_0, WEEKDAY1022_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW1023=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent14441); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW1023_tree = (CommonTree)adaptor.create(LW1023);
                    adaptor.addChild(root_0, LW1023_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF1024=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent14448); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF1024_tree = (CommonTree)adaptor.create(INSTANCEOF1024);
                    adaptor.addChild(root_0, INSTANCEOF1024_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF1025=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent14455); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF1025_tree = (CommonTree)adaptor.create(TYPEOF1025);
                    adaptor.addChild(root_0, TYPEOF1025_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST1026=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent14462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST1026_tree = (CommonTree)adaptor.create(CAST1026);
                    adaptor.addChild(root_0, CAST1026_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT1027=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent14469); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT1027_tree = (CommonTree)adaptor.create(SNAPSHOT1027);
                    adaptor.addChild(root_0, SNAPSHOT1027_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE1028=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent14476); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE1028_tree = (CommonTree)adaptor.create(VARIABLE1028);
                    adaptor.addChild(root_0, VARIABLE1028_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX1029=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent14485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX1029_tree = (CommonTree)adaptor.create(INDEX1029);
                    adaptor.addChild(root_0, INDEX1029_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW1030=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent14494); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW1030_tree = (CommonTree)adaptor.create(WINDOW1030);
                    adaptor.addChild(root_0, WINDOW1030_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT1031=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent14501); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT1031_tree = (CommonTree)adaptor.create(LEFT1031);
                    adaptor.addChild(root_0, LEFT1031_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT1032=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent14508); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT1032_tree = (CommonTree)adaptor.create(RIGHT1032);
                    adaptor.addChild(root_0, RIGHT1032_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER1033=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent14515); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER1033_tree = (CommonTree)adaptor.create(OUTER1033);
                    adaptor.addChild(root_0, OUTER1033_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL1034=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent14522); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL1034_tree = (CommonTree)adaptor.create(FULL1034);
                    adaptor.addChild(root_0, FULL1034_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN1035=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent14529); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN1035_tree = (CommonTree)adaptor.create(JOIN1035);
                    adaptor.addChild(root_0, JOIN1035_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE1036=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent14536); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE1036_tree = (CommonTree)adaptor.create(DEFINE1036);
                    adaptor.addChild(root_0, DEFINE1036_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION1037=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent14543); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION1037_tree = (CommonTree)adaptor.create(PARTITION1037);
                    adaptor.addChild(root_0, PARTITION1037_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES1038=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent14550); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES1038_tree = (CommonTree)adaptor.create(MATCHES1038);
                    adaptor.addChild(root_0, MATCHES1038_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
                case 48 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CONTEXT1039=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_keywordAllowedIdent14557); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONTEXT1039_tree = (CommonTree)adaptor.create(CONTEXT1039);
                    adaptor.addChild(root_0, CONTEXT1039_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "context"; 
                    }
                    }
                    break;
                case 49 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FOR1040=(Token)match(input,FOR,FOLLOW_FOR_in_keywordAllowedIdent14564); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOR1040_tree = (CommonTree)adaptor.create(FOR1040);
                    adaptor.addChild(root_0, FOR1040_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "for"; 
                    }
                    }
                    break;
                case 50 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    USING1041=(Token)match(input,USING,FOLLOW_USING_in_keywordAllowedIdent14571); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING1041_tree = (CommonTree)adaptor.create(USING1041);
                    adaptor.addChild(root_0, USING1041_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "using"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token i3=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree i3_tree=null;
        try {
            int alt387=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt387=1;
                }
                break;
            case EVENTS:
                {
                alt387=2;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt387=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 387, 0, input);
                throw nvae;
            }
            switch (alt387) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr14592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_escapableStr14601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i2.getText(); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i3=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr14610); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i3_tree = (CommonTree)adaptor.create(i3);
                    adaptor.addChild(root_0, i3_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i3.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT1042=null;
        CommonTree t_tree=null;
        CommonTree IDENT1042_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt388=2;
            int LA388_0 = input.LA(1);
            if ( (LA388_0==IDENT) ) {
                alt388=1;
            }
            else if ( (LA388_0==TICKED_STRING_LITERAL) ) {
                alt388=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 388, 0, input);
                throw nvae;
            }
            switch (alt388) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT1042=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent14624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT1042_tree = (CommonTree)adaptor.create(IDENT1042);
                    adaptor.addChild(root_0, IDENT1042_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent14632); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.yearPart_return yearPart1043 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart1044 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart1045 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1046 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1047 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1048 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1049 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1050 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart1051 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart1052 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1053 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1054 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1055 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1056 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1057 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart1058 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1059 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1060 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1061 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1062 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1063 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1064 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1065 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1066 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1067 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1068 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1069 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1070 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1071 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1072 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1073 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1074 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1075 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1076 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1077 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1078 = null;
        RewriteRuleSubtreeStream stream_yearPart=new RewriteRuleSubtreeStream(adaptor,"rule yearPart");
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        RewriteRuleSubtreeStream stream_weekPart=new RewriteRuleSubtreeStream(adaptor,"rule weekPart");
        RewriteRuleSubtreeStream stream_monthPart=new RewriteRuleSubtreeStream(adaptor,"rule monthPart");
        try {
            {
            int alt417=8;
            switch ( input.LA(1) ) {
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt417=1;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt417=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt417=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt417=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt417=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt417=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt417=5;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt417=7;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 417, 9, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt417=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt417=3;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt417=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt417=8;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt417=5;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt417=6;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt417=7;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt417=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 417, 10, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt417=7;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt417=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt417=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt417=3;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt417=4;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt417=6;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt417=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt417=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 417, 11, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt417=3;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt417=7;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt417=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt417=1;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt417=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt417=8;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt417=6;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt417=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 417, 12, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 417, 1, input);
                    throw nvae;
                }
                }
                break;
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt417=1;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt417=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt417=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt417=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt417=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt417=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt417=5;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt417=7;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 417, 13, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt417=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt417=3;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt417=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt417=8;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt417=5;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt417=6;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt417=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt417=7;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 417, 14, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt417=7;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt417=1;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt417=5;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt417=3;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt417=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt417=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt417=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt417=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 417, 15, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt417=3;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt417=7;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt417=1;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt417=5;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt417=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt417=8;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt417=6;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt417=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 417, 16, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 417, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt417=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt417=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt417=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt417=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt417=2;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt417=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt417=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt417=7;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 417, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt417=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt417=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt417=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt417=8;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt417=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt417=6;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt417=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt417=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 417, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt417=7;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt417=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt417=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt417=3;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt417=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt417=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt417=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt417=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 417, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt417=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt417=7;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt417=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt417=1;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt417=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt417=8;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt417=6;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt417=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 417, 6, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt417=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt417=7;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt417=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt417=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt417=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt417=8;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt417=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt417=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 417, 7, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt417=6;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt417=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt417=7;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt417=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt417=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt417=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt417=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt417=8;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 417, 8, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 417, 0, input);
                throw nvae;
            }
            switch (alt417) {
                case 1 :
                    {
                    pushFollow(FOLLOW_yearPart_in_timePeriod14657);
                    yearPart1043=yearPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yearPart.add(yearPart1043.getTree());
                    int alt389=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA389_26 = input.LA(3);
                                    if ( ((LA389_26>=TIMEPERIOD_MONTH && LA389_26<=TIMEPERIOD_MONTHS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA389_27 = input.LA(3);
                                    if ( ((LA389_27>=TIMEPERIOD_MONTH && LA389_27<=TIMEPERIOD_MONTHS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA389_28 = input.LA(3);
                                    if ( ((LA389_28>=TIMEPERIOD_MONTH && LA389_28<=TIMEPERIOD_MONTHS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA389_29 = input.LA(3);
                                    if ( ((LA389_29>=TIMEPERIOD_MONTH && LA389_29<=TIMEPERIOD_MONTHS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA389_30 = input.LA(3);
                                    if ( ((LA389_30>=TIMEPERIOD_MONTH && LA389_30<=TIMEPERIOD_MONTHS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA389_31 = input.LA(3);
                                    if ( ((LA389_31>=TIMEPERIOD_MONTH && LA389_31<=TIMEPERIOD_MONTHS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA389_32 = input.LA(3);
                                    if ( ((LA389_32>=TIMEPERIOD_MONTH && LA389_32<=TIMEPERIOD_MONTHS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA389_33 = input.LA(3);
                                    if ( ((LA389_33>=TIMEPERIOD_MONTH && LA389_33<=TIMEPERIOD_MONTHS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA389_3 = input.LA(2);
                            if ( ((LA389_3>=TIMEPERIOD_MONTH && LA389_3<=TIMEPERIOD_MONTHS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA389_4 = input.LA(2);
                            if ( ((LA389_4>=TIMEPERIOD_MONTH && LA389_4<=TIMEPERIOD_MONTHS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA389_5 = input.LA(2);
                            if ( ((LA389_5>=TIMEPERIOD_MONTH && LA389_5<=TIMEPERIOD_MONTHS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA389_6 = input.LA(2);
                            if ( ((LA389_6>=TIMEPERIOD_MONTH && LA389_6<=TIMEPERIOD_MONTHS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA389_7 = input.LA(2);
                            if ( ((LA389_7>=TIMEPERIOD_MONTH && LA389_7<=TIMEPERIOD_MONTHS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA389_8 = input.LA(2);
                            if ( ((LA389_8>=TIMEPERIOD_MONTH && LA389_8<=TIMEPERIOD_MONTHS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                    }
                    switch (alt389) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_monthPart_in_timePeriod14659);
                            monthPart1044=monthPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_monthPart.add(monthPart1044.getTree());
                            }
                            break;
                    }
                    int alt390=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA390_26 = input.LA(3);
                                    if ( ((LA390_26>=TIMEPERIOD_WEEK && LA390_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA390_27 = input.LA(3);
                                    if ( ((LA390_27>=TIMEPERIOD_WEEK && LA390_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA390_28 = input.LA(3);
                                    if ( ((LA390_28>=TIMEPERIOD_WEEK && LA390_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA390_29 = input.LA(3);
                                    if ( ((LA390_29>=TIMEPERIOD_WEEK && LA390_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA390_30 = input.LA(3);
                                    if ( ((LA390_30>=TIMEPERIOD_WEEK && LA390_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA390_31 = input.LA(3);
                                    if ( ((LA390_31>=TIMEPERIOD_WEEK && LA390_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA390_32 = input.LA(3);
                                    if ( ((LA390_32>=TIMEPERIOD_WEEK && LA390_32<=TIMEPERIOD_WEEKS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA390_33 = input.LA(3);
                                    if ( ((LA390_33>=TIMEPERIOD_WEEK && LA390_33<=TIMEPERIOD_WEEKS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA390_3 = input.LA(2);
                            if ( ((LA390_3>=TIMEPERIOD_WEEK && LA390_3<=TIMEPERIOD_WEEKS)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA390_4 = input.LA(2);
                            if ( ((LA390_4>=TIMEPERIOD_WEEK && LA390_4<=TIMEPERIOD_WEEKS)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA390_5 = input.LA(2);
                            if ( ((LA390_5>=TIMEPERIOD_WEEK && LA390_5<=TIMEPERIOD_WEEKS)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA390_6 = input.LA(2);
                            if ( ((LA390_6>=TIMEPERIOD_WEEK && LA390_6<=TIMEPERIOD_WEEKS)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA390_7 = input.LA(2);
                            if ( ((LA390_7>=TIMEPERIOD_WEEK && LA390_7<=TIMEPERIOD_WEEKS)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA390_8 = input.LA(2);
                            if ( ((LA390_8>=TIMEPERIOD_WEEK && LA390_8<=TIMEPERIOD_WEEKS)) ) {
                                alt390=1;
                            }
                            }
                            break;
                    }
                    switch (alt390) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod14662);
                            weekPart1045=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart1045.getTree());
                            }
                            break;
                    }
                    int alt391=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA391_26 = input.LA(3);
                                    if ( ((LA391_26>=TIMEPERIOD_DAY && LA391_26<=TIMEPERIOD_DAYS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA391_27 = input.LA(3);
                                    if ( ((LA391_27>=TIMEPERIOD_DAY && LA391_27<=TIMEPERIOD_DAYS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA391_28 = input.LA(3);
                                    if ( ((LA391_28>=TIMEPERIOD_DAY && LA391_28<=TIMEPERIOD_DAYS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA391_29 = input.LA(3);
                                    if ( ((LA391_29>=TIMEPERIOD_DAY && LA391_29<=TIMEPERIOD_DAYS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA391_30 = input.LA(3);
                                    if ( ((LA391_30>=TIMEPERIOD_DAY && LA391_30<=TIMEPERIOD_DAYS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA391_31 = input.LA(3);
                                    if ( ((LA391_31>=TIMEPERIOD_DAY && LA391_31<=TIMEPERIOD_DAYS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA391_32 = input.LA(3);
                                    if ( ((LA391_32>=TIMEPERIOD_DAY && LA391_32<=TIMEPERIOD_DAYS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA391_33 = input.LA(3);
                                    if ( ((LA391_33>=TIMEPERIOD_DAY && LA391_33<=TIMEPERIOD_DAYS)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA391_3 = input.LA(2);
                            if ( ((LA391_3>=TIMEPERIOD_DAY && LA391_3<=TIMEPERIOD_DAYS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA391_4 = input.LA(2);
                            if ( ((LA391_4>=TIMEPERIOD_DAY && LA391_4<=TIMEPERIOD_DAYS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA391_5 = input.LA(2);
                            if ( ((LA391_5>=TIMEPERIOD_DAY && LA391_5<=TIMEPERIOD_DAYS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA391_6 = input.LA(2);
                            if ( ((LA391_6>=TIMEPERIOD_DAY && LA391_6<=TIMEPERIOD_DAYS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA391_7 = input.LA(2);
                            if ( ((LA391_7>=TIMEPERIOD_DAY && LA391_7<=TIMEPERIOD_DAYS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA391_8 = input.LA(2);
                            if ( ((LA391_8>=TIMEPERIOD_DAY && LA391_8<=TIMEPERIOD_DAYS)) ) {
                                alt391=1;
                            }
                            }
                            break;
                    }
                    switch (alt391) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod14665);
                            dayPart1046=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart1046.getTree());
                            }
                            break;
                    }
                    int alt392=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA392_26 = input.LA(3);
                                    if ( ((LA392_26>=TIMEPERIOD_HOUR && LA392_26<=TIMEPERIOD_HOURS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA392_27 = input.LA(3);
                                    if ( ((LA392_27>=TIMEPERIOD_HOUR && LA392_27<=TIMEPERIOD_HOURS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA392_28 = input.LA(3);
                                    if ( ((LA392_28>=TIMEPERIOD_HOUR && LA392_28<=TIMEPERIOD_HOURS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA392_29 = input.LA(3);
                                    if ( ((LA392_29>=TIMEPERIOD_HOUR && LA392_29<=TIMEPERIOD_HOURS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA392_30 = input.LA(3);
                                    if ( ((LA392_30>=TIMEPERIOD_HOUR && LA392_30<=TIMEPERIOD_HOURS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA392_31 = input.LA(3);
                                    if ( ((LA392_31>=TIMEPERIOD_HOUR && LA392_31<=TIMEPERIOD_HOURS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA392_32 = input.LA(3);
                                    if ( ((LA392_32>=TIMEPERIOD_HOUR && LA392_32<=TIMEPERIOD_HOURS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA392_33 = input.LA(3);
                                    if ( ((LA392_33>=TIMEPERIOD_HOUR && LA392_33<=TIMEPERIOD_HOURS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA392_3 = input.LA(2);
                            if ( ((LA392_3>=TIMEPERIOD_HOUR && LA392_3<=TIMEPERIOD_HOURS)) ) {
                                alt392=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA392_4 = input.LA(2);
                            if ( ((LA392_4>=TIMEPERIOD_HOUR && LA392_4<=TIMEPERIOD_HOURS)) ) {
                                alt392=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA392_5 = input.LA(2);
                            if ( ((LA392_5>=TIMEPERIOD_HOUR && LA392_5<=TIMEPERIOD_HOURS)) ) {
                                alt392=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA392_6 = input.LA(2);
                            if ( ((LA392_6>=TIMEPERIOD_HOUR && LA392_6<=TIMEPERIOD_HOURS)) ) {
                                alt392=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA392_7 = input.LA(2);
                            if ( ((LA392_7>=TIMEPERIOD_HOUR && LA392_7<=TIMEPERIOD_HOURS)) ) {
                                alt392=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA392_8 = input.LA(2);
                            if ( ((LA392_8>=TIMEPERIOD_HOUR && LA392_8<=TIMEPERIOD_HOURS)) ) {
                                alt392=1;
                            }
                            }
                            break;
                    }
                    switch (alt392) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14668);
                            hourPart1047=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1047.getTree());
                            }
                            break;
                    }
                    int alt393=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA393_26 = input.LA(3);
                                    if ( (LA393_26==MIN||(LA393_26>=TIMEPERIOD_MINUTE && LA393_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA393_27 = input.LA(3);
                                    if ( (LA393_27==MIN||(LA393_27>=TIMEPERIOD_MINUTE && LA393_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA393_28 = input.LA(3);
                                    if ( (LA393_28==MIN||(LA393_28>=TIMEPERIOD_MINUTE && LA393_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA393_29 = input.LA(3);
                                    if ( (LA393_29==MIN||(LA393_29>=TIMEPERIOD_MINUTE && LA393_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA393_30 = input.LA(3);
                                    if ( (LA393_30==MIN||(LA393_30>=TIMEPERIOD_MINUTE && LA393_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA393_31 = input.LA(3);
                                    if ( (LA393_31==MIN||(LA393_31>=TIMEPERIOD_MINUTE && LA393_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA393_32 = input.LA(3);
                                    if ( (LA393_32==MIN||(LA393_32>=TIMEPERIOD_MINUTE && LA393_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA393_33 = input.LA(3);
                                    if ( (LA393_33==MIN||(LA393_33>=TIMEPERIOD_MINUTE && LA393_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt393=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA393_3 = input.LA(2);
                            if ( (LA393_3==MIN||(LA393_3>=TIMEPERIOD_MINUTE && LA393_3<=TIMEPERIOD_MINUTES)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA393_4 = input.LA(2);
                            if ( (LA393_4==MIN||(LA393_4>=TIMEPERIOD_MINUTE && LA393_4<=TIMEPERIOD_MINUTES)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA393_5 = input.LA(2);
                            if ( (LA393_5==MIN||(LA393_5>=TIMEPERIOD_MINUTE && LA393_5<=TIMEPERIOD_MINUTES)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA393_6 = input.LA(2);
                            if ( (LA393_6==MIN||(LA393_6>=TIMEPERIOD_MINUTE && LA393_6<=TIMEPERIOD_MINUTES)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA393_7 = input.LA(2);
                            if ( (LA393_7==MIN||(LA393_7>=TIMEPERIOD_MINUTE && LA393_7<=TIMEPERIOD_MINUTES)) ) {
                                alt393=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA393_8 = input.LA(2);
                            if ( (LA393_8==MIN||(LA393_8>=TIMEPERIOD_MINUTE && LA393_8<=TIMEPERIOD_MINUTES)) ) {
                                alt393=1;
                            }
                            }
                            break;
                    }
                    switch (alt393) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14671);
                            minutePart1048=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1048.getTree());
                            }
                            break;
                    }
                    int alt394=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA394_26 = input.LA(3);
                                    if ( ((LA394_26>=TIMEPERIOD_SEC && LA394_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA394_27 = input.LA(3);
                                    if ( ((LA394_27>=TIMEPERIOD_SEC && LA394_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA394_28 = input.LA(3);
                                    if ( ((LA394_28>=TIMEPERIOD_SEC && LA394_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA394_29 = input.LA(3);
                                    if ( ((LA394_29>=TIMEPERIOD_SEC && LA394_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA394_30 = input.LA(3);
                                    if ( ((LA394_30>=TIMEPERIOD_SEC && LA394_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA394_31 = input.LA(3);
                                    if ( ((LA394_31>=TIMEPERIOD_SEC && LA394_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA394_32 = input.LA(3);
                                    if ( ((LA394_32>=TIMEPERIOD_SEC && LA394_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA394_33 = input.LA(3);
                                    if ( ((LA394_33>=TIMEPERIOD_SEC && LA394_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA394_3 = input.LA(2);
                            if ( ((LA394_3>=TIMEPERIOD_SEC && LA394_3<=TIMEPERIOD_SECONDS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA394_4 = input.LA(2);
                            if ( ((LA394_4>=TIMEPERIOD_SEC && LA394_4<=TIMEPERIOD_SECONDS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA394_5 = input.LA(2);
                            if ( ((LA394_5>=TIMEPERIOD_SEC && LA394_5<=TIMEPERIOD_SECONDS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA394_6 = input.LA(2);
                            if ( ((LA394_6>=TIMEPERIOD_SEC && LA394_6<=TIMEPERIOD_SECONDS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA394_7 = input.LA(2);
                            if ( ((LA394_7>=TIMEPERIOD_SEC && LA394_7<=TIMEPERIOD_SECONDS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA394_8 = input.LA(2);
                            if ( ((LA394_8>=TIMEPERIOD_SEC && LA394_8<=TIMEPERIOD_SECONDS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                    }
                    switch (alt394) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14674);
                            secondPart1049=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1049.getTree());
                            }
                            break;
                    }
                    int alt395=2;
                    int LA395_0 = input.LA(1);
                    if ( (LA395_0==NUM_DOUBLE||LA395_0==IDENT||LA395_0==QUESTION||LA395_0==PLUS||LA395_0==MINUS||LA395_0==NUM_INT||(LA395_0>=NUM_LONG && LA395_0<=NUM_FLOAT)) ) {
                        alt395=1;
                    }
                    switch (alt395) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14677);
                            millisecondPart1050=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1050.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_monthPart_in_timePeriod14683);
                    monthPart1051=monthPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monthPart.add(monthPart1051.getTree());
                    int alt396=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA396_26 = input.LA(3);
                                    if ( ((LA396_26>=TIMEPERIOD_WEEK && LA396_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA396_27 = input.LA(3);
                                    if ( ((LA396_27>=TIMEPERIOD_WEEK && LA396_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA396_28 = input.LA(3);
                                    if ( ((LA396_28>=TIMEPERIOD_WEEK && LA396_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA396_29 = input.LA(3);
                                    if ( ((LA396_29>=TIMEPERIOD_WEEK && LA396_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA396_30 = input.LA(3);
                                    if ( ((LA396_30>=TIMEPERIOD_WEEK && LA396_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA396_31 = input.LA(3);
                                    if ( ((LA396_31>=TIMEPERIOD_WEEK && LA396_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA396_32 = input.LA(3);
                                    if ( ((LA396_32>=TIMEPERIOD_WEEK && LA396_32<=TIMEPERIOD_WEEKS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA396_33 = input.LA(3);
                                    if ( ((LA396_33>=TIMEPERIOD_WEEK && LA396_33<=TIMEPERIOD_WEEKS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA396_3 = input.LA(2);
                            if ( ((LA396_3>=TIMEPERIOD_WEEK && LA396_3<=TIMEPERIOD_WEEKS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA396_4 = input.LA(2);
                            if ( ((LA396_4>=TIMEPERIOD_WEEK && LA396_4<=TIMEPERIOD_WEEKS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA396_5 = input.LA(2);
                            if ( ((LA396_5>=TIMEPERIOD_WEEK && LA396_5<=TIMEPERIOD_WEEKS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA396_6 = input.LA(2);
                            if ( ((LA396_6>=TIMEPERIOD_WEEK && LA396_6<=TIMEPERIOD_WEEKS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA396_7 = input.LA(2);
                            if ( ((LA396_7>=TIMEPERIOD_WEEK && LA396_7<=TIMEPERIOD_WEEKS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA396_8 = input.LA(2);
                            if ( ((LA396_8>=TIMEPERIOD_WEEK && LA396_8<=TIMEPERIOD_WEEKS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                    }
                    switch (alt396) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod14685);
                            weekPart1052=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart1052.getTree());
                            }
                            break;
                    }
                    int alt397=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA397_26 = input.LA(3);
                                    if ( ((LA397_26>=TIMEPERIOD_DAY && LA397_26<=TIMEPERIOD_DAYS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA397_27 = input.LA(3);
                                    if ( ((LA397_27>=TIMEPERIOD_DAY && LA397_27<=TIMEPERIOD_DAYS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA397_28 = input.LA(3);
                                    if ( ((LA397_28>=TIMEPERIOD_DAY && LA397_28<=TIMEPERIOD_DAYS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA397_29 = input.LA(3);
                                    if ( ((LA397_29>=TIMEPERIOD_DAY && LA397_29<=TIMEPERIOD_DAYS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA397_30 = input.LA(3);
                                    if ( ((LA397_30>=TIMEPERIOD_DAY && LA397_30<=TIMEPERIOD_DAYS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA397_31 = input.LA(3);
                                    if ( ((LA397_31>=TIMEPERIOD_DAY && LA397_31<=TIMEPERIOD_DAYS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA397_32 = input.LA(3);
                                    if ( ((LA397_32>=TIMEPERIOD_DAY && LA397_32<=TIMEPERIOD_DAYS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA397_33 = input.LA(3);
                                    if ( ((LA397_33>=TIMEPERIOD_DAY && LA397_33<=TIMEPERIOD_DAYS)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA397_3 = input.LA(2);
                            if ( ((LA397_3>=TIMEPERIOD_DAY && LA397_3<=TIMEPERIOD_DAYS)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA397_4 = input.LA(2);
                            if ( ((LA397_4>=TIMEPERIOD_DAY && LA397_4<=TIMEPERIOD_DAYS)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA397_5 = input.LA(2);
                            if ( ((LA397_5>=TIMEPERIOD_DAY && LA397_5<=TIMEPERIOD_DAYS)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA397_6 = input.LA(2);
                            if ( ((LA397_6>=TIMEPERIOD_DAY && LA397_6<=TIMEPERIOD_DAYS)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA397_7 = input.LA(2);
                            if ( ((LA397_7>=TIMEPERIOD_DAY && LA397_7<=TIMEPERIOD_DAYS)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA397_8 = input.LA(2);
                            if ( ((LA397_8>=TIMEPERIOD_DAY && LA397_8<=TIMEPERIOD_DAYS)) ) {
                                alt397=1;
                            }
                            }
                            break;
                    }
                    switch (alt397) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod14688);
                            dayPart1053=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart1053.getTree());
                            }
                            break;
                    }
                    int alt398=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA398_26 = input.LA(3);
                                    if ( ((LA398_26>=TIMEPERIOD_HOUR && LA398_26<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA398_27 = input.LA(3);
                                    if ( ((LA398_27>=TIMEPERIOD_HOUR && LA398_27<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA398_28 = input.LA(3);
                                    if ( ((LA398_28>=TIMEPERIOD_HOUR && LA398_28<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA398_29 = input.LA(3);
                                    if ( ((LA398_29>=TIMEPERIOD_HOUR && LA398_29<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA398_30 = input.LA(3);
                                    if ( ((LA398_30>=TIMEPERIOD_HOUR && LA398_30<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA398_31 = input.LA(3);
                                    if ( ((LA398_31>=TIMEPERIOD_HOUR && LA398_31<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA398_32 = input.LA(3);
                                    if ( ((LA398_32>=TIMEPERIOD_HOUR && LA398_32<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA398_33 = input.LA(3);
                                    if ( ((LA398_33>=TIMEPERIOD_HOUR && LA398_33<=TIMEPERIOD_HOURS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA398_3 = input.LA(2);
                            if ( ((LA398_3>=TIMEPERIOD_HOUR && LA398_3<=TIMEPERIOD_HOURS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA398_4 = input.LA(2);
                            if ( ((LA398_4>=TIMEPERIOD_HOUR && LA398_4<=TIMEPERIOD_HOURS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA398_5 = input.LA(2);
                            if ( ((LA398_5>=TIMEPERIOD_HOUR && LA398_5<=TIMEPERIOD_HOURS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA398_6 = input.LA(2);
                            if ( ((LA398_6>=TIMEPERIOD_HOUR && LA398_6<=TIMEPERIOD_HOURS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA398_7 = input.LA(2);
                            if ( ((LA398_7>=TIMEPERIOD_HOUR && LA398_7<=TIMEPERIOD_HOURS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA398_8 = input.LA(2);
                            if ( ((LA398_8>=TIMEPERIOD_HOUR && LA398_8<=TIMEPERIOD_HOURS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                    }
                    switch (alt398) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14691);
                            hourPart1054=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1054.getTree());
                            }
                            break;
                    }
                    int alt399=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA399_26 = input.LA(3);
                                    if ( (LA399_26==MIN||(LA399_26>=TIMEPERIOD_MINUTE && LA399_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA399_27 = input.LA(3);
                                    if ( (LA399_27==MIN||(LA399_27>=TIMEPERIOD_MINUTE && LA399_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA399_28 = input.LA(3);
                                    if ( (LA399_28==MIN||(LA399_28>=TIMEPERIOD_MINUTE && LA399_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA399_29 = input.LA(3);
                                    if ( (LA399_29==MIN||(LA399_29>=TIMEPERIOD_MINUTE && LA399_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA399_30 = input.LA(3);
                                    if ( (LA399_30==MIN||(LA399_30>=TIMEPERIOD_MINUTE && LA399_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA399_31 = input.LA(3);
                                    if ( (LA399_31==MIN||(LA399_31>=TIMEPERIOD_MINUTE && LA399_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA399_32 = input.LA(3);
                                    if ( (LA399_32==MIN||(LA399_32>=TIMEPERIOD_MINUTE && LA399_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA399_33 = input.LA(3);
                                    if ( (LA399_33==MIN||(LA399_33>=TIMEPERIOD_MINUTE && LA399_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt399=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA399_3 = input.LA(2);
                            if ( (LA399_3==MIN||(LA399_3>=TIMEPERIOD_MINUTE && LA399_3<=TIMEPERIOD_MINUTES)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA399_4 = input.LA(2);
                            if ( (LA399_4==MIN||(LA399_4>=TIMEPERIOD_MINUTE && LA399_4<=TIMEPERIOD_MINUTES)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA399_5 = input.LA(2);
                            if ( (LA399_5==MIN||(LA399_5>=TIMEPERIOD_MINUTE && LA399_5<=TIMEPERIOD_MINUTES)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA399_6 = input.LA(2);
                            if ( (LA399_6==MIN||(LA399_6>=TIMEPERIOD_MINUTE && LA399_6<=TIMEPERIOD_MINUTES)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA399_7 = input.LA(2);
                            if ( (LA399_7==MIN||(LA399_7>=TIMEPERIOD_MINUTE && LA399_7<=TIMEPERIOD_MINUTES)) ) {
                                alt399=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA399_8 = input.LA(2);
                            if ( (LA399_8==MIN||(LA399_8>=TIMEPERIOD_MINUTE && LA399_8<=TIMEPERIOD_MINUTES)) ) {
                                alt399=1;
                            }
                            }
                            break;
                    }
                    switch (alt399) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14694);
                            minutePart1055=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1055.getTree());
                            }
                            break;
                    }
                    int alt400=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA400_26 = input.LA(3);
                                    if ( ((LA400_26>=TIMEPERIOD_SEC && LA400_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA400_27 = input.LA(3);
                                    if ( ((LA400_27>=TIMEPERIOD_SEC && LA400_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA400_28 = input.LA(3);
                                    if ( ((LA400_28>=TIMEPERIOD_SEC && LA400_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA400_29 = input.LA(3);
                                    if ( ((LA400_29>=TIMEPERIOD_SEC && LA400_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA400_30 = input.LA(3);
                                    if ( ((LA400_30>=TIMEPERIOD_SEC && LA400_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA400_31 = input.LA(3);
                                    if ( ((LA400_31>=TIMEPERIOD_SEC && LA400_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA400_32 = input.LA(3);
                                    if ( ((LA400_32>=TIMEPERIOD_SEC && LA400_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA400_33 = input.LA(3);
                                    if ( ((LA400_33>=TIMEPERIOD_SEC && LA400_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA400_3 = input.LA(2);
                            if ( ((LA400_3>=TIMEPERIOD_SEC && LA400_3<=TIMEPERIOD_SECONDS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA400_4 = input.LA(2);
                            if ( ((LA400_4>=TIMEPERIOD_SEC && LA400_4<=TIMEPERIOD_SECONDS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA400_5 = input.LA(2);
                            if ( ((LA400_5>=TIMEPERIOD_SEC && LA400_5<=TIMEPERIOD_SECONDS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA400_6 = input.LA(2);
                            if ( ((LA400_6>=TIMEPERIOD_SEC && LA400_6<=TIMEPERIOD_SECONDS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA400_7 = input.LA(2);
                            if ( ((LA400_7>=TIMEPERIOD_SEC && LA400_7<=TIMEPERIOD_SECONDS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA400_8 = input.LA(2);
                            if ( ((LA400_8>=TIMEPERIOD_SEC && LA400_8<=TIMEPERIOD_SECONDS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                    }
                    switch (alt400) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14697);
                            secondPart1056=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1056.getTree());
                            }
                            break;
                    }
                    int alt401=2;
                    int LA401_0 = input.LA(1);
                    if ( (LA401_0==NUM_DOUBLE||LA401_0==IDENT||LA401_0==QUESTION||LA401_0==PLUS||LA401_0==MINUS||LA401_0==NUM_INT||(LA401_0>=NUM_LONG && LA401_0<=NUM_FLOAT)) ) {
                        alt401=1;
                    }
                    switch (alt401) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14700);
                            millisecondPart1057=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1057.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_weekPart_in_timePeriod14706);
                    weekPart1058=weekPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_weekPart.add(weekPart1058.getTree());
                    int alt402=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA402_26 = input.LA(3);
                                    if ( ((LA402_26>=TIMEPERIOD_DAY && LA402_26<=TIMEPERIOD_DAYS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA402_27 = input.LA(3);
                                    if ( ((LA402_27>=TIMEPERIOD_DAY && LA402_27<=TIMEPERIOD_DAYS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA402_28 = input.LA(3);
                                    if ( ((LA402_28>=TIMEPERIOD_DAY && LA402_28<=TIMEPERIOD_DAYS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA402_29 = input.LA(3);
                                    if ( ((LA402_29>=TIMEPERIOD_DAY && LA402_29<=TIMEPERIOD_DAYS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA402_30 = input.LA(3);
                                    if ( ((LA402_30>=TIMEPERIOD_DAY && LA402_30<=TIMEPERIOD_DAYS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA402_31 = input.LA(3);
                                    if ( ((LA402_31>=TIMEPERIOD_DAY && LA402_31<=TIMEPERIOD_DAYS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA402_32 = input.LA(3);
                                    if ( ((LA402_32>=TIMEPERIOD_DAY && LA402_32<=TIMEPERIOD_DAYS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA402_33 = input.LA(3);
                                    if ( ((LA402_33>=TIMEPERIOD_DAY && LA402_33<=TIMEPERIOD_DAYS)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA402_3 = input.LA(2);
                            if ( ((LA402_3>=TIMEPERIOD_DAY && LA402_3<=TIMEPERIOD_DAYS)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA402_4 = input.LA(2);
                            if ( ((LA402_4>=TIMEPERIOD_DAY && LA402_4<=TIMEPERIOD_DAYS)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA402_5 = input.LA(2);
                            if ( ((LA402_5>=TIMEPERIOD_DAY && LA402_5<=TIMEPERIOD_DAYS)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA402_6 = input.LA(2);
                            if ( ((LA402_6>=TIMEPERIOD_DAY && LA402_6<=TIMEPERIOD_DAYS)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA402_7 = input.LA(2);
                            if ( ((LA402_7>=TIMEPERIOD_DAY && LA402_7<=TIMEPERIOD_DAYS)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA402_8 = input.LA(2);
                            if ( ((LA402_8>=TIMEPERIOD_DAY && LA402_8<=TIMEPERIOD_DAYS)) ) {
                                alt402=1;
                            }
                            }
                            break;
                    }
                    switch (alt402) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod14708);
                            dayPart1059=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart1059.getTree());
                            }
                            break;
                    }
                    int alt403=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA403_26 = input.LA(3);
                                    if ( ((LA403_26>=TIMEPERIOD_HOUR && LA403_26<=TIMEPERIOD_HOURS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA403_27 = input.LA(3);
                                    if ( ((LA403_27>=TIMEPERIOD_HOUR && LA403_27<=TIMEPERIOD_HOURS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA403_28 = input.LA(3);
                                    if ( ((LA403_28>=TIMEPERIOD_HOUR && LA403_28<=TIMEPERIOD_HOURS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA403_29 = input.LA(3);
                                    if ( ((LA403_29>=TIMEPERIOD_HOUR && LA403_29<=TIMEPERIOD_HOURS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA403_30 = input.LA(3);
                                    if ( ((LA403_30>=TIMEPERIOD_HOUR && LA403_30<=TIMEPERIOD_HOURS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA403_31 = input.LA(3);
                                    if ( ((LA403_31>=TIMEPERIOD_HOUR && LA403_31<=TIMEPERIOD_HOURS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA403_32 = input.LA(3);
                                    if ( ((LA403_32>=TIMEPERIOD_HOUR && LA403_32<=TIMEPERIOD_HOURS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA403_33 = input.LA(3);
                                    if ( ((LA403_33>=TIMEPERIOD_HOUR && LA403_33<=TIMEPERIOD_HOURS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA403_3 = input.LA(2);
                            if ( ((LA403_3>=TIMEPERIOD_HOUR && LA403_3<=TIMEPERIOD_HOURS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA403_4 = input.LA(2);
                            if ( ((LA403_4>=TIMEPERIOD_HOUR && LA403_4<=TIMEPERIOD_HOURS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA403_5 = input.LA(2);
                            if ( ((LA403_5>=TIMEPERIOD_HOUR && LA403_5<=TIMEPERIOD_HOURS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA403_6 = input.LA(2);
                            if ( ((LA403_6>=TIMEPERIOD_HOUR && LA403_6<=TIMEPERIOD_HOURS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA403_7 = input.LA(2);
                            if ( ((LA403_7>=TIMEPERIOD_HOUR && LA403_7<=TIMEPERIOD_HOURS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA403_8 = input.LA(2);
                            if ( ((LA403_8>=TIMEPERIOD_HOUR && LA403_8<=TIMEPERIOD_HOURS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                    }
                    switch (alt403) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14711);
                            hourPart1060=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1060.getTree());
                            }
                            break;
                    }
                    int alt404=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA404_26 = input.LA(3);
                                    if ( (LA404_26==MIN||(LA404_26>=TIMEPERIOD_MINUTE && LA404_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA404_27 = input.LA(3);
                                    if ( (LA404_27==MIN||(LA404_27>=TIMEPERIOD_MINUTE && LA404_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA404_28 = input.LA(3);
                                    if ( (LA404_28==MIN||(LA404_28>=TIMEPERIOD_MINUTE && LA404_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA404_29 = input.LA(3);
                                    if ( (LA404_29==MIN||(LA404_29>=TIMEPERIOD_MINUTE && LA404_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA404_30 = input.LA(3);
                                    if ( (LA404_30==MIN||(LA404_30>=TIMEPERIOD_MINUTE && LA404_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA404_31 = input.LA(3);
                                    if ( (LA404_31==MIN||(LA404_31>=TIMEPERIOD_MINUTE && LA404_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA404_32 = input.LA(3);
                                    if ( (LA404_32==MIN||(LA404_32>=TIMEPERIOD_MINUTE && LA404_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA404_33 = input.LA(3);
                                    if ( (LA404_33==MIN||(LA404_33>=TIMEPERIOD_MINUTE && LA404_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt404=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA404_3 = input.LA(2);
                            if ( (LA404_3==MIN||(LA404_3>=TIMEPERIOD_MINUTE && LA404_3<=TIMEPERIOD_MINUTES)) ) {
                                alt404=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA404_4 = input.LA(2);
                            if ( (LA404_4==MIN||(LA404_4>=TIMEPERIOD_MINUTE && LA404_4<=TIMEPERIOD_MINUTES)) ) {
                                alt404=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA404_5 = input.LA(2);
                            if ( (LA404_5==MIN||(LA404_5>=TIMEPERIOD_MINUTE && LA404_5<=TIMEPERIOD_MINUTES)) ) {
                                alt404=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA404_6 = input.LA(2);
                            if ( (LA404_6==MIN||(LA404_6>=TIMEPERIOD_MINUTE && LA404_6<=TIMEPERIOD_MINUTES)) ) {
                                alt404=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA404_7 = input.LA(2);
                            if ( (LA404_7==MIN||(LA404_7>=TIMEPERIOD_MINUTE && LA404_7<=TIMEPERIOD_MINUTES)) ) {
                                alt404=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA404_8 = input.LA(2);
                            if ( (LA404_8==MIN||(LA404_8>=TIMEPERIOD_MINUTE && LA404_8<=TIMEPERIOD_MINUTES)) ) {
                                alt404=1;
                            }
                            }
                            break;
                    }
                    switch (alt404) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14714);
                            minutePart1061=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1061.getTree());
                            }
                            break;
                    }
                    int alt405=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA405_26 = input.LA(3);
                                    if ( ((LA405_26>=TIMEPERIOD_SEC && LA405_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA405_27 = input.LA(3);
                                    if ( ((LA405_27>=TIMEPERIOD_SEC && LA405_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA405_28 = input.LA(3);
                                    if ( ((LA405_28>=TIMEPERIOD_SEC && LA405_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA405_29 = input.LA(3);
                                    if ( ((LA405_29>=TIMEPERIOD_SEC && LA405_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA405_30 = input.LA(3);
                                    if ( ((LA405_30>=TIMEPERIOD_SEC && LA405_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA405_31 = input.LA(3);
                                    if ( ((LA405_31>=TIMEPERIOD_SEC && LA405_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA405_32 = input.LA(3);
                                    if ( ((LA405_32>=TIMEPERIOD_SEC && LA405_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA405_33 = input.LA(3);
                                    if ( ((LA405_33>=TIMEPERIOD_SEC && LA405_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA405_3 = input.LA(2);
                            if ( ((LA405_3>=TIMEPERIOD_SEC && LA405_3<=TIMEPERIOD_SECONDS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA405_4 = input.LA(2);
                            if ( ((LA405_4>=TIMEPERIOD_SEC && LA405_4<=TIMEPERIOD_SECONDS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA405_5 = input.LA(2);
                            if ( ((LA405_5>=TIMEPERIOD_SEC && LA405_5<=TIMEPERIOD_SECONDS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA405_6 = input.LA(2);
                            if ( ((LA405_6>=TIMEPERIOD_SEC && LA405_6<=TIMEPERIOD_SECONDS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA405_7 = input.LA(2);
                            if ( ((LA405_7>=TIMEPERIOD_SEC && LA405_7<=TIMEPERIOD_SECONDS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA405_8 = input.LA(2);
                            if ( ((LA405_8>=TIMEPERIOD_SEC && LA405_8<=TIMEPERIOD_SECONDS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                    }
                    switch (alt405) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14717);
                            secondPart1062=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1062.getTree());
                            }
                            break;
                    }
                    int alt406=2;
                    int LA406_0 = input.LA(1);
                    if ( (LA406_0==NUM_DOUBLE||LA406_0==IDENT||LA406_0==QUESTION||LA406_0==PLUS||LA406_0==MINUS||LA406_0==NUM_INT||(LA406_0>=NUM_LONG && LA406_0<=NUM_FLOAT)) ) {
                        alt406=1;
                    }
                    switch (alt406) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14720);
                            millisecondPart1063=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1063.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod14726);
                    dayPart1064=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart1064.getTree());
                    int alt407=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA407_26 = input.LA(3);
                                    if ( ((LA407_26>=TIMEPERIOD_HOUR && LA407_26<=TIMEPERIOD_HOURS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA407_27 = input.LA(3);
                                    if ( ((LA407_27>=TIMEPERIOD_HOUR && LA407_27<=TIMEPERIOD_HOURS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA407_28 = input.LA(3);
                                    if ( ((LA407_28>=TIMEPERIOD_HOUR && LA407_28<=TIMEPERIOD_HOURS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA407_29 = input.LA(3);
                                    if ( ((LA407_29>=TIMEPERIOD_HOUR && LA407_29<=TIMEPERIOD_HOURS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA407_30 = input.LA(3);
                                    if ( ((LA407_30>=TIMEPERIOD_HOUR && LA407_30<=TIMEPERIOD_HOURS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA407_31 = input.LA(3);
                                    if ( ((LA407_31>=TIMEPERIOD_HOUR && LA407_31<=TIMEPERIOD_HOURS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA407_32 = input.LA(3);
                                    if ( ((LA407_32>=TIMEPERIOD_HOUR && LA407_32<=TIMEPERIOD_HOURS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA407_33 = input.LA(3);
                                    if ( ((LA407_33>=TIMEPERIOD_HOUR && LA407_33<=TIMEPERIOD_HOURS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA407_3 = input.LA(2);
                            if ( ((LA407_3>=TIMEPERIOD_HOUR && LA407_3<=TIMEPERIOD_HOURS)) ) {
                                alt407=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA407_4 = input.LA(2);
                            if ( ((LA407_4>=TIMEPERIOD_HOUR && LA407_4<=TIMEPERIOD_HOURS)) ) {
                                alt407=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA407_5 = input.LA(2);
                            if ( ((LA407_5>=TIMEPERIOD_HOUR && LA407_5<=TIMEPERIOD_HOURS)) ) {
                                alt407=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA407_6 = input.LA(2);
                            if ( ((LA407_6>=TIMEPERIOD_HOUR && LA407_6<=TIMEPERIOD_HOURS)) ) {
                                alt407=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA407_7 = input.LA(2);
                            if ( ((LA407_7>=TIMEPERIOD_HOUR && LA407_7<=TIMEPERIOD_HOURS)) ) {
                                alt407=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA407_8 = input.LA(2);
                            if ( ((LA407_8>=TIMEPERIOD_HOUR && LA407_8<=TIMEPERIOD_HOURS)) ) {
                                alt407=1;
                            }
                            }
                            break;
                    }
                    switch (alt407) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14728);
                            hourPart1065=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1065.getTree());
                            }
                            break;
                    }
                    int alt408=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA408_26 = input.LA(3);
                                    if ( (LA408_26==MIN||(LA408_26>=TIMEPERIOD_MINUTE && LA408_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA408_27 = input.LA(3);
                                    if ( (LA408_27==MIN||(LA408_27>=TIMEPERIOD_MINUTE && LA408_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA408_28 = input.LA(3);
                                    if ( (LA408_28==MIN||(LA408_28>=TIMEPERIOD_MINUTE && LA408_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA408_29 = input.LA(3);
                                    if ( (LA408_29==MIN||(LA408_29>=TIMEPERIOD_MINUTE && LA408_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA408_30 = input.LA(3);
                                    if ( (LA408_30==MIN||(LA408_30>=TIMEPERIOD_MINUTE && LA408_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA408_31 = input.LA(3);
                                    if ( (LA408_31==MIN||(LA408_31>=TIMEPERIOD_MINUTE && LA408_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA408_32 = input.LA(3);
                                    if ( (LA408_32==MIN||(LA408_32>=TIMEPERIOD_MINUTE && LA408_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA408_33 = input.LA(3);
                                    if ( (LA408_33==MIN||(LA408_33>=TIMEPERIOD_MINUTE && LA408_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt408=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA408_3 = input.LA(2);
                            if ( (LA408_3==MIN||(LA408_3>=TIMEPERIOD_MINUTE && LA408_3<=TIMEPERIOD_MINUTES)) ) {
                                alt408=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA408_4 = input.LA(2);
                            if ( (LA408_4==MIN||(LA408_4>=TIMEPERIOD_MINUTE && LA408_4<=TIMEPERIOD_MINUTES)) ) {
                                alt408=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA408_5 = input.LA(2);
                            if ( (LA408_5==MIN||(LA408_5>=TIMEPERIOD_MINUTE && LA408_5<=TIMEPERIOD_MINUTES)) ) {
                                alt408=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA408_6 = input.LA(2);
                            if ( (LA408_6==MIN||(LA408_6>=TIMEPERIOD_MINUTE && LA408_6<=TIMEPERIOD_MINUTES)) ) {
                                alt408=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA408_7 = input.LA(2);
                            if ( (LA408_7==MIN||(LA408_7>=TIMEPERIOD_MINUTE && LA408_7<=TIMEPERIOD_MINUTES)) ) {
                                alt408=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA408_8 = input.LA(2);
                            if ( (LA408_8==MIN||(LA408_8>=TIMEPERIOD_MINUTE && LA408_8<=TIMEPERIOD_MINUTES)) ) {
                                alt408=1;
                            }
                            }
                            break;
                    }
                    switch (alt408) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14731);
                            minutePart1066=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1066.getTree());
                            }
                            break;
                    }
                    int alt409=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA409_26 = input.LA(3);
                                    if ( ((LA409_26>=TIMEPERIOD_SEC && LA409_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA409_27 = input.LA(3);
                                    if ( ((LA409_27>=TIMEPERIOD_SEC && LA409_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA409_28 = input.LA(3);
                                    if ( ((LA409_28>=TIMEPERIOD_SEC && LA409_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA409_29 = input.LA(3);
                                    if ( ((LA409_29>=TIMEPERIOD_SEC && LA409_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA409_30 = input.LA(3);
                                    if ( ((LA409_30>=TIMEPERIOD_SEC && LA409_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA409_31 = input.LA(3);
                                    if ( ((LA409_31>=TIMEPERIOD_SEC && LA409_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA409_32 = input.LA(3);
                                    if ( ((LA409_32>=TIMEPERIOD_SEC && LA409_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA409_33 = input.LA(3);
                                    if ( ((LA409_33>=TIMEPERIOD_SEC && LA409_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA409_3 = input.LA(2);
                            if ( ((LA409_3>=TIMEPERIOD_SEC && LA409_3<=TIMEPERIOD_SECONDS)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA409_4 = input.LA(2);
                            if ( ((LA409_4>=TIMEPERIOD_SEC && LA409_4<=TIMEPERIOD_SECONDS)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA409_5 = input.LA(2);
                            if ( ((LA409_5>=TIMEPERIOD_SEC && LA409_5<=TIMEPERIOD_SECONDS)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA409_6 = input.LA(2);
                            if ( ((LA409_6>=TIMEPERIOD_SEC && LA409_6<=TIMEPERIOD_SECONDS)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA409_7 = input.LA(2);
                            if ( ((LA409_7>=TIMEPERIOD_SEC && LA409_7<=TIMEPERIOD_SECONDS)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA409_8 = input.LA(2);
                            if ( ((LA409_8>=TIMEPERIOD_SEC && LA409_8<=TIMEPERIOD_SECONDS)) ) {
                                alt409=1;
                            }
                            }
                            break;
                    }
                    switch (alt409) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14734);
                            secondPart1067=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1067.getTree());
                            }
                            break;
                    }
                    int alt410=2;
                    int LA410_0 = input.LA(1);
                    if ( (LA410_0==NUM_DOUBLE||LA410_0==IDENT||LA410_0==QUESTION||LA410_0==PLUS||LA410_0==MINUS||LA410_0==NUM_INT||(LA410_0>=NUM_LONG && LA410_0<=NUM_FLOAT)) ) {
                        alt410=1;
                    }
                    switch (alt410) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14737);
                            millisecondPart1068=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1068.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod14743);
                    hourPart1069=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart1069.getTree());
                    int alt411=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA411_26 = input.LA(3);
                                    if ( (LA411_26==MIN||(LA411_26>=TIMEPERIOD_MINUTE && LA411_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA411_27 = input.LA(3);
                                    if ( (LA411_27==MIN||(LA411_27>=TIMEPERIOD_MINUTE && LA411_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA411_28 = input.LA(3);
                                    if ( (LA411_28==MIN||(LA411_28>=TIMEPERIOD_MINUTE && LA411_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA411_29 = input.LA(3);
                                    if ( (LA411_29==MIN||(LA411_29>=TIMEPERIOD_MINUTE && LA411_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA411_30 = input.LA(3);
                                    if ( (LA411_30==MIN||(LA411_30>=TIMEPERIOD_MINUTE && LA411_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA411_31 = input.LA(3);
                                    if ( (LA411_31==MIN||(LA411_31>=TIMEPERIOD_MINUTE && LA411_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA411_32 = input.LA(3);
                                    if ( (LA411_32==MIN||(LA411_32>=TIMEPERIOD_MINUTE && LA411_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA411_33 = input.LA(3);
                                    if ( (LA411_33==MIN||(LA411_33>=TIMEPERIOD_MINUTE && LA411_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt411=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA411_3 = input.LA(2);
                            if ( (LA411_3==MIN||(LA411_3>=TIMEPERIOD_MINUTE && LA411_3<=TIMEPERIOD_MINUTES)) ) {
                                alt411=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA411_4 = input.LA(2);
                            if ( (LA411_4==MIN||(LA411_4>=TIMEPERIOD_MINUTE && LA411_4<=TIMEPERIOD_MINUTES)) ) {
                                alt411=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA411_5 = input.LA(2);
                            if ( (LA411_5==MIN||(LA411_5>=TIMEPERIOD_MINUTE && LA411_5<=TIMEPERIOD_MINUTES)) ) {
                                alt411=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA411_6 = input.LA(2);
                            if ( (LA411_6==MIN||(LA411_6>=TIMEPERIOD_MINUTE && LA411_6<=TIMEPERIOD_MINUTES)) ) {
                                alt411=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA411_7 = input.LA(2);
                            if ( (LA411_7==MIN||(LA411_7>=TIMEPERIOD_MINUTE && LA411_7<=TIMEPERIOD_MINUTES)) ) {
                                alt411=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA411_8 = input.LA(2);
                            if ( (LA411_8==MIN||(LA411_8>=TIMEPERIOD_MINUTE && LA411_8<=TIMEPERIOD_MINUTES)) ) {
                                alt411=1;
                            }
                            }
                            break;
                    }
                    switch (alt411) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14745);
                            minutePart1070=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1070.getTree());
                            }
                            break;
                    }
                    int alt412=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA412_26 = input.LA(3);
                                    if ( ((LA412_26>=TIMEPERIOD_SEC && LA412_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA412_27 = input.LA(3);
                                    if ( ((LA412_27>=TIMEPERIOD_SEC && LA412_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA412_28 = input.LA(3);
                                    if ( ((LA412_28>=TIMEPERIOD_SEC && LA412_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA412_29 = input.LA(3);
                                    if ( ((LA412_29>=TIMEPERIOD_SEC && LA412_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA412_30 = input.LA(3);
                                    if ( ((LA412_30>=TIMEPERIOD_SEC && LA412_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA412_31 = input.LA(3);
                                    if ( ((LA412_31>=TIMEPERIOD_SEC && LA412_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA412_32 = input.LA(3);
                                    if ( ((LA412_32>=TIMEPERIOD_SEC && LA412_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA412_33 = input.LA(3);
                                    if ( ((LA412_33>=TIMEPERIOD_SEC && LA412_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA412_3 = input.LA(2);
                            if ( ((LA412_3>=TIMEPERIOD_SEC && LA412_3<=TIMEPERIOD_SECONDS)) ) {
                                alt412=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA412_4 = input.LA(2);
                            if ( ((LA412_4>=TIMEPERIOD_SEC && LA412_4<=TIMEPERIOD_SECONDS)) ) {
                                alt412=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA412_5 = input.LA(2);
                            if ( ((LA412_5>=TIMEPERIOD_SEC && LA412_5<=TIMEPERIOD_SECONDS)) ) {
                                alt412=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA412_6 = input.LA(2);
                            if ( ((LA412_6>=TIMEPERIOD_SEC && LA412_6<=TIMEPERIOD_SECONDS)) ) {
                                alt412=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA412_7 = input.LA(2);
                            if ( ((LA412_7>=TIMEPERIOD_SEC && LA412_7<=TIMEPERIOD_SECONDS)) ) {
                                alt412=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA412_8 = input.LA(2);
                            if ( ((LA412_8>=TIMEPERIOD_SEC && LA412_8<=TIMEPERIOD_SECONDS)) ) {
                                alt412=1;
                            }
                            }
                            break;
                    }
                    switch (alt412) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14748);
                            secondPart1071=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1071.getTree());
                            }
                            break;
                    }
                    int alt413=2;
                    int LA413_0 = input.LA(1);
                    if ( (LA413_0==NUM_DOUBLE||LA413_0==IDENT||LA413_0==QUESTION||LA413_0==PLUS||LA413_0==MINUS||LA413_0==NUM_INT||(LA413_0>=NUM_LONG && LA413_0<=NUM_FLOAT)) ) {
                        alt413=1;
                    }
                    switch (alt413) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14751);
                            millisecondPart1072=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1072.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod14757);
                    minutePart1073=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart1073.getTree());
                    int alt414=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA414_26 = input.LA(3);
                                    if ( ((LA414_26>=TIMEPERIOD_SEC && LA414_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt414=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA414_27 = input.LA(3);
                                    if ( ((LA414_27>=TIMEPERIOD_SEC && LA414_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt414=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA414_28 = input.LA(3);
                                    if ( ((LA414_28>=TIMEPERIOD_SEC && LA414_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt414=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA414_29 = input.LA(3);
                                    if ( ((LA414_29>=TIMEPERIOD_SEC && LA414_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt414=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA414_30 = input.LA(3);
                                    if ( ((LA414_30>=TIMEPERIOD_SEC && LA414_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt414=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA414_31 = input.LA(3);
                                    if ( ((LA414_31>=TIMEPERIOD_SEC && LA414_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt414=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA414_32 = input.LA(3);
                                    if ( ((LA414_32>=TIMEPERIOD_SEC && LA414_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt414=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA414_33 = input.LA(3);
                                    if ( ((LA414_33>=TIMEPERIOD_SEC && LA414_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt414=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA414_3 = input.LA(2);
                            if ( ((LA414_3>=TIMEPERIOD_SEC && LA414_3<=TIMEPERIOD_SECONDS)) ) {
                                alt414=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA414_4 = input.LA(2);
                            if ( ((LA414_4>=TIMEPERIOD_SEC && LA414_4<=TIMEPERIOD_SECONDS)) ) {
                                alt414=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA414_5 = input.LA(2);
                            if ( ((LA414_5>=TIMEPERIOD_SEC && LA414_5<=TIMEPERIOD_SECONDS)) ) {
                                alt414=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA414_6 = input.LA(2);
                            if ( ((LA414_6>=TIMEPERIOD_SEC && LA414_6<=TIMEPERIOD_SECONDS)) ) {
                                alt414=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA414_7 = input.LA(2);
                            if ( ((LA414_7>=TIMEPERIOD_SEC && LA414_7<=TIMEPERIOD_SECONDS)) ) {
                                alt414=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA414_8 = input.LA(2);
                            if ( ((LA414_8>=TIMEPERIOD_SEC && LA414_8<=TIMEPERIOD_SECONDS)) ) {
                                alt414=1;
                            }
                            }
                            break;
                    }
                    switch (alt414) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14759);
                            secondPart1074=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1074.getTree());
                            }
                            break;
                    }
                    int alt415=2;
                    int LA415_0 = input.LA(1);
                    if ( (LA415_0==NUM_DOUBLE||LA415_0==IDENT||LA415_0==QUESTION||LA415_0==PLUS||LA415_0==MINUS||LA415_0==NUM_INT||(LA415_0>=NUM_LONG && LA415_0<=NUM_FLOAT)) ) {
                        alt415=1;
                    }
                    switch (alt415) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14762);
                            millisecondPart1075=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1075.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod14768);
                    secondPart1076=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart1076.getTree());
                    int alt416=2;
                    int LA416_0 = input.LA(1);
                    if ( (LA416_0==NUM_DOUBLE||LA416_0==IDENT||LA416_0==QUESTION||LA416_0==PLUS||LA416_0==MINUS||LA416_0==NUM_INT||(LA416_0>=NUM_LONG && LA416_0<=NUM_FLOAT)) ) {
                        alt416=1;
                    }
                    switch (alt416) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14770);
                            millisecondPart1077=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1077.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod14776);
                    millisecondPart1078=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1078.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_yearPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_yearPart.nextTree());
                }
                stream_yearPart.reset();
                if ( stream_monthPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_monthPart.nextTree());
                }
                stream_monthPart.reset();
                if ( stream_weekPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_weekPart.nextTree());
                }
                stream_weekPart.reset();
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class yearPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.yearPart_return yearPart() throws RecognitionException {
        EsperEPL2GrammarParser.yearPart_return retval = new EsperEPL2GrammarParser.yearPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_YEARS1081=null;
        Token TIMEPERIOD_YEAR1082=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1079 = null;
        EsperEPL2GrammarParser.substitution_return substitution1080 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_YEARS1081_tree=null;
        CommonTree TIMEPERIOD_YEAR1082_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEARS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEARS");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEAR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEAR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt418=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt418=1;
                }
                break;
            case IDENT:
                {
                alt418=2;
                }
                break;
            case QUESTION:
                {
                alt418=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 418, 0, input);
                throw nvae;
            }
            switch (alt418) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_yearPart14823);
                    numberconstant1079=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1079.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_yearPart14827); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_yearPart14829);
                    substitution1080=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1080.getTree());
                    }
                    break;
            }
            int alt419=2;
            int LA419_0 = input.LA(1);
            if ( (LA419_0==TIMEPERIOD_YEARS) ) {
                alt419=1;
            }
            else if ( (LA419_0==TIMEPERIOD_YEAR) ) {
                alt419=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 419, 0, input);
                throw nvae;
            }
            switch (alt419) {
                case 1 :
                    {
                    TIMEPERIOD_YEARS1081=(Token)match(input,TIMEPERIOD_YEARS,FOLLOW_TIMEPERIOD_YEARS_in_yearPart14833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEARS.add(TIMEPERIOD_YEARS1081);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_YEAR1082=(Token)match(input,TIMEPERIOD_YEAR,FOLLOW_TIMEPERIOD_YEAR_in_yearPart14837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEAR.add(TIMEPERIOD_YEAR1082);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class monthPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.monthPart_return monthPart() throws RecognitionException {
        EsperEPL2GrammarParser.monthPart_return retval = new EsperEPL2GrammarParser.monthPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MONTHS1085=null;
        Token TIMEPERIOD_MONTH1086=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1083 = null;
        EsperEPL2GrammarParser.substitution_return substitution1084 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MONTHS1085_tree=null;
        CommonTree TIMEPERIOD_MONTH1086_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTH=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTH");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTHS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTHS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt420=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt420=1;
                }
                break;
            case IDENT:
                {
                alt420=2;
                }
                break;
            case QUESTION:
                {
                alt420=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 420, 0, input);
                throw nvae;
            }
            switch (alt420) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_monthPart14885);
                    numberconstant1083=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1083.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_monthPart14889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_monthPart14891);
                    substitution1084=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1084.getTree());
                    }
                    break;
            }
            int alt421=2;
            int LA421_0 = input.LA(1);
            if ( (LA421_0==TIMEPERIOD_MONTHS) ) {
                alt421=1;
            }
            else if ( (LA421_0==TIMEPERIOD_MONTH) ) {
                alt421=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 421, 0, input);
                throw nvae;
            }
            switch (alt421) {
                case 1 :
                    {
                    TIMEPERIOD_MONTHS1085=(Token)match(input,TIMEPERIOD_MONTHS,FOLLOW_TIMEPERIOD_MONTHS_in_monthPart14895); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTHS.add(TIMEPERIOD_MONTHS1085);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MONTH1086=(Token)match(input,TIMEPERIOD_MONTH,FOLLOW_TIMEPERIOD_MONTH_in_monthPart14899); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTH.add(TIMEPERIOD_MONTH1086);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekPart_return weekPart() throws RecognitionException {
        EsperEPL2GrammarParser.weekPart_return retval = new EsperEPL2GrammarParser.weekPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_WEEKS1089=null;
        Token TIMEPERIOD_WEEK1090=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1087 = null;
        EsperEPL2GrammarParser.substitution_return substitution1088 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_WEEKS1089_tree=null;
        CommonTree TIMEPERIOD_WEEK1090_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEK=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEK");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEKS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEKS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt422=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt422=1;
                }
                break;
            case IDENT:
                {
                alt422=2;
                }
                break;
            case QUESTION:
                {
                alt422=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 422, 0, input);
                throw nvae;
            }
            switch (alt422) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_weekPart14947);
                    numberconstant1087=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1087.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekPart14951); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekPart14953);
                    substitution1088=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1088.getTree());
                    }
                    break;
            }
            int alt423=2;
            int LA423_0 = input.LA(1);
            if ( (LA423_0==TIMEPERIOD_WEEKS) ) {
                alt423=1;
            }
            else if ( (LA423_0==TIMEPERIOD_WEEK) ) {
                alt423=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 423, 0, input);
                throw nvae;
            }
            switch (alt423) {
                case 1 :
                    {
                    TIMEPERIOD_WEEKS1089=(Token)match(input,TIMEPERIOD_WEEKS,FOLLOW_TIMEPERIOD_WEEKS_in_weekPart14957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEKS.add(TIMEPERIOD_WEEKS1089);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_WEEK1090=(Token)match(input,TIMEPERIOD_WEEK,FOLLOW_TIMEPERIOD_WEEK_in_weekPart14961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEK.add(TIMEPERIOD_WEEK1090);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS1093=null;
        Token TIMEPERIOD_DAY1094=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1091 = null;
        EsperEPL2GrammarParser.substitution_return substitution1092 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS1093_tree=null;
        CommonTree TIMEPERIOD_DAY1094_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt424=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt424=1;
                }
                break;
            case IDENT:
                {
                alt424=2;
                }
                break;
            case QUESTION:
                {
                alt424=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 424, 0, input);
                throw nvae;
            }
            switch (alt424) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_dayPart15009);
                    numberconstant1091=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1091.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart15013); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart15015);
                    substitution1092=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1092.getTree());
                    }
                    break;
            }
            int alt425=2;
            int LA425_0 = input.LA(1);
            if ( (LA425_0==TIMEPERIOD_DAYS) ) {
                alt425=1;
            }
            else if ( (LA425_0==TIMEPERIOD_DAY) ) {
                alt425=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 425, 0, input);
                throw nvae;
            }
            switch (alt425) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS1093=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart15019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS1093);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY1094=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart15023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY1094);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS1097=null;
        Token TIMEPERIOD_HOUR1098=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1095 = null;
        EsperEPL2GrammarParser.substitution_return substitution1096 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS1097_tree=null;
        CommonTree TIMEPERIOD_HOUR1098_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt426=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt426=1;
                }
                break;
            case IDENT:
                {
                alt426=2;
                }
                break;
            case QUESTION:
                {
                alt426=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 426, 0, input);
                throw nvae;
            }
            switch (alt426) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_hourPart15072);
                    numberconstant1095=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1095.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart15076); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart15078);
                    substitution1096=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1096.getTree());
                    }
                    break;
            }
            int alt427=2;
            int LA427_0 = input.LA(1);
            if ( (LA427_0==TIMEPERIOD_HOURS) ) {
                alt427=1;
            }
            else if ( (LA427_0==TIMEPERIOD_HOUR) ) {
                alt427=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 427, 0, input);
                throw nvae;
            }
            switch (alt427) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS1097=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart15082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS1097);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR1098=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart15086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR1098);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES1101=null;
        Token TIMEPERIOD_MINUTE1102=null;
        Token MIN1103=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1099 = null;
        EsperEPL2GrammarParser.substitution_return substitution1100 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES1101_tree=null;
        CommonTree TIMEPERIOD_MINUTE1102_tree=null;
        CommonTree MIN1103_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt428=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt428=1;
                }
                break;
            case IDENT:
                {
                alt428=2;
                }
                break;
            case QUESTION:
                {
                alt428=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 428, 0, input);
                throw nvae;
            }
            switch (alt428) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_minutePart15135);
                    numberconstant1099=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1099.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart15139); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart15141);
                    substitution1100=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1100.getTree());
                    }
                    break;
            }
            int alt429=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt429=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt429=2;
                }
                break;
            case MIN:
                {
                alt429=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 429, 0, input);
                throw nvae;
            }
            switch (alt429) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES1101=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart15145); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES1101);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE1102=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart15149); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE1102);
                    }
                    break;
                case 3 :
                    {
                    MIN1103=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart15153); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN1103);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS1106=null;
        Token TIMEPERIOD_SECOND1107=null;
        Token TIMEPERIOD_SEC1108=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1104 = null;
        EsperEPL2GrammarParser.substitution_return substitution1105 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS1106_tree=null;
        CommonTree TIMEPERIOD_SECOND1107_tree=null;
        CommonTree TIMEPERIOD_SEC1108_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt430=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt430=1;
                }
                break;
            case IDENT:
                {
                alt430=2;
                }
                break;
            case QUESTION:
                {
                alt430=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 430, 0, input);
                throw nvae;
            }
            switch (alt430) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_secondPart15203);
                    numberconstant1104=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1104.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart15207); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart15209);
                    substitution1105=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1105.getTree());
                    }
                    break;
            }
            int alt431=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt431=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt431=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt431=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 431, 0, input);
                throw nvae;
            }
            switch (alt431) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS1106=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart15213); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS1106);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND1107=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart15217); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND1107);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC1108=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart15221); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC1108);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS1111=null;
        Token TIMEPERIOD_MILLISECOND1112=null;
        Token TIMEPERIOD_MILLISEC1113=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1109 = null;
        EsperEPL2GrammarParser.substitution_return substitution1110 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS1111_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND1112_tree=null;
        CommonTree TIMEPERIOD_MILLISEC1113_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt432=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt432=1;
                }
                break;
            case IDENT:
                {
                alt432=2;
                }
                break;
            case QUESTION:
                {
                alt432=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 432, 0, input);
                throw nvae;
            }
            switch (alt432) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_millisecondPart15271);
                    numberconstant1109=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1109.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart15275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart15277);
                    substitution1110=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1110.getTree());
                    }
                    break;
            }
            int alt433=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt433=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt433=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt433=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 433, 0, input);
                throw nvae;
            }
            switch (alt433) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS1111=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart15281); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS1111);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND1112=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart15285); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND1112);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC1113=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart15289); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC1113);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt434=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt434=1;
                }
                break;
            case NUM_LONG:
                {
                alt434=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt434=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt434=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 434, 0, input);
                throw nvae;
            }
            switch (alt434) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number15344); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number15361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number15378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number15395); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution15416); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1114 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant1115 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt435=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt435=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt435=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt435=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt435=4;
                }
                break;
            case VALUE_NULL:
                {
                alt435=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 435, 0, input);
                throw nvae;
            }
            switch (alt435) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant15435);
                    numberconstant1114=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant1114.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant15442);
                    stringconstant1115=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant1115.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant15455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant15475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant15495); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number1116 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt436=3;
            int LA436_0 = input.LA(1);
            if ( (LA436_0==MINUS) ) {
                alt436=1;
            }
            else if ( (LA436_0==PLUS) ) {
                alt436=2;
            }
            switch (alt436) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant15517); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant15523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant15527);
            number1116=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number1116.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number1116!=null?((CommonTree)number1116.tree):null).getType(), "-" + (number1116!=null?input.toString(number1116.start,number1116.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt437=2;
            int LA437_0 = input.LA(1);
            if ( (LA437_0==STRING_LITERAL) ) {
                alt437=1;
            }
            else if ( (LA437_0==QUOTED_STRING_LITERAL) ) {
                alt437=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 437, 0, input);
                throw nvae;
            }
            switch (alt437) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant15556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant15572); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonvalue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonvalue_return jsonvalue() throws RecognitionException {
        EsperEPL2GrammarParser.jsonvalue_return retval = new EsperEPL2GrammarParser.jsonvalue_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.constant_return constant1117 = null;
        EsperEPL2GrammarParser.jsonobject_return jsonobject1118 = null;
        EsperEPL2GrammarParser.jsonarray_return jsonarray1119 = null;
        try {
            int alt438=3;
            switch ( input.LA(1) ) {
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt438=1;
                }
                break;
            case LCURLY:
                {
                alt438=2;
                }
                break;
            case LBRACK:
                {
                alt438=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 438, 0, input);
                throw nvae;
            }
            switch (alt438) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_jsonvalue15593);
                    constant1117=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant1117.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_jsonobject_in_jsonvalue15598);
                    jsonobject1118=jsonobject();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonobject1118.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_jsonarray_in_jsonvalue15603);
                    jsonarray1119=jsonarray();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonarray1119.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonobject_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonobject_return jsonobject() throws RecognitionException {
        EsperEPL2GrammarParser.jsonobject_return retval = new EsperEPL2GrammarParser.jsonobject_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY1120=null;
        Token RCURLY1122=null;
        EsperEPL2GrammarParser.jsonmembers_return jsonmembers1121 = null;
        CommonTree LCURLY1120_tree=null;
        CommonTree RCURLY1122_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_jsonmembers=new RewriteRuleSubtreeStream(adaptor,"rule jsonmembers");
        try {
            {
            LCURLY1120=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_jsonobject15614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY1120);
            pushFollow(FOLLOW_jsonmembers_in_jsonobject15616);
            jsonmembers1121=jsonmembers();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jsonmembers.add(jsonmembers1121.getTree());
            RCURLY1122=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_jsonobject15618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY1122);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JSON_OBJECT, "JSON_OBJECT"), root_1);
                adaptor.addChild(root_1, stream_jsonmembers.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonarray_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonarray_return jsonarray() throws RecognitionException {
        EsperEPL2GrammarParser.jsonarray_return retval = new EsperEPL2GrammarParser.jsonarray_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK1123=null;
        Token RBRACK1125=null;
        EsperEPL2GrammarParser.jsonelements_return jsonelements1124 = null;
        CommonTree LBRACK1123_tree=null;
        CommonTree RBRACK1125_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_jsonelements=new RewriteRuleSubtreeStream(adaptor,"rule jsonelements");
        try {
            {
            LBRACK1123=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_jsonarray15650); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK1123);
            int alt439=2;
            int LA439_0 = input.LA(1);
            if ( ((LA439_0>=BOOLEAN_TRUE && LA439_0<=VALUE_NULL)||LA439_0==NUM_DOUBLE||LA439_0==LBRACK||LA439_0==LCURLY||(LA439_0>=PLUS && LA439_0<=QUOTED_STRING_LITERAL)||LA439_0==MINUS||LA439_0==NUM_INT||(LA439_0>=NUM_LONG && LA439_0<=NUM_FLOAT)) ) {
                alt439=1;
            }
            switch (alt439) {
                case 1 :
                    {
                    pushFollow(FOLLOW_jsonelements_in_jsonarray15652);
                    jsonelements1124=jsonelements();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_jsonelements.add(jsonelements1124.getTree());
                    }
                    break;
            }
            RBRACK1125=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_jsonarray15655); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK1125);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JSON_ARRAY, "JSON_ARRAY"), root_1);
                if ( stream_jsonelements.hasNext() ) {
                    adaptor.addChild(root_1, stream_jsonelements.nextTree());
                }
                stream_jsonelements.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonelements_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonelements_return jsonelements() throws RecognitionException {
        EsperEPL2GrammarParser.jsonelements_return retval = new EsperEPL2GrammarParser.jsonelements_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA1127=null;
        Token COMMA1129=null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue1126 = null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue1128 = null;
        CommonTree COMMA1127_tree=null;
        CommonTree COMMA1129_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_jsonvalue_in_jsonelements15678);
            jsonvalue1126=jsonvalue();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonvalue1126.getTree());
            loop440:
            do {
                int alt440=2;
                int LA440_0 = input.LA(1);
                if ( (LA440_0==COMMA) ) {
                    int LA440_1 = input.LA(2);
                    if ( ((LA440_1>=BOOLEAN_TRUE && LA440_1<=VALUE_NULL)||LA440_1==NUM_DOUBLE||LA440_1==LBRACK||LA440_1==LCURLY||(LA440_1>=PLUS && LA440_1<=QUOTED_STRING_LITERAL)||LA440_1==MINUS||LA440_1==NUM_INT||(LA440_1>=NUM_LONG && LA440_1<=NUM_FLOAT)) ) {
                        alt440=1;
                    }
                }
                switch (alt440) {
            	case 1 :
            	    {
            	    COMMA1127=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonelements15681); if (state.failed) return retval;
            	    pushFollow(FOLLOW_jsonvalue_in_jsonelements15684);
            	    jsonvalue1128=jsonvalue();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonvalue1128.getTree());
            	    }
            	    break;
            	default :
            	    break loop440;
                }
            } while (true);
            int alt441=2;
            int LA441_0 = input.LA(1);
            if ( (LA441_0==COMMA) ) {
                alt441=1;
            }
            switch (alt441) {
                case 1 :
                    {
                    COMMA1129=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonelements15689); if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonmembers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonmembers_return jsonmembers() throws RecognitionException {
        EsperEPL2GrammarParser.jsonmembers_return retval = new EsperEPL2GrammarParser.jsonmembers_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA1131=null;
        Token COMMA1133=null;
        EsperEPL2GrammarParser.jsonpair_return jsonpair1130 = null;
        EsperEPL2GrammarParser.jsonpair_return jsonpair1132 = null;
        CommonTree COMMA1131_tree=null;
        CommonTree COMMA1133_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_jsonpair_in_jsonmembers15705);
            jsonpair1130=jsonpair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonpair1130.getTree());
            loop442:
            do {
                int alt442=2;
                int LA442_0 = input.LA(1);
                if ( (LA442_0==COMMA) ) {
                    int LA442_1 = input.LA(2);
                    if ( (LA442_1==WINDOW||LA442_1==ESCAPE||LA442_1==EVERY_EXPR||(LA442_1>=SUM && LA442_1<=COUNT)||LA442_1==OUTER||(LA442_1>=JOIN && LA442_1<=FULL)||(LA442_1>=EVENTS && LA442_1<=LAST)||(LA442_1>=UNIDIRECTIONAL && LA442_1<=PREVIOUSTAIL)||LA442_1==PRIOR||(LA442_1>=WEEKDAY && LA442_1<=CAST)||LA442_1==SNAPSHOT||(LA442_1>=VARIABLE && LA442_1<=INDEX)||(LA442_1>=DEFINE && LA442_1<=MATCHES)||(LA442_1>=FOR && LA442_1<=MATCHED)||LA442_1==CONTEXT||LA442_1==IDENT||(LA442_1>=STRING_LITERAL && LA442_1<=QUOTED_STRING_LITERAL)||LA442_1==TICKED_STRING_LITERAL) ) {
                        alt442=1;
                    }
                }
                switch (alt442) {
            	case 1 :
            	    {
            	    COMMA1131=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonmembers15708); if (state.failed) return retval;
            	    pushFollow(FOLLOW_jsonpair_in_jsonmembers15711);
            	    jsonpair1132=jsonpair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonpair1132.getTree());
            	    }
            	    break;
            	default :
            	    break loop442;
                }
            } while (true);
            int alt443=2;
            int LA443_0 = input.LA(1);
            if ( (LA443_0==COMMA) ) {
                alt443=1;
            }
            switch (alt443) {
                case 1 :
                    {
                    COMMA1133=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonmembers15716); if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonpair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonpair_return jsonpair() throws RecognitionException {
        EsperEPL2GrammarParser.jsonpair_return retval = new EsperEPL2GrammarParser.jsonpair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COLON1136=null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant1134 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent1135 = null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue1137 = null;
        CommonTree COLON1136_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_jsonvalue=new RewriteRuleSubtreeStream(adaptor,"rule jsonvalue");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            int alt444=2;
            int LA444_0 = input.LA(1);
            if ( ((LA444_0>=STRING_LITERAL && LA444_0<=QUOTED_STRING_LITERAL)) ) {
                alt444=1;
            }
            else if ( (LA444_0==WINDOW||LA444_0==ESCAPE||LA444_0==EVERY_EXPR||(LA444_0>=SUM && LA444_0<=COUNT)||LA444_0==OUTER||(LA444_0>=JOIN && LA444_0<=FULL)||(LA444_0>=EVENTS && LA444_0<=LAST)||(LA444_0>=UNIDIRECTIONAL && LA444_0<=PREVIOUSTAIL)||LA444_0==PRIOR||(LA444_0>=WEEKDAY && LA444_0<=CAST)||LA444_0==SNAPSHOT||(LA444_0>=VARIABLE && LA444_0<=INDEX)||(LA444_0>=DEFINE && LA444_0<=MATCHES)||(LA444_0>=FOR && LA444_0<=MATCHED)||LA444_0==CONTEXT||LA444_0==IDENT||LA444_0==TICKED_STRING_LITERAL) ) {
                alt444=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 444, 0, input);
                throw nvae;
            }
            switch (alt444) {
                case 1 :
                    {
                    pushFollow(FOLLOW_stringconstant_in_jsonpair15733);
                    stringconstant1134=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant1134.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_keywordAllowedIdent_in_jsonpair15737);
                    keywordAllowedIdent1135=keywordAllowedIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(keywordAllowedIdent1135.getTree());
                    }
                    break;
            }
            COLON1136=(Token)match(input,COLON,FOLLOW_COLON_in_jsonpair15740); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON1136);
            pushFollow(FOLLOW_jsonvalue_in_jsonpair15742);
            jsonvalue1137=jsonvalue();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jsonvalue.add(jsonvalue1137.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JSON_FIELD, "JSON_FIELD"), root_1);
                if ( stream_stringconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                }
                stream_stringconstant.reset();
                if ( stream_keywordAllowedIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_keywordAllowedIdent.nextTree());
                }
                stream_keywordAllowedIdent.reset();
                adaptor.addChild(root_1, stream_jsonvalue.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar6463);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar7914);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar9923);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar11320);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar11382);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar12845);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar13326);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar13337);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar13348);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar13359);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar13371);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar13382);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar13393);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar13406);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar13431);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA263 dfa263 = new DFA263(this);
    protected DFA317 dfa317 = new DFA317(this);
    static final String DFA263_eotS =
        "\u0c76\uffff";
    static final String DFA263_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0c41\uffff";
    static final String DFA263_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\21\uffff\1\u0146\u0087\uffff"+
        "\1\5\75\uffff\1\5\75\uffff\1\5\75\uffff\1\5\75\uffff\1\5\75\uffff"+
        "\1\5\75\uffff\1\5\75\uffff\1\5\75\uffff\1\5\75\uffff\1\5\75\uffff"+
        "\1\5\75\uffff\1\u0157\75\uffff\1\5\75\uffff\1\5\75\uffff\1\5\75"+
        "\uffff\1\5\75\uffff\1\5\11\uffff\2\6\104\uffff\2\6\125\uffff\2\6"+
        "\103\uffff\2\6\123\uffff\2\6\103\uffff\2\6\114\uffff\2\6\125\uffff"+
        "\2\6\114\uffff\2\6\112\uffff\2\6\103\uffff\2\6\115\uffff\2\6\121"+
        "\uffff\2\6\103\uffff\2\6\123\uffff\2\6\166\uffff\1\0\31\uffff\1"+
        "\0\31\uffff\1\0\31\uffff\1\0\55\uffff\1\0\5\uffff\1\0\115\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\55\uffff\1\0\31\uffff\1\0\5\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\55\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff\1\0\115\uffff\1\0\30\uffff"+
        "\1\0\141\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA263_maxS =
        "\2\u0169\13\uffff\1\u0169\3\uffff\1\u0166\2\uffff\2\u0166\2\uffff"+
        "\4\u0166\1\uffff\2\u0166\12\uffff\3\u0166\2\uffff\3\u0166\3\uffff"+
        "\1\u0166\21\uffff\1\u0146\u0087\uffff\1\u0169\75\uffff\1\u0169\75"+
        "\uffff\1\u0169\75\uffff\1\u0169\75\uffff\1\u0169\75\uffff\1\u0169"+
        "\75\uffff\1\u0169\75\uffff\1\u0169\75\uffff\1\u0169\75\uffff\1\u0169"+
        "\75\uffff\1\u0169\75\uffff\1\u0163\75\uffff\1\u0169\75\uffff\1\u0169"+
        "\75\uffff\1\u0169\75\uffff\1\u0169\75\uffff\1\u0167\11\uffff\2\u0162"+
        "\104\uffff\2\u0162\125\uffff\2\u0162\103\uffff\2\u0162\123\uffff"+
        "\2\u0162\103\uffff\2\u0162\114\uffff\2\u0162\125\uffff\2\u0162\114"+
        "\uffff\2\u0162\112\uffff\2\u0162\103\uffff\2\u0162\115\uffff\2\u0162"+
        "\121\uffff\2\u0162\103\uffff\2\u0162\123\uffff\2\u0162\166\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\55\uffff\1\0\5\uffff"+
        "\1\0\115\uffff\1\0\31\uffff\1\0\31\uffff\1\0\55\uffff\1\0\31\uffff"+
        "\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\55\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff\1\0\115\uffff"+
        "\1\0\30\uffff\1\0\141\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA263_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\65\uffff\2\6\1\uffff\2\6"+
        "\1\7\1\12\4\uffff\1\1\61\uffff\1\10\1\4\u042c\uffff\11\6\2\uffff"+
        "\104\6\2\uffff\125\6\2\uffff\103\6\2\uffff\123\6\2\uffff\103\6\2"+
        "\uffff\114\6\2\uffff\125\6\2\uffff\114\6\2\uffff\112\6\2\uffff\103"+
        "\6\2\uffff\113\6\4\uffff\121\6\2\uffff\103\6\2\uffff\123\6\2\uffff"+
        "\103\6\1\11\62\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff"+
        "\55\6\1\uffff\5\6\1\uffff\31\6\1\uffff\62\6\2\uffff\31\6\1\uffff"+
        "\31\6\1\uffff\55\6\1\uffff\31\6\1\uffff\5\6\1\uffff\31\6\1\uffff"+
        "\31\6\1\uffff\31\6\1\uffff\55\6\1\uffff\31\6\1\uffff\31\6\1\uffff"+
        "\5\6\1\uffff\31\6\1\uffff\31\6\1\uffff\62\6\2\uffff\30\6\1\uffff"+
        "\62\6\1\uffff\32\6\1\uffff\23\6\1\uffff\30\6\1\uffff\5\6";
    static final String DFA263_specialS =
        "\1\0\u00cd\uffff\1\1\75\uffff\1\2\75\uffff\1\3\75\uffff\1\4\75"+
        "\uffff\1\5\75\uffff\1\6\75\uffff\1\7\75\uffff\1\10\75\uffff\1\11"+
        "\75\uffff\1\12\75\uffff\1\13\75\uffff\1\14\75\uffff\1\15\75\uffff"+
        "\1\16\75\uffff\1\17\75\uffff\1\20\75\uffff\1\21\11\uffff\1\22\1"+
        "\23\104\uffff\1\24\1\25\125\uffff\1\26\1\27\103\uffff\1\30\1\31"+
        "\123\uffff\1\32\1\33\103\uffff\1\34\1\35\114\uffff\1\36\1\37\125"+
        "\uffff\1\40\1\41\114\uffff\1\42\1\43\112\uffff\1\44\1\45\103\uffff"+
        "\1\46\1\47\115\uffff\1\50\1\51\121\uffff\1\52\1\53\103\uffff\1\54"+
        "\1\55\123\uffff\1\56\1\57\166\uffff\1\60\31\uffff\1\61\31\uffff"+
        "\1\62\31\uffff\1\63\55\uffff\1\64\5\uffff\1\65\115\uffff\1\66\31"+
        "\uffff\1\67\31\uffff\1\70\55\uffff\1\71\31\uffff\1\72\5\uffff\1"+
        "\73\31\uffff\1\74\31\uffff\1\75\31\uffff\1\76\55\uffff\1\77\31\uffff"+
        "\1\100\31\uffff\1\101\5\uffff\1\102\31\uffff\1\103\115\uffff\1\104"+
        "\30\uffff\1\105\141\uffff\1\106\30\uffff\1\107\5\uffff}>";
    static final short[] DFA263_eot = DFA.unpackEncodedString(DFA263_eotS);
    static final short[] DFA263_eof = DFA.unpackEncodedString(DFA263_eofS);
    static final char[] DFA263_min = DFA.unpackEncodedStringToUnsignedChars(DFA263_minS);
    static final char[] DFA263_max = DFA.unpackEncodedStringToUnsignedChars(DFA263_maxS);
    static final short[] DFA263_accept = DFA.unpackEncodedString(DFA263_acceptS);
    static final short[] DFA263_special = DFA.unpackEncodedString(DFA263_specialS);
    static final short[][] DFA263_transition;
    static {
        int numStates = EsperEPL2GrammarParser_DFAS.DFA263_transitionS.length;
        DFA263_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA263_transition[i] = DFA.unpackEncodedString(EsperEPL2GrammarParser_DFAS.DFA263_transitionS[i]);
        }
    }
    class DFA263 extends DFA {
        public DFA263(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 263;
            this.eot = DFA263_eot;
            this.eof = DFA263_eof;
            this.min = DFA263_min;
            this.max = DFA263_max;
            this.accept = DFA263_accept;
            this.special = DFA263_special;
            this.transition = DFA263_transition;
        }
        public String getDescription() {
            return "1557:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR subSelectExpression ( libFunctionNoClass )+ ) -> subSelectExpression | existsSubSelectExpression | NEWKW LCURLY newAssign ( COMMA newAssign )* RCURLY -> ^( NEWKW ( newAssign )* ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 263, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA263_0 = input.LA(1);
                        int index263_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_0==MINUS) ) {s = 1;}
                        else if ( ((LA263_0>=BOOLEAN_TRUE && LA263_0<=VALUE_NULL)||LA263_0==NUM_DOUBLE||(LA263_0>=PLUS && LA263_0<=QUOTED_STRING_LITERAL)||LA263_0==NUM_INT||(LA263_0>=NUM_LONG && LA263_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA263_0==QUESTION) ) {s = 12;}
                        else if ( (LA263_0==LPAREN) ) {s = 13;}
                        else if ( (LA263_0==BETWEEN||LA263_0==ESCAPE||LA263_0==EVERY_EXPR||LA263_0==WHERE||(LA263_0>=MAX && LA263_0<=MIN)||LA263_0==OUTER||(LA263_0>=JOIN && LA263_0<=FULL)||LA263_0==EVENTS||(LA263_0>=UNIDIRECTIONAL && LA263_0<=METADATASQL)||(LA263_0>=WEEKDAY && LA263_0<=LW)||(LA263_0>=SNAPSHOT && LA263_0<=INDEX)||(LA263_0>=DEFINE && LA263_0<=MATCHED)||LA263_0==CONTEXT||LA263_0==IDENT||LA263_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA263_0==COUNT) ) {s = 17;}
                        else if ( (LA263_0==SUM) ) {s = 20;}
                        else if ( (LA263_0==AVG) ) {s = 21;}
                        else if ( (LA263_0==COALESCE) ) {s = 24;}
                        else if ( (LA263_0==MEDIAN) ) {s = 25;}
                        else if ( (LA263_0==STDDEV) ) {s = 26;}
                        else if ( (LA263_0==AVEDEV) ) {s = 27;}
                        else if ( (LA263_0==FIRST) ) {s = 29;}
                        else if ( (LA263_0==LAST) ) {s = 30;}
                        else if ( (LA263_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA263_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA263_0==PRIOR) ) {s = 43;}
                        else if ( (LA263_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA263_0==TYPEOF) ) {s = 47;}
                        else if ( (LA263_0==CAST) ) {s = 48;}
                        else if ( (LA263_0==WINDOW) ) {s = 52;}
                        else if ( (LA263_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 68;}
                        else if ( (LA263_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 69;}
                        else if ( (LA263_0==EXISTS) ) {s = 70;}
                        else if ( (LA263_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 71;}
                        else if ( (LA263_0==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 72;}
                        else if ( (LA263_0==LCURLY) ) {s = 73;}
                        else if ( (LA263_0==NEWKW) ) {s = 74;}
                        input.seek(index263_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA263_206 = input.LA(1);
                        int index263_206 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_206==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA263_206==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA263_206==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA263_206==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA263_206==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA263_206==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA263_206==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA263_206==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA263_206==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA263_206==STRING_LITERAL) ) {s = 1208;}
                        else if ( (LA263_206==QUOTED_STRING_LITERAL) ) {s = 1209;}
                        else if ( (LA263_206==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA263_206==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA263_206==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA263_206==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA263_206==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA263_206==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA263_206==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA263_206==AT) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA263_206==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA263_206==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA263_206==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA263_206==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA263_206==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA263_206==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA263_206==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA263_206==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA263_206==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA263_206==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA263_206==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA263_206==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA263_206==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA263_206==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA263_206==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA263_206==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA263_206==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA263_206==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA263_206==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA263_206==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA263_206==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA263_206==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA263_206==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA263_206==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA263_206==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA263_206==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA263_206==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA263_206==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA263_206==LW) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA263_206==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA263_206==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA263_206==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA263_206==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA263_206==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA263_206==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA263_206==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA263_206==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA263_206==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA263_206==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA263_206==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA263_206==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA263_206==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA263_206==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA263_206==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA263_206==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA263_206==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA263_206==USING) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA263_206==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA263_206==SET) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA263_206==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA263_206==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA263_206==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA263_206==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA263_206==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA263_206==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA263_206==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA263_206==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA263_206==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA263_206==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA263_206==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        input.seek(index263_206);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA263_268 = input.LA(1);
                        int index263_268 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_268==STRING_LITERAL) ) {s = 1278;}
                        else if ( (LA263_268==QUOTED_STRING_LITERAL) ) {s = 1279;}
                        else if ( (LA263_268==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA263_268==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA263_268==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA263_268==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA263_268==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA263_268==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA263_268==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA263_268==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA263_268==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA263_268==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA263_268==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA263_268==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA263_268==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA263_268==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA263_268==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA263_268==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA263_268==AT) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA263_268==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA263_268==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA263_268==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA263_268==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA263_268==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA263_268==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA263_268==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA263_268==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA263_268==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA263_268==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA263_268==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA263_268==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA263_268==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA263_268==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA263_268==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA263_268==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA263_268==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA263_268==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA263_268==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA263_268==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA263_268==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA263_268==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA263_268==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA263_268==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA263_268==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA263_268==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA263_268==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA263_268==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA263_268==LW) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA263_268==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA263_268==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA263_268==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA263_268==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA263_268==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA263_268==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA263_268==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA263_268==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA263_268==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA263_268==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA263_268==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA263_268==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA263_268==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA263_268==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA263_268==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA263_268==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA263_268==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA263_268==USING) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA263_268==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA263_268==SET) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA263_268==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA263_268==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA263_268==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA263_268==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA263_268==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA263_268==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA263_268==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA263_268==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA263_268==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA263_268==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        input.seek(index263_268);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA263_330 = input.LA(1);
                        int index263_330 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_330==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA263_330==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA263_330==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA263_330==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA263_330==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA263_330==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA263_330==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA263_330==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA263_330==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA263_330==STRING_LITERAL) ) {s = 1365;}
                        else if ( (LA263_330==QUOTED_STRING_LITERAL) ) {s = 1366;}
                        else if ( (LA263_330==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA263_330==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA263_330==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA263_330==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA263_330==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA263_330==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA263_330==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA263_330==AT) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA263_330==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA263_330==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA263_330==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA263_330==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA263_330==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA263_330==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA263_330==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA263_330==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA263_330==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA263_330==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA263_330==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA263_330==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA263_330==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA263_330==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA263_330==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA263_330==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA263_330==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA263_330==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA263_330==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA263_330==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA263_330==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA263_330==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA263_330==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA263_330==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA263_330==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA263_330==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA263_330==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA263_330==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA263_330==LW) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA263_330==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA263_330==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA263_330==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA263_330==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA263_330==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA263_330==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA263_330==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA263_330==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA263_330==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA263_330==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA263_330==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA263_330==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA263_330==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA263_330==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA263_330==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA263_330==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA263_330==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA263_330==USING) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA263_330==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA263_330==SET) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA263_330==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA263_330==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA263_330==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA263_330==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA263_330==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA263_330==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA263_330==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA263_330==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA263_330==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA263_330==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        input.seek(index263_330);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA263_392 = input.LA(1);
                        int index263_392 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_392==STRING_LITERAL) ) {s = 1434;}
                        else if ( (LA263_392==QUOTED_STRING_LITERAL) ) {s = 1435;}
                        else if ( (LA263_392==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA263_392==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA263_392==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA263_392==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA263_392==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA263_392==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA263_392==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA263_392==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA263_392==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA263_392==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA263_392==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA263_392==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA263_392==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA263_392==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA263_392==AT) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA263_392==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA263_392==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA263_392==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA263_392==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA263_392==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA263_392==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA263_392==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA263_392==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA263_392==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA263_392==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA263_392==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA263_392==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA263_392==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA263_392==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA263_392==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA263_392==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA263_392==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA263_392==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA263_392==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA263_392==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA263_392==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA263_392==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA263_392==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA263_392==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA263_392==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA263_392==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA263_392==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA263_392==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA263_392==LW) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA263_392==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA263_392==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA263_392==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA263_392==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA263_392==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA263_392==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA263_392==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA263_392==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA263_392==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA263_392==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA263_392==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA263_392==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA263_392==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA263_392==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA263_392==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA263_392==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA263_392==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA263_392==USING) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA263_392==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA263_392==SET) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA263_392==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA263_392==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA263_392==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA263_392==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA263_392==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA263_392==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA263_392==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA263_392==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA263_392==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA263_392==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        input.seek(index263_392);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA263_454 = input.LA(1);
                        int index263_454 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_454==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA263_454==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA263_454==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA263_454==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA263_454==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA263_454==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA263_454==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA263_454==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA263_454==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA263_454==STRING_LITERAL) ) {s = 1519;}
                        else if ( (LA263_454==QUOTED_STRING_LITERAL) ) {s = 1520;}
                        else if ( (LA263_454==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA263_454==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA263_454==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA263_454==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA263_454==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA263_454==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA263_454==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA263_454==AT) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA263_454==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA263_454==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA263_454==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA263_454==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA263_454==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA263_454==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA263_454==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA263_454==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA263_454==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA263_454==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA263_454==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA263_454==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA263_454==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA263_454==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA263_454==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA263_454==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA263_454==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA263_454==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA263_454==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA263_454==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA263_454==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA263_454==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA263_454==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA263_454==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA263_454==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA263_454==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA263_454==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA263_454==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA263_454==LW) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA263_454==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA263_454==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA263_454==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA263_454==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA263_454==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA263_454==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA263_454==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA263_454==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA263_454==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA263_454==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA263_454==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA263_454==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA263_454==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA263_454==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA263_454==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA263_454==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA263_454==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA263_454==USING) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA263_454==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA263_454==SET) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA263_454==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA263_454==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA263_454==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA263_454==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA263_454==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA263_454==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA263_454==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA263_454==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA263_454==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA263_454==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        input.seek(index263_454);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA263_516 = input.LA(1);
                        int index263_516 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_516==STRING_LITERAL) ) {s = 1588;}
                        else if ( (LA263_516==QUOTED_STRING_LITERAL) ) {s = 1589;}
                        else if ( (LA263_516==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA263_516==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA263_516==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA263_516==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA263_516==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA263_516==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA263_516==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA263_516==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA263_516==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA263_516==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA263_516==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA263_516==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA263_516==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA263_516==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA263_516==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA263_516==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA263_516==AT) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA263_516==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA263_516==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA263_516==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA263_516==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA263_516==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        else if ( (LA263_516==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA263_516==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA263_516==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA263_516==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA263_516==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA263_516==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA263_516==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA263_516==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA263_516==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA263_516==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA263_516==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA263_516==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA263_516==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA263_516==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA263_516==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA263_516==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA263_516==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA263_516==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA263_516==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA263_516==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA263_516==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA263_516==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA263_516==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA263_516==LW) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA263_516==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA263_516==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA263_516==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA263_516==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA263_516==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA263_516==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA263_516==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA263_516==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA263_516==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA263_516==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA263_516==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA263_516==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA263_516==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA263_516==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA263_516==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA263_516==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA263_516==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA263_516==USING) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA263_516==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA263_516==SET) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA263_516==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA263_516==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA263_516==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA263_516==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA263_516==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA263_516==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA263_516==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA263_516==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA263_516==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA263_516==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        input.seek(index263_516);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA263_578 = input.LA(1);
                        int index263_578 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_578==STRING_LITERAL) ) {s = 1666;}
                        else if ( (LA263_578==QUOTED_STRING_LITERAL) ) {s = 1667;}
                        else if ( (LA263_578==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA263_578==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA263_578==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA263_578==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA263_578==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA263_578==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA263_578==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA263_578==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA263_578==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA263_578==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA263_578==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA263_578==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA263_578==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA263_578==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA263_578==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA263_578==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA263_578==AT) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA263_578==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA263_578==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA263_578==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA263_578==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA263_578==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA263_578==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA263_578==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA263_578==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA263_578==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA263_578==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA263_578==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA263_578==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA263_578==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA263_578==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA263_578==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA263_578==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA263_578==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA263_578==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA263_578==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA263_578==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA263_578==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA263_578==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA263_578==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA263_578==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA263_578==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA263_578==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA263_578==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA263_578==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA263_578==LW) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA263_578==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA263_578==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA263_578==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA263_578==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA263_578==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA263_578==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA263_578==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA263_578==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA263_578==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA263_578==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA263_578==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA263_578==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA263_578==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA263_578==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA263_578==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA263_578==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA263_578==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA263_578==USING) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA263_578==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA263_578==SET) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA263_578==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA263_578==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA263_578==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA263_578==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA263_578==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA263_578==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA263_578==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA263_578==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA263_578==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA263_578==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        input.seek(index263_578);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA263_640 = input.LA(1);
                        int index263_640 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_640==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA263_640==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA263_640==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA263_640==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA263_640==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA263_640==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA263_640==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA263_640==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA263_640==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA263_640==STRING_LITERAL) ) {s = 1753;}
                        else if ( (LA263_640==QUOTED_STRING_LITERAL) ) {s = 1754;}
                        else if ( (LA263_640==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA263_640==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA263_640==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA263_640==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA263_640==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA263_640==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA263_640==AT) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA263_640==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA263_640==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA263_640==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA263_640==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA263_640==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA263_640==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA263_640==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA263_640==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA263_640==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA263_640==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA263_640==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA263_640==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA263_640==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA263_640==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA263_640==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA263_640==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA263_640==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA263_640==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA263_640==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA263_640==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA263_640==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA263_640==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA263_640==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA263_640==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA263_640==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA263_640==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA263_640==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA263_640==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA263_640==LW) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA263_640==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA263_640==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA263_640==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA263_640==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA263_640==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA263_640==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA263_640==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA263_640==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA263_640==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA263_640==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA263_640==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA263_640==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA263_640==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA263_640==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA263_640==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA263_640==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA263_640==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA263_640==USING) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA263_640==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA263_640==SET) && (synpred3_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA263_640==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA263_640==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA263_640==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA263_640==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA263_640==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA263_640==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA263_640==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA263_640==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA263_640==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA263_640==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA263_640==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        input.seek(index263_640);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA263_702 = input.LA(1);
                        int index263_702 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_702==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA263_702==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA263_702==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA263_702==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA263_702==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA263_702==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA263_702==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA263_702==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA263_702==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA263_702==STRING_LITERAL) ) {s = 1831;}
                        else if ( (LA263_702==QUOTED_STRING_LITERAL) ) {s = 1832;}
                        else if ( (LA263_702==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA263_702==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA263_702==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA263_702==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA263_702==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA263_702==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA263_702==AT) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA263_702==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA263_702==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA263_702==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA263_702==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA263_702==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA263_702==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA263_702==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA263_702==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA263_702==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA263_702==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA263_702==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA263_702==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA263_702==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA263_702==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA263_702==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA263_702==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA263_702==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA263_702==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA263_702==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA263_702==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA263_702==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA263_702==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA263_702==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA263_702==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA263_702==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA263_702==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA263_702==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA263_702==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA263_702==LW) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA263_702==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA263_702==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA263_702==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA263_702==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA263_702==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA263_702==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA263_702==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA263_702==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA263_702==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA263_702==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA263_702==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA263_702==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA263_702==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA263_702==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA263_702==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA263_702==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA263_702==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA263_702==USING) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA263_702==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA263_702==SET) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA263_702==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA263_702==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA263_702==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA263_702==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA263_702==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA263_702==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA263_702==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA263_702==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA263_702==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA263_702==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA263_702==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        input.seek(index263_702);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA263_764 = input.LA(1);
                        int index263_764 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_764==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA263_764==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA263_764==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA263_764==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA263_764==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA263_764==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA263_764==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA263_764==STRING_LITERAL) ) {s = 1907;}
                        else if ( (LA263_764==QUOTED_STRING_LITERAL) ) {s = 1908;}
                        else if ( (LA263_764==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA263_764==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA263_764==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA263_764==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA263_764==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA263_764==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA263_764==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA263_764==AT) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA263_764==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA263_764==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA263_764==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA263_764==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA263_764==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA263_764==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA263_764==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA263_764==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA263_764==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA263_764==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA263_764==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA263_764==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA263_764==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA263_764==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA263_764==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA263_764==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA263_764==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA263_764==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA263_764==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA263_764==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA263_764==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA263_764==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA263_764==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA263_764==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA263_764==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA263_764==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA263_764==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA263_764==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA263_764==LW) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA263_764==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA263_764==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA263_764==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA263_764==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA263_764==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA263_764==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA263_764==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA263_764==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA263_764==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA263_764==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA263_764==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA263_764==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA263_764==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA263_764==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA263_764==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA263_764==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA263_764==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA263_764==USING) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA263_764==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA263_764==SET) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA263_764==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA263_764==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA263_764==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA263_764==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA263_764==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA263_764==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA263_764==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA263_764==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA263_764==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA263_764==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        input.seek(index263_764);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA263_826 = input.LA(1);
                        int index263_826 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_826==STRING_LITERAL) ) {s = 1976;}
                        else if ( (LA263_826==QUOTED_STRING_LITERAL) ) {s = 1977;}
                        else if ( (LA263_826==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA263_826==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA263_826==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA263_826==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA263_826==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA263_826==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA263_826==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA263_826==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA263_826==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA263_826==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA263_826==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA263_826==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA263_826==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA263_826==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA263_826==AT) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA263_826==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA263_826==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA263_826==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA263_826==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA263_826==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA263_826==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA263_826==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA263_826==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA263_826==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA263_826==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA263_826==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA263_826==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA263_826==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA263_826==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA263_826==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA263_826==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA263_826==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA263_826==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA263_826==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA263_826==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA263_826==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA263_826==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA263_826==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA263_826==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA263_826==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA263_826==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA263_826==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA263_826==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA263_826==LW) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA263_826==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA263_826==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA263_826==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA263_826==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA263_826==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA263_826==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA263_826==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA263_826==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA263_826==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA263_826==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA263_826==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA263_826==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA263_826==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA263_826==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        else if ( (LA263_826==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( (LA263_826==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA263_826==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA263_826==USING) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA263_826==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA263_826==SET) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA263_826==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA263_826==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA263_826==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA263_826==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA263_826==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA263_826==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA263_826==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA263_826==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA263_826==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA263_826==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        input.seek(index263_826);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA263_888 = input.LA(1);
                        int index263_888 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_888==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( ((LA263_888>=STRING_LITERAL && LA263_888<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index263_888);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA263_950 = input.LA(1);
                        int index263_950 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_950==STRING_LITERAL) ) {s = 2055;}
                        else if ( (LA263_950==QUOTED_STRING_LITERAL) ) {s = 2056;}
                        else if ( (LA263_950==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        else if ( (LA263_950==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA263_950==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA263_950==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA263_950==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA263_950==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA263_950==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA263_950==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA263_950==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA263_950==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA263_950==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA263_950==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA263_950==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA263_950==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA263_950==AT) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA263_950==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA263_950==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA263_950==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA263_950==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA263_950==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA263_950==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA263_950==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA263_950==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA263_950==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA263_950==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA263_950==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        else if ( (LA263_950==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA263_950==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA263_950==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA263_950==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA263_950==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA263_950==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA263_950==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA263_950==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA263_950==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA263_950==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA263_950==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA263_950==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA263_950==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA263_950==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA263_950==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA263_950==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA263_950==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA263_950==LW) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA263_950==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA263_950==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2102;}
                        else if ( (LA263_950==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA263_950==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA263_950==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA263_950==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA263_950==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA263_950==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA263_950==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA263_950==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA263_950==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA263_950==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA263_950==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA263_950==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA263_950==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA263_950==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA263_950==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA263_950==USING) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA263_950==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA263_950==SET) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA263_950==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA263_950==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA263_950==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA263_950==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA263_950==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA263_950==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA263_950==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        else if ( (LA263_950==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA263_950==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA263_950==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        input.seek(index263_950);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA263_1012 = input.LA(1);
                        int index263_1012 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1012==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA263_1012==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA263_1012==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA263_1012==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA263_1012==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA263_1012==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA263_1012==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA263_1012==STRING_LITERAL) ) {s = 2138;}
                        else if ( (LA263_1012==QUOTED_STRING_LITERAL) ) {s = 2139;}
                        else if ( (LA263_1012==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA263_1012==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA263_1012==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA263_1012==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA263_1012==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA263_1012==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA263_1012==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA263_1012==AT) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA263_1012==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA263_1012==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA263_1012==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA263_1012==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA263_1012==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2152;}
                        else if ( (LA263_1012==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA263_1012==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA263_1012==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA263_1012==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA263_1012==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA263_1012==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA263_1012==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA263_1012==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA263_1012==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA263_1012==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA263_1012==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA263_1012==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA263_1012==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA263_1012==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA263_1012==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA263_1012==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA263_1012==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        else if ( (LA263_1012==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA263_1012==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA263_1012==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA263_1012==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA263_1012==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA263_1012==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA263_1012==LW) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA263_1012==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA263_1012==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA263_1012==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA263_1012==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA263_1012==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA263_1012==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA263_1012==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA263_1012==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA263_1012==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA263_1012==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA263_1012==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA263_1012==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA263_1012==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA263_1012==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA263_1012==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA263_1012==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA263_1012==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA263_1012==USING) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA263_1012==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA263_1012==SET) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA263_1012==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA263_1012==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA263_1012==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA263_1012==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA263_1012==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA263_1012==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2202;}
                        else if ( (LA263_1012==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA263_1012==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA263_1012==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA263_1012==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        input.seek(index263_1012);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA263_1074 = input.LA(1);
                        int index263_1074 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1074==STRING_LITERAL) ) {s = 2207;}
                        else if ( (LA263_1074==QUOTED_STRING_LITERAL) ) {s = 2208;}
                        else if ( (LA263_1074==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA263_1074==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA263_1074==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA263_1074==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA263_1074==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA263_1074==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA263_1074==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA263_1074==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA263_1074==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        else if ( (LA263_1074==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2218;}
                        else if ( (LA263_1074==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA263_1074==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA263_1074==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA263_1074==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA263_1074==AT) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA263_1074==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA263_1074==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA263_1074==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA263_1074==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA263_1074==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA263_1074==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA263_1074==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA263_1074==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA263_1074==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA263_1074==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA263_1074==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA263_1074==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA263_1074==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA263_1074==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA263_1074==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA263_1074==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA263_1074==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA263_1074==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA263_1074==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA263_1074==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA263_1074==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA263_1074==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA263_1074==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA263_1074==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA263_1074==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA263_1074==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA263_1074==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA263_1074==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA263_1074==LW) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA263_1074==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA263_1074==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA263_1074==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA263_1074==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA263_1074==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA263_1074==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA263_1074==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        else if ( (LA263_1074==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA263_1074==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA263_1074==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA263_1074==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA263_1074==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA263_1074==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA263_1074==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA263_1074==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        else if ( (LA263_1074==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA263_1074==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA263_1074==USING) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA263_1074==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA263_1074==SET) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA263_1074==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA263_1074==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA263_1074==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA263_1074==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA263_1074==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA263_1074==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA263_1074==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2279;}
                        else if ( (LA263_1074==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA263_1074==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA263_1074==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        input.seek(index263_1074);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA263_1136 = input.LA(1);
                        int index263_1136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1136==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA263_1136==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        else if ( (LA263_1136==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA263_1136==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA263_1136==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA263_1136==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA263_1136==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA263_1136==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA263_1136==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA263_1136==STRING_LITERAL) ) {s = 2292;}
                        else if ( (LA263_1136==QUOTED_STRING_LITERAL) ) {s = 2293;}
                        else if ( (LA263_1136==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA263_1136==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA263_1136==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA263_1136==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA263_1136==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA263_1136==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA263_1136==AT) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA263_1136==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA263_1136==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA263_1136==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA263_1136==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2304;}
                        else if ( (LA263_1136==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA263_1136==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA263_1136==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA263_1136==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA263_1136==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        else if ( (LA263_1136==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA263_1136==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA263_1136==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA263_1136==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA263_1136==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA263_1136==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA263_1136==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA263_1136==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA263_1136==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA263_1136==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA263_1136==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA263_1136==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA263_1136==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA263_1136==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA263_1136==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA263_1136==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA263_1136==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA263_1136==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA263_1136==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA263_1136==LW) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA263_1136==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA263_1136==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA263_1136==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA263_1136==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA263_1136==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        else if ( (LA263_1136==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA263_1136==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA263_1136==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA263_1136==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA263_1136==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA263_1136==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA263_1136==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA263_1136==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA263_1136==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA263_1136==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA263_1136==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2345;}
                        else if ( (LA263_1136==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA263_1136==USING) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA263_1136==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA263_1136==SET) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA263_1136==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA263_1136==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA263_1136==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA263_1136==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA263_1136==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2354;}
                        else if ( (LA263_1136==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA263_1136==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA263_1136==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA263_1136==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA263_1136==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        else if ( (LA263_1136==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        input.seek(index263_1136);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA263_1198 = input.LA(1);
                        int index263_1198 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1198==SELECT) ) {s = 2361;}
                        else if ( (LA263_1198==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA263_1198==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA263_1198==AT) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA263_1198==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA263_1198==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA263_1198==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA263_1198==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA263_1198==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA263_1198==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA263_1198==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA263_1198==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA263_1198==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA263_1198==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA263_1198==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA263_1198==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA263_1198==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA263_1198==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA263_1198==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2379;}
                        else if ( (LA263_1198==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA263_1198==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA263_1198==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA263_1198==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA263_1198==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        else if ( (LA263_1198==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA263_1198==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA263_1198==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA263_1198==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA263_1198==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA263_1198==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA263_1198==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA263_1198==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA263_1198==LW) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        else if ( (LA263_1198==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA263_1198==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA263_1198==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA263_1198==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA263_1198==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA263_1198==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA263_1198==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA263_1198==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA263_1198==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA263_1198==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA263_1198==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        else if ( (LA263_1198==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA263_1198==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA263_1198==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA263_1198==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA263_1198==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA263_1198==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA263_1198==USING) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        input.seek(index263_1198);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA263_1208 = input.LA(1);
                        int index263_1208 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1208==RPAREN) ) {s = 2412;}
                        else if ( (LA263_1208==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA263_1208==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA263_1208==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA263_1208==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA263_1208==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA263_1208==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA263_1208==LT) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA263_1208==GT) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA263_1208==LE) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA263_1208==GE) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA263_1208==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA263_1208==IS) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA263_1208==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA263_1208==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA263_1208==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA263_1208==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        else if ( (LA263_1208==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA263_1208==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        else if ( (LA263_1208==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA263_1208==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA263_1208==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA263_1208==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA263_1208==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA263_1208==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA263_1208==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        input.seek(index263_1208);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA263_1209 = input.LA(1);
                        int index263_1209 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1209==RPAREN) ) {s = 2438;}
                        else if ( (LA263_1209==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2439;}
                        else if ( (LA263_1209==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA263_1209==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA263_1209==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA263_1209==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA263_1209==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        else if ( (LA263_1209==LT) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA263_1209==GT) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA263_1209==LE) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA263_1209==GE) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA263_1209==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA263_1209==IS) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA263_1209==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA263_1209==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA263_1209==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA263_1209==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA263_1209==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA263_1209==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        else if ( (LA263_1209==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA263_1209==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA263_1209==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA263_1209==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA263_1209==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        else if ( (LA263_1209==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA263_1209==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        input.seek(index263_1209);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA263_1278 = input.LA(1);
                        int index263_1278 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1278==RPAREN) ) {s = 2464;}
                        else if ( (LA263_1278==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA263_1278==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA263_1278==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA263_1278==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA263_1278==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA263_1278==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        else if ( (LA263_1278==LT) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA263_1278==GT) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA263_1278==LE) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA263_1278==GE) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA263_1278==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA263_1278==IS) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA263_1278==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA263_1278==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA263_1278==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA263_1278==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA263_1278==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA263_1278==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA263_1278==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA263_1278==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA263_1278==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA263_1278==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA263_1278==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        else if ( (LA263_1278==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA263_1278==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        input.seek(index263_1278);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA263_1279 = input.LA(1);
                        int index263_1279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1279==RPAREN) ) {s = 2490;}
                        else if ( (LA263_1279==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA263_1279==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA263_1279==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA263_1279==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        else if ( (LA263_1279==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA263_1279==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA263_1279==LT) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA263_1279==GT) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA263_1279==LE) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA263_1279==GE) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA263_1279==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA263_1279==IS) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA263_1279==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA263_1279==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA263_1279==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA263_1279==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA263_1279==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA263_1279==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        else if ( (LA263_1279==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA263_1279==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA263_1279==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA263_1279==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA263_1279==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA263_1279==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA263_1279==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        input.seek(index263_1279);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA263_1365 = input.LA(1);
                        int index263_1365 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1365==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA263_1365==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA263_1365==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA263_1365==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA263_1365==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA263_1365==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA263_1365==LT) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA263_1365==GT) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA263_1365==LE) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA263_1365==GE) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA263_1365==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA263_1365==IS) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA263_1365==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA263_1365==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA263_1365==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA263_1365==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA263_1365==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA263_1365==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA263_1365==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        else if ( (LA263_1365==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA263_1365==RPAREN) ) {s = 2536;}
                        else if ( (LA263_1365==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA263_1365==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA263_1365==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA263_1365==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA263_1365==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        input.seek(index263_1365);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA263_1366 = input.LA(1);
                        int index263_1366 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1366==RPAREN) ) {s = 2542;}
                        else if ( (LA263_1366==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA263_1366==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA263_1366==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA263_1366==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA263_1366==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA263_1366==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA263_1366==LT) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA263_1366==GT) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA263_1366==LE) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA263_1366==GE) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA263_1366==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA263_1366==IS) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA263_1366==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA263_1366==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA263_1366==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA263_1366==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA263_1366==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA263_1366==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2560;}
                        else if ( (LA263_1366==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA263_1366==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA263_1366==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA263_1366==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA263_1366==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA263_1366==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA263_1366==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        input.seek(index263_1366);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA263_1434 = input.LA(1);
                        int index263_1434 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1434==RPAREN) ) {s = 14;}
                        else if ( (LA263_1434==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA263_1434==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA263_1434==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA263_1434==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA263_1434==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA263_1434==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        else if ( (LA263_1434==LT) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA263_1434==GT) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA263_1434==LE) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA263_1434==GE) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA263_1434==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA263_1434==IS) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA263_1434==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA263_1434==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA263_1434==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA263_1434==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA263_1434==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA263_1434==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2586;}
                        else if ( (LA263_1434==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA263_1434==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA263_1434==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA263_1434==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA263_1434==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA263_1434==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA263_1434==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        input.seek(index263_1434);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA263_1435 = input.LA(1);
                        int index263_1435 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1435==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA263_1435==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        else if ( (LA263_1435==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA263_1435==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA263_1435==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA263_1435==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA263_1435==LT) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA263_1435==GT) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA263_1435==LE) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA263_1435==GE) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA263_1435==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA263_1435==IS) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA263_1435==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA263_1435==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA263_1435==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA263_1435==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA263_1435==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA263_1435==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA263_1435==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        else if ( (LA263_1435==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA263_1435==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA263_1435==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA263_1435==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA263_1435==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA263_1435==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA263_1435==RPAREN) ) {s = 14;}
                        input.seek(index263_1435);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA263_1519 = input.LA(1);
                        int index263_1519 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1519==RPAREN) ) {s = 2620;}
                        else if ( (LA263_1519==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        else if ( (LA263_1519==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA263_1519==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA263_1519==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA263_1519==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA263_1519==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        else if ( (LA263_1519==LT) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA263_1519==GT) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA263_1519==LE) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA263_1519==GE) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA263_1519==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA263_1519==IS) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA263_1519==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA263_1519==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA263_1519==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA263_1519==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA263_1519==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA263_1519==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA263_1519==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA263_1519==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA263_1519==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA263_1519==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA263_1519==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA263_1519==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA263_1519==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        input.seek(index263_1519);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA263_1520 = input.LA(1);
                        int index263_1520 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1520==RPAREN) ) {s = 2646;}
                        else if ( (LA263_1520==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        else if ( (LA263_1520==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA263_1520==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA263_1520==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA263_1520==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA263_1520==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA263_1520==LT) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA263_1520==GT) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA263_1520==LE) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA263_1520==GE) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA263_1520==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA263_1520==IS) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA263_1520==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA263_1520==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA263_1520==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA263_1520==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA263_1520==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA263_1520==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA263_1520==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA263_1520==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA263_1520==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA263_1520==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA263_1520==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA263_1520==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA263_1520==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        input.seek(index263_1520);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA263_1588 = input.LA(1);
                        int index263_1588 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1588==RPAREN) ) {s = 2672;}
                        else if ( (LA263_1588==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        else if ( (LA263_1588==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA263_1588==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA263_1588==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA263_1588==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA263_1588==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        else if ( (LA263_1588==LT) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA263_1588==GT) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA263_1588==LE) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA263_1588==GE) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA263_1588==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA263_1588==IS) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA263_1588==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA263_1588==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA263_1588==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA263_1588==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA263_1588==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA263_1588==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA263_1588==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA263_1588==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA263_1588==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA263_1588==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA263_1588==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA263_1588==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA263_1588==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        input.seek(index263_1588);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA263_1589 = input.LA(1);
                        int index263_1589 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1589==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA263_1589==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        else if ( (LA263_1589==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA263_1589==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA263_1589==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA263_1589==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA263_1589==LT) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA263_1589==GT) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA263_1589==LE) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA263_1589==GE) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA263_1589==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA263_1589==IS) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA263_1589==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA263_1589==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA263_1589==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA263_1589==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA263_1589==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA263_1589==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA263_1589==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA263_1589==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA263_1589==RPAREN) ) {s = 2718;}
                        else if ( (LA263_1589==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA263_1589==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA263_1589==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA263_1589==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA263_1589==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        input.seek(index263_1589);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA263_1666 = input.LA(1);
                        int index263_1666 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1666==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA263_1666==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        else if ( (LA263_1666==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA263_1666==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA263_1666==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA263_1666==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA263_1666==LT) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        else if ( (LA263_1666==GT) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA263_1666==LE) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA263_1666==GE) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA263_1666==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA263_1666==IS) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA263_1666==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA263_1666==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA263_1666==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA263_1666==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA263_1666==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA263_1666==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA263_1666==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA263_1666==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA263_1666==RPAREN) ) {s = 2744;}
                        else if ( (LA263_1666==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA263_1666==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA263_1666==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA263_1666==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA263_1666==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        input.seek(index263_1666);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA263_1667 = input.LA(1);
                        int index263_1667 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1667==RPAREN) ) {s = 2750;}
                        else if ( (LA263_1667==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        else if ( (LA263_1667==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA263_1667==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA263_1667==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA263_1667==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA263_1667==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA263_1667==LT) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA263_1667==GT) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA263_1667==LE) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA263_1667==GE) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA263_1667==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA263_1667==IS) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA263_1667==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA263_1667==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA263_1667==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA263_1667==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA263_1667==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA263_1667==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA263_1667==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA263_1667==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA263_1667==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA263_1667==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA263_1667==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA263_1667==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA263_1667==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        input.seek(index263_1667);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA263_1753 = input.LA(1);
                        int index263_1753 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1753==RPAREN) ) {s = 2776;}
                        else if ( (LA263_1753==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2777;}
                        else if ( (LA263_1753==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2778;}
                        else if ( (LA263_1753==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA263_1753==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2780;}
                        else if ( (LA263_1753==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA263_1753==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        else if ( (LA263_1753==LT) && (synpred3_EsperEPL2Grammar())) {s = 2783;}
                        else if ( (LA263_1753==GT) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA263_1753==LE) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        else if ( (LA263_1753==GE) && (synpred3_EsperEPL2Grammar())) {s = 2786;}
                        else if ( (LA263_1753==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2787;}
                        else if ( (LA263_1753==IS) && (synpred3_EsperEPL2Grammar())) {s = 2788;}
                        else if ( (LA263_1753==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2789;}
                        else if ( (LA263_1753==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA263_1753==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        else if ( (LA263_1753==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2792;}
                        else if ( (LA263_1753==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA263_1753==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        else if ( (LA263_1753==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2795;}
                        else if ( (LA263_1753==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA263_1753==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA263_1753==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA263_1753==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA263_1753==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA263_1753==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        input.seek(index263_1753);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA263_1754 = input.LA(1);
                        int index263_1754 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1754==RPAREN) ) {s = 2802;}
                        else if ( (LA263_1754==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2803;}
                        else if ( (LA263_1754==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2804;}
                        else if ( (LA263_1754==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA263_1754==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2806;}
                        else if ( (LA263_1754==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA263_1754==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        else if ( (LA263_1754==LT) && (synpred3_EsperEPL2Grammar())) {s = 2809;}
                        else if ( (LA263_1754==GT) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA263_1754==LE) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        else if ( (LA263_1754==GE) && (synpred3_EsperEPL2Grammar())) {s = 2812;}
                        else if ( (LA263_1754==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2813;}
                        else if ( (LA263_1754==IS) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA263_1754==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA263_1754==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA263_1754==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        else if ( (LA263_1754==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2818;}
                        else if ( (LA263_1754==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA263_1754==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        else if ( (LA263_1754==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2821;}
                        else if ( (LA263_1754==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA263_1754==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA263_1754==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA263_1754==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA263_1754==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA263_1754==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        input.seek(index263_1754);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA263_1831 = input.LA(1);
                        int index263_1831 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1831==RPAREN) ) {s = 2828;}
                        else if ( (LA263_1831==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2829;}
                        else if ( (LA263_1831==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2830;}
                        else if ( (LA263_1831==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA263_1831==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2832;}
                        else if ( (LA263_1831==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2833;}
                        else if ( (LA263_1831==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        else if ( (LA263_1831==LT) && (synpred3_EsperEPL2Grammar())) {s = 2835;}
                        else if ( (LA263_1831==GT) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA263_1831==LE) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        else if ( (LA263_1831==GE) && (synpred3_EsperEPL2Grammar())) {s = 2838;}
                        else if ( (LA263_1831==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2839;}
                        else if ( (LA263_1831==IS) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA263_1831==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA263_1831==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA263_1831==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        else if ( (LA263_1831==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2844;}
                        else if ( (LA263_1831==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2845;}
                        else if ( (LA263_1831==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        else if ( (LA263_1831==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA263_1831==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA263_1831==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2849;}
                        else if ( (LA263_1831==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA263_1831==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA263_1831==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA263_1831==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        input.seek(index263_1831);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA263_1832 = input.LA(1);
                        int index263_1832 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1832==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        else if ( (LA263_1832==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2855;}
                        else if ( (LA263_1832==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA263_1832==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA263_1832==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2858;}
                        else if ( (LA263_1832==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA263_1832==LT) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        else if ( (LA263_1832==GT) && (synpred3_EsperEPL2Grammar())) {s = 2861;}
                        else if ( (LA263_1832==LE) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA263_1832==GE) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        else if ( (LA263_1832==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2864;}
                        else if ( (LA263_1832==IS) && (synpred3_EsperEPL2Grammar())) {s = 2865;}
                        else if ( (LA263_1832==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2866;}
                        else if ( (LA263_1832==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2867;}
                        else if ( (LA263_1832==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA263_1832==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        else if ( (LA263_1832==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2870;}
                        else if ( (LA263_1832==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        else if ( (LA263_1832==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        else if ( (LA263_1832==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2873;}
                        else if ( (LA263_1832==RPAREN) ) {s = 2874;}
                        else if ( (LA263_1832==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA263_1832==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA263_1832==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA263_1832==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA263_1832==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        input.seek(index263_1832);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA263_1907 = input.LA(1);
                        int index263_1907 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1907==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2880;}
                        else if ( (LA263_1907==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2881;}
                        else if ( (LA263_1907==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA263_1907==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA263_1907==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2884;}
                        else if ( (LA263_1907==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA263_1907==LT) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        else if ( (LA263_1907==GT) && (synpred3_EsperEPL2Grammar())) {s = 2887;}
                        else if ( (LA263_1907==LE) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA263_1907==GE) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        else if ( (LA263_1907==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2890;}
                        else if ( (LA263_1907==IS) && (synpred3_EsperEPL2Grammar())) {s = 2891;}
                        else if ( (LA263_1907==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA263_1907==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA263_1907==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA263_1907==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        else if ( (LA263_1907==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2896;}
                        else if ( (LA263_1907==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2897;}
                        else if ( (LA263_1907==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        else if ( (LA263_1907==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA263_1907==RPAREN) ) {s = 2900;}
                        else if ( (LA263_1907==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA263_1907==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA263_1907==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA263_1907==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA263_1907==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        input.seek(index263_1907);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA263_1908 = input.LA(1);
                        int index263_1908 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1908==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2906;}
                        else if ( (LA263_1908==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2907;}
                        else if ( (LA263_1908==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA263_1908==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA263_1908==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2910;}
                        else if ( (LA263_1908==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA263_1908==LT) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        else if ( (LA263_1908==GT) && (synpred3_EsperEPL2Grammar())) {s = 2913;}
                        else if ( (LA263_1908==LE) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA263_1908==GE) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        else if ( (LA263_1908==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2916;}
                        else if ( (LA263_1908==IS) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        else if ( (LA263_1908==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA263_1908==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2919;}
                        else if ( (LA263_1908==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        else if ( (LA263_1908==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2921;}
                        else if ( (LA263_1908==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2922;}
                        else if ( (LA263_1908==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2923;}
                        else if ( (LA263_1908==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2924;}
                        else if ( (LA263_1908==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2925;}
                        else if ( (LA263_1908==RPAREN) ) {s = 2926;}
                        else if ( (LA263_1908==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA263_1908==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA263_1908==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA263_1908==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA263_1908==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        input.seek(index263_1908);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA263_1976 = input.LA(1);
                        int index263_1976 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1976==RPAREN) ) {s = 2932;}
                        else if ( (LA263_1976==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2933;}
                        else if ( (LA263_1976==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2934;}
                        else if ( (LA263_1976==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA263_1976==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2936;}
                        else if ( (LA263_1976==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2937;}
                        else if ( (LA263_1976==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        else if ( (LA263_1976==LT) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA263_1976==GT) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA263_1976==LE) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        else if ( (LA263_1976==GE) && (synpred3_EsperEPL2Grammar())) {s = 2942;}
                        else if ( (LA263_1976==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2943;}
                        else if ( (LA263_1976==IS) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA263_1976==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        else if ( (LA263_1976==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA263_1976==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA263_1976==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2948;}
                        else if ( (LA263_1976==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2949;}
                        else if ( (LA263_1976==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        else if ( (LA263_1976==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA263_1976==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA263_1976==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2953;}
                        else if ( (LA263_1976==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA263_1976==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA263_1976==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA263_1976==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2957;}
                        input.seek(index263_1976);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA263_1977 = input.LA(1);
                        int index263_1977 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_1977==RPAREN) ) {s = 2958;}
                        else if ( (LA263_1977==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2959;}
                        else if ( (LA263_1977==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA263_1977==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA263_1977==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2962;}
                        else if ( (LA263_1977==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2963;}
                        else if ( (LA263_1977==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2964;}
                        else if ( (LA263_1977==LT) && (synpred3_EsperEPL2Grammar())) {s = 2965;}
                        else if ( (LA263_1977==GT) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA263_1977==LE) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        else if ( (LA263_1977==GE) && (synpred3_EsperEPL2Grammar())) {s = 2968;}
                        else if ( (LA263_1977==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2969;}
                        else if ( (LA263_1977==IS) && (synpred3_EsperEPL2Grammar())) {s = 2970;}
                        else if ( (LA263_1977==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2971;}
                        else if ( (LA263_1977==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2972;}
                        else if ( (LA263_1977==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2973;}
                        else if ( (LA263_1977==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2974;}
                        else if ( (LA263_1977==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2975;}
                        else if ( (LA263_1977==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2976;}
                        else if ( (LA263_1977==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2977;}
                        else if ( (LA263_1977==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2978;}
                        else if ( (LA263_1977==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2979;}
                        else if ( (LA263_1977==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2980;}
                        else if ( (LA263_1977==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2981;}
                        else if ( (LA263_1977==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2982;}
                        else if ( (LA263_1977==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2983;}
                        input.seek(index263_1977);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA263_2055 = input.LA(1);
                        int index263_2055 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_2055==RPAREN) ) {s = 14;}
                        else if ( (LA263_2055==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2985;}
                        else if ( (LA263_2055==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2986;}
                        else if ( (LA263_2055==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2987;}
                        else if ( (LA263_2055==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2988;}
                        else if ( (LA263_2055==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2989;}
                        else if ( (LA263_2055==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2990;}
                        else if ( (LA263_2055==LT) && (synpred3_EsperEPL2Grammar())) {s = 2991;}
                        else if ( (LA263_2055==GT) && (synpred3_EsperEPL2Grammar())) {s = 2992;}
                        else if ( (LA263_2055==LE) && (synpred3_EsperEPL2Grammar())) {s = 2993;}
                        else if ( (LA263_2055==GE) && (synpred3_EsperEPL2Grammar())) {s = 2994;}
                        else if ( (LA263_2055==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2995;}
                        else if ( (LA263_2055==IS) && (synpred3_EsperEPL2Grammar())) {s = 2996;}
                        else if ( (LA263_2055==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2997;}
                        else if ( (LA263_2055==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2998;}
                        else if ( (LA263_2055==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2999;}
                        else if ( (LA263_2055==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3000;}
                        else if ( (LA263_2055==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3001;}
                        else if ( (LA263_2055==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3002;}
                        else if ( (LA263_2055==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3003;}
                        else if ( (LA263_2055==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3004;}
                        else if ( (LA263_2055==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3005;}
                        else if ( (LA263_2055==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3006;}
                        else if ( (LA263_2055==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3007;}
                        else if ( (LA263_2055==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3008;}
                        else if ( (LA263_2055==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3009;}
                        input.seek(index263_2055);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA263_2056 = input.LA(1);
                        int index263_2056 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_2056==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3010;}
                        else if ( (LA263_2056==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3011;}
                        else if ( (LA263_2056==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3012;}
                        else if ( (LA263_2056==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3013;}
                        else if ( (LA263_2056==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3014;}
                        else if ( (LA263_2056==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3015;}
                        else if ( (LA263_2056==LT) && (synpred3_EsperEPL2Grammar())) {s = 3016;}
                        else if ( (LA263_2056==GT) && (synpred3_EsperEPL2Grammar())) {s = 3017;}
                        else if ( (LA263_2056==LE) && (synpred3_EsperEPL2Grammar())) {s = 3018;}
                        else if ( (LA263_2056==GE) && (synpred3_EsperEPL2Grammar())) {s = 3019;}
                        else if ( (LA263_2056==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3020;}
                        else if ( (LA263_2056==IS) && (synpred3_EsperEPL2Grammar())) {s = 3021;}
                        else if ( (LA263_2056==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3022;}
                        else if ( (LA263_2056==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3023;}
                        else if ( (LA263_2056==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3024;}
                        else if ( (LA263_2056==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3025;}
                        else if ( (LA263_2056==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3026;}
                        else if ( (LA263_2056==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3027;}
                        else if ( (LA263_2056==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3028;}
                        else if ( (LA263_2056==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3029;}
                        else if ( (LA263_2056==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3030;}
                        else if ( (LA263_2056==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3031;}
                        else if ( (LA263_2056==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3032;}
                        else if ( (LA263_2056==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3033;}
                        else if ( (LA263_2056==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3034;}
                        else if ( (LA263_2056==RPAREN) ) {s = 14;}
                        input.seek(index263_2056);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA263_2138 = input.LA(1);
                        int index263_2138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_2138==RPAREN) ) {s = 3036;}
                        else if ( (LA263_2138==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3037;}
                        else if ( (LA263_2138==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3038;}
                        else if ( (LA263_2138==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3039;}
                        else if ( (LA263_2138==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3040;}
                        else if ( (LA263_2138==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3041;}
                        else if ( (LA263_2138==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3042;}
                        else if ( (LA263_2138==LT) && (synpred3_EsperEPL2Grammar())) {s = 3043;}
                        else if ( (LA263_2138==GT) && (synpred3_EsperEPL2Grammar())) {s = 3044;}
                        else if ( (LA263_2138==LE) && (synpred3_EsperEPL2Grammar())) {s = 3045;}
                        else if ( (LA263_2138==GE) && (synpred3_EsperEPL2Grammar())) {s = 3046;}
                        else if ( (LA263_2138==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3047;}
                        else if ( (LA263_2138==IS) && (synpred3_EsperEPL2Grammar())) {s = 3048;}
                        else if ( (LA263_2138==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3049;}
                        else if ( (LA263_2138==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3050;}
                        else if ( (LA263_2138==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3051;}
                        else if ( (LA263_2138==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3052;}
                        else if ( (LA263_2138==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3053;}
                        else if ( (LA263_2138==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3054;}
                        else if ( (LA263_2138==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3055;}
                        else if ( (LA263_2138==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3056;}
                        else if ( (LA263_2138==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3057;}
                        else if ( (LA263_2138==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3058;}
                        else if ( (LA263_2138==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3059;}
                        else if ( (LA263_2138==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3060;}
                        input.seek(index263_2138);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA263_2139 = input.LA(1);
                        int index263_2139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_2139==RPAREN) ) {s = 3061;}
                        else if ( (LA263_2139==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3062;}
                        else if ( (LA263_2139==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3063;}
                        else if ( (LA263_2139==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3064;}
                        else if ( (LA263_2139==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3065;}
                        else if ( (LA263_2139==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3066;}
                        else if ( (LA263_2139==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3067;}
                        else if ( (LA263_2139==LT) && (synpred3_EsperEPL2Grammar())) {s = 3068;}
                        else if ( (LA263_2139==GT) && (synpred3_EsperEPL2Grammar())) {s = 3069;}
                        else if ( (LA263_2139==LE) && (synpred3_EsperEPL2Grammar())) {s = 3070;}
                        else if ( (LA263_2139==GE) && (synpred3_EsperEPL2Grammar())) {s = 3071;}
                        else if ( (LA263_2139==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3072;}
                        else if ( (LA263_2139==IS) && (synpred3_EsperEPL2Grammar())) {s = 3073;}
                        else if ( (LA263_2139==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3074;}
                        else if ( (LA263_2139==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3075;}
                        else if ( (LA263_2139==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3076;}
                        else if ( (LA263_2139==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3077;}
                        else if ( (LA263_2139==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3078;}
                        else if ( (LA263_2139==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3079;}
                        else if ( (LA263_2139==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3080;}
                        else if ( (LA263_2139==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3081;}
                        else if ( (LA263_2139==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3082;}
                        else if ( (LA263_2139==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3083;}
                        else if ( (LA263_2139==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3084;}
                        else if ( (LA263_2139==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3085;}
                        input.seek(index263_2139);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA263_2207 = input.LA(1);
                        int index263_2207 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_2207==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3086;}
                        else if ( (LA263_2207==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3087;}
                        else if ( (LA263_2207==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3088;}
                        else if ( (LA263_2207==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3089;}
                        else if ( (LA263_2207==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3090;}
                        else if ( (LA263_2207==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3091;}
                        else if ( (LA263_2207==LT) && (synpred3_EsperEPL2Grammar())) {s = 3092;}
                        else if ( (LA263_2207==GT) && (synpred3_EsperEPL2Grammar())) {s = 3093;}
                        else if ( (LA263_2207==LE) && (synpred3_EsperEPL2Grammar())) {s = 3094;}
                        else if ( (LA263_2207==GE) && (synpred3_EsperEPL2Grammar())) {s = 3095;}
                        else if ( (LA263_2207==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3096;}
                        else if ( (LA263_2207==IS) && (synpred3_EsperEPL2Grammar())) {s = 3097;}
                        else if ( (LA263_2207==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3098;}
                        else if ( (LA263_2207==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3099;}
                        else if ( (LA263_2207==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3100;}
                        else if ( (LA263_2207==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3101;}
                        else if ( (LA263_2207==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3102;}
                        else if ( (LA263_2207==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3103;}
                        else if ( (LA263_2207==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3104;}
                        else if ( (LA263_2207==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3105;}
                        else if ( (LA263_2207==AS) && (synpred3_EsperEPL2Grammar())) {s = 3106;}
                        else if ( (LA263_2207==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3107;}
                        else if ( (LA263_2207==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3108;}
                        else if ( (LA263_2207==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3109;}
                        else if ( (LA263_2207==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3110;}
                        else if ( (LA263_2207==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3111;}
                        else if ( (LA263_2207==RPAREN) ) {s = 14;}
                        input.seek(index263_2207);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA263_2208 = input.LA(1);
                        int index263_2208 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_2208==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3113;}
                        else if ( (LA263_2208==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3114;}
                        else if ( (LA263_2208==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3115;}
                        else if ( (LA263_2208==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3116;}
                        else if ( (LA263_2208==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3117;}
                        else if ( (LA263_2208==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3118;}
                        else if ( (LA263_2208==LT) && (synpred3_EsperEPL2Grammar())) {s = 3119;}
                        else if ( (LA263_2208==GT) && (synpred3_EsperEPL2Grammar())) {s = 3120;}
                        else if ( (LA263_2208==LE) && (synpred3_EsperEPL2Grammar())) {s = 3121;}
                        else if ( (LA263_2208==GE) && (synpred3_EsperEPL2Grammar())) {s = 3122;}
                        else if ( (LA263_2208==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3123;}
                        else if ( (LA263_2208==IS) && (synpred3_EsperEPL2Grammar())) {s = 3124;}
                        else if ( (LA263_2208==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3125;}
                        else if ( (LA263_2208==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3126;}
                        else if ( (LA263_2208==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3127;}
                        else if ( (LA263_2208==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3128;}
                        else if ( (LA263_2208==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3129;}
                        else if ( (LA263_2208==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3130;}
                        else if ( (LA263_2208==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3131;}
                        else if ( (LA263_2208==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3132;}
                        else if ( (LA263_2208==AS) && (synpred3_EsperEPL2Grammar())) {s = 3133;}
                        else if ( (LA263_2208==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3134;}
                        else if ( (LA263_2208==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3135;}
                        else if ( (LA263_2208==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3136;}
                        else if ( (LA263_2208==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3137;}
                        else if ( (LA263_2208==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3138;}
                        else if ( (LA263_2208==RPAREN) ) {s = 14;}
                        input.seek(index263_2208);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA263_2292 = input.LA(1);
                        int index263_2292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_2292==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3140;}
                        else if ( (LA263_2292==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3141;}
                        else if ( (LA263_2292==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3142;}
                        else if ( (LA263_2292==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3143;}
                        else if ( (LA263_2292==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3144;}
                        else if ( (LA263_2292==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3145;}
                        else if ( (LA263_2292==LT) && (synpred3_EsperEPL2Grammar())) {s = 3146;}
                        else if ( (LA263_2292==GT) && (synpred3_EsperEPL2Grammar())) {s = 3147;}
                        else if ( (LA263_2292==LE) && (synpred3_EsperEPL2Grammar())) {s = 3148;}
                        else if ( (LA263_2292==GE) && (synpred3_EsperEPL2Grammar())) {s = 3149;}
                        else if ( (LA263_2292==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3150;}
                        else if ( (LA263_2292==IS) && (synpred3_EsperEPL2Grammar())) {s = 3151;}
                        else if ( (LA263_2292==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3152;}
                        else if ( (LA263_2292==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3153;}
                        else if ( (LA263_2292==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3154;}
                        else if ( (LA263_2292==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3155;}
                        else if ( (LA263_2292==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3156;}
                        else if ( (LA263_2292==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3157;}
                        else if ( (LA263_2292==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3158;}
                        else if ( (LA263_2292==RPAREN) ) {s = 3159;}
                        else if ( (LA263_2292==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3160;}
                        else if ( (LA263_2292==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3161;}
                        else if ( (LA263_2292==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3162;}
                        else if ( (LA263_2292==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3163;}
                        else if ( (LA263_2292==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3164;}
                        input.seek(index263_2292);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA263_2293 = input.LA(1);
                        int index263_2293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA263_2293==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3165;}
                        else if ( (LA263_2293==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3166;}
                        else if ( (LA263_2293==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3167;}
                        else if ( (LA263_2293==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3168;}
                        else if ( (LA263_2293==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3169;}
                        else if ( (LA263_2293==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3170;}
                        else if ( (LA263_2293==LT) && (synpred3_EsperEPL2Grammar())) {s = 3171;}
                        else if ( (LA263_2293==GT) && (synpred3_EsperEPL2Grammar())) {s = 3172;}
                        else if ( (LA263_2293==LE) && (synpred3_EsperEPL2Grammar())) {s = 3173;}
                        else if ( (LA263_2293==GE) && (synpred3_EsperEPL2Grammar())) {s = 3174;}
                        else if ( (LA263_2293==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3175;}
                        else if ( (LA263_2293==IS) && (synpred3_EsperEPL2Grammar())) {s = 3176;}
                        else if ( (LA263_2293==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3177;}
                        else if ( (LA263_2293==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3178;}
                        else if ( (LA263_2293==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3179;}
                        else if ( (LA263_2293==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3180;}
                        else if ( (LA263_2293==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3181;}
                        else if ( (LA263_2293==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3182;}
                        else if ( (LA263_2293==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3183;}
                        else if ( (LA263_2293==RPAREN) ) {s = 3184;}
                        else if ( (LA263_2293==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3185;}
                        else if ( (LA263_2293==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3186;}
                        else if ( (LA263_2293==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3187;}
                        else if ( (LA263_2293==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3188;}
                        else if ( (LA263_2293==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3189;}
                        input.seek(index263_2293);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA263_2412 = input.LA(1);
                        int index263_2412 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2412);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA263_2438 = input.LA(1);
                        int index263_2438 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2438);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA263_2464 = input.LA(1);
                        int index263_2464 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2464);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA263_2490 = input.LA(1);
                        int index263_2490 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2490);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA263_2536 = input.LA(1);
                        int index263_2536 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2536);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA263_2542 = input.LA(1);
                        int index263_2542 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2542);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA263_2620 = input.LA(1);
                        int index263_2620 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2620);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA263_2646 = input.LA(1);
                        int index263_2646 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2646);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA263_2672 = input.LA(1);
                        int index263_2672 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2672);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA263_2718 = input.LA(1);
                        int index263_2718 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2718);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA263_2744 = input.LA(1);
                        int index263_2744 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2744);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA263_2750 = input.LA(1);
                        int index263_2750 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2750);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA263_2776 = input.LA(1);
                        int index263_2776 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2776);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA263_2802 = input.LA(1);
                        int index263_2802 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2802);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA263_2828 = input.LA(1);
                        int index263_2828 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2828);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA263_2874 = input.LA(1);
                        int index263_2874 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2874);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA263_2900 = input.LA(1);
                        int index263_2900 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2900);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA263_2926 = input.LA(1);
                        int index263_2926 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2926);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA263_2932 = input.LA(1);
                        int index263_2932 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2932);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA263_2958 = input.LA(1);
                        int index263_2958 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_2958);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA263_3036 = input.LA(1);
                        int index263_3036 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_3036);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA263_3061 = input.LA(1);
                        int index263_3061 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_3061);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA263_3159 = input.LA(1);
                        int index263_3159 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_3159);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA263_3184 = input.LA(1);
                        int index263_3184 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3189;}
                        input.seek(index263_3184);
    return s;
  }
    }
    static final String DFA317_eotS =
        "\u07ed\uffff";
    static final String DFA317_eofS =
        "\1\uffff\1\125\1\u0093\6\uffff\1\u00d1\1\u010f\4\uffff\1\u014d"+
        "\u015d\uffff\1\u0371\1\u03ae\1\u03ec\6\uffff\1\u042a\1\u0468\u00cd"+
        "\uffff\1\u0523\1\u0560\1\u059e\6\uffff\1\u05dc\1\u061a\u00cd\uffff"+
        "\1\u06d5\1\u0712\1\u0750\6\uffff\1\u078e\1\u07cc\u04c5\uffff";
    static final String DFA317_minS =
        "\1\5\2\6\6\uffff\2\6\4\uffff\1\6\47\uffff\1\5\2\uffff\1\5\72\uffff"+
        "\2\5\76\uffff\1\5\73\uffff\1\5\75\uffff\1\5\75\uffff\3\6\6\uffff"+
        "\2\6\53\uffff\2\6\117\uffff\2\6\117\uffff\3\6\6\uffff\2\6\53\uffff"+
        "\2\6\117\uffff\2\6\117\uffff\3\6\6\uffff\2\6\53\uffff\2\0\171\uffff"+
        "\2\0\74\uffff\2\0\75\uffff\1\0\75\uffff\1\0\36\uffff\1\0\36\uffff"+
        "\1\0\36\uffff\1\0\36\uffff\2\0\171\uffff\2\0\74\uffff\2\0\75\uffff"+
        "\1\0\75\uffff\1\0\36\uffff\1\0\36\uffff\1\0\36\uffff\1\0\36\uffff"+
        "\2\0\171\uffff\2\0\74\uffff\2\0\75\uffff\1\0\75\uffff";
    static final String DFA317_maxS =
        "\1\u0167\2\u0166\6\uffff\2\u0166\4\uffff\1\u0166\47\uffff\1\u0167"+
        "\2\uffff\1\u0169\72\uffff\1\u0169\1\u0167\76\uffff\1\u0169\73\uffff"+
        "\1\u0169\75\uffff\1\u0167\75\uffff\3\u0166\6\uffff\2\u0166\53\uffff"+
        "\2\u0162\117\uffff\2\u0162\117\uffff\3\u0166\6\uffff\2\u0166\53"+
        "\uffff\2\u0162\117\uffff\2\u0162\117\uffff\3\u0166\6\uffff\2\u0166"+
        "\53\uffff\2\0\171\uffff\2\0\74\uffff\2\0\75\uffff\1\0\75\uffff\1"+
        "\0\36\uffff\1\0\36\uffff\1\0\36\uffff\1\0\36\uffff\2\0\171\uffff"+
        "\2\0\74\uffff\2\0\75\uffff\1\0\75\uffff\1\0\36\uffff\1\0\36\uffff"+
        "\1\0\36\uffff\1\0\36\uffff\2\0\171\uffff\2\0\74\uffff\2\0\75\uffff"+
        "\1\0\75\uffff";
    static final String DFA317_acceptS =
        "\3\uffff\6\1\2\uffff\4\1\1\uffff\43\1\1\2\4\uffff\2\1\1\uffff\72"+
        "\1\2\uffff\76\1\1\uffff\73\1\1\uffff\75\1\1\uffff\75\1\3\uffff\6"+
        "\1\2\uffff\47\1\u00a9\uffff\6\1\2\uffff\47\1\u00a9\uffff\6\1\2\uffff"+
        "\47\1\6\uffff\171\1\2\uffff\74\1\2\uffff\75\1\1\uffff\75\1\176\uffff"+
        "\171\1\2\uffff\74\1\2\uffff\75\1\1\uffff\75\1\176\uffff\171\1\2"+
        "\uffff\74\1\2\uffff\75\1\1\uffff\75\1";
    static final String DFA317_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\4\uffff\1\5\47\uffff\1\6\76\uffff"+
        "\1\7\u00b8\uffff\1\10\75\uffff\1\11\1\12\1\13\6\uffff\1\14\1\15"+
        "\u00cd\uffff\1\16\1\17\1\20\6\uffff\1\21\1\22\u00cd\uffff\1\23\1"+
        "\24\1\25\6\uffff\1\26\1\27\53\uffff\1\30\1\31\171\uffff\1\32\1\33"+
        "\74\uffff\1\34\1\35\75\uffff\1\36\75\uffff\1\37\36\uffff\1\40\36"+
        "\uffff\1\41\36\uffff\1\42\36\uffff\1\43\1\44\171\uffff\1\45\1\46"+
        "\74\uffff\1\47\1\50\75\uffff\1\51\75\uffff\1\52\36\uffff\1\53\36"+
        "\uffff\1\54\36\uffff\1\55\36\uffff\1\56\1\57\171\uffff\1\60\1\61"+
        "\74\uffff\1\62\1\63\75\uffff\1\64\75\uffff}>";
    static final String[] DFA317_transitionS = {
            "\1\47\1\uffff\1\63\2\uffff\1\5\3\uffff\1\6\1\uffff\1\63\1\uffff"+
            "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\4\10\uffff\1\52\1"+
            "\uffff\1\54\1\50\1\51\1\53\12\uffff\1\17\1\20\1\21\11\uffff"+
            "\1\25\1\26\1\27\1\31\1\32\1\33\1\34\1\35\2\uffff\1\36\1\uffff"+
            "\1\37\1\40\1\41\1\42\1\43\2\uffff\1\44\1\63\1\45\1\30\1\3\1"+
            "\46\32\uffff\1\55\1\56\1\57\1\63\1\61\1\22\1\62\1\23\1\24\3"+
            "\uffff\1\60\u00c6\uffff\1\1\41\uffff\1\2",
            "\1\160\1\161\1\162\1\163\1\164\1\116\1\115\1\157\2\uffff\1"+
            "\134\1\135\14\uffff\1\147\1\127\1\130\1\150\1\137\7\uffff\1"+
            "\107\1\uffff\1\117\1\120\1\uffff\1\142\2\uffff\1\121\3\uffff"+
            "\1\131\1\uffff\1\122\1\145\1\146\7\uffff\1\144\41\uffff\1\156"+
            "\1\155\1\154\6\uffff\1\123\2\uffff\1\140\1\141\3\uffff\1\143"+
            "\1\124\u00cc\uffff\1\71\1\152\1\uffff\1\72\1\126\1\151\1\uffff"+
            "\1\132\1\uffff\1\136\1\133\1\67\1\106\1\74\1\uffff\1\102\1\103"+
            "\1\73\1\113\1\77\2\uffff\1\112\1\114\1\110\1\111\1\104\1\105"+
            "\1\101\1\100\1\75\1\76\2\uffff\1\153\1\70",
            "\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2\1\u008c\1\u008b\1"+
            "\u00ad\2\uffff\1\u009a\1\u009b\14\uffff\1\u00a5\1\u0095\1\u0096"+
            "\1\u00a6\1\u009d\7\uffff\1\u0085\1\uffff\1\u008d\1\u008e\1\uffff"+
            "\1\u00a0\2\uffff\1\u008f\3\uffff\1\u0097\1\uffff\1\u0090\1\u00a3"+
            "\1\u00a4\7\uffff\1\u00a2\41\uffff\1\u00ac\1\u00ab\1\u00aa\6"+
            "\uffff\1\u0091\2\uffff\1\u009e\1\u009f\3\uffff\1\u00a1\1\u0092"+
            "\u00cc\uffff\1\170\1\u00a8\1\uffff\1\165\1\u0094\1\u00a7\1\uffff"+
            "\1\u0098\1\uffff\1\u009c\1\u0099\1\166\1\u0084\1\172\1\uffff"+
            "\1\u0080\1\u0081\1\171\1\u0089\1\175\2\uffff\1\u0088\1\u008a"+
            "\1\u0086\1\u0087\1\u0082\1\u0083\1\177\1\176\1\173\1\174\2\uffff"+
            "\1\u00a9\1\167",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ec\1\u00ed\1\u00ee\1\u00ef\1\u00f0\1\u00ca\1\u00c9\1"+
            "\u00eb\2\uffff\1\u00d8\1\u00d9\14\uffff\1\u00e3\1\u00d3\1\u00d4"+
            "\1\u00e4\1\u00db\7\uffff\1\u00c3\1\uffff\1\u00cb\1\u00cc\1\uffff"+
            "\1\u00de\2\uffff\1\u00cd\3\uffff\1\u00d5\1\uffff\1\u00ce\1\u00e1"+
            "\1\u00e2\7\uffff\1\u00e0\41\uffff\1\u00ea\1\u00e9\1\u00e8\6"+
            "\uffff\1\u00cf\2\uffff\1\u00dc\1\u00dd\3\uffff\1\u00df\1\u00d0"+
            "\u00cc\uffff\1\u00b4\1\u00e6\1\uffff\1\u00b5\1\u00d2\1\u00e5"+
            "\1\uffff\1\u00d6\1\uffff\1\u00da\1\u00d7\1\u00b7\1\u00c2\1\u00b8"+
            "\1\uffff\1\u00be\1\u00bf\1\u00b6\1\u00c7\1\u00bb\2\uffff\1\u00c6"+
            "\1\u00c8\1\u00c4\1\u00c5\1\u00c0\1\u00c1\1\u00bd\1\u00bc\1\u00b9"+
            "\1\u00ba\2\uffff\1\u00e7\1\u00b3",
            "\1\u012a\1\u012b\1\u012c\1\u012d\1\u012e\1\u0108\1\u0107\1"+
            "\u0129\2\uffff\1\u0116\1\u0117\14\uffff\1\u0121\1\u0111\1\u0112"+
            "\1\u0122\1\u0119\7\uffff\1\u0101\1\uffff\1\u0109\1\u010a\1\uffff"+
            "\1\u011c\2\uffff\1\u010b\3\uffff\1\u0113\1\uffff\1\u010c\1\u011f"+
            "\1\u0120\7\uffff\1\u011e\41\uffff\1\u0128\1\u0127\1\u0126\6"+
            "\uffff\1\u010d\2\uffff\1\u011a\1\u011b\3\uffff\1\u011d\1\u010e"+
            "\u00cc\uffff\1\u00f3\1\u0124\1\uffff\1\u00f1\1\u0110\1\u0123"+
            "\1\uffff\1\u0114\1\uffff\1\u0118\1\u0115\1\u00f5\1\u0100\1\u00f6"+
            "\1\uffff\1\u00fc\1\u00fd\1\u00f4\1\u0105\1\u00f9\2\uffff\1\u0104"+
            "\1\u0106\1\u0102\1\u0103\1\u00fe\1\u00ff\1\u00fb\1\u00fa\1\u00f7"+
            "\1\u00f8\2\uffff\1\u0125\1\u00f2",
            "",
            "",
            "",
            "",
            "\1\u0168\1\u0169\1\u016a\1\u016b\1\u016c\1\u0146\1\u0145\1"+
            "\u0167\2\uffff\1\u0154\1\u0155\14\uffff\1\u015f\1\u014f\1\u0150"+
            "\1\u0160\1\u0157\7\uffff\1\u013f\1\uffff\1\u0147\1\u0148\1\uffff"+
            "\1\u015a\2\uffff\1\u0149\3\uffff\1\u0151\1\uffff\1\u014a\1\u015d"+
            "\1\u015e\7\uffff\1\u015c\41\uffff\1\u0166\1\u0165\1\u0164\6"+
            "\uffff\1\u014b\2\uffff\1\u0158\1\u0159\3\uffff\1\u015b\1\u014c"+
            "\u00cc\uffff\1\u0131\1\u0162\1\uffff\1\u0132\1\u014e\1\u0161"+
            "\1\uffff\1\u0152\1\uffff\1\u0156\1\u0153\1\u012f\1\u013e\1\u0134"+
            "\1\uffff\1\u013a\1\u013b\1\u0133\1\u0143\1\u0137\2\uffff\1\u0142"+
            "\1\u0144\1\u0140\1\u0141\1\u013c\1\u013d\1\u0139\1\u0138\1\u0135"+
            "\1\u0136\2\uffff\1\u0163\1\u0130",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0193\1\uffff\1\63\2\uffff\1\u0172\3\uffff\1\u0173\1\uffff"+
            "\1\63\1\uffff\1\u0174\1\u0175\1\u0176\1\u0177\1\u0178\1\u0179"+
            "\1\u017a\1\u017b\1\u0171\10\uffff\1\u0196\1\uffff\1\u0198\1"+
            "\u0194\1\u0195\1\u0197\12\uffff\1\u016e\1\u017c\1\u017d\11\uffff"+
            "\1\u0181\1\u0182\1\u0183\1\u0185\1\u0186\1\u0187\1\u0188\1\u0189"+
            "\2\uffff\1\u018a\1\uffff\1\u018b\1\u018c\1\u018d\1\u018e\1\u018f"+
            "\2\uffff\1\u0190\1\63\1\u0191\1\u0184\1\u0170\1\u0192\32\uffff"+
            "\1\u0199\1\u019a\1\u019b\1\63\1\u019d\1\u017e\1\u019e\1\u017f"+
            "\1\u0180\3\uffff\1\u019c\u00c6\uffff\1\u016d\41\uffff\1\u016f",
            "",
            "",
            "\1\63\1\uffff\1\63\2\uffff\1\63\2\uffff\2\63\1\uffff\1\63"+
            "\1\uffff\11\63\1\uffff\1\63\6\uffff\1\63\1\uffff\4\63\5\uffff"+
            "\2\63\3\uffff\3\63\6\uffff\1\63\2\uffff\22\63\1\uffff\6\63\22"+
            "\uffff\3\63\5\uffff\11\63\1\uffff\1\63\1\uffff\1\63\u00b4\uffff"+
            "\1\63\17\uffff\1\63\1\uffff\3\63\1\uffff\1\63\6\uffff\1\63\3"+
            "\uffff\1\63\1\uffff\1\63\1\u01a3\1\u01a4\7\uffff\1\63\2\uffff"+
            "\1\63\3\uffff\3\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\63\1\uffff\1\63\2\uffff\1\63\2\uffff\2\63\1\uffff\1\63"+
            "\1\uffff\11\63\1\uffff\1\63\6\uffff\1\63\1\uffff\4\63\5\uffff"+
            "\2\63\3\uffff\3\63\6\uffff\1\63\2\uffff\22\63\1\uffff\6\63\22"+
            "\uffff\3\63\5\uffff\11\63\1\uffff\1\63\1\uffff\1\63\u00b4\uffff"+
            "\1\63\17\uffff\1\63\1\uffff\3\63\1\uffff\1\63\6\uffff\1\63\3"+
            "\uffff\1\63\1\uffff\1\63\1\u01f4\1\u01f5\7\uffff\1\63\2\uffff"+
            "\1\63\3\uffff\3\63",
            "\1\u026b\1\uffff\1\63\2\uffff\1\u024a\3\uffff\1\u024b\1\uffff"+
            "\1\63\1\uffff\1\u024c\1\u024d\1\u024e\1\u024f\1\u0250\1\u0251"+
            "\1\u0252\1\u0253\1\u0249\10\uffff\1\u026e\1\uffff\1\u0270\1"+
            "\u026c\1\u026d\1\u026f\12\uffff\1\u0246\1\u0254\1\u0255\11\uffff"+
            "\1\u0259\1\u025a\1\u025b\1\u025d\1\u025e\1\u025f\1\u0260\1\u0261"+
            "\2\uffff\1\u0262\1\uffff\1\u0263\1\u0264\1\u0265\1\u0266\1\u0267"+
            "\2\uffff\1\u0268\1\63\1\u0269\1\u025c\1\u0248\1\u026a\32\uffff"+
            "\1\u0271\1\u0272\1\u0273\1\63\1\u0275\1\u0256\1\u0276\1\u0257"+
            "\1\u0258\3\uffff\1\u0274\u00c6\uffff\1\u0245\41\uffff\1\u0247",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\63\1\uffff\1\63\2\uffff\1\63\2\uffff\2\63\1\uffff\1\63"+
            "\1\uffff\11\63\1\uffff\1\63\6\uffff\1\63\1\uffff\4\63\5\uffff"+
            "\2\63\3\uffff\3\63\6\uffff\1\63\2\uffff\22\63\1\uffff\6\63\22"+
            "\uffff\3\63\5\uffff\11\63\1\uffff\1\63\1\uffff\1\63\u00b4\uffff"+
            "\1\63\17\uffff\1\63\1\uffff\3\63\1\uffff\1\63\6\uffff\1\63\3"+
            "\uffff\1\63\1\uffff\1\63\1\u027b\1\u027c\7\uffff\1\63\2\uffff"+
            "\1\63\3\uffff\3\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\63\1\uffff\1\63\2\uffff\1\63\2\uffff\2\63\1\uffff\1\63"+
            "\1\uffff\11\63\1\uffff\1\63\6\uffff\1\63\1\uffff\4\63\5\uffff"+
            "\2\63\3\uffff\3\63\6\uffff\1\63\2\uffff\22\63\1\uffff\6\63\22"+
            "\uffff\3\63\5\uffff\11\63\1\uffff\1\63\1\uffff\1\63\u00b4\uffff"+
            "\1\63\17\uffff\1\63\1\uffff\3\63\1\uffff\1\63\6\uffff\1\63\3"+
            "\uffff\1\63\1\uffff\1\63\1\u02cc\1\u02cd\7\uffff\1\63\2\uffff"+
            "\1\63\3\uffff\3\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0343\1\uffff\1\63\2\uffff\1\u0322\3\uffff\1\u0323\1\uffff"+
            "\1\63\1\uffff\1\u0324\1\u0325\1\u0326\1\u0327\1\u0328\1\u0329"+
            "\1\u032a\1\u032b\1\u0321\10\uffff\1\u0346\1\uffff\1\u0348\1"+
            "\u0344\1\u0345\1\u0347\12\uffff\1\u031e\1\u032c\1\u032d\11\uffff"+
            "\1\u0331\1\u0332\1\u0333\1\u0335\1\u0336\1\u0337\1\u0338\1\u0339"+
            "\2\uffff\1\u033a\1\uffff\1\u033b\1\u033c\1\u033d\1\u033e\1\u033f"+
            "\2\uffff\1\u0340\1\63\1\u0341\1\u0334\1\u0320\1\u0342\32\uffff"+
            "\1\u0349\1\u034a\1\u034b\1\63\1\u034d\1\u032e\1\u034e\1\u032f"+
            "\1\u0330\3\uffff\1\u034c\u00c6\uffff\1\u031d\41\uffff\1\u031f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u038c\1\u038d\1\u038e\1\u038f\1\u0390\1\u036a\1\u0369\1"+
            "\u038b\2\uffff\1\u0378\1\u0379\14\uffff\1\u0383\1\u0373\1\u0374"+
            "\1\u0384\1\u037b\7\uffff\1\u0363\1\uffff\1\u036b\1\u036c\1\uffff"+
            "\1\u037e\2\uffff\1\u036d\3\uffff\1\u0375\1\uffff\1\u036e\1\u0381"+
            "\1\u0382\7\uffff\1\u0380\41\uffff\1\u038a\1\u0389\1\u0388\6"+
            "\uffff\1\u036f\2\uffff\1\u037c\1\u037d\3\uffff\1\u037f\1\u0370"+
            "\u00cc\uffff\1\u0356\1\u0386\1\uffff\1\u0353\1\u0372\1\u0385"+
            "\1\uffff\1\u0376\1\uffff\1\u037a\1\u0377\1\u0354\1\u0362\1\u0358"+
            "\1\uffff\1\u035e\1\u035f\1\u0357\1\u0367\1\u035b\2\uffff\1\u0366"+
            "\1\u0368\1\u0364\1\u0365\1\u0360\1\u0361\1\u035d\1\u035c\1\u0359"+
            "\1\u035a\2\uffff\1\u0387\1\u0355",
            "\1\u03c9\1\u03ca\1\u03cb\1\u03cc\1\u03cd\1\u03a7\1\u03a6\1"+
            "\u03c8\2\uffff\1\u03b5\1\u03b6\14\uffff\1\u03c0\1\u03b0\1\u03b1"+
            "\1\u03c1\1\u03b8\7\uffff\1\u03a0\1\uffff\1\u03a8\1\u03a9\1\uffff"+
            "\1\u03bb\2\uffff\1\u03aa\3\uffff\1\u03b2\1\uffff\1\u03ab\1\u03be"+
            "\1\u03bf\7\uffff\1\u03bd\41\uffff\1\u03c7\1\u03c6\1\u03c5\6"+
            "\uffff\1\u03ac\2\uffff\1\u03b9\1\u03ba\3\uffff\1\u03bc\1\u03ad"+
            "\u00cc\uffff\1\u0392\1\u03c3\1\uffff\1\u0393\1\u03af\1\u03c2"+
            "\1\uffff\1\u03b3\1\uffff\1\u03b7\1\u03b4\1\u03ce\1\u039f\1\u0395"+
            "\1\uffff\1\u039b\1\u039c\1\u0394\1\u03a4\1\u0398\2\uffff\1\u03a3"+
            "\1\u03a5\1\u03a1\1\u03a2\1\u039d\1\u039e\1\u039a\1\u0399\1\u0396"+
            "\1\u0397\2\uffff\1\u03c4\1\u0391",
            "\1\u0407\1\u0408\1\u0409\1\u040a\1\u040b\1\u03e5\1\u03e4\1"+
            "\u0406\2\uffff\1\u03f3\1\u03f4\14\uffff\1\u03fe\1\u03ee\1\u03ef"+
            "\1\u03ff\1\u03f6\7\uffff\1\u03de\1\uffff\1\u03e6\1\u03e7\1\uffff"+
            "\1\u03f9\2\uffff\1\u03e8\3\uffff\1\u03f0\1\uffff\1\u03e9\1\u03fc"+
            "\1\u03fd\7\uffff\1\u03fb\41\uffff\1\u0405\1\u0404\1\u0403\6"+
            "\uffff\1\u03ea\2\uffff\1\u03f7\1\u03f8\3\uffff\1\u03fa\1\u03eb"+
            "\u00cc\uffff\1\u03d1\1\u0401\1\uffff\1\u03cf\1\u03ed\1\u0400"+
            "\1\uffff\1\u03f1\1\uffff\1\u03f5\1\u03f2\1\u040c\1\u03dd\1\u03d3"+
            "\1\uffff\1\u03d9\1\u03da\1\u03d2\1\u03e2\1\u03d6\2\uffff\1\u03e1"+
            "\1\u03e3\1\u03df\1\u03e0\1\u03db\1\u03dc\1\u03d8\1\u03d7\1\u03d4"+
            "\1\u03d5\2\uffff\1\u0402\1\u03d0",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0445\1\u0446\1\u0447\1\u0448\1\u0449\1\u0423\1\u0422\1"+
            "\u0444\2\uffff\1\u0431\1\u0432\14\uffff\1\u043c\1\u042c\1\u042d"+
            "\1\u043d\1\u0434\7\uffff\1\u041c\1\uffff\1\u0424\1\u0425\1\uffff"+
            "\1\u0437\2\uffff\1\u0426\3\uffff\1\u042e\1\uffff\1\u0427\1\u043a"+
            "\1\u043b\7\uffff\1\u0439\41\uffff\1\u0443\1\u0442\1\u0441\6"+
            "\uffff\1\u0428\2\uffff\1\u0435\1\u0436\3\uffff\1\u0438\1\u0429"+
            "\u00cc\uffff\1\u040f\1\u043f\1\uffff\1\u040d\1\u042b\1\u043e"+
            "\1\uffff\1\u042f\1\uffff\1\u0433\1\u0430\1\u044a\1\u041b\1\u0411"+
            "\1\uffff\1\u0417\1\u0418\1\u0410\1\u0420\1\u0414\2\uffff\1\u041f"+
            "\1\u0421\1\u041d\1\u041e\1\u0419\1\u041a\1\u0416\1\u0415\1\u0412"+
            "\1\u0413\2\uffff\1\u0440\1\u040e",
            "\1\u0483\1\u0484\1\u0485\1\u0486\1\u0487\1\u0461\1\u0460\1"+
            "\u0482\2\uffff\1\u046f\1\u0470\14\uffff\1\u047a\1\u046a\1\u046b"+
            "\1\u047b\1\u0472\7\uffff\1\u045a\1\uffff\1\u0462\1\u0463\1\uffff"+
            "\1\u0475\2\uffff\1\u0464\3\uffff\1\u046c\1\uffff\1\u0465\1\u0478"+
            "\1\u0479\7\uffff\1\u0477\41\uffff\1\u0481\1\u0480\1\u047f\6"+
            "\uffff\1\u0466\2\uffff\1\u0473\1\u0474\3\uffff\1\u0476\1\u0467"+
            "\u00cc\uffff\1\u044d\1\u047d\1\uffff\1\u044b\1\u0469\1\u047c"+
            "\1\uffff\1\u046d\1\uffff\1\u0471\1\u046e\1\u0488\1\u0459\1\u044f"+
            "\1\uffff\1\u0455\1\u0456\1\u044e\1\u045e\1\u0452\2\uffff\1\u045d"+
            "\1\u045f\1\u045b\1\u045c\1\u0457\1\u0458\1\u0454\1\u0453\1\u0450"+
            "\1\u0451\2\uffff\1\u047e\1\u044c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0489\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u04a8\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u04c7\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u04e6\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u053e\1\u053f\1\u0540\1\u0541\1\u0542\1\u051c\1\u051b\1"+
            "\u053d\2\uffff\1\u052a\1\u052b\14\uffff\1\u0535\1\u0525\1\u0526"+
            "\1\u0536\1\u052d\7\uffff\1\u0515\1\uffff\1\u051d\1\u051e\1\uffff"+
            "\1\u0530\2\uffff\1\u051f\3\uffff\1\u0527\1\uffff\1\u0520\1\u0533"+
            "\1\u0534\7\uffff\1\u0532\41\uffff\1\u053c\1\u053b\1\u053a\6"+
            "\uffff\1\u0521\2\uffff\1\u052e\1\u052f\3\uffff\1\u0531\1\u0522"+
            "\u00cc\uffff\1\u0508\1\u0538\1\uffff\1\u0505\1\u0524\1\u0537"+
            "\1\uffff\1\u0528\1\uffff\1\u052c\1\u0529\1\u0506\1\u0514\1\u050a"+
            "\1\uffff\1\u0510\1\u0511\1\u0509\1\u0519\1\u050d\2\uffff\1\u0518"+
            "\1\u051a\1\u0516\1\u0517\1\u0512\1\u0513\1\u050f\1\u050e\1\u050b"+
            "\1\u050c\2\uffff\1\u0539\1\u0507",
            "\1\u057b\1\u057c\1\u057d\1\u057e\1\u057f\1\u0559\1\u0558\1"+
            "\u057a\2\uffff\1\u0567\1\u0568\14\uffff\1\u0572\1\u0562\1\u0563"+
            "\1\u0573\1\u056a\7\uffff\1\u0552\1\uffff\1\u055a\1\u055b\1\uffff"+
            "\1\u056d\2\uffff\1\u055c\3\uffff\1\u0564\1\uffff\1\u055d\1\u0570"+
            "\1\u0571\7\uffff\1\u056f\41\uffff\1\u0579\1\u0578\1\u0577\6"+
            "\uffff\1\u055e\2\uffff\1\u056b\1\u056c\3\uffff\1\u056e\1\u055f"+
            "\u00cc\uffff\1\u0544\1\u0575\1\uffff\1\u0545\1\u0561\1\u0574"+
            "\1\uffff\1\u0565\1\uffff\1\u0569\1\u0566\1\u0580\1\u0551\1\u0547"+
            "\1\uffff\1\u054d\1\u054e\1\u0546\1\u0556\1\u054a\2\uffff\1\u0555"+
            "\1\u0557\1\u0553\1\u0554\1\u054f\1\u0550\1\u054c\1\u054b\1\u0548"+
            "\1\u0549\2\uffff\1\u0576\1\u0543",
            "\1\u05b9\1\u05ba\1\u05bb\1\u05bc\1\u05bd\1\u0597\1\u0596\1"+
            "\u05b8\2\uffff\1\u05a5\1\u05a6\14\uffff\1\u05b0\1\u05a0\1\u05a1"+
            "\1\u05b1\1\u05a8\7\uffff\1\u0590\1\uffff\1\u0598\1\u0599\1\uffff"+
            "\1\u05ab\2\uffff\1\u059a\3\uffff\1\u05a2\1\uffff\1\u059b\1\u05ae"+
            "\1\u05af\7\uffff\1\u05ad\41\uffff\1\u05b7\1\u05b6\1\u05b5\6"+
            "\uffff\1\u059c\2\uffff\1\u05a9\1\u05aa\3\uffff\1\u05ac\1\u059d"+
            "\u00cc\uffff\1\u0583\1\u05b3\1\uffff\1\u0581\1\u059f\1\u05b2"+
            "\1\uffff\1\u05a3\1\uffff\1\u05a7\1\u05a4\1\u05be\1\u058f\1\u0585"+
            "\1\uffff\1\u058b\1\u058c\1\u0584\1\u0594\1\u0588\2\uffff\1\u0593"+
            "\1\u0595\1\u0591\1\u0592\1\u058d\1\u058e\1\u058a\1\u0589\1\u0586"+
            "\1\u0587\2\uffff\1\u05b4\1\u0582",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05f7\1\u05f8\1\u05f9\1\u05fa\1\u05fb\1\u05d5\1\u05d4\1"+
            "\u05f6\2\uffff\1\u05e3\1\u05e4\14\uffff\1\u05ee\1\u05de\1\u05df"+
            "\1\u05ef\1\u05e6\7\uffff\1\u05ce\1\uffff\1\u05d6\1\u05d7\1\uffff"+
            "\1\u05e9\2\uffff\1\u05d8\3\uffff\1\u05e0\1\uffff\1\u05d9\1\u05ec"+
            "\1\u05ed\7\uffff\1\u05eb\41\uffff\1\u05f5\1\u05f4\1\u05f3\6"+
            "\uffff\1\u05da\2\uffff\1\u05e7\1\u05e8\3\uffff\1\u05ea\1\u05db"+
            "\u00cc\uffff\1\u05c1\1\u05f1\1\uffff\1\u05bf\1\u05dd\1\u05f0"+
            "\1\uffff\1\u05e1\1\uffff\1\u05e5\1\u05e2\1\u05fc\1\u05cd\1\u05c3"+
            "\1\uffff\1\u05c9\1\u05ca\1\u05c2\1\u05d2\1\u05c6\2\uffff\1\u05d1"+
            "\1\u05d3\1\u05cf\1\u05d0\1\u05cb\1\u05cc\1\u05c8\1\u05c7\1\u05c4"+
            "\1\u05c5\2\uffff\1\u05f2\1\u05c0",
            "\1\u0635\1\u0636\1\u0637\1\u0638\1\u0639\1\u0613\1\u0612\1"+
            "\u0634\2\uffff\1\u0621\1\u0622\14\uffff\1\u062c\1\u061c\1\u061d"+
            "\1\u062d\1\u0624\7\uffff\1\u060c\1\uffff\1\u0614\1\u0615\1\uffff"+
            "\1\u0627\2\uffff\1\u0616\3\uffff\1\u061e\1\uffff\1\u0617\1\u062a"+
            "\1\u062b\7\uffff\1\u0629\41\uffff\1\u0633\1\u0632\1\u0631\6"+
            "\uffff\1\u0618\2\uffff\1\u0625\1\u0626\3\uffff\1\u0628\1\u0619"+
            "\u00cc\uffff\1\u05ff\1\u062f\1\uffff\1\u05fd\1\u061b\1\u062e"+
            "\1\uffff\1\u061f\1\uffff\1\u0623\1\u0620\1\u063a\1\u060b\1\u0601"+
            "\1\uffff\1\u0607\1\u0608\1\u0600\1\u0610\1\u0604\2\uffff\1\u060f"+
            "\1\u0611\1\u060d\1\u060e\1\u0609\1\u060a\1\u0606\1\u0605\1\u0602"+
            "\1\u0603\2\uffff\1\u0630\1\u05fe",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u063b\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u065a\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0679\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0698\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06f0\1\u06f1\1\u06f2\1\u06f3\1\u06f4\1\u06ce\1\u06cd\1"+
            "\u06ef\2\uffff\1\u06dc\1\u06dd\14\uffff\1\u06e7\1\u06d7\1\u06d8"+
            "\1\u06e8\1\u06df\7\uffff\1\u06c7\1\uffff\1\u06cf\1\u06d0\1\uffff"+
            "\1\u06e2\2\uffff\1\u06d1\3\uffff\1\u06d9\1\uffff\1\u06d2\1\u06e5"+
            "\1\u06e6\7\uffff\1\u06e4\41\uffff\1\u06ee\1\u06ed\1\u06ec\6"+
            "\uffff\1\u06d3\2\uffff\1\u06e0\1\u06e1\3\uffff\1\u06e3\1\u06d4"+
            "\u00cc\uffff\1\u06ba\1\u06ea\1\uffff\1\u06b7\1\u06d6\1\u06e9"+
            "\1\uffff\1\u06da\1\uffff\1\u06de\1\u06db\1\u06b8\1\u06c6\1\u06bc"+
            "\1\uffff\1\u06c2\1\u06c3\1\u06bb\1\u06cb\1\u06bf\2\uffff\1\u06ca"+
            "\1\u06cc\1\u06c8\1\u06c9\1\u06c4\1\u06c5\1\u06c1\1\u06c0\1\u06bd"+
            "\1\u06be\2\uffff\1\u06eb\1\u06b9",
            "\1\u072d\1\u072e\1\u072f\1\u0730\1\u0731\1\u070b\1\u070a\1"+
            "\u072c\2\uffff\1\u0719\1\u071a\14\uffff\1\u0724\1\u0714\1\u0715"+
            "\1\u0725\1\u071c\7\uffff\1\u0704\1\uffff\1\u070c\1\u070d\1\uffff"+
            "\1\u071f\2\uffff\1\u070e\3\uffff\1\u0716\1\uffff\1\u070f\1\u0722"+
            "\1\u0723\7\uffff\1\u0721\41\uffff\1\u072b\1\u072a\1\u0729\6"+
            "\uffff\1\u0710\2\uffff\1\u071d\1\u071e\3\uffff\1\u0720\1\u0711"+
            "\u00cc\uffff\1\u06f6\1\u0727\1\uffff\1\u06f7\1\u0713\1\u0726"+
            "\1\uffff\1\u0717\1\uffff\1\u071b\1\u0718\1\u0732\1\u0703\1\u06f9"+
            "\1\uffff\1\u06ff\1\u0700\1\u06f8\1\u0708\1\u06fc\2\uffff\1\u0707"+
            "\1\u0709\1\u0705\1\u0706\1\u0701\1\u0702\1\u06fe\1\u06fd\1\u06fa"+
            "\1\u06fb\2\uffff\1\u0728\1\u06f5",
            "\1\u076b\1\u076c\1\u076d\1\u076e\1\u076f\1\u0749\1\u0748\1"+
            "\u076a\2\uffff\1\u0757\1\u0758\14\uffff\1\u0762\1\u0752\1\u0753"+
            "\1\u0763\1\u075a\7\uffff\1\u0742\1\uffff\1\u074a\1\u074b\1\uffff"+
            "\1\u075d\2\uffff\1\u074c\3\uffff\1\u0754\1\uffff\1\u074d\1\u0760"+
            "\1\u0761\7\uffff\1\u075f\41\uffff\1\u0769\1\u0768\1\u0767\6"+
            "\uffff\1\u074e\2\uffff\1\u075b\1\u075c\3\uffff\1\u075e\1\u074f"+
            "\u00cc\uffff\1\u0735\1\u0765\1\uffff\1\u0733\1\u0751\1\u0764"+
            "\1\uffff\1\u0755\1\uffff\1\u0759\1\u0756\1\u0770\1\u0741\1\u0737"+
            "\1\uffff\1\u073d\1\u073e\1\u0736\1\u0746\1\u073a\2\uffff\1\u0745"+
            "\1\u0747\1\u0743\1\u0744\1\u073f\1\u0740\1\u073c\1\u073b\1\u0738"+
            "\1\u0739\2\uffff\1\u0766\1\u0734",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07a9\1\u07aa\1\u07ab\1\u07ac\1\u07ad\1\u0787\1\u0786\1"+
            "\u07a8\2\uffff\1\u0795\1\u0796\14\uffff\1\u07a0\1\u0790\1\u0791"+
            "\1\u07a1\1\u0798\7\uffff\1\u0780\1\uffff\1\u0788\1\u0789\1\uffff"+
            "\1\u079b\2\uffff\1\u078a\3\uffff\1\u0792\1\uffff\1\u078b\1\u079e"+
            "\1\u079f\7\uffff\1\u079d\41\uffff\1\u07a7\1\u07a6\1\u07a5\6"+
            "\uffff\1\u078c\2\uffff\1\u0799\1\u079a\3\uffff\1\u079c\1\u078d"+
            "\u00cc\uffff\1\u0773\1\u07a3\1\uffff\1\u0771\1\u078f\1\u07a2"+
            "\1\uffff\1\u0793\1\uffff\1\u0797\1\u0794\1\u07ae\1\u077f\1\u0775"+
            "\1\uffff\1\u077b\1\u077c\1\u0774\1\u0784\1\u0778\2\uffff\1\u0783"+
            "\1\u0785\1\u0781\1\u0782\1\u077d\1\u077e\1\u077a\1\u0779\1\u0776"+
            "\1\u0777\2\uffff\1\u07a4\1\u0772",
            "\1\u07e7\1\u07e8\1\u07e9\1\u07ea\1\u07eb\1\u07c5\1\u07c4\1"+
            "\u07e6\2\uffff\1\u07d3\1\u07d4\14\uffff\1\u07de\1\u07ce\1\u07cf"+
            "\1\u07df\1\u07d6\7\uffff\1\u07be\1\uffff\1\u07c6\1\u07c7\1\uffff"+
            "\1\u07d9\2\uffff\1\u07c8\3\uffff\1\u07d0\1\uffff\1\u07c9\1\u07dc"+
            "\1\u07dd\7\uffff\1\u07db\41\uffff\1\u07e5\1\u07e4\1\u07e3\6"+
            "\uffff\1\u07ca\2\uffff\1\u07d7\1\u07d8\3\uffff\1\u07da\1\u07cb"+
            "\u00cc\uffff\1\u07b1\1\u07e1\1\uffff\1\u07af\1\u07cd\1\u07e0"+
            "\1\uffff\1\u07d1\1\uffff\1\u07d5\1\u07d2\1\u07ec\1\u07bd\1\u07b3"+
            "\1\uffff\1\u07b9\1\u07ba\1\u07b2\1\u07c2\1\u07b6\2\uffff\1\u07c1"+
            "\1\u07c3\1\u07bf\1\u07c0\1\u07bb\1\u07bc\1\u07b8\1\u07b7\1\u07b4"+
            "\1\u07b5\2\uffff\1\u07e2\1\u07b0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA317_eot = DFA.unpackEncodedString(DFA317_eotS);
    static final short[] DFA317_eof = DFA.unpackEncodedString(DFA317_eofS);
    static final char[] DFA317_min = DFA.unpackEncodedStringToUnsignedChars(DFA317_minS);
    static final char[] DFA317_max = DFA.unpackEncodedStringToUnsignedChars(DFA317_maxS);
    static final short[] DFA317_accept = DFA.unpackEncodedString(DFA317_acceptS);
    static final short[] DFA317_special = DFA.unpackEncodedString(DFA317_specialS);
    static final short[][] DFA317_transition;
    static {
        int numStates = DFA317_transitionS.length;
        DFA317_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA317_transition[i] = DFA.unpackEncodedString(DFA317_transitionS[i]);
        }
    }
    class DFA317 extends DFA {
        public DFA317(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 317;
            this.eot = DFA317_eot;
            this.eof = DFA317_eof;
            this.min = DFA317_min;
            this.max = DFA317_max;
            this.accept = DFA317_accept;
            this.special = DFA317_special;
            this.transition = DFA317_transition;
        }
        public String getDescription() {
            return "1689:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA317_0 = input.LA(1);
                        int index317_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_0==IDENT) ) {s = 1;}
                        else if ( (LA317_0==TICKED_STRING_LITERAL) ) {s = 2;}
                        else if ( (LA317_0==AT) && (synpred5_EsperEPL2Grammar())) {s = 3;}
                        else if ( (LA317_0==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 4;}
                        else if ( (LA317_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 5;}
                        else if ( (LA317_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 6;}
                        else if ( (LA317_0==SUM) && (synpred5_EsperEPL2Grammar())) {s = 7;}
                        else if ( (LA317_0==AVG) && (synpred5_EsperEPL2Grammar())) {s = 8;}
                        else if ( (LA317_0==MAX) ) {s = 9;}
                        else if ( (LA317_0==MIN) ) {s = 10;}
                        else if ( (LA317_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 11;}
                        else if ( (LA317_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 12;}
                        else if ( (LA317_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 13;}
                        else if ( (LA317_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 14;}
                        else if ( (LA317_0==EVENTS) ) {s = 15;}
                        else if ( (LA317_0==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 16;}
                        else if ( (LA317_0==LAST) && (synpred5_EsperEPL2Grammar())) {s = 17;}
                        else if ( (LA317_0==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 18;}
                        else if ( (LA317_0==MERGE) && (synpred5_EsperEPL2Grammar())) {s = 19;}
                        else if ( (LA317_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {s = 20;}
                        else if ( (LA317_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 21;}
                        else if ( (LA317_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 22;}
                        else if ( (LA317_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 23;}
                        else if ( (LA317_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 24;}
                        else if ( (LA317_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 25;}
                        else if ( (LA317_0==SQL) && (synpred5_EsperEPL2Grammar())) {s = 26;}
                        else if ( (LA317_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 27;}
                        else if ( (LA317_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 28;}
                        else if ( (LA317_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {s = 29;}
                        else if ( (LA317_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 30;}
                        else if ( (LA317_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 31;}
                        else if ( (LA317_0==LW) && (synpred5_EsperEPL2Grammar())) {s = 32;}
                        else if ( (LA317_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 33;}
                        else if ( (LA317_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {s = 34;}
                        else if ( (LA317_0==CAST) && (synpred5_EsperEPL2Grammar())) {s = 35;}
                        else if ( (LA317_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 36;}
                        else if ( (LA317_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 37;}
                        else if ( (LA317_0==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 38;}
                        else if ( (LA317_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 39;}
                        else if ( (LA317_0==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 40;}
                        else if ( (LA317_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 41;}
                        else if ( (LA317_0==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 42;}
                        else if ( (LA317_0==FULL) && (synpred5_EsperEPL2Grammar())) {s = 43;}
                        else if ( (LA317_0==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 44;}
                        else if ( (LA317_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 45;}
                        else if ( (LA317_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 46;}
                        else if ( (LA317_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 47;}
                        else if ( (LA317_0==CONTEXT) && (synpred5_EsperEPL2Grammar())) {s = 48;}
                        else if ( (LA317_0==FOR) && (synpred5_EsperEPL2Grammar())) {s = 49;}
                        else if ( (LA317_0==USING) && (synpred5_EsperEPL2Grammar())) {s = 50;}
                        else if ( (LA317_0==BETWEEN||LA317_0==WHERE||LA317_0==SET||LA317_0==AFTER) ) {s = 51;}
                        input.seek(index317_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA317_1 = input.LA(1);
                        int index317_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_1==DOT) ) {s = 55;}
                        else if ( (LA317_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 56;}
                        else if ( (LA317_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 57;}
                        else if ( (LA317_1==LPAREN) ) {s = 58;}
                        else if ( (LA317_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 59;}
                        else if ( (LA317_1==STAR) && (synpred5_EsperEPL2Grammar())) {s = 60;}
                        else if ( (LA317_1==DIV) && (synpred5_EsperEPL2Grammar())) {s = 61;}
                        else if ( (LA317_1==MOD) && (synpred5_EsperEPL2Grammar())) {s = 62;}
                        else if ( (LA317_1==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 63;}
                        else if ( (LA317_1==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 64;}
                        else if ( (LA317_1==LOR) && (synpred5_EsperEPL2Grammar())) {s = 65;}
                        else if ( (LA317_1==LT) && (synpred5_EsperEPL2Grammar())) {s = 66;}
                        else if ( (LA317_1==GT) && (synpred5_EsperEPL2Grammar())) {s = 67;}
                        else if ( (LA317_1==LE) && (synpred5_EsperEPL2Grammar())) {s = 68;}
                        else if ( (LA317_1==GE) && (synpred5_EsperEPL2Grammar())) {s = 69;}
                        else if ( (LA317_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 70;}
                        else if ( (LA317_1==IS) && (synpred5_EsperEPL2Grammar())) {s = 71;}
                        else if ( (LA317_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 72;}
                        else if ( (LA317_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 73;}
                        else if ( (LA317_1==BAND) && (synpred5_EsperEPL2Grammar())) {s = 74;}
                        else if ( (LA317_1==BOR) && (synpred5_EsperEPL2Grammar())) {s = 75;}
                        else if ( (LA317_1==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 76;}
                        else if ( (LA317_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 77;}
                        else if ( (LA317_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 78;}
                        else if ( (LA317_1==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 79;}
                        else if ( (LA317_1==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 80;}
                        else if ( (LA317_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 81;}
                        else if ( (LA317_1==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 82;}
                        else if ( (LA317_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 83;}
                        else if ( (LA317_1==FOR) && (synpred5_EsperEPL2Grammar())) {s = 84;}
                        else if ( (LA317_1==EOF) && (synpred5_EsperEPL2Grammar())) {s = 85;}
                        else if ( (LA317_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 86;}
                        else if ( (LA317_1==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 87;}
                        else if ( (LA317_1==THEN) && (synpred5_EsperEPL2Grammar())) {s = 88;}
                        else if ( (LA317_1==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 89;}
                        else if ( (LA317_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 90;}
                        else if ( (LA317_1==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 91;}
                        else if ( (LA317_1==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 92;}
                        else if ( (LA317_1==AS) && (synpred5_EsperEPL2Grammar())) {s = 93;}
                        else if ( (LA317_1==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 94;}
                        else if ( (LA317_1==FROM) && (synpred5_EsperEPL2Grammar())) {s = 95;}
                        else if ( (LA317_1==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 96;}
                        else if ( (LA317_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 97;}
                        else if ( (LA317_1==ALL) && (synpred5_EsperEPL2Grammar())) {s = 98;}
                        else if ( (LA317_1==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 99;}
                        else if ( (LA317_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 100;}
                        else if ( (LA317_1==ASC) && (synpred5_EsperEPL2Grammar())) {s = 101;}
                        else if ( (LA317_1==DESC) && (synpred5_EsperEPL2Grammar())) {s = 102;}
                        else if ( (LA317_1==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 103;}
                        else if ( (LA317_1==END) && (synpred5_EsperEPL2Grammar())) {s = 104;}
                        else if ( (LA317_1==COLON) && (synpred5_EsperEPL2Grammar())) {s = 105;}
                        else if ( (LA317_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 106;}
                        else if ( (LA317_1==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 107;}
                        else if ( (LA317_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 108;}
                        else if ( (LA317_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 109;}
                        else if ( (LA317_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 110;}
                        else if ( (LA317_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 111;}
                        else if ( (LA317_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 112;}
                        else if ( (LA317_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 113;}
                        else if ( (LA317_1==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 114;}
                        else if ( (LA317_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 115;}
                        else if ( (LA317_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 116;}
                        input.seek(index317_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA317_2 = input.LA(1);
                        int index317_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_2==LPAREN) ) {s = 117;}
                        else if ( (LA317_2==DOT) ) {s = 118;}
                        else if ( (LA317_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 119;}
                        else if ( (LA317_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 120;}
                        else if ( (LA317_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 121;}
                        else if ( (LA317_2==STAR) && (synpred5_EsperEPL2Grammar())) {s = 122;}
                        else if ( (LA317_2==DIV) && (synpred5_EsperEPL2Grammar())) {s = 123;}
                        else if ( (LA317_2==MOD) && (synpred5_EsperEPL2Grammar())) {s = 124;}
                        else if ( (LA317_2==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 125;}
                        else if ( (LA317_2==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 126;}
                        else if ( (LA317_2==LOR) && (synpred5_EsperEPL2Grammar())) {s = 127;}
                        else if ( (LA317_2==LT) && (synpred5_EsperEPL2Grammar())) {s = 128;}
                        else if ( (LA317_2==GT) && (synpred5_EsperEPL2Grammar())) {s = 129;}
                        else if ( (LA317_2==LE) && (synpred5_EsperEPL2Grammar())) {s = 130;}
                        else if ( (LA317_2==GE) && (synpred5_EsperEPL2Grammar())) {s = 131;}
                        else if ( (LA317_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 132;}
                        else if ( (LA317_2==IS) && (synpred5_EsperEPL2Grammar())) {s = 133;}
                        else if ( (LA317_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 134;}
                        else if ( (LA317_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 135;}
                        else if ( (LA317_2==BAND) && (synpred5_EsperEPL2Grammar())) {s = 136;}
                        else if ( (LA317_2==BOR) && (synpred5_EsperEPL2Grammar())) {s = 137;}
                        else if ( (LA317_2==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 138;}
                        else if ( (LA317_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 139;}
                        else if ( (LA317_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 140;}
                        else if ( (LA317_2==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 141;}
                        else if ( (LA317_2==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 142;}
                        else if ( (LA317_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 143;}
                        else if ( (LA317_2==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 144;}
                        else if ( (LA317_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 145;}
                        else if ( (LA317_2==FOR) && (synpred5_EsperEPL2Grammar())) {s = 146;}
                        else if ( (LA317_2==EOF) && (synpred5_EsperEPL2Grammar())) {s = 147;}
                        else if ( (LA317_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 148;}
                        else if ( (LA317_2==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 149;}
                        else if ( (LA317_2==THEN) && (synpred5_EsperEPL2Grammar())) {s = 150;}
                        else if ( (LA317_2==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 151;}
                        else if ( (LA317_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 152;}
                        else if ( (LA317_2==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 153;}
                        else if ( (LA317_2==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 154;}
                        else if ( (LA317_2==AS) && (synpred5_EsperEPL2Grammar())) {s = 155;}
                        else if ( (LA317_2==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 156;}
                        else if ( (LA317_2==FROM) && (synpred5_EsperEPL2Grammar())) {s = 157;}
                        else if ( (LA317_2==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 158;}
                        else if ( (LA317_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 159;}
                        else if ( (LA317_2==ALL) && (synpred5_EsperEPL2Grammar())) {s = 160;}
                        else if ( (LA317_2==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 161;}
                        else if ( (LA317_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 162;}
                        else if ( (LA317_2==ASC) && (synpred5_EsperEPL2Grammar())) {s = 163;}
                        else if ( (LA317_2==DESC) && (synpred5_EsperEPL2Grammar())) {s = 164;}
                        else if ( (LA317_2==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 165;}
                        else if ( (LA317_2==END) && (synpred5_EsperEPL2Grammar())) {s = 166;}
                        else if ( (LA317_2==COLON) && (synpred5_EsperEPL2Grammar())) {s = 167;}
                        else if ( (LA317_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 168;}
                        else if ( (LA317_2==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 169;}
                        else if ( (LA317_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 170;}
                        else if ( (LA317_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 171;}
                        else if ( (LA317_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 172;}
                        else if ( (LA317_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 173;}
                        else if ( (LA317_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 174;}
                        else if ( (LA317_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 175;}
                        else if ( (LA317_2==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 176;}
                        else if ( (LA317_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 177;}
                        else if ( (LA317_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 178;}
                        input.seek(index317_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA317_9 = input.LA(1);
                        int index317_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 179;}
                        else if ( (LA317_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 180;}
                        else if ( (LA317_9==LPAREN) ) {s = 181;}
                        else if ( (LA317_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 182;}
                        else if ( (LA317_9==DOT) && (synpred5_EsperEPL2Grammar())) {s = 183;}
                        else if ( (LA317_9==STAR) && (synpred5_EsperEPL2Grammar())) {s = 184;}
                        else if ( (LA317_9==DIV) && (synpred5_EsperEPL2Grammar())) {s = 185;}
                        else if ( (LA317_9==MOD) && (synpred5_EsperEPL2Grammar())) {s = 186;}
                        else if ( (LA317_9==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 187;}
                        else if ( (LA317_9==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 188;}
                        else if ( (LA317_9==LOR) && (synpred5_EsperEPL2Grammar())) {s = 189;}
                        else if ( (LA317_9==LT) && (synpred5_EsperEPL2Grammar())) {s = 190;}
                        else if ( (LA317_9==GT) && (synpred5_EsperEPL2Grammar())) {s = 191;}
                        else if ( (LA317_9==LE) && (synpred5_EsperEPL2Grammar())) {s = 192;}
                        else if ( (LA317_9==GE) && (synpred5_EsperEPL2Grammar())) {s = 193;}
                        else if ( (LA317_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 194;}
                        else if ( (LA317_9==IS) && (synpred5_EsperEPL2Grammar())) {s = 195;}
                        else if ( (LA317_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 196;}
                        else if ( (LA317_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 197;}
                        else if ( (LA317_9==BAND) && (synpred5_EsperEPL2Grammar())) {s = 198;}
                        else if ( (LA317_9==BOR) && (synpred5_EsperEPL2Grammar())) {s = 199;}
                        else if ( (LA317_9==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 200;}
                        else if ( (LA317_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 201;}
                        else if ( (LA317_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 202;}
                        else if ( (LA317_9==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 203;}
                        else if ( (LA317_9==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 204;}
                        else if ( (LA317_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 205;}
                        else if ( (LA317_9==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 206;}
                        else if ( (LA317_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 207;}
                        else if ( (LA317_9==FOR) && (synpred5_EsperEPL2Grammar())) {s = 208;}
                        else if ( (LA317_9==EOF) && (synpred5_EsperEPL2Grammar())) {s = 209;}
                        else if ( (LA317_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 210;}
                        else if ( (LA317_9==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 211;}
                        else if ( (LA317_9==THEN) && (synpred5_EsperEPL2Grammar())) {s = 212;}
                        else if ( (LA317_9==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 213;}
                        else if ( (LA317_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 214;}
                        else if ( (LA317_9==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 215;}
                        else if ( (LA317_9==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 216;}
                        else if ( (LA317_9==AS) && (synpred5_EsperEPL2Grammar())) {s = 217;}
                        else if ( (LA317_9==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 218;}
                        else if ( (LA317_9==FROM) && (synpred5_EsperEPL2Grammar())) {s = 219;}
                        else if ( (LA317_9==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 220;}
                        else if ( (LA317_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 221;}
                        else if ( (LA317_9==ALL) && (synpred5_EsperEPL2Grammar())) {s = 222;}
                        else if ( (LA317_9==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 223;}
                        else if ( (LA317_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 224;}
                        else if ( (LA317_9==ASC) && (synpred5_EsperEPL2Grammar())) {s = 225;}
                        else if ( (LA317_9==DESC) && (synpred5_EsperEPL2Grammar())) {s = 226;}
                        else if ( (LA317_9==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 227;}
                        else if ( (LA317_9==END) && (synpred5_EsperEPL2Grammar())) {s = 228;}
                        else if ( (LA317_9==COLON) && (synpred5_EsperEPL2Grammar())) {s = 229;}
                        else if ( (LA317_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 230;}
                        else if ( (LA317_9==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 231;}
                        else if ( (LA317_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 232;}
                        else if ( (LA317_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 233;}
                        else if ( (LA317_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 234;}
                        else if ( (LA317_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 235;}
                        else if ( (LA317_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 236;}
                        else if ( (LA317_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 237;}
                        else if ( (LA317_9==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 238;}
                        else if ( (LA317_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 239;}
                        else if ( (LA317_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 240;}
                        input.seek(index317_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA317_10 = input.LA(1);
                        int index317_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_10==LPAREN) ) {s = 241;}
                        else if ( (LA317_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 242;}
                        else if ( (LA317_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 243;}
                        else if ( (LA317_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 244;}
                        else if ( (LA317_10==DOT) && (synpred5_EsperEPL2Grammar())) {s = 245;}
                        else if ( (LA317_10==STAR) && (synpred5_EsperEPL2Grammar())) {s = 246;}
                        else if ( (LA317_10==DIV) && (synpred5_EsperEPL2Grammar())) {s = 247;}
                        else if ( (LA317_10==MOD) && (synpred5_EsperEPL2Grammar())) {s = 248;}
                        else if ( (LA317_10==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 249;}
                        else if ( (LA317_10==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 250;}
                        else if ( (LA317_10==LOR) && (synpred5_EsperEPL2Grammar())) {s = 251;}
                        else if ( (LA317_10==LT) && (synpred5_EsperEPL2Grammar())) {s = 252;}
                        else if ( (LA317_10==GT) && (synpred5_EsperEPL2Grammar())) {s = 253;}
                        else if ( (LA317_10==LE) && (synpred5_EsperEPL2Grammar())) {s = 254;}
                        else if ( (LA317_10==GE) && (synpred5_EsperEPL2Grammar())) {s = 255;}
                        else if ( (LA317_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 256;}
                        else if ( (LA317_10==IS) && (synpred5_EsperEPL2Grammar())) {s = 257;}
                        else if ( (LA317_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 258;}
                        else if ( (LA317_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 259;}
                        else if ( (LA317_10==BAND) && (synpred5_EsperEPL2Grammar())) {s = 260;}
                        else if ( (LA317_10==BOR) && (synpred5_EsperEPL2Grammar())) {s = 261;}
                        else if ( (LA317_10==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 262;}
                        else if ( (LA317_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 263;}
                        else if ( (LA317_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 264;}
                        else if ( (LA317_10==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 265;}
                        else if ( (LA317_10==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 266;}
                        else if ( (LA317_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 267;}
                        else if ( (LA317_10==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 268;}
                        else if ( (LA317_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 269;}
                        else if ( (LA317_10==FOR) && (synpred5_EsperEPL2Grammar())) {s = 270;}
                        else if ( (LA317_10==EOF) && (synpred5_EsperEPL2Grammar())) {s = 271;}
                        else if ( (LA317_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 272;}
                        else if ( (LA317_10==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 273;}
                        else if ( (LA317_10==THEN) && (synpred5_EsperEPL2Grammar())) {s = 274;}
                        else if ( (LA317_10==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 275;}
                        else if ( (LA317_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 276;}
                        else if ( (LA317_10==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 277;}
                        else if ( (LA317_10==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 278;}
                        else if ( (LA317_10==AS) && (synpred5_EsperEPL2Grammar())) {s = 279;}
                        else if ( (LA317_10==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 280;}
                        else if ( (LA317_10==FROM) && (synpred5_EsperEPL2Grammar())) {s = 281;}
                        else if ( (LA317_10==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 282;}
                        else if ( (LA317_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 283;}
                        else if ( (LA317_10==ALL) && (synpred5_EsperEPL2Grammar())) {s = 284;}
                        else if ( (LA317_10==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 285;}
                        else if ( (LA317_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 286;}
                        else if ( (LA317_10==ASC) && (synpred5_EsperEPL2Grammar())) {s = 287;}
                        else if ( (LA317_10==DESC) && (synpred5_EsperEPL2Grammar())) {s = 288;}
                        else if ( (LA317_10==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 289;}
                        else if ( (LA317_10==END) && (synpred5_EsperEPL2Grammar())) {s = 290;}
                        else if ( (LA317_10==COLON) && (synpred5_EsperEPL2Grammar())) {s = 291;}
                        else if ( (LA317_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 292;}
                        else if ( (LA317_10==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 293;}
                        else if ( (LA317_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 294;}
                        else if ( (LA317_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 295;}
                        else if ( (LA317_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 296;}
                        else if ( (LA317_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 297;}
                        else if ( (LA317_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 298;}
                        else if ( (LA317_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 299;}
                        else if ( (LA317_10==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 300;}
                        else if ( (LA317_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 301;}
                        else if ( (LA317_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 302;}
                        input.seek(index317_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA317_15 = input.LA(1);
                        int index317_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_15==DOT) ) {s = 303;}
                        else if ( (LA317_15==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 304;}
                        else if ( (LA317_15==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 305;}
                        else if ( (LA317_15==LPAREN) && (synpred5_EsperEPL2Grammar())) {s = 306;}
                        else if ( (LA317_15==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 307;}
                        else if ( (LA317_15==STAR) && (synpred5_EsperEPL2Grammar())) {s = 308;}
                        else if ( (LA317_15==DIV) && (synpred5_EsperEPL2Grammar())) {s = 309;}
                        else if ( (LA317_15==MOD) && (synpred5_EsperEPL2Grammar())) {s = 310;}
                        else if ( (LA317_15==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 311;}
                        else if ( (LA317_15==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 312;}
                        else if ( (LA317_15==LOR) && (synpred5_EsperEPL2Grammar())) {s = 313;}
                        else if ( (LA317_15==LT) && (synpred5_EsperEPL2Grammar())) {s = 314;}
                        else if ( (LA317_15==GT) && (synpred5_EsperEPL2Grammar())) {s = 315;}
                        else if ( (LA317_15==LE) && (synpred5_EsperEPL2Grammar())) {s = 316;}
                        else if ( (LA317_15==GE) && (synpred5_EsperEPL2Grammar())) {s = 317;}
                        else if ( (LA317_15==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 318;}
                        else if ( (LA317_15==IS) && (synpred5_EsperEPL2Grammar())) {s = 319;}
                        else if ( (LA317_15==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 320;}
                        else if ( (LA317_15==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 321;}
                        else if ( (LA317_15==BAND) && (synpred5_EsperEPL2Grammar())) {s = 322;}
                        else if ( (LA317_15==BOR) && (synpred5_EsperEPL2Grammar())) {s = 323;}
                        else if ( (LA317_15==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 324;}
                        else if ( (LA317_15==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 325;}
                        else if ( (LA317_15==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 326;}
                        else if ( (LA317_15==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 327;}
                        else if ( (LA317_15==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 328;}
                        else if ( (LA317_15==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 329;}
                        else if ( (LA317_15==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 330;}
                        else if ( (LA317_15==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 331;}
                        else if ( (LA317_15==FOR) && (synpred5_EsperEPL2Grammar())) {s = 332;}
                        else if ( (LA317_15==EOF) && (synpred5_EsperEPL2Grammar())) {s = 333;}
                        else if ( (LA317_15==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 334;}
                        else if ( (LA317_15==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 335;}
                        else if ( (LA317_15==THEN) && (synpred5_EsperEPL2Grammar())) {s = 336;}
                        else if ( (LA317_15==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 337;}
                        else if ( (LA317_15==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 338;}
                        else if ( (LA317_15==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 339;}
                        else if ( (LA317_15==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 340;}
                        else if ( (LA317_15==AS) && (synpred5_EsperEPL2Grammar())) {s = 341;}
                        else if ( (LA317_15==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 342;}
                        else if ( (LA317_15==FROM) && (synpred5_EsperEPL2Grammar())) {s = 343;}
                        else if ( (LA317_15==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 344;}
                        else if ( (LA317_15==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 345;}
                        else if ( (LA317_15==ALL) && (synpred5_EsperEPL2Grammar())) {s = 346;}
                        else if ( (LA317_15==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 347;}
                        else if ( (LA317_15==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 348;}
                        else if ( (LA317_15==ASC) && (synpred5_EsperEPL2Grammar())) {s = 349;}
                        else if ( (LA317_15==DESC) && (synpred5_EsperEPL2Grammar())) {s = 350;}
                        else if ( (LA317_15==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 351;}
                        else if ( (LA317_15==END) && (synpred5_EsperEPL2Grammar())) {s = 352;}
                        else if ( (LA317_15==COLON) && (synpred5_EsperEPL2Grammar())) {s = 353;}
                        else if ( (LA317_15==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 354;}
                        else if ( (LA317_15==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 355;}
                        else if ( (LA317_15==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 356;}
                        else if ( (LA317_15==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 357;}
                        else if ( (LA317_15==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 358;}
                        else if ( (LA317_15==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 359;}
                        else if ( (LA317_15==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 360;}
                        else if ( (LA317_15==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 361;}
                        else if ( (LA317_15==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 362;}
                        else if ( (LA317_15==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 363;}
                        else if ( (LA317_15==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 364;}
                        input.seek(index317_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA317_55 = input.LA(1);
                        int index317_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_55==IDENT) ) {s = 365;}
                        else if ( (LA317_55==EVENTS) ) {s = 366;}
                        else if ( (LA317_55==TICKED_STRING_LITERAL) ) {s = 367;}
                        else if ( (LA317_55==AT) && (synpred5_EsperEPL2Grammar())) {s = 368;}
                        else if ( (LA317_55==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 369;}
                        else if ( (LA317_55==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 370;}
                        else if ( (LA317_55==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 371;}
                        else if ( (LA317_55==SUM) && (synpred5_EsperEPL2Grammar())) {s = 372;}
                        else if ( (LA317_55==AVG) && (synpred5_EsperEPL2Grammar())) {s = 373;}
                        else if ( (LA317_55==MAX) ) {s = 374;}
                        else if ( (LA317_55==MIN) ) {s = 375;}
                        else if ( (LA317_55==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 376;}
                        else if ( (LA317_55==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 377;}
                        else if ( (LA317_55==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 378;}
                        else if ( (LA317_55==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 379;}
                        else if ( (LA317_55==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 380;}
                        else if ( (LA317_55==LAST) && (synpred5_EsperEPL2Grammar())) {s = 381;}
                        else if ( (LA317_55==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 382;}
                        else if ( (LA317_55==MERGE) && (synpred5_EsperEPL2Grammar())) {s = 383;}
                        else if ( (LA317_55==MATCHED) && (synpred5_EsperEPL2Grammar())) {s = 384;}
                        else if ( (LA317_55==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 385;}
                        else if ( (LA317_55==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 386;}
                        else if ( (LA317_55==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 387;}
                        else if ( (LA317_55==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 388;}
                        else if ( (LA317_55==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 389;}
                        else if ( (LA317_55==SQL) && (synpred5_EsperEPL2Grammar())) {s = 390;}
                        else if ( (LA317_55==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 391;}
                        else if ( (LA317_55==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 392;}
                        else if ( (LA317_55==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {s = 393;}
                        else if ( (LA317_55==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 394;}
                        else if ( (LA317_55==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 395;}
                        else if ( (LA317_55==LW) && (synpred5_EsperEPL2Grammar())) {s = 396;}
                        else if ( (LA317_55==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 397;}
                        else if ( (LA317_55==TYPEOF) && (synpred5_EsperEPL2Grammar())) {s = 398;}
                        else if ( (LA317_55==CAST) && (synpred5_EsperEPL2Grammar())) {s = 399;}
                        else if ( (LA317_55==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 400;}
                        else if ( (LA317_55==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 401;}
                        else if ( (LA317_55==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 402;}
                        else if ( (LA317_55==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 403;}
                        else if ( (LA317_55==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 404;}
                        else if ( (LA317_55==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 405;}
                        else if ( (LA317_55==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 406;}
                        else if ( (LA317_55==FULL) && (synpred5_EsperEPL2Grammar())) {s = 407;}
                        else if ( (LA317_55==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 408;}
                        else if ( (LA317_55==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 409;}
                        else if ( (LA317_55==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 410;}
                        else if ( (LA317_55==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 411;}
                        else if ( (LA317_55==CONTEXT) && (synpred5_EsperEPL2Grammar())) {s = 412;}
                        else if ( (LA317_55==FOR) && (synpred5_EsperEPL2Grammar())) {s = 413;}
                        else if ( (LA317_55==USING) && (synpred5_EsperEPL2Grammar())) {s = 414;}
                        else if ( (LA317_55==BETWEEN||LA317_55==WHERE||LA317_55==SET||LA317_55==AFTER) ) {s = 51;}
                        input.seek(index317_55);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA317_118 = input.LA(1);
                        int index317_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_118==IDENT) ) {s = 581;}
                        else if ( (LA317_118==EVENTS) ) {s = 582;}
                        else if ( (LA317_118==TICKED_STRING_LITERAL) ) {s = 583;}
                        else if ( (LA317_118==AT) && (synpred5_EsperEPL2Grammar())) {s = 584;}
                        else if ( (LA317_118==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 585;}
                        else if ( (LA317_118==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 586;}
                        else if ( (LA317_118==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 587;}
                        else if ( (LA317_118==SUM) && (synpred5_EsperEPL2Grammar())) {s = 588;}
                        else if ( (LA317_118==AVG) && (synpred5_EsperEPL2Grammar())) {s = 589;}
                        else if ( (LA317_118==MAX) ) {s = 590;}
                        else if ( (LA317_118==MIN) ) {s = 591;}
                        else if ( (LA317_118==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 592;}
                        else if ( (LA317_118==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 593;}
                        else if ( (LA317_118==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 594;}
                        else if ( (LA317_118==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 595;}
                        else if ( (LA317_118==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 596;}
                        else if ( (LA317_118==LAST) && (synpred5_EsperEPL2Grammar())) {s = 597;}
                        else if ( (LA317_118==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 598;}
                        else if ( (LA317_118==MERGE) && (synpred5_EsperEPL2Grammar())) {s = 599;}
                        else if ( (LA317_118==MATCHED) && (synpred5_EsperEPL2Grammar())) {s = 600;}
                        else if ( (LA317_118==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 601;}
                        else if ( (LA317_118==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 602;}
                        else if ( (LA317_118==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 603;}
                        else if ( (LA317_118==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 604;}
                        else if ( (LA317_118==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 605;}
                        else if ( (LA317_118==SQL) && (synpred5_EsperEPL2Grammar())) {s = 606;}
                        else if ( (LA317_118==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 607;}
                        else if ( (LA317_118==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 608;}
                        else if ( (LA317_118==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {s = 609;}
                        else if ( (LA317_118==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 610;}
                        else if ( (LA317_118==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 611;}
                        else if ( (LA317_118==LW) && (synpred5_EsperEPL2Grammar())) {s = 612;}
                        else if ( (LA317_118==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 613;}
                        else if ( (LA317_118==TYPEOF) && (synpred5_EsperEPL2Grammar())) {s = 614;}
                        else if ( (LA317_118==CAST) && (synpred5_EsperEPL2Grammar())) {s = 615;}
                        else if ( (LA317_118==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 616;}
                        else if ( (LA317_118==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 617;}
                        else if ( (LA317_118==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 618;}
                        else if ( (LA317_118==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 619;}
                        else if ( (LA317_118==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 620;}
                        else if ( (LA317_118==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 621;}
                        else if ( (LA317_118==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 622;}
                        else if ( (LA317_118==FULL) && (synpred5_EsperEPL2Grammar())) {s = 623;}
                        else if ( (LA317_118==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 624;}
                        else if ( (LA317_118==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 625;}
                        else if ( (LA317_118==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 626;}
                        else if ( (LA317_118==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 627;}
                        else if ( (LA317_118==CONTEXT) && (synpred5_EsperEPL2Grammar())) {s = 628;}
                        else if ( (LA317_118==FOR) && (synpred5_EsperEPL2Grammar())) {s = 629;}
                        else if ( (LA317_118==USING) && (synpred5_EsperEPL2Grammar())) {s = 630;}
                        else if ( (LA317_118==BETWEEN||LA317_118==WHERE||LA317_118==SET||LA317_118==AFTER) ) {s = 51;}
                        input.seek(index317_118);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA317_303 = input.LA(1);
                        int index317_303 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_303==IDENT) ) {s = 797;}
                        else if ( (LA317_303==EVENTS) ) {s = 798;}
                        else if ( (LA317_303==TICKED_STRING_LITERAL) ) {s = 799;}
                        else if ( (LA317_303==AT) && (synpred5_EsperEPL2Grammar())) {s = 800;}
                        else if ( (LA317_303==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 801;}
                        else if ( (LA317_303==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 802;}
                        else if ( (LA317_303==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 803;}
                        else if ( (LA317_303==SUM) && (synpred5_EsperEPL2Grammar())) {s = 804;}
                        else if ( (LA317_303==AVG) && (synpred5_EsperEPL2Grammar())) {s = 805;}
                        else if ( (LA317_303==MAX) ) {s = 806;}
                        else if ( (LA317_303==MIN) ) {s = 807;}
                        else if ( (LA317_303==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 808;}
                        else if ( (LA317_303==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 809;}
                        else if ( (LA317_303==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 810;}
                        else if ( (LA317_303==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 811;}
                        else if ( (LA317_303==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 812;}
                        else if ( (LA317_303==LAST) && (synpred5_EsperEPL2Grammar())) {s = 813;}
                        else if ( (LA317_303==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 814;}
                        else if ( (LA317_303==MERGE) && (synpred5_EsperEPL2Grammar())) {s = 815;}
                        else if ( (LA317_303==MATCHED) && (synpred5_EsperEPL2Grammar())) {s = 816;}
                        else if ( (LA317_303==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 817;}
                        else if ( (LA317_303==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 818;}
                        else if ( (LA317_303==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 819;}
                        else if ( (LA317_303==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 820;}
                        else if ( (LA317_303==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 821;}
                        else if ( (LA317_303==SQL) && (synpred5_EsperEPL2Grammar())) {s = 822;}
                        else if ( (LA317_303==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 823;}
                        else if ( (LA317_303==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 824;}
                        else if ( (LA317_303==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {s = 825;}
                        else if ( (LA317_303==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 826;}
                        else if ( (LA317_303==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 827;}
                        else if ( (LA317_303==LW) && (synpred5_EsperEPL2Grammar())) {s = 828;}
                        else if ( (LA317_303==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 829;}
                        else if ( (LA317_303==TYPEOF) && (synpred5_EsperEPL2Grammar())) {s = 830;}
                        else if ( (LA317_303==CAST) && (synpred5_EsperEPL2Grammar())) {s = 831;}
                        else if ( (LA317_303==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 832;}
                        else if ( (LA317_303==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 833;}
                        else if ( (LA317_303==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 834;}
                        else if ( (LA317_303==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 835;}
                        else if ( (LA317_303==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 836;}
                        else if ( (LA317_303==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 837;}
                        else if ( (LA317_303==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 838;}
                        else if ( (LA317_303==FULL) && (synpred5_EsperEPL2Grammar())) {s = 839;}
                        else if ( (LA317_303==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 840;}
                        else if ( (LA317_303==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 841;}
                        else if ( (LA317_303==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 842;}
                        else if ( (LA317_303==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 843;}
                        else if ( (LA317_303==CONTEXT) && (synpred5_EsperEPL2Grammar())) {s = 844;}
                        else if ( (LA317_303==FOR) && (synpred5_EsperEPL2Grammar())) {s = 845;}
                        else if ( (LA317_303==USING) && (synpred5_EsperEPL2Grammar())) {s = 846;}
                        else if ( (LA317_303==BETWEEN||LA317_303==WHERE||LA317_303==SET||LA317_303==AFTER) ) {s = 51;}
                        input.seek(index317_303);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA317_365 = input.LA(1);
                        int index317_365 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_365==LPAREN) ) {s = 851;}
                        else if ( (LA317_365==DOT) ) {s = 852;}
                        else if ( (LA317_365==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 853;}
                        else if ( (LA317_365==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 854;}
                        else if ( (LA317_365==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 855;}
                        else if ( (LA317_365==STAR) && (synpred5_EsperEPL2Grammar())) {s = 856;}
                        else if ( (LA317_365==DIV) && (synpred5_EsperEPL2Grammar())) {s = 857;}
                        else if ( (LA317_365==MOD) && (synpred5_EsperEPL2Grammar())) {s = 858;}
                        else if ( (LA317_365==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 859;}
                        else if ( (LA317_365==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 860;}
                        else if ( (LA317_365==LOR) && (synpred5_EsperEPL2Grammar())) {s = 861;}
                        else if ( (LA317_365==LT) && (synpred5_EsperEPL2Grammar())) {s = 862;}
                        else if ( (LA317_365==GT) && (synpred5_EsperEPL2Grammar())) {s = 863;}
                        else if ( (LA317_365==LE) && (synpred5_EsperEPL2Grammar())) {s = 864;}
                        else if ( (LA317_365==GE) && (synpred5_EsperEPL2Grammar())) {s = 865;}
                        else if ( (LA317_365==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 866;}
                        else if ( (LA317_365==IS) && (synpred5_EsperEPL2Grammar())) {s = 867;}
                        else if ( (LA317_365==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 868;}
                        else if ( (LA317_365==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 869;}
                        else if ( (LA317_365==BAND) && (synpred5_EsperEPL2Grammar())) {s = 870;}
                        else if ( (LA317_365==BOR) && (synpred5_EsperEPL2Grammar())) {s = 871;}
                        else if ( (LA317_365==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 872;}
                        else if ( (LA317_365==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 873;}
                        else if ( (LA317_365==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 874;}
                        else if ( (LA317_365==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 875;}
                        else if ( (LA317_365==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 876;}
                        else if ( (LA317_365==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 877;}
                        else if ( (LA317_365==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 878;}
                        else if ( (LA317_365==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 879;}
                        else if ( (LA317_365==FOR) && (synpred5_EsperEPL2Grammar())) {s = 880;}
                        else if ( (LA317_365==EOF) && (synpred5_EsperEPL2Grammar())) {s = 881;}
                        else if ( (LA317_365==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 882;}
                        else if ( (LA317_365==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 883;}
                        else if ( (LA317_365==THEN) && (synpred5_EsperEPL2Grammar())) {s = 884;}
                        else if ( (LA317_365==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 885;}
                        else if ( (LA317_365==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 886;}
                        else if ( (LA317_365==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 887;}
                        else if ( (LA317_365==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 888;}
                        else if ( (LA317_365==AS) && (synpred5_EsperEPL2Grammar())) {s = 889;}
                        else if ( (LA317_365==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 890;}
                        else if ( (LA317_365==FROM) && (synpred5_EsperEPL2Grammar())) {s = 891;}
                        else if ( (LA317_365==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 892;}
                        else if ( (LA317_365==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 893;}
                        else if ( (LA317_365==ALL) && (synpred5_EsperEPL2Grammar())) {s = 894;}
                        else if ( (LA317_365==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 895;}
                        else if ( (LA317_365==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 896;}
                        else if ( (LA317_365==ASC) && (synpred5_EsperEPL2Grammar())) {s = 897;}
                        else if ( (LA317_365==DESC) && (synpred5_EsperEPL2Grammar())) {s = 898;}
                        else if ( (LA317_365==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 899;}
                        else if ( (LA317_365==END) && (synpred5_EsperEPL2Grammar())) {s = 900;}
                        else if ( (LA317_365==COLON) && (synpred5_EsperEPL2Grammar())) {s = 901;}
                        else if ( (LA317_365==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 902;}
                        else if ( (LA317_365==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 903;}
                        else if ( (LA317_365==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 904;}
                        else if ( (LA317_365==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 905;}
                        else if ( (LA317_365==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 906;}
                        else if ( (LA317_365==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 907;}
                        else if ( (LA317_365==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 908;}
                        else if ( (LA317_365==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 909;}
                        else if ( (LA317_365==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 910;}
                        else if ( (LA317_365==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 911;}
                        else if ( (LA317_365==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 912;}
                        input.seek(index317_365);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA317_366 = input.LA(1);
                        int index317_366 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_366==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 913;}
                        else if ( (LA317_366==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 914;}
                        else if ( (LA317_366==LPAREN) && (synpred5_EsperEPL2Grammar())) {s = 915;}
                        else if ( (LA317_366==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 916;}
                        else if ( (LA317_366==STAR) && (synpred5_EsperEPL2Grammar())) {s = 917;}
                        else if ( (LA317_366==DIV) && (synpred5_EsperEPL2Grammar())) {s = 918;}
                        else if ( (LA317_366==MOD) && (synpred5_EsperEPL2Grammar())) {s = 919;}
                        else if ( (LA317_366==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 920;}
                        else if ( (LA317_366==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 921;}
                        else if ( (LA317_366==LOR) && (synpred5_EsperEPL2Grammar())) {s = 922;}
                        else if ( (LA317_366==LT) && (synpred5_EsperEPL2Grammar())) {s = 923;}
                        else if ( (LA317_366==GT) && (synpred5_EsperEPL2Grammar())) {s = 924;}
                        else if ( (LA317_366==LE) && (synpred5_EsperEPL2Grammar())) {s = 925;}
                        else if ( (LA317_366==GE) && (synpred5_EsperEPL2Grammar())) {s = 926;}
                        else if ( (LA317_366==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 927;}
                        else if ( (LA317_366==IS) && (synpred5_EsperEPL2Grammar())) {s = 928;}
                        else if ( (LA317_366==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 929;}
                        else if ( (LA317_366==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 930;}
                        else if ( (LA317_366==BAND) && (synpred5_EsperEPL2Grammar())) {s = 931;}
                        else if ( (LA317_366==BOR) && (synpred5_EsperEPL2Grammar())) {s = 932;}
                        else if ( (LA317_366==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 933;}
                        else if ( (LA317_366==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 934;}
                        else if ( (LA317_366==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 935;}
                        else if ( (LA317_366==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 936;}
                        else if ( (LA317_366==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 937;}
                        else if ( (LA317_366==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 938;}
                        else if ( (LA317_366==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 939;}
                        else if ( (LA317_366==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 940;}
                        else if ( (LA317_366==FOR) && (synpred5_EsperEPL2Grammar())) {s = 941;}
                        else if ( (LA317_366==EOF) && (synpred5_EsperEPL2Grammar())) {s = 942;}
                        else if ( (LA317_366==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 943;}
                        else if ( (LA317_366==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 944;}
                        else if ( (LA317_366==THEN) && (synpred5_EsperEPL2Grammar())) {s = 945;}
                        else if ( (LA317_366==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 946;}
                        else if ( (LA317_366==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 947;}
                        else if ( (LA317_366==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 948;}
                        else if ( (LA317_366==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 949;}
                        else if ( (LA317_366==AS) && (synpred5_EsperEPL2Grammar())) {s = 950;}
                        else if ( (LA317_366==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 951;}
                        else if ( (LA317_366==FROM) && (synpred5_EsperEPL2Grammar())) {s = 952;}
                        else if ( (LA317_366==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 953;}
                        else if ( (LA317_366==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 954;}
                        else if ( (LA317_366==ALL) && (synpred5_EsperEPL2Grammar())) {s = 955;}
                        else if ( (LA317_366==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 956;}
                        else if ( (LA317_366==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 957;}
                        else if ( (LA317_366==ASC) && (synpred5_EsperEPL2Grammar())) {s = 958;}
                        else if ( (LA317_366==DESC) && (synpred5_EsperEPL2Grammar())) {s = 959;}
                        else if ( (LA317_366==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 960;}
                        else if ( (LA317_366==END) && (synpred5_EsperEPL2Grammar())) {s = 961;}
                        else if ( (LA317_366==COLON) && (synpred5_EsperEPL2Grammar())) {s = 962;}
                        else if ( (LA317_366==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 963;}
                        else if ( (LA317_366==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 964;}
                        else if ( (LA317_366==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 965;}
                        else if ( (LA317_366==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 966;}
                        else if ( (LA317_366==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 967;}
                        else if ( (LA317_366==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 968;}
                        else if ( (LA317_366==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 969;}
                        else if ( (LA317_366==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 970;}
                        else if ( (LA317_366==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 971;}
                        else if ( (LA317_366==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 972;}
                        else if ( (LA317_366==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 973;}
                        else if ( (LA317_366==DOT) ) {s = 974;}
                        input.seek(index317_366);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA317_367 = input.LA(1);
                        int index317_367 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_367==LPAREN) ) {s = 975;}
                        else if ( (LA317_367==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 976;}
                        else if ( (LA317_367==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 977;}
                        else if ( (LA317_367==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 978;}
                        else if ( (LA317_367==STAR) && (synpred5_EsperEPL2Grammar())) {s = 979;}
                        else if ( (LA317_367==DIV) && (synpred5_EsperEPL2Grammar())) {s = 980;}
                        else if ( (LA317_367==MOD) && (synpred5_EsperEPL2Grammar())) {s = 981;}
                        else if ( (LA317_367==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 982;}
                        else if ( (LA317_367==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 983;}
                        else if ( (LA317_367==LOR) && (synpred5_EsperEPL2Grammar())) {s = 984;}
                        else if ( (LA317_367==LT) && (synpred5_EsperEPL2Grammar())) {s = 985;}
                        else if ( (LA317_367==GT) && (synpred5_EsperEPL2Grammar())) {s = 986;}
                        else if ( (LA317_367==LE) && (synpred5_EsperEPL2Grammar())) {s = 987;}
                        else if ( (LA317_367==GE) && (synpred5_EsperEPL2Grammar())) {s = 988;}
                        else if ( (LA317_367==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 989;}
                        else if ( (LA317_367==IS) && (synpred5_EsperEPL2Grammar())) {s = 990;}
                        else if ( (LA317_367==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 991;}
                        else if ( (LA317_367==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 992;}
                        else if ( (LA317_367==BAND) && (synpred5_EsperEPL2Grammar())) {s = 993;}
                        else if ( (LA317_367==BOR) && (synpred5_EsperEPL2Grammar())) {s = 994;}
                        else if ( (LA317_367==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 995;}
                        else if ( (LA317_367==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 996;}
                        else if ( (LA317_367==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 997;}
                        else if ( (LA317_367==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 998;}
                        else if ( (LA317_367==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 999;}
                        else if ( (LA317_367==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1000;}
                        else if ( (LA317_367==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1001;}
                        else if ( (LA317_367==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1002;}
                        else if ( (LA317_367==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1003;}
                        else if ( (LA317_367==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1004;}
                        else if ( (LA317_367==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1005;}
                        else if ( (LA317_367==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1006;}
                        else if ( (LA317_367==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1007;}
                        else if ( (LA317_367==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1008;}
                        else if ( (LA317_367==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1009;}
                        else if ( (LA317_367==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1010;}
                        else if ( (LA317_367==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1011;}
                        else if ( (LA317_367==AS) && (synpred5_EsperEPL2Grammar())) {s = 1012;}
                        else if ( (LA317_367==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1013;}
                        else if ( (LA317_367==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1014;}
                        else if ( (LA317_367==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 1015;}
                        else if ( (LA317_367==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1016;}
                        else if ( (LA317_367==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1017;}
                        else if ( (LA317_367==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1018;}
                        else if ( (LA317_367==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1019;}
                        else if ( (LA317_367==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1020;}
                        else if ( (LA317_367==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1021;}
                        else if ( (LA317_367==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1022;}
                        else if ( (LA317_367==END) && (synpred5_EsperEPL2Grammar())) {s = 1023;}
                        else if ( (LA317_367==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1024;}
                        else if ( (LA317_367==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1025;}
                        else if ( (LA317_367==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1026;}
                        else if ( (LA317_367==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1027;}
                        else if ( (LA317_367==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1028;}
                        else if ( (LA317_367==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1029;}
                        else if ( (LA317_367==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1030;}
                        else if ( (LA317_367==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1031;}
                        else if ( (LA317_367==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1032;}
                        else if ( (LA317_367==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1033;}
                        else if ( (LA317_367==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1034;}
                        else if ( (LA317_367==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1035;}
                        else if ( (LA317_367==DOT) ) {s = 1036;}
                        input.seek(index317_367);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA317_374 = input.LA(1);
                        int index317_374 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_374==LPAREN) ) {s = 1037;}
                        else if ( (LA317_374==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1038;}
                        else if ( (LA317_374==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1039;}
                        else if ( (LA317_374==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1040;}
                        else if ( (LA317_374==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1041;}
                        else if ( (LA317_374==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1042;}
                        else if ( (LA317_374==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1043;}
                        else if ( (LA317_374==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1044;}
                        else if ( (LA317_374==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1045;}
                        else if ( (LA317_374==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1046;}
                        else if ( (LA317_374==LT) && (synpred5_EsperEPL2Grammar())) {s = 1047;}
                        else if ( (LA317_374==GT) && (synpred5_EsperEPL2Grammar())) {s = 1048;}
                        else if ( (LA317_374==LE) && (synpred5_EsperEPL2Grammar())) {s = 1049;}
                        else if ( (LA317_374==GE) && (synpred5_EsperEPL2Grammar())) {s = 1050;}
                        else if ( (LA317_374==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1051;}
                        else if ( (LA317_374==IS) && (synpred5_EsperEPL2Grammar())) {s = 1052;}
                        else if ( (LA317_374==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1053;}
                        else if ( (LA317_374==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1054;}
                        else if ( (LA317_374==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1055;}
                        else if ( (LA317_374==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1056;}
                        else if ( (LA317_374==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1057;}
                        else if ( (LA317_374==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1058;}
                        else if ( (LA317_374==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1059;}
                        else if ( (LA317_374==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1060;}
                        else if ( (LA317_374==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1061;}
                        else if ( (LA317_374==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1062;}
                        else if ( (LA317_374==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1063;}
                        else if ( (LA317_374==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1064;}
                        else if ( (LA317_374==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1065;}
                        else if ( (LA317_374==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1066;}
                        else if ( (LA317_374==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1067;}
                        else if ( (LA317_374==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1068;}
                        else if ( (LA317_374==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1069;}
                        else if ( (LA317_374==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1070;}
                        else if ( (LA317_374==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1071;}
                        else if ( (LA317_374==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1072;}
                        else if ( (LA317_374==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1073;}
                        else if ( (LA317_374==AS) && (synpred5_EsperEPL2Grammar())) {s = 1074;}
                        else if ( (LA317_374==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1075;}
                        else if ( (LA317_374==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1076;}
                        else if ( (LA317_374==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 1077;}
                        else if ( (LA317_374==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1078;}
                        else if ( (LA317_374==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1079;}
                        else if ( (LA317_374==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1080;}
                        else if ( (LA317_374==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1081;}
                        else if ( (LA317_374==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1082;}
                        else if ( (LA317_374==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1083;}
                        else if ( (LA317_374==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1084;}
                        else if ( (LA317_374==END) && (synpred5_EsperEPL2Grammar())) {s = 1085;}
                        else if ( (LA317_374==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1086;}
                        else if ( (LA317_374==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1087;}
                        else if ( (LA317_374==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1088;}
                        else if ( (LA317_374==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1089;}
                        else if ( (LA317_374==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1090;}
                        else if ( (LA317_374==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1091;}
                        else if ( (LA317_374==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1092;}
                        else if ( (LA317_374==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1093;}
                        else if ( (LA317_374==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1094;}
                        else if ( (LA317_374==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1095;}
                        else if ( (LA317_374==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1096;}
                        else if ( (LA317_374==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1097;}
                        else if ( (LA317_374==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1098;}
                        input.seek(index317_374);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA317_375 = input.LA(1);
                        int index317_375 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_375==LPAREN) ) {s = 1099;}
                        else if ( (LA317_375==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1100;}
                        else if ( (LA317_375==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1101;}
                        else if ( (LA317_375==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1102;}
                        else if ( (LA317_375==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1103;}
                        else if ( (LA317_375==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1104;}
                        else if ( (LA317_375==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1105;}
                        else if ( (LA317_375==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1106;}
                        else if ( (LA317_375==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1107;}
                        else if ( (LA317_375==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1108;}
                        else if ( (LA317_375==LT) && (synpred5_EsperEPL2Grammar())) {s = 1109;}
                        else if ( (LA317_375==GT) && (synpred5_EsperEPL2Grammar())) {s = 1110;}
                        else if ( (LA317_375==LE) && (synpred5_EsperEPL2Grammar())) {s = 1111;}
                        else if ( (LA317_375==GE) && (synpred5_EsperEPL2Grammar())) {s = 1112;}
                        else if ( (LA317_375==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1113;}
                        else if ( (LA317_375==IS) && (synpred5_EsperEPL2Grammar())) {s = 1114;}
                        else if ( (LA317_375==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1115;}
                        else if ( (LA317_375==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1116;}
                        else if ( (LA317_375==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1117;}
                        else if ( (LA317_375==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1118;}
                        else if ( (LA317_375==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1119;}
                        else if ( (LA317_375==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1120;}
                        else if ( (LA317_375==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1121;}
                        else if ( (LA317_375==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1122;}
                        else if ( (LA317_375==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1123;}
                        else if ( (LA317_375==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1124;}
                        else if ( (LA317_375==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1125;}
                        else if ( (LA317_375==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1126;}
                        else if ( (LA317_375==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1127;}
                        else if ( (LA317_375==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1128;}
                        else if ( (LA317_375==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1129;}
                        else if ( (LA317_375==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1130;}
                        else if ( (LA317_375==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1131;}
                        else if ( (LA317_375==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1132;}
                        else if ( (LA317_375==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1133;}
                        else if ( (LA317_375==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1134;}
                        else if ( (LA317_375==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1135;}
                        else if ( (LA317_375==AS) && (synpred5_EsperEPL2Grammar())) {s = 1136;}
                        else if ( (LA317_375==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1137;}
                        else if ( (LA317_375==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1138;}
                        else if ( (LA317_375==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 1139;}
                        else if ( (LA317_375==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1140;}
                        else if ( (LA317_375==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1141;}
                        else if ( (LA317_375==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1142;}
                        else if ( (LA317_375==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1143;}
                        else if ( (LA317_375==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1144;}
                        else if ( (LA317_375==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1145;}
                        else if ( (LA317_375==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1146;}
                        else if ( (LA317_375==END) && (synpred5_EsperEPL2Grammar())) {s = 1147;}
                        else if ( (LA317_375==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1148;}
                        else if ( (LA317_375==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1149;}
                        else if ( (LA317_375==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1150;}
                        else if ( (LA317_375==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1151;}
                        else if ( (LA317_375==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1152;}
                        else if ( (LA317_375==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1153;}
                        else if ( (LA317_375==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1154;}
                        else if ( (LA317_375==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1155;}
                        else if ( (LA317_375==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1156;}
                        else if ( (LA317_375==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1157;}
                        else if ( (LA317_375==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1158;}
                        else if ( (LA317_375==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1159;}
                        else if ( (LA317_375==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1160;}
                        input.seek(index317_375);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA317_581 = input.LA(1);
                        int index317_581 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_581==LPAREN) ) {s = 1285;}
                        else if ( (LA317_581==DOT) ) {s = 1286;}
                        else if ( (LA317_581==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA317_581==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA317_581==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA317_581==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA317_581==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA317_581==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA317_581==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA317_581==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA317_581==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA317_581==LT) && (synpred5_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA317_581==GT) && (synpred5_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA317_581==LE) && (synpred5_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA317_581==GE) && (synpred5_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA317_581==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA317_581==IS) && (synpred5_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA317_581==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA317_581==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA317_581==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA317_581==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA317_581==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA317_581==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA317_581==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA317_581==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA317_581==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA317_581==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA317_581==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA317_581==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA317_581==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA317_581==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA317_581==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA317_581==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA317_581==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA317_581==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA317_581==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA317_581==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA317_581==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA317_581==AS) && (synpred5_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA317_581==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA317_581==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA317_581==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA317_581==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA317_581==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA317_581==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA317_581==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA317_581==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA317_581==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA317_581==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA317_581==END) && (synpred5_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA317_581==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA317_581==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA317_581==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA317_581==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA317_581==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA317_581==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA317_581==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA317_581==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA317_581==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA317_581==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA317_581==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA317_581==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1346;}
                        input.seek(index317_581);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA317_582 = input.LA(1);
                        int index317_582 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_582==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA317_582==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA317_582==LPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA317_582==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA317_582==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA317_582==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA317_582==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA317_582==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA317_582==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA317_582==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA317_582==LT) && (synpred5_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA317_582==GT) && (synpred5_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA317_582==LE) && (synpred5_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA317_582==GE) && (synpred5_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA317_582==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA317_582==IS) && (synpred5_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA317_582==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA317_582==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA317_582==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA317_582==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA317_582==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA317_582==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA317_582==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA317_582==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA317_582==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA317_582==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA317_582==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA317_582==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA317_582==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA317_582==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA317_582==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA317_582==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA317_582==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA317_582==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA317_582==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA317_582==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA317_582==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA317_582==AS) && (synpred5_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA317_582==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA317_582==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA317_582==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA317_582==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA317_582==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA317_582==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA317_582==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA317_582==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA317_582==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA317_582==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA317_582==END) && (synpred5_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA317_582==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA317_582==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA317_582==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA317_582==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA317_582==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA317_582==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA317_582==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA317_582==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA317_582==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA317_582==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA317_582==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA317_582==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA317_582==DOT) ) {s = 1408;}
                        input.seek(index317_582);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA317_583 = input.LA(1);
                        int index317_583 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_583==LPAREN) ) {s = 1409;}
                        else if ( (LA317_583==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA317_583==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA317_583==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA317_583==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA317_583==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA317_583==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA317_583==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA317_583==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA317_583==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA317_583==LT) && (synpred5_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA317_583==GT) && (synpred5_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA317_583==LE) && (synpred5_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA317_583==GE) && (synpred5_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA317_583==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA317_583==IS) && (synpred5_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA317_583==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA317_583==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA317_583==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA317_583==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA317_583==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA317_583==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA317_583==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA317_583==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA317_583==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA317_583==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA317_583==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA317_583==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA317_583==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA317_583==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA317_583==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA317_583==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA317_583==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA317_583==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA317_583==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA317_583==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA317_583==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA317_583==AS) && (synpred5_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA317_583==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA317_583==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA317_583==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA317_583==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA317_583==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA317_583==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA317_583==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA317_583==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA317_583==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA317_583==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA317_583==END) && (synpred5_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA317_583==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA317_583==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA317_583==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA317_583==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA317_583==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA317_583==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA317_583==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA317_583==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA317_583==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA317_583==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA317_583==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA317_583==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA317_583==DOT) ) {s = 1470;}
                        input.seek(index317_583);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA317_590 = input.LA(1);
                        int index317_590 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_590==LPAREN) ) {s = 1471;}
                        else if ( (LA317_590==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA317_590==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA317_590==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA317_590==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA317_590==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA317_590==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA317_590==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA317_590==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA317_590==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA317_590==LT) && (synpred5_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA317_590==GT) && (synpred5_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA317_590==LE) && (synpred5_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA317_590==GE) && (synpred5_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA317_590==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA317_590==IS) && (synpred5_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA317_590==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA317_590==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA317_590==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA317_590==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA317_590==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA317_590==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA317_590==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA317_590==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA317_590==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA317_590==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA317_590==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA317_590==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA317_590==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA317_590==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA317_590==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA317_590==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA317_590==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA317_590==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA317_590==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA317_590==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA317_590==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA317_590==AS) && (synpred5_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA317_590==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA317_590==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA317_590==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA317_590==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA317_590==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA317_590==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA317_590==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA317_590==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA317_590==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA317_590==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA317_590==END) && (synpred5_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA317_590==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA317_590==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA317_590==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA317_590==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA317_590==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA317_590==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA317_590==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA317_590==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA317_590==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA317_590==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA317_590==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA317_590==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA317_590==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1532;}
                        input.seek(index317_590);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA317_591 = input.LA(1);
                        int index317_591 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_591==LPAREN) ) {s = 1533;}
                        else if ( (LA317_591==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA317_591==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA317_591==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA317_591==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA317_591==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA317_591==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA317_591==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA317_591==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA317_591==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA317_591==LT) && (synpred5_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA317_591==GT) && (synpred5_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA317_591==LE) && (synpred5_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA317_591==GE) && (synpred5_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA317_591==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA317_591==IS) && (synpred5_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA317_591==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA317_591==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA317_591==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA317_591==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA317_591==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA317_591==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA317_591==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA317_591==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA317_591==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA317_591==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA317_591==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA317_591==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA317_591==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA317_591==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA317_591==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA317_591==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA317_591==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA317_591==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA317_591==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA317_591==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA317_591==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA317_591==AS) && (synpred5_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA317_591==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA317_591==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA317_591==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA317_591==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA317_591==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA317_591==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA317_591==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA317_591==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA317_591==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA317_591==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA317_591==END) && (synpred5_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA317_591==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA317_591==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA317_591==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA317_591==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA317_591==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA317_591==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA317_591==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA317_591==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA317_591==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA317_591==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA317_591==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA317_591==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA317_591==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1594;}
                        input.seek(index317_591);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA317_797 = input.LA(1);
                        int index317_797 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_797==LPAREN) ) {s = 1719;}
                        else if ( (LA317_797==DOT) ) {s = 1720;}
                        else if ( (LA317_797==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA317_797==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA317_797==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA317_797==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA317_797==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA317_797==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA317_797==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA317_797==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA317_797==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA317_797==LT) && (synpred5_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA317_797==GT) && (synpred5_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA317_797==LE) && (synpred5_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA317_797==GE) && (synpred5_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA317_797==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA317_797==IS) && (synpred5_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA317_797==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA317_797==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA317_797==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA317_797==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA317_797==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA317_797==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA317_797==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA317_797==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA317_797==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA317_797==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA317_797==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA317_797==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA317_797==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA317_797==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA317_797==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA317_797==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA317_797==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA317_797==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA317_797==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA317_797==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA317_797==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA317_797==AS) && (synpred5_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA317_797==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA317_797==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA317_797==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA317_797==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA317_797==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA317_797==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA317_797==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA317_797==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA317_797==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA317_797==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA317_797==END) && (synpred5_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA317_797==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA317_797==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA317_797==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA317_797==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA317_797==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA317_797==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA317_797==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA317_797==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA317_797==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA317_797==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA317_797==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA317_797==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1780;}
                        input.seek(index317_797);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA317_798 = input.LA(1);
                        int index317_798 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_798==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA317_798==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA317_798==LPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA317_798==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA317_798==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA317_798==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA317_798==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA317_798==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA317_798==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA317_798==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA317_798==LT) && (synpred5_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA317_798==GT) && (synpred5_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA317_798==LE) && (synpred5_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA317_798==GE) && (synpred5_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA317_798==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA317_798==IS) && (synpred5_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA317_798==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA317_798==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA317_798==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA317_798==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA317_798==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA317_798==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA317_798==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA317_798==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA317_798==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA317_798==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA317_798==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA317_798==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA317_798==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA317_798==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA317_798==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA317_798==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA317_798==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA317_798==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA317_798==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA317_798==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA317_798==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA317_798==AS) && (synpred5_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA317_798==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA317_798==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA317_798==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA317_798==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA317_798==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA317_798==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA317_798==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA317_798==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA317_798==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA317_798==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA317_798==END) && (synpred5_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA317_798==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA317_798==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA317_798==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA317_798==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA317_798==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA317_798==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA317_798==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA317_798==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA317_798==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA317_798==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA317_798==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA317_798==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA317_798==DOT) ) {s = 1842;}
                        input.seek(index317_798);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA317_799 = input.LA(1);
                        int index317_799 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_799==LPAREN) ) {s = 1843;}
                        else if ( (LA317_799==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA317_799==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA317_799==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA317_799==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA317_799==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA317_799==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA317_799==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA317_799==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA317_799==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA317_799==LT) && (synpred5_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA317_799==GT) && (synpred5_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA317_799==LE) && (synpred5_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA317_799==GE) && (synpred5_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA317_799==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA317_799==IS) && (synpred5_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA317_799==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA317_799==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA317_799==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA317_799==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA317_799==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA317_799==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA317_799==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA317_799==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA317_799==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA317_799==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA317_799==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA317_799==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA317_799==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA317_799==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA317_799==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA317_799==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA317_799==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA317_799==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA317_799==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA317_799==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA317_799==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA317_799==AS) && (synpred5_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA317_799==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA317_799==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA317_799==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA317_799==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA317_799==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA317_799==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA317_799==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA317_799==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA317_799==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA317_799==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA317_799==END) && (synpred5_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA317_799==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA317_799==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA317_799==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA317_799==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA317_799==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA317_799==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA317_799==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA317_799==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA317_799==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA317_799==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA317_799==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA317_799==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA317_799==DOT) ) {s = 1904;}
                        input.seek(index317_799);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA317_806 = input.LA(1);
                        int index317_806 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_806==LPAREN) ) {s = 1905;}
                        else if ( (LA317_806==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA317_806==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA317_806==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA317_806==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA317_806==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA317_806==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA317_806==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA317_806==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA317_806==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA317_806==LT) && (synpred5_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA317_806==GT) && (synpred5_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA317_806==LE) && (synpred5_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA317_806==GE) && (synpred5_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA317_806==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA317_806==IS) && (synpred5_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA317_806==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA317_806==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA317_806==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA317_806==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA317_806==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA317_806==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA317_806==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA317_806==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA317_806==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA317_806==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA317_806==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA317_806==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA317_806==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA317_806==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA317_806==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA317_806==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA317_806==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA317_806==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA317_806==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA317_806==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA317_806==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA317_806==AS) && (synpred5_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA317_806==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA317_806==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA317_806==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA317_806==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA317_806==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA317_806==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA317_806==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA317_806==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA317_806==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA317_806==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA317_806==END) && (synpred5_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA317_806==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA317_806==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA317_806==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA317_806==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA317_806==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA317_806==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA317_806==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA317_806==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA317_806==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA317_806==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA317_806==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA317_806==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA317_806==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1966;}
                        input.seek(index317_806);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA317_807 = input.LA(1);
                        int index317_807 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_807==LPAREN) ) {s = 1967;}
                        else if ( (LA317_807==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA317_807==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA317_807==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA317_807==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA317_807==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA317_807==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA317_807==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA317_807==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA317_807==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA317_807==LT) && (synpred5_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA317_807==GT) && (synpred5_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA317_807==LE) && (synpred5_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA317_807==GE) && (synpred5_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA317_807==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA317_807==IS) && (synpred5_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA317_807==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA317_807==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA317_807==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA317_807==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA317_807==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA317_807==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA317_807==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA317_807==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA317_807==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA317_807==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA317_807==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA317_807==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA317_807==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA317_807==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA317_807==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA317_807==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA317_807==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA317_807==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA317_807==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA317_807==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA317_807==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA317_807==AS) && (synpred5_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA317_807==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA317_807==FROM) && (synpred5_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA317_807==MATCH_RECOGNIZE) && (synpred5_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA317_807==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA317_807==ALL) && (synpred5_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA317_807==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA317_807==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA317_807==ASC) && (synpred5_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA317_807==DESC) && (synpred5_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA317_807==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA317_807==END) && (synpred5_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA317_807==COLON) && (synpred5_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA317_807==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA317_807==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA317_807==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA317_807==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA317_807==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA317_807==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA317_807==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA317_807==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA317_807==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA317_807==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA317_807==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA317_807==DOT) && (synpred5_EsperEPL2Grammar())) {s = 2028;}
                        input.seek(index317_807);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA317_851 = input.LA(1);
                        int index317_851 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_851);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA317_852 = input.LA(1);
                        int index317_852 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_852);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA317_974 = input.LA(1);
                        int index317_974 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_974);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA317_975 = input.LA(1);
                        int index317_975 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_975);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA317_1036 = input.LA(1);
                        int index317_1036 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1036);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA317_1037 = input.LA(1);
                        int index317_1037 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1037);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA317_1099 = input.LA(1);
                        int index317_1099 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1099);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA317_1161 = input.LA(1);
                        int index317_1161 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1161);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA317_1192 = input.LA(1);
                        int index317_1192 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1192);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA317_1223 = input.LA(1);
                        int index317_1223 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1223);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA317_1254 = input.LA(1);
                        int index317_1254 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1254);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA317_1285 = input.LA(1);
                        int index317_1285 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1285);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA317_1286 = input.LA(1);
                        int index317_1286 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1286);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA317_1408 = input.LA(1);
                        int index317_1408 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1408);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA317_1409 = input.LA(1);
                        int index317_1409 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1409);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA317_1470 = input.LA(1);
                        int index317_1470 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1470);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA317_1471 = input.LA(1);
                        int index317_1471 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1471);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA317_1533 = input.LA(1);
                        int index317_1533 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1533);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA317_1595 = input.LA(1);
                        int index317_1595 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1595);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA317_1626 = input.LA(1);
                        int index317_1626 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1626);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA317_1657 = input.LA(1);
                        int index317_1657 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1657);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA317_1688 = input.LA(1);
                        int index317_1688 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1688);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA317_1719 = input.LA(1);
                        int index317_1719 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1719);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA317_1720 = input.LA(1);
                        int index317_1720 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1720);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA317_1842 = input.LA(1);
                        int index317_1842 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1842);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA317_1843 = input.LA(1);
                        int index317_1843 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1843);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA317_1904 = input.LA(1);
                        int index317_1904 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1904);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA317_1905 = input.LA(1);
                        int index317_1905 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1905);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA317_1967 = input.LA(1);
                        int index317_1967 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2028;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index317_1967);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 317, _s, input);
            error(nvae);
            throw nvae;
        }
    }
}
